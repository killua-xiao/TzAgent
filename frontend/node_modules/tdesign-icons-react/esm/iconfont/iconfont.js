import { _ as _defineProperty, a as _objectWithoutProperties, c as classNames } from '../_chunks/dep-96db17af.js';
import { forwardRef, useMemo, useEffect, createElement } from 'react';
import useConfig from '../util/use-config.js';
import useSizeProps from '../util/use-size-props.js';
import { loadStylesheet, loadLink } from '../util/check-url-and-load.js';
import '../util/config-context.js';
import '../util/use-common-classname.js';

var _excluded = ["name", "size", "tag", "className", "url", "loadDefaultIcons", "style"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.3.2/fonts/index.css";
var IconFont = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _props$name = props.name,
    name = _props$name === void 0 ? "" : _props$name,
    size = props.size,
    _props$tag = props.tag,
    tag = _props$tag === void 0 ? "i" : _props$tag,
    customClassName = props.className,
    url = props.url,
    _props$loadDefaultIco = props.loadDefaultIcons,
    loadDefaultIcons = _props$loadDefaultIco === void 0 ? true : _props$loadDefaultIco,
    customStyle = props.style,
    htmlProps = _objectWithoutProperties(props, _excluded);
  var _useSizeProps = useSizeProps(size),
    sizeClassName = _useSizeProps.className,
    sizeStyle = _useSizeProps.style;
  var isBuiltInIcon = props.url && /^t-icon-(\w|-)+$/.test(name);
  var className = useMemo(function () {
    var _classNames;
    return classNames((_classNames = {}, _defineProperty(_classNames, name, props.url), _defineProperty(_classNames, "".concat(classPrefix, "-icon"), !props.url || isBuiltInIcon), _defineProperty(_classNames, "".concat(classPrefix, "-icon-").concat(name), !props.url), _classNames), sizeClassName, customClassName);
  }, [classPrefix, customClassName, name, sizeClassName]);
  useEffect(function () {
    loadStylesheet();
  }, []);
  useEffect(function () {
    if (!loadDefaultIcons) {
      return;
    }
    loadLink(CDN_ICONFONT_URL, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
  }, [classPrefix, loadDefaultIcons]);
  useEffect(function () {
    var urls = Array.isArray(url) ? url : [url];
    urls.forEach(function (url2) {
      loadLink(url2, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
    });
  }, [classPrefix, url]);
  return /*#__PURE__*/createElement(tag, _objectSpread({
    ref: ref,
    style: _objectSpread(_objectSpread({}, customStyle), sizeStyle),
    className: className
  }, htmlProps));
});
IconFont.displayName = "Icon";

export { IconFont };
//# sourceMappingURL=iconfont.js.map
