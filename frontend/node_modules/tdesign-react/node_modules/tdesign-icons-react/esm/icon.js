import { _ as _defineProperty, a as _objectWithoutProperties, c as classNames } from './_chunks/dep-1f5d46b5.js';
import { createElement, forwardRef, useEffect } from 'react';
import useSizeProps from './util/use-size-props.js';
import { loadStylesheet } from './util/check-url-and-load.js';
import './util/use-common-classname.js';
import './util/use-config.js';
import './util/config-context.js';

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var _excluded = ["strokeColor", "strokeWidth", "fillColor"],
  _excluded2 = ["icon", "id", "className", "size", "style"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function render(node, id, rootProps) {
  var _strokeColor$, _fillColor$;
  var _rootProps$strokeColo = rootProps.strokeColor,
    strokeColor = _rootProps$strokeColo === void 0 ? "currentColor" : _rootProps$strokeColo,
    _rootProps$strokeWidt = rootProps.strokeWidth,
    strokeWidth = _rootProps$strokeWidt === void 0 ? 2 : _rootProps$strokeWidt,
    _rootProps$fillColor = rootProps.fillColor,
    fillColor = _rootProps$fillColor === void 0 ? "transparent" : _rootProps$fillColor,
    resetRootProps = _objectWithoutProperties(rootProps, _excluded);
  var filledColor;
  if (!rootProps.fillColor) filledColor = "currentColor";else filledColor = Array.isArray(fillColor) ? fillColor[0] : fillColor;
  var childProps = {
    strokeWidth: strokeWidth,
    strokeColor1: Array.isArray(strokeColor) ? strokeColor[0] : strokeColor,
    strokeColor2: Array.isArray(strokeColor) ? (_strokeColor$ = strokeColor[1]) !== null && _strokeColor$ !== void 0 ? _strokeColor$ : strokeColor[0] : strokeColor,
    fillColor1: Array.isArray(fillColor) ? fillColor[0] : fillColor,
    fillColor2: Array.isArray(fillColor) ? (_fillColor$ = fillColor[1]) !== null && _fillColor$ !== void 0 ? _fillColor$ : fillColor[0] : fillColor,
    filledColor: filledColor
  };
  return /*#__PURE__*/createElement(node.tag, _objectSpread(_objectSpread({
    key: id
  }, node.attrs), resetRootProps), (node.children || []).map(function (child, index) {
    return childRender(child, childProps, index);
  }));
}
function childRender(node, childProps, index) {
  var processedAttrs = {};
  if (node.attrs) {
    for (var _i = 0, _Object$entries = Object.entries(node.attrs); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];
      if (typeof value === "string" && value.startsWith("props.")) {
        var propName = value.split(".")[1];
        processedAttrs[key] = childProps[propName];
      } else {
        processedAttrs[key] = value;
      }
    }
  }
  return /*#__PURE__*/createElement(node.tag, _objectSpread({
    key: index
  }, processedAttrs), (node.children || []).map(function (child, index2) {
    return childRender(child, childProps, index2);
  }));
}
var IconBase = /*#__PURE__*/forwardRef(function (props, ref) {
  var icon = props.icon,
    id = props.id,
    className = props.className,
    size = props.size,
    style = props.style,
    restProps = _objectWithoutProperties(props, _excluded2);
  var _useSizeProps = useSizeProps(size),
    sizeClassName = _useSizeProps.className,
    sizeStyle = _useSizeProps.style;
  var cls = classNames("t-icon", "t-icon-".concat(id), className, sizeClassName);
  useEffect(function () {
    loadStylesheet();
  }, []);
  return render(icon, "".concat(id), _objectSpread({
    ref: ref,
    className: cls,
    style: _objectSpread(_objectSpread({
      fill: "none"
    }, style), sizeStyle)
  }, restProps));
});

export { IconBase };
//# sourceMappingURL=icon.js.map
