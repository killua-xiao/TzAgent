{"version":3,"file":"Paragraph.js","sources":["../../../components/typography/Paragraph.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport Ellipsis from './ellipsis/Ellipsis';\nimport { paragraphDefaultProps } from './defaultProps';\n\nimport useConfig from '../hooks/useConfig';\nimport useEllipsis from './ellipsis/useEllipsis';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nimport type { StyledProps } from '../common';\nimport type { TdParagraphProps } from './type';\n\nexport type TypographyParagraphProps = TdParagraphProps &\n  StyledProps & {\n    children: React.ReactNode;\n  };\n\nconst Paragraph = forwardRef<HTMLDivElement, TypographyParagraphProps>((originalProps, ref) => {\n  const { classPrefix } = useConfig();\n  const props = useDefaultProps<TypographyParagraphProps>(originalProps, paragraphDefaultProps);\n\n  const { ellipsis, children, className, content, ...rest } = props;\n  const prefixCls = `${classPrefix}-typography`;\n\n  const { ellipsisProps } = useEllipsis(ellipsis);\n\n  if (!ellipsis) {\n    return (\n      <div className={classNames(className, prefixCls)} ref={ref} {...rest}>\n        {children || content}\n      </div>\n    );\n  }\n\n  return (\n    <Ellipsis {...ellipsisProps} className={classNames(className, prefixCls)} {...rest}>\n      {children || content}\n    </Ellipsis>\n  );\n});\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;\n"],"names":["Paragraph","forwardRef","originalProps","ref","_useConfig","useConfig","classPrefix","props","useDefaultProps","paragraphDefaultProps","ellipsis","children","className","content","rest","_excluded","prefixCls","_useEllipsis","useEllipsis","ellipsisProps","React","createElement","_objectSpread","classNames","Ellipsis","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBMA,IAAAA,SAAY,gBAAAC,gBAAA,CAAqD,UAACC,aAAA,EAAeC,GAAQ,EAAA;AACvF,EAAA,IAAAC,UAAA,GAAkBC,0BAAU,EAAA;IAA1BC,WAAY,GAAAF,UAAA,CAAZE,WAAY,CAAA;AACd,EAAA,IAAAC,KAAA,GAAQC,gCAA0C,CAAAN,aAAA,EAAeO,6CAAqB,CAAA,CAAA;AAE5F,EAAA,IAAQC,QAAU,GAA0CH,KAAA,CAApDG,QAAU;IAAAC,QAAA,GAA0CJ,KAAA,CAA1CI,QAAA;IAAUC,SAAW,GAAqBL,KAAA,CAAhCK,SAAW;IAAAC,OAAA,GAAqBN,KAAA,CAArBM,OAAA;AAAYC,IAAAA,wDAASP,KAAA,EAAAQ,SAAA,CAAA,CAAA;AAC5D,EAAA,IAAMC,sBAAeV,WAAA,EAAA,aAAA,CAAA,CAAA;AAErB,EAAA,IAAAW,YAAA,GAA0BC,0CAAA,CAAYR,QAAQ,CAAA;IAAtCS,aAAA,GAAAF,YAAA,CAAAE,aAAA,CAAA;EAER,IAAI,CAACT,QAAU,EAAA;AACb,IAAA,sBACGU,yBAAA,CAAAC,aAAA,CAAA,KAAA,EAAAC,aAAA,CAAA;AAAIV,MAAAA,SAAA,EAAWW,8BAAW,CAAAX,SAAA,EAAWI,SAAS,CAAA;AAAGb,MAAAA,GAAA,EAAAA,GAAAA;AAAA,KAAA,EAAcW,IAAA,CAAA,EAC7DH,YAAYE,OACf,CAAA,CAAA;AAEJ,GAAA;EAEA,sBACGO,yBAAA,CAAAC,aAAA,CAAAG,uCAAA,EAAAF,aAAA,CAAAA,aAAA,CAAA,EAAA,EAAaH,aAAA,CAAA,EAAA,EAAA,EAAA;AAAeP,IAAAA,SAAA,EAAWW,8BAAW,CAAAX,SAAA,EAAWI,SAAS,CAAA;AAAA,GAAA,EAAOF,IAAA,CAAA,EAC3EH,YAAYE,OACf,CAAA,CAAA;AAEJ,CAAC,EAAA;AAEDb,SAAA,CAAUyB,WAAc,GAAA,WAAA;;;;"}