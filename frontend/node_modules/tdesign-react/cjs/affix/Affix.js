/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var hooks_useConfig = require('../hooks/useConfig.js');
var affix_defaultProps = require('./defaultProps.js');
var hooks_useDefaultProps = require('../hooks/useDefaultProps.js');
var _util_scroll = require('../_util/scroll.js');
var isFunction = require('../_chunks/dep-ec8d2dca.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-0006fcfa.js');
require('../_chunks/dep-667ac7af.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('raf');
require('../_chunks/dep-381fa848.js');
require('../_chunks/dep-4ed9eda4.js');
require('../_util/easing.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var Affix = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useDefaultProps = hooks_useDefaultProps["default"](props, affix_defaultProps.affixDefaultProps),
    children = _useDefaultProps.children,
    content = _useDefaultProps.content,
    zIndex = _useDefaultProps.zIndex,
    container = _useDefaultProps.container,
    offsetBottom = _useDefaultProps.offsetBottom,
    offsetTop = _useDefaultProps.offsetTop,
    className = _useDefaultProps.className,
    style = _useDefaultProps.style,
    onFixedChange = _useDefaultProps.onFixedChange;
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var affixRef = React.useRef(null);
  var affixWrapRef = React.useRef(null);
  var placeholderEL = React.useRef(null);
  var scrollContainer = React.useRef(null);
  var ticking = React.useRef(false);
  var handleScroll = React.useCallback(function () {
    if (!ticking.current) {
      window.requestAnimationFrame(function () {
        var _affixWrapRef$current, _affixWrapRef$current2;
        var _ref = (_affixWrapRef$current = (_affixWrapRef$current2 = affixWrapRef.current) === null || _affixWrapRef$current2 === void 0 ? void 0 : _affixWrapRef$current2.getBoundingClientRect()) !== null && _affixWrapRef$current !== void 0 ? _affixWrapRef$current : {
            top: 0
          },
          _ref$top = _ref.top,
          wrapToTop = _ref$top === void 0 ? 0 : _ref$top,
          _ref$width = _ref.width,
          wrapWidth = _ref$width === void 0 ? 0 : _ref$width,
          _ref$height = _ref.height,
          wrapHeight = _ref$height === void 0 ? 0 : _ref$height;
        var containerToTop = 0;
        if (scrollContainer.current instanceof HTMLElement) {
          containerToTop = scrollContainer.current.getBoundingClientRect().top;
        }
        var calcTop = wrapToTop - containerToTop;
        var containerHeight = scrollContainer.current[scrollContainer.current instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
        var calcBottom = containerToTop + containerHeight - (offsetBottom !== null && offsetBottom !== void 0 ? offsetBottom : 0);
        var fixedTop;
        if (calcTop <= offsetTop) {
          fixedTop = containerToTop + offsetTop;
        } else if (wrapToTop >= calcBottom) {
          fixedTop = calcBottom;
        } else {
          fixedTop = false;
        }
        if (affixRef.current) {
          var affixed = fixedTop !== false;
          var placeholderStatus = affixWrapRef.current.contains(placeholderEL.current);
          var prePlaceholderStatus = placeholderStatus;
          if (affixed) {
            affixRef.current.className = "".concat(classPrefix, "-affix");
            affixRef.current.style.top = "".concat(fixedTop, "px");
            affixRef.current.style.width = "".concat(wrapWidth, "px");
            affixRef.current.style.height = "".concat(wrapHeight, "px");
            if (zIndex) {
              affixRef.current.style.zIndex = "".concat(zIndex);
            }
            if (!placeholderStatus) {
              placeholderEL.current.style.width = "".concat(wrapWidth, "px");
              placeholderEL.current.style.height = "".concat(wrapHeight, "px");
              affixWrapRef.current.appendChild(placeholderEL.current);
              placeholderStatus = true;
            }
          } else {
            affixRef.current.removeAttribute("class");
            affixRef.current.removeAttribute("style");
            if (placeholderStatus) {
              placeholderEL.current.remove();
              placeholderStatus = false;
            }
          }
          if (prePlaceholderStatus !== placeholderStatus && isFunction.isFunction(onFixedChange)) {
            onFixedChange(affixed, {
              top: +fixedTop
            });
          }
        }
        ticking.current = false;
      });
    }
    ticking.current = true;
  }, [classPrefix, offsetBottom, offsetTop, onFixedChange, zIndex]);
  React.useImperativeHandle(ref, function () {
    return {
      handleScroll: handleScroll
    };
  });
  React.useEffect(function () {
    placeholderEL.current = document.createElement("div");
  }, []);
  React.useEffect(function () {
    scrollContainer.current = _util_scroll.getScrollContainer(container);
    if (scrollContainer.current) {
      handleScroll();
      scrollContainer.current.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", handleScroll);
      return function () {
        scrollContainer.current.removeEventListener("scroll", handleScroll);
        window.removeEventListener("resize", handleScroll);
      };
    }
  }, [container, handleScroll]);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    ref: affixWrapRef,
    className: className,
    style: style
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: affixRef
  }, children || content));
});
Affix.displayName = "Affix";

exports["default"] = Affix;
//# sourceMappingURL=Affix.js.map
