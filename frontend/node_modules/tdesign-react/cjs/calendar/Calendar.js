/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../_chunks/dep-e4e1901e.js');
var slicedToArray = require('../_chunks/dep-8e4d656d.js');
var defineProperty = require('../_chunks/dep-0006fcfa.js');
var React = require('react');
var dayjs = require('dayjs');
var button_index = require('../button/index.js');
var select_index = require('../select/index.js');
var radio_index = require('../radio/index.js');
var tag_CheckTag = require('../tag/CheckTag.js');
var _util_noop = require('../_util/noop.js');
var calendar_hooks_usePrefixClass = require('./hooks/usePrefixClass.js');
var hooks_useLayoutEffect = require('../hooks/useLayoutEffect.js');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var calendar__util = require('./_util.js');
var calendar_CalendarCellComp = require('./CalendarCellComp.js');
var calendar_defaultProps = require('./defaultProps.js');
var hooks_useDefaultProps = require('../hooks/useDefaultProps.js');
require('../_chunks/dep-00b49251.js');
require('../_chunks/dep-667ac7af.js');
require('../button/Button.js');
require('../_chunks/dep-8fa3a4c2.js');
require('classnames');
require('../hooks/useConfig.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-ec8d2dca.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('../hooks/useDomRefCallback.js');
require('../hooks/useRipple.js');
require('../_chunks/dep-dc4ce063.js');
require('../hooks/useAnimation.js');
require('../_chunks/dep-381fa848.js');
require('../_chunks/dep-4ed9eda4.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../_chunks/dep-002fcc1e.js');
require('../_chunks/dep-2ffa3ff1.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../_util/react-render.js');
require('../_chunks/dep-65ef8e09.js');
require('../common/PluginContainer.js');
require('../config-provider/ConfigProvider.js');
require('../_chunks/dep-ab2f63ec.js');
require('../_chunks/dep-a48c7e8b.js');
require('../_chunks/dep-3d4656ee.js');
require('../_chunks/dep-0ffc9d96.js');
require('../_chunks/dep-efe6d243.js');
require('../_chunks/dep-4b18243f.js');
require('../_chunks/dep-bff2c990.js');
require('../button/defaultProps.js');
require('../_util/parseTNode.js');
require('../_chunks/dep-59671c87.js');
require('../select/base/Select.js');
require('../_util/composeRefs.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../_util/helper.js');
require('../_chunks/dep-840b1644.js');
require('../_chunks/dep-255ceed8.js');
require('../_chunks/dep-79629634.js');
require('../_chunks/dep-66114ce9.js');
require('../_chunks/dep-62d1dd66.js');
require('../_chunks/dep-7a148045.js');
require('../common/FakeArrow.js');
require('../hooks/useControlled.js');
require('../select-input/index.js');
require('../select-input/SelectInput.js');
require('../popup/index.js');
require('../popup/Popup.js');
require('react-transition-group');
require('../_util/ref.js');
require('react-is');
require('../_util/isFragment.js');
require('../hooks/useAttach.js');
require('../hooks/useMutationObserver.js');
require('../hooks/useLatest.js');
require('../_chunks/dep-eb6d55c1.js');
require('../_chunks/dep-014b9b78.js');
require('../_chunks/dep-abdd786a.js');
require('../_chunks/dep-a231fdc5.js');
require('../_chunks/dep-cf14666e.js');
require('../hooks/usePopper.js');
require('@popperjs/core');
require('react-fast-compare');
require('../hooks/useWindowSize.js');
require('../popup/defaultProps.js');
require('../popup/hooks/useTrigger.js');
require('../_util/listener.js');
require('../popup/utils/transition.js');
require('../popup/PopupPlugin.js');
require('../select-input/useSingle.js');
require('../input/index.js');
require('../input/Input.js');
require('tdesign-icons-react');
require('../hooks/useGlobalIcon.js');
require('../input/InputGroup.js');
require('../input/defaultProps.js');
require('../input/useLengthLimit.js');
require('../_chunks/dep-1e4197a4.js');
require('../_chunks/dep-3398c1f2.js');
require('../_chunks/dep-e57bdc8f.js');
require('../_chunks/dep-22b1740a.js');
require('../_chunks/dep-373af7a2.js');
require('../_chunks/dep-fc29b8b5.js');
require('../select-input/useMultiple.js');
require('../tag-input/index.js');
require('../tag-input/TagInput.js');
require('../hooks/useDragSorter.js');
require('../hooks/useEventCallback.js');
require('../tag-input/defaultProps.js');
require('../tag-input/useHover.js');
require('../tag-input/useTagList.js');
require('../tag/index.js');
require('../tag/Tag.js');
require('../_chunks/dep-4d5c26af.js');
require('../tag/defaultProps.js');
require('../tag/CheckTagGroup.js');
require('../_chunks/dep-4406837c.js');
require('../tag-input/useTagScroll.js');
require('../select-input/useOverlayInnerStyle.js');
require('../select-input/defaultProps.js');
require('../select/defaultProps.js');
require('../_chunks/dep-e83bd2ab.js');
require('../select/base/OptionGroup.js');
require('../select/base/Option.js');
require('../_chunks/dep-0c8c9057.js');
require('../select/base/PopupContent.js');
require('../select/hooks/usePanelVirtualScroll.js');
require('../hooks/useVirtualScroll.js');
require('../_chunks/dep-0c010f0b.js');
require('../common/Check.js');
require('../_chunks/dep-c16f1dc4.js');
require('../_chunks/dep-adacb8cb.js');
require('../hooks/useCommonClassName.js');
require('../radio/defaultProps.js');
require('../radio/useKeyboard.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
  var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return {
    visible: visible,
    disabled: false,
    mode: {
      visible: true,
      radioGroupProps: {}
    },
    year: {
      visible: true,
      selectProps: {
        popupProps: {
          overlayInnerStyle: {
            width: "110px"
          }
        }
      }
    },
    month: {
      visible: true,
      selectProps: {
        popupProps: {
          overlayInnerStyle: {
            width: "90px"
          }
        }
      }
    },
    weekend: {
      visible: true,
      showWeekendButtonProps: {},
      hideWeekendButtonProps: {}
    },
    current: {
      visible: true,
      currentDayButtonProps: {},
      currentMonthButtonProps: {}
    }
  };
};
var Calendar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useDefaultProps = hooks_useDefaultProps["default"](props, calendar_defaultProps.calendarDefaultProps),
    className = _useDefaultProps.className,
    style = _useDefaultProps.style,
    modeFromProps = _useDefaultProps.mode,
    valueFromProps = _useDefaultProps.value,
    _useDefaultProps$firs = _useDefaultProps.firstDayOfWeek,
    firstDayOfWeek = _useDefaultProps$firs === void 0 ? 1 : _useDefaultProps$firs,
    format = _useDefaultProps.format,
    range = _useDefaultProps.range,
    head = _useDefaultProps.head,
    cell = _useDefaultProps.cell,
    cellAppend = _useDefaultProps.cellAppend,
    week = _useDefaultProps.week,
    theme = _useDefaultProps.theme,
    controllerConfig = _useDefaultProps.controllerConfig,
    _useDefaultProps$isSh = _useDefaultProps.isShowWeekendDefault,
    isShowWeekendDefault = _useDefaultProps$isSh === void 0 ? true : _useDefaultProps$isSh,
    _useDefaultProps$prev = _useDefaultProps.preventCellContextmenu,
    preventCellContextmenu = _useDefaultProps$prev === void 0 ? false : _useDefaultProps$prev,
    monthProps = _useDefaultProps.month,
    yearProps = _useDefaultProps.year,
    _useDefaultProps$onCo = _useDefaultProps.onControllerChange,
    onControllerChange = _useDefaultProps$onCo === void 0 ? _util_noop["default"] : _useDefaultProps$onCo,
    _useDefaultProps$onCe = _useDefaultProps.onCellClick,
    onCellClick = _useDefaultProps$onCe === void 0 ? _util_noop["default"] : _useDefaultProps$onCe,
    _useDefaultProps$onCe2 = _useDefaultProps.onCellDoubleClick,
    onCellDoubleClick = _useDefaultProps$onCe2 === void 0 ? _util_noop["default"] : _useDefaultProps$onCe2,
    _useDefaultProps$onCe3 = _useDefaultProps.onCellRightClick,
    onCellRightClick = _useDefaultProps$onCe3 === void 0 ? _util_noop["default"] : _useDefaultProps$onCe3,
    _useDefaultProps$onMo = _useDefaultProps.onMonthChange,
    onMonthChange = _useDefaultProps$onMo === void 0 ? _util_noop["default"] : _useDefaultProps$onMo,
    fillWithZero = _useDefaultProps.fillWithZero;
  var controllerConfigData = typeof controllerConfig === "boolean" ? getDefaultControllerConfigData(controllerConfig) : _objectSpread(_objectSpread({}, getDefaultControllerConfigData()), controllerConfig);
  if (typeof controllerConfig !== "boolean") {
    if (monthProps) {
      controllerConfigData.month.visible = true;
    }
    if (yearProps) {
      controllerConfigData.year.visible = true;
    }
  }
  var visible = controllerConfigData.visible,
    disabled = controllerConfigData.disabled,
    modeFromConfig = controllerConfigData.mode,
    yearFromConfig = controllerConfigData.year,
    monthFromConfig = controllerConfigData.month,
    weekend = controllerConfigData.weekend,
    current = controllerConfigData.current;
  var _modeFromConfig$visib = modeFromConfig.visible,
    visibleForMode = _modeFromConfig$visib === void 0 ? true : _modeFromConfig$visib,
    _modeFromConfig$radio = modeFromConfig.radioGroupProps,
    radioGroupPropsForMode = _modeFromConfig$radio === void 0 ? {} : _modeFromConfig$radio;
  var _yearFromConfig$visib = yearFromConfig.visible,
    visibleForYear = _yearFromConfig$visib === void 0 ? true : _yearFromConfig$visib,
    _yearFromConfig$selec = yearFromConfig.selectProps,
    selectPropsForYear = _yearFromConfig$selec === void 0 ? {} : _yearFromConfig$selec;
  var _monthFromConfig$visi = monthFromConfig.visible,
    visibleForMonth = _monthFromConfig$visi === void 0 ? true : _monthFromConfig$visi,
    _monthFromConfig$sele = monthFromConfig.selectProps,
    selectPropsForMonth = _monthFromConfig$sele === void 0 ? {} : _monthFromConfig$sele;
  var _weekend$visible = weekend.visible,
    visibleForWeekendToggle = _weekend$visible === void 0 ? true : _weekend$visible,
    _weekend$showWeekendB = weekend.showWeekendButtonProps,
    showWeekendButtonProps = _weekend$showWeekendB === void 0 ? {} : _weekend$showWeekendB,
    _weekend$hideWeekendB = weekend.hideWeekendButtonProps,
    hideWeekendButtonProps = _weekend$hideWeekendB === void 0 ? {} : _weekend$hideWeekendB;
  var _current$visible = current.visible,
    visibleForCurrent = _current$visible === void 0 ? true : _current$visible,
    _current$currentDayBu = current.currentDayButtonProps,
    currentDayButtonProps = _current$currentDayBu === void 0 ? {} : _current$currentDayBu,
    _current$currentMonth = current.currentMonthButtonProps,
    currentMonthButtonProps = _current$currentMonth === void 0 ? {} : _current$currentMonth;
  var _useState = React.useState("month"),
    _useState2 = slicedToArray._slicedToArray(_useState, 2),
    mode = _useState2[0],
    setMode = _useState2[1];
  var _useState3 = React.useState(function () {
      return dayjs__default["default"](valueFromProps || dayjs__default["default"]().format("YYYY-MM-DD"));
    }),
    _useState4 = slicedToArray._slicedToArray(_useState3, 2),
    value = _useState4[0],
    setValue = _useState4[1];
  var _useState5 = React.useState(function () {
      return yearProps ? Number(yearProps) : value.year();
    }),
    _useState6 = slicedToArray._slicedToArray(_useState5, 2),
    year = _useState6[0],
    setYear = _useState6[1];
  var _useState7 = React.useState(function () {
      return monthProps ? Number(monthProps) : parseInt(value.format("M"), 10);
    }),
    _useState8 = slicedToArray._slicedToArray(_useState7, 2),
    month = _useState8[0],
    setMonth = _useState8[1];
  var _useState9 = React.useState(isShowWeekendDefault),
    _useState0 = slicedToArray._slicedToArray(_useState9, 2),
    isShowWeekend = _useState0[0],
    setIsShowWeekend = _useState0[1];
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("calendar"),
    _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
    local = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var weekLabelList = t(local.week).split(",");
  var colHeaderList = React.useMemo(function () {
    if (mode === "year") return [];
    var weekTextArr = Array.isArray(week) && week.length >= 7 ? week : toConsumableArray._toConsumableArray(weekLabelList);
    var list = [];
    for (var i = firstDayOfWeek; i <= 7; i++) {
      if (!isShowWeekend && i > 5) {
        break;
      }
      list.push({
        day: i,
        text: weekTextArr[i - 1]
      });
    }
    if (firstDayOfWeek > 1) {
      for (var _i = 1; _i < firstDayOfWeek; _i++) {
        if (!isShowWeekend && _i > 5) {
          break;
        }
        list.push({
          day: _i,
          text: weekTextArr[_i - 1]
        });
      }
    }
    return list;
  }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);
  var rangeFromTo = React.useMemo(function () {
    if (!range || range.length < 2) {
      return null;
    }
    var _range = slicedToArray._slicedToArray(range, 2),
      v1 = _range[0],
      v2 = _range[1];
    if (dayjs__default["default"](v1).isBefore(dayjs__default["default"](v2))) {
      return {
        from: v1,
        to: v2
      };
    }
    return {
      from: v2,
      to: v1
    };
  }, [range]);
  var controllerOptions = React.useMemo(function () {
    var dayJsFilterDate = dayjs__default["default"]("".concat(year, "-").concat(month));
    var re = {
      filterDate: dayJsFilterDate.toDate(),
      formattedFilterDate: dayJsFilterDate.format(format),
      mode: mode,
      isShowWeekend: isShowWeekend
    };
    return re;
  }, [isShowWeekend, mode, year, month, format]);
  var _useMemo = React.useMemo(function () {
      var isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;
      var checkMonthSelectorDisabled = function checkMonthSelectorDisabled(yearIn, monthIn) {
        if (isRangeValid) {
          var beginYear = dayjs__default["default"](rangeFromTo.from).year();
          var endYear = dayjs__default["default"](rangeFromTo.to).year();
          if (yearIn === beginYear) {
            var beginMon = parseInt(dayjs__default["default"](rangeFromTo.from).format("M"), 10);
            return monthIn < beginMon;
          }
          if (yearIn === endYear) {
            var endMon = parseInt(dayjs__default["default"](rangeFromTo.to).format("M"), 10);
            return monthIn > endMon;
          }
        }
        return false;
      };
      var yearList = [];
      var monthList2 = [];
      var yearBegin = isRangeValid ? dayjs__default["default"](rangeFromTo.from).year() : Math.max(calendar__util.minYear, year - 10);
      var yearEnd = isRangeValid ? dayjs__default["default"](rangeFromTo.to).year() : Math.max(calendar__util.minYear, year + 10);
      for (var i = yearBegin; i <= yearEnd; i++) {
        yearList.push({
          value: i,
          disabled: checkMonthSelectorDisabled(i, month)
        });
      }
      for (var _i2 = 1; _i2 <= 12; _i2++) {
        monthList2.push({
          value: _i2,
          disabled: checkMonthSelectorDisabled(year, _i2)
        });
      }
      return [yearList, monthList2];
    }, [rangeFromTo, year, month]),
    _useMemo2 = slicedToArray._slicedToArray(_useMemo, 2),
    yearSelectList = _useMemo2[0],
    monthSelectList = _useMemo2[1];
  var dateList = React.useMemo(function () {
    return calendar__util.createDateList(year, month, firstDayOfWeek, value, format);
  }, [year, month, firstDayOfWeek, format, value]);
  var monthList = React.useMemo(function () {
    return calendar__util.createMonthList(year, value, format);
  }, [year, value, format]);
  var createCalendarCell = React.useCallback(function (cellData) {
    return _objectSpread(_objectSpread({}, cellData), controllerOptions);
  }, [controllerOptions]);
  var toCurrent = React.useCallback(function () {
    var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var now = dayjs__default["default"](valueIn).isValid() ? dayjs__default["default"](valueIn) : dayjs__default["default"](dayjs__default["default"]().format("YYYY-MM-DD"));
    setValue(now);
    setYear(now.year());
    setMonth(parseInt(now.format("M"), 10));
  }, []);
  React__default["default"].useImperativeHandle(ref, function () {
    return {
      toCurrent: toCurrent
    };
  }, [toCurrent]);
  var handleMonthChange = function handleMonthChange(newMonth) {
    setMonth(newMonth);
    onMonthChange({
      month: String(newMonth),
      year: String(year)
    });
  };
  var execCellEvent = React.useCallback(function (event, calendarCell, handleFunc) {
    if (handleFunc && typeof handleFunc === "function") {
      handleFunc({
        cell: createCalendarCell(calendarCell),
        e: event
      });
    }
  }, [createCalendarCell]);
  var clickCell = function clickCell(event, calendarCell) {
    setValue(dayjs__default["default"](calendarCell.formattedDate));
    execCellEvent(event, calendarCell, onCellClick);
  };
  var doubleClickCell = function doubleClickCell(event, calendarCell) {
    execCellEvent(event, calendarCell, onCellDoubleClick);
  };
  var rightClickCell = function rightClickCell(event, calendarCell) {
    if (preventCellContextmenu) event.preventDefault();
    execCellEvent(event, calendarCell, onCellRightClick);
  };
  React.useEffect(function () {
    toCurrent(valueFromProps);
  }, [valueFromProps, toCurrent]);
  React.useEffect(function () {
    if (monthProps) {
      setMonth(Number(monthProps));
    }
  }, [monthProps]);
  React.useEffect(function () {
    if (yearProps) {
      setYear(Number(yearProps));
    }
  }, [yearProps]);
  React.useEffect(function () {
    setMode(modeFromProps);
  }, [modeFromProps]);
  React.useEffect(function () {
    setIsShowWeekend(isShowWeekendDefault);
  }, [isShowWeekendDefault]);
  hooks_useLayoutEffect["default"](function () {
    onControllerChange(controllerOptions);
  }, [controllerOptions, onControllerChange]);
  var prefixCls = calendar_hooks_usePrefixClass["default"]();
  var currentDate = dayjs__default["default"]().format("YYYY-MM-DD");
  var currentMonth = dayjs__default["default"]().format("YYYY-MM");
  var controlSectionSize = theme === "card" ? "small" : "medium";
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls(calendar__util.blockName, [calendar__util.blockName, "", theme]).concat(" ", className),
    style: style
  }, visible && /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control"])
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "title"])
  }, function () {
    if (head && typeof head === "function") return head(controllerOptions);
    if (head && typeof head !== "function") return head;
  }()), /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control-section"])
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control-section-cell"])
  }, visibleForYear && /* @__PURE__ */React__default["default"].createElement(select_index.Select, _objectSpread({
    autoWidth: true,
    size: controlSectionSize,
    value: year,
    disabled: disabled,
    options: yearSelectList.map(function (item) {
      return {
        label: t(local.yearSelection, {
          year: item.value
        }),
        value: item.value,
        disabled: item.disabled
      };
    }),
    onChange: function onChange(selectYear) {
      return setYear(selectYear);
    }
  }, selectPropsForYear))), /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control-section-cell"])
  }, visibleForMonth && mode === "month" && /* @__PURE__ */React__default["default"].createElement(select_index.Select, _objectSpread({
    autoWidth: true,
    size: controlSectionSize,
    value: month,
    options: monthSelectList.map(function (item) {
      return {
        label: t(local.monthSelection, {
          month: item.value
        }),
        value: item.value,
        disabled: item.disabled
      };
    }),
    disabled: disabled,
    onChange: handleMonthChange
  }, selectPropsForMonth))), /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control-section-cell"]),
    style: {
      height: "auto"
    }
  }, visibleForMode && /* @__PURE__ */React__default["default"].createElement(radio_index.Radio.Group, _objectSpread({
    variant: "default-filled",
    size: controlSectionSize,
    value: mode,
    disabled: disabled,
    onChange: function onChange(value2) {
      return setMode(value2);
    }
  }, radioGroupPropsForMode), /* @__PURE__ */React__default["default"].createElement(radio_index.Radio.Button, {
    value: "month"
  }, t(local.monthRadio)), /* @__PURE__ */React__default["default"].createElement(radio_index.Radio.Button, {
    value: "year"
  }, t(local.yearRadio)))), mode === "month" && theme === "full" && visibleForWeekendToggle && /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control-section-cell"])
  }, /* @__PURE__ */React__default["default"].createElement(tag_CheckTag["default"], _objectSpread({
    className: "t-calendar__control-tag",
    checked: !isShowWeekend,
    disabled: disabled,
    size: controlSectionSize,
    onClick: function onClick() {
      setIsShowWeekend(!isShowWeekend);
    }
  }, isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps), "".concat(isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)))), theme === "full" && visibleForCurrent && /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "control-section-cell"])
  }, /* @__PURE__ */React__default["default"].createElement(button_index.Button, _objectSpread({
    size: controlSectionSize,
    disabled: disabled,
    onClick: function onClick() {
      toCurrent();
    }
  }, mode === "year" ? currentMonthButtonProps : currentDayButtonProps), mode === "year" ? t(local.thisMonth) : t(local.today))))), /* @__PURE__ */React__default["default"].createElement("div", {
    className: prefixCls([calendar__util.blockName, "panel"], [calendar__util.blockName, "panel--".concat(mode)])
  }, /* @__PURE__ */React__default["default"].createElement("table", {
    className: prefixCls([calendar__util.blockName, "table"])
  }, colHeaderList.length > 0 && /* @__PURE__ */React__default["default"].createElement("thead", {
    className: prefixCls([calendar__util.blockName, "table-head"])
  }, /* @__PURE__ */React__default["default"].createElement("tr", {
    className: prefixCls([calendar__util.blockName, "table-head-row"])
  }, colHeaderList.map(function (item) {
    return /* @__PURE__ */React__default["default"].createElement("th", {
      key: item.day,
      className: prefixCls([calendar__util.blockName, "table-head-cell"])
    }, week && typeof week === "function" ? week({
      day: item.day
    }) : item.text);
  }))), mode === "month" && /* @__PURE__ */React__default["default"].createElement("tbody", {
    className: prefixCls([calendar__util.blockName, "table-body"])
  }, dateList.map(function (dateRow, dateRowIndex) {
    return /* @__PURE__ */React__default["default"].createElement("tr", {
      key: String(dateRowIndex),
      className: prefixCls([calendar__util.blockName, "table-body-row"])
    }, dateRow.map(function (dateCell, dateCellIndex) {
      if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;
      var isNow = dateCell.formattedDate === currentDate;
      return /* @__PURE__ */React__default["default"].createElement(calendar_CalendarCellComp["default"], {
        key: dateCellIndex,
        mode: mode,
        theme: theme,
        cell: cell,
        cellData: dateCell,
        cellAppend: cellAppend,
        fillWithZero: fillWithZero,
        isCurrent: dateCell.isCurrent,
        isNow: isNow,
        isDisabled: dateCell.belongTo !== 0,
        createCalendarCell: createCalendarCell,
        onCellClick: function onCellClick(event) {
          return clickCell(event, dateCell);
        },
        onCellDoubleClick: function onCellDoubleClick(event) {
          return doubleClickCell(event, dateCell);
        },
        onCellRightClick: function onCellRightClick(event) {
          return rightClickCell(event, dateCell);
        }
      });
    }));
  })), mode === "year" && /* @__PURE__ */React__default["default"].createElement("tbody", {
    className: prefixCls([calendar__util.blockName, "table-body"])
  }, monthList.map(function (monthRow, monthRowIndex) {
    return /* @__PURE__ */React__default["default"].createElement("tr", {
      key: String(monthRowIndex),
      className: prefixCls([calendar__util.blockName, "table-body-row"])
    }, monthRow.map(function (monthCell, monthCellIndex) {
      var isNow = monthCell.formattedDate.startsWith(currentMonth);
      return /* @__PURE__ */React__default["default"].createElement(calendar_CalendarCellComp["default"], {
        key: monthCellIndex,
        mode: mode,
        theme: theme,
        cell: cell,
        cellData: monthCell,
        cellAppend: cellAppend,
        fillWithZero: fillWithZero,
        isCurrent: monthCell.isCurrent,
        isNow: isNow,
        createCalendarCell: createCalendarCell,
        onCellClick: function onCellClick(event) {
          return clickCell(event, monthCell);
        },
        onCellDoubleClick: function onCellDoubleClick(event) {
          return doubleClickCell(event, monthCell);
        },
        onCellRightClick: function onCellRightClick(event) {
          return rightClickCell(event, monthCell);
        }
      });
    }));
  })))));
});
Calendar.displayName = "Calendar";

exports["default"] = Calendar;
//# sourceMappingURL=Calendar.js.map
