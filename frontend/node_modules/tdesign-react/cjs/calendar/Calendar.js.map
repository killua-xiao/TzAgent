{"version":3,"file":"Calendar.js","sources":["../../../components/calendar/Calendar.tsx"],"sourcesContent":["import React, { useMemo, useState, useCallback, useEffect, forwardRef } from 'react';\nimport dayjs from 'dayjs';\nimport Button from '../button';\nimport Select from '../select';\nimport Radio from '../radio';\nimport CheckTag from '../tag/CheckTag';\nimport noop from '../_util/noop';\nimport usePrefixClass from './hooks/usePrefixClass';\nimport useLayoutEffect from '../hooks/useLayoutEffect';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { TdCalendarProps, ControllerOptions, CalendarCell, CalendarValue, CalendarController } from './type';\nimport { StyledProps } from '../common';\nimport { blockName, minYear, createDateList, createMonthList } from './_util';\nimport CalendarCellComp from './CalendarCellComp';\nimport { calendarDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface CalendarProps extends TdCalendarProps, StyledProps {}\n\nexport interface CalendarMethods {\n  /**\n   * 显示当前月份\\年份\n   */\n  toCurrent: (value: CalendarValue) => void;\n}\n\n// 组件内部将 controllerConfigData 参数类型转换为 CalendarController 处理，将 bool 时候的值作为 visible 并入其中\ninterface InternalCalendarController extends Required<CalendarController> {\n  visible: boolean;\n}\n\nconst getDefaultControllerConfigData = (visible = true): InternalCalendarController => ({\n  visible, // 是否显示（全部控件）\n  disabled: false, // 是否禁用（全部控件）\n  // 模式切换单选组件设置\n  mode: {\n    visible: true, // 是否显示\n    radioGroupProps: {}, // 用于透传 props 给该 radioGroup 组件\n  },\n  // 年份选择框组件相关设置\n  year: {\n    visible: true, // 是否显示\n    selectProps: { popupProps: { overlayInnerStyle: { width: '110px' } } }, // 用于透传props给该select组件\n  },\n  // 年份选择框组件相关设置\n  month: {\n    visible: true, // 是否显示（“year”模式下本身是不显示该组件的）\n    selectProps: { popupProps: { overlayInnerStyle: { width: '90px' } } }, // 用于透传props给该select组件\n  },\n  // 隐藏\\显示周末按钮组件相关设置\n  weekend: {\n    visible: true, // 是否显示\n    showWeekendButtonProps: {}, // 用于透传 props 给显示周末按钮组件\n    hideWeekendButtonProps: {}, // 用于透传 props 给隐藏周末按钮组件\n  },\n  // “今天\\本月”按钮组件相关设置\n  current: {\n    visible: true, // 是否显示\n    currentDayButtonProps: {}, // 用于透传 props 给“今天”钮组件（“month”模式下有效）\n    currentMonthButtonProps: {}, // 用于透传props给“本月”按钮组件（“year”模式下有效）\n  },\n});\n\nconst Calendar = forwardRef<CalendarMethods, CalendarProps>((props, ref) => {\n  const {\n    className,\n    style,\n    mode: modeFromProps,\n    value: valueFromProps,\n    firstDayOfWeek = 1,\n    format,\n    range,\n    head,\n    cell,\n    cellAppend,\n    week,\n    theme,\n    controllerConfig,\n    isShowWeekendDefault = true,\n    preventCellContextmenu = false,\n    month: monthProps,\n    year: yearProps,\n    onControllerChange = noop,\n    onCellClick = noop,\n    onCellDoubleClick = noop,\n    onCellRightClick = noop,\n    onMonthChange = noop,\n    fillWithZero,\n  } = useDefaultProps<CalendarProps>(props, calendarDefaultProps);\n\n  // 组装配置信息\n  const controllerConfigData: InternalCalendarController =\n    typeof controllerConfig === 'boolean'\n      ? getDefaultControllerConfigData(controllerConfig)\n      : { ...getDefaultControllerConfigData(), ...controllerConfig };\n\n  // 处理 monthProps 与 yearProps 比 controllerConfig 优先的情况\n  if (typeof controllerConfig !== 'boolean') {\n    if (monthProps) {\n      controllerConfigData.month.visible = true;\n    }\n    if (yearProps) {\n      controllerConfigData.year.visible = true;\n    }\n  }\n\n  // 读配置信息\n  const {\n    visible,\n    disabled,\n    mode: modeFromConfig,\n    year: yearFromConfig,\n    month: monthFromConfig,\n    weekend,\n    current,\n  } = controllerConfigData;\n  const { visible: visibleForMode = true, radioGroupProps: radioGroupPropsForMode = {} } = modeFromConfig;\n  const { visible: visibleForYear = true, selectProps: selectPropsForYear = {} } = yearFromConfig;\n  const { visible: visibleForMonth = true, selectProps: selectPropsForMonth = {} } = monthFromConfig;\n  const { visible: visibleForWeekendToggle = true, showWeekendButtonProps = {}, hideWeekendButtonProps = {} } = weekend;\n  const { visible: visibleForCurrent = true, currentDayButtonProps = {}, currentMonthButtonProps = {} } = current;\n\n  const [mode, setMode] = useState<string>('month');\n  const [value, setValue] = useState<dayjs.Dayjs>(() => dayjs(valueFromProps || dayjs().format('YYYY-MM-DD')));\n  const [year, setYear] = useState<number>(() => (yearProps ? Number(yearProps) : value.year()));\n  const [month, setMonth] = useState<number>(() => (monthProps ? Number(monthProps) : parseInt(value.format('M'), 10)));\n  const [isShowWeekend, setIsShowWeekend] = useState<boolean>(isShowWeekendDefault);\n\n  const [local, t] = useLocaleReceiver('calendar');\n\n  // 表头数组\n  const weekLabelList = t(local.week).split(',');\n  const colHeaderList = useMemo(() => {\n    if (mode === 'year') return [];\n    const weekTextArr = Array.isArray(week) && week.length >= 7 ? week : [...weekLabelList];\n    const list = [];\n    for (let i = firstDayOfWeek; i <= 7; i++) {\n      if (!isShowWeekend && i > 5) {\n        break;\n      }\n      list.push({\n        day: i,\n        text: weekTextArr[i - 1],\n      });\n    }\n    if (firstDayOfWeek > 1) {\n      for (let i = 1; i < firstDayOfWeek; i++) {\n        if (!isShowWeekend && i > 5) {\n          break;\n        }\n        list.push({\n          day: i,\n          text: weekTextArr[i - 1],\n        });\n      }\n    }\n    return list;\n  }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);\n\n  // 根据传入的 range 参数生成 key 为 from, to 的范围对象\n  const rangeFromTo = useMemo(() => {\n    if (!range || range.length < 2) {\n      return null;\n    }\n    const [v1, v2] = range;\n    if (dayjs(v1).isBefore(dayjs(v2))) {\n      return {\n        from: v1,\n        to: v2,\n      };\n    }\n    return {\n      from: v2,\n      to: v1,\n    };\n  }, [range]);\n\n  // 构造基础 controllerOptions\n  const controllerOptions: ControllerOptions = useMemo(() => {\n    const dayJsFilterDate: dayjs.Dayjs = dayjs(`${year}-${month}`);\n    const re = {\n      filterDate: dayJsFilterDate.toDate(),\n      formattedFilterDate: dayJsFilterDate.format(format),\n      mode,\n      isShowWeekend,\n    };\n    return re;\n  }, [isShowWeekend, mode, year, month, format]);\n\n  // 年份、月份 Select 选择框选项\n  const [yearSelectList, monthSelectList] = useMemo(() => {\n    const isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;\n    const checkMonthSelectorDisabled = (yearIn: number, monthIn: number): boolean => {\n      if (isRangeValid) {\n        const beginYear = dayjs(rangeFromTo.from).year();\n        const endYear = dayjs(rangeFromTo.to).year();\n        if (yearIn === beginYear) {\n          const beginMon = parseInt(dayjs(rangeFromTo.from).format('M'), 10);\n          return monthIn < beginMon;\n        }\n        if (yearIn === endYear) {\n          const endMon = parseInt(dayjs(rangeFromTo.to).format('M'), 10);\n          return monthIn > endMon;\n        }\n      }\n      return false;\n    };\n\n    const yearList = [];\n    const monthList = [];\n    // 年列表\n    const yearBegin = isRangeValid ? dayjs(rangeFromTo.from).year() : Math.max(minYear, year - 10);\n    const yearEnd = isRangeValid ? dayjs(rangeFromTo.to).year() : Math.max(minYear, year + 10);\n    for (let i = yearBegin; i <= yearEnd; i++) {\n      yearList.push({\n        value: i,\n        disabled: checkMonthSelectorDisabled(i, month),\n      });\n    }\n    // 月列表\n    for (let i = 1; i <= 12; i++) {\n      monthList.push({\n        value: i,\n        disabled: checkMonthSelectorDisabled(year, i),\n      });\n    }\n    return [yearList, monthList];\n  }, [rangeFromTo, year, month]);\n\n  // mode为 'month' 时，构造日历列表\n  const dateList = useMemo<CalendarCell[][]>(\n    () => createDateList(year, month, firstDayOfWeek, value, format),\n    [year, month, firstDayOfWeek, format, value],\n  );\n\n  // mode为 'year' 时，构造月历列表\n  const monthList = useMemo<CalendarCell[][]>(() => createMonthList(year, value, format), [year, value, format]);\n\n  // 将基础的 CalendarCell 与 ControllerOptions 进行合并\n  const createCalendarCell = useCallback(\n    (cellData: CalendarCell): CalendarCell => ({\n      ...cellData,\n      ...controllerOptions,\n    }),\n    [controllerOptions],\n  );\n\n  const toCurrent = useCallback((valueIn: CalendarValue = null) => {\n    const now: dayjs.Dayjs = dayjs(valueIn).isValid() ? dayjs(valueIn) : dayjs(dayjs().format('YYYY-MM-DD'));\n    setValue(now);\n    setYear(now.year());\n    setMonth(parseInt(now.format('M'), 10));\n  }, []);\n\n  React.useImperativeHandle(ref, () => ({ toCurrent }), [toCurrent]);\n\n  // 月份 select change 事件回调\n  const handleMonthChange = (newMonth: number) => {\n    setMonth(newMonth);\n    onMonthChange({ month: String(newMonth), year: String(year) });\n  };\n\n  // 事件回调处理函数\n  const execCellEvent = useCallback(\n    (event, calendarCell, handleFunc) => {\n      if (handleFunc && typeof handleFunc === 'function') {\n        handleFunc({\n          cell: createCalendarCell(calendarCell),\n          e: event,\n        });\n      }\n    },\n    [createCalendarCell],\n  );\n\n  // 单元格单击\n  const clickCell = (event, calendarCell: CalendarCell) => {\n    setValue(dayjs(calendarCell.formattedDate));\n    execCellEvent(event, calendarCell, onCellClick);\n  };\n\n  // 单元格双击\n  const doubleClickCell = (event, calendarCell: CalendarCell) => {\n    execCellEvent(event, calendarCell, onCellDoubleClick);\n  };\n\n  // 单元格右击\n  const rightClickCell = (event, calendarCell: CalendarCell) => {\n    if (preventCellContextmenu) event.preventDefault();\n    execCellEvent(event, calendarCell, onCellRightClick);\n  };\n\n  // 监听 current 参数\n  useEffect(() => {\n    toCurrent(valueFromProps);\n  }, [valueFromProps, toCurrent]);\n\n  // 监听 month 参数\n  useEffect(() => {\n    if (monthProps) {\n      setMonth(Number(monthProps));\n    }\n  }, [monthProps]);\n\n  // 监听 year 参数\n  useEffect(() => {\n    if (yearProps) {\n      setYear(Number(yearProps));\n    }\n  }, [yearProps]);\n\n  // 监听 mode 参数\n  useEffect(() => {\n    setMode(modeFromProps);\n  }, [modeFromProps]);\n\n  // 监听 isShowWeekend 参数\n  useEffect(() => {\n    setIsShowWeekend(isShowWeekendDefault);\n  }, [isShowWeekendDefault]);\n\n  // 右上角控件组选中值有变化的时候触发\n  useLayoutEffect(() => {\n    onControllerChange(controllerOptions);\n  }, [controllerOptions, onControllerChange]);\n\n  const prefixCls = usePrefixClass();\n  const currentDate = dayjs().format('YYYY-MM-DD');\n  const currentMonth = dayjs().format('YYYY-MM');\n  const controlSectionSize = theme === 'card' ? 'small' : 'medium';\n\n  return (\n    <div className={prefixCls(blockName, [blockName, '', theme]).concat(' ', className)} style={style}>\n      {/* 操作部分 */}\n      {visible && (\n        <div className={prefixCls([blockName, 'control'])}>\n          <div className={prefixCls([blockName, 'title'])}>\n            {(() => {\n              if (head && typeof head === 'function') return head(controllerOptions);\n              if (head && typeof head !== 'function') return head;\n            })()}\n          </div>\n          <div className={prefixCls([blockName, 'control-section'])}>\n            {/* 年份选择框 */}\n            <div className={prefixCls([blockName, 'control-section-cell'])}>\n              {visibleForYear && (\n                <Select\n                  autoWidth={true}\n                  size={controlSectionSize}\n                  value={year}\n                  disabled={disabled}\n                  options={yearSelectList.map((item) => ({\n                    label: t(local.yearSelection, { year: item.value }),\n                    value: item.value,\n                    disabled: item.disabled,\n                  }))}\n                  onChange={(selectYear) => setYear(selectYear as number)}\n                  {...selectPropsForYear}\n                />\n              )}\n            </div>\n            {/* 月份选择框 */}\n            <div className={prefixCls([blockName, 'control-section-cell'])}>\n              {visibleForMonth && mode === 'month' && (\n                <Select\n                  autoWidth={true}\n                  size={controlSectionSize}\n                  value={month}\n                  options={monthSelectList.map((item) => ({\n                    label: t(local.monthSelection, { month: item.value }),\n                    value: item.value,\n                    disabled: item.disabled,\n                  }))}\n                  disabled={disabled}\n                  onChange={handleMonthChange}\n                  {...selectPropsForMonth}\n                />\n              )}\n            </div>\n            {/* 模式切换 */}\n            <div className={prefixCls([blockName, 'control-section-cell'])} style={{ height: 'auto' }}>\n              {visibleForMode && (\n                <Radio.Group\n                  variant=\"default-filled\"\n                  size={controlSectionSize}\n                  value={mode}\n                  disabled={disabled}\n                  onChange={(value) => setMode(value as string)}\n                  {...radioGroupPropsForMode}\n                >\n                  <Radio.Button value=\"month\">{t(local.monthRadio)}</Radio.Button>\n                  <Radio.Button value=\"year\">{t(local.yearRadio)}</Radio.Button>\n                </Radio.Group>\n              )}\n            </div>\n            {/* 周末隐藏显示切换 */}\n            {mode === 'month' && theme === 'full' && visibleForWeekendToggle && (\n              <div className={prefixCls([blockName, 'control-section-cell'])}>\n                <CheckTag\n                  className=\"t-calendar__control-tag\"\n                  checked={!isShowWeekend}\n                  disabled={disabled}\n                  size={controlSectionSize}\n                  onClick={() => {\n                    setIsShowWeekend(!isShowWeekend);\n                  }}\n                  {...(isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps)}\n                >\n                  {`${isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)}`}\n                </CheckTag>\n              </div>\n            )}\n            {/* 回到当前按钮 */}\n            {theme === 'full' && visibleForCurrent && (\n              <div className={prefixCls([blockName, 'control-section-cell'])}>\n                <Button\n                  size={controlSectionSize}\n                  disabled={disabled}\n                  onClick={() => {\n                    toCurrent();\n                  }}\n                  {...(mode === 'year' ? currentMonthButtonProps : currentDayButtonProps)}\n                >\n                  {mode === 'year' ? t(local.thisMonth) : t(local.today)}\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {/* 主体部分 */}\n      <div className={prefixCls([blockName, 'panel'], [blockName, `panel--${mode}`])}>\n        <table className={prefixCls([blockName, 'table'])}>\n          {/* 表头部分 */}\n          {colHeaderList.length > 0 && (\n            <thead className={prefixCls([blockName, 'table-head'])}>\n              <tr className={prefixCls([blockName, 'table-head-row'])}>\n                {colHeaderList.map((item) => (\n                  <th key={item.day} className={prefixCls([blockName, 'table-head-cell'])}>\n                    {week && typeof week === 'function' ? week({ day: item.day }) : item.text}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n          )}\n          {/* month 模式，输出日期 */}\n          {mode === 'month' && (\n            <tbody className={prefixCls([blockName, 'table-body'])}>\n              {dateList.map((dateRow, dateRowIndex) => (\n                <tr key={String(dateRowIndex)} className={prefixCls([blockName, 'table-body-row'])}>\n                  {dateRow.map((dateCell, dateCellIndex) => {\n                    // 若不显示周末，隐藏 day 为 6 或 7 的元素\n                    if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;\n                    // 其余日期正常显示\n                    const isNow = dateCell.formattedDate === currentDate;\n                    return (\n                      <CalendarCellComp\n                        key={dateCellIndex}\n                        mode={mode}\n                        theme={theme}\n                        cell={cell}\n                        cellData={dateCell}\n                        cellAppend={cellAppend}\n                        fillWithZero={fillWithZero}\n                        isCurrent={dateCell.isCurrent}\n                        isNow={isNow}\n                        isDisabled={dateCell.belongTo !== 0}\n                        createCalendarCell={createCalendarCell}\n                        onCellClick={(event) => clickCell(event, dateCell)}\n                        onCellDoubleClick={(event) => doubleClickCell(event, dateCell)}\n                        onCellRightClick={(event) => rightClickCell(event, dateCell)}\n                      />\n                    );\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          )}\n          {/* year 模式，输出月份 */}\n          {mode === 'year' && (\n            <tbody className={prefixCls([blockName, 'table-body'])}>\n              {monthList.map((monthRow, monthRowIndex) => (\n                <tr key={String(monthRowIndex)} className={prefixCls([blockName, 'table-body-row'])}>\n                  {monthRow.map((monthCell, monthCellIndex) => {\n                    const isNow = monthCell.formattedDate.startsWith(currentMonth);\n                    return (\n                      <CalendarCellComp\n                        key={monthCellIndex}\n                        mode={mode}\n                        theme={theme}\n                        cell={cell}\n                        cellData={monthCell}\n                        cellAppend={cellAppend}\n                        fillWithZero={fillWithZero}\n                        isCurrent={monthCell.isCurrent}\n                        isNow={isNow}\n                        createCalendarCell={createCalendarCell}\n                        onCellClick={(event) => clickCell(event, monthCell)}\n                        onCellDoubleClick={(event) => doubleClickCell(event, monthCell)}\n                        onCellRightClick={(event) => rightClickCell(event, monthCell)}\n                      />\n                    );\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          )}\n        </table>\n      </div>\n    </div>\n  );\n});\n\nCalendar.displayName = 'Calendar';\n\nexport default Calendar;\n"],"names":["getDefaultControllerConfigData","visible","arguments","length","undefined","disabled","mode","radioGroupProps","year","selectProps","popupProps","overlayInnerStyle","width","month","weekend","showWeekendButtonProps","hideWeekendButtonProps","current","currentDayButtonProps","currentMonthButtonProps","Calendar","forwardRef","props","ref","_useDefaultProps","useDefaultProps","calendarDefaultProps","className","style","modeFromProps","valueFromProps","value","_useDefaultProps$firs","firstDayOfWeek","format","range","head","cell","cellAppend","week","theme","controllerConfig","_useDefaultProps$isSh","isShowWeekendDefault","_useDefaultProps$prev","preventCellContextmenu","monthProps","yearProps","_useDefaultProps$onCo","onControllerChange","noop","_useDefaultProps$onCe","onCellClick","_useDefaultProps$onCe2","onCellDoubleClick","_useDefaultProps$onCe3","onCellRightClick","_useDefaultProps$onMo","onMonthChange","fillWithZero","controllerConfigData","_objectSpread","modeFromConfig","yearFromConfig","monthFromConfig","_modeFromConfig$visib","visibleForMode","_modeFromConfig$radio","radioGroupPropsForMode","_yearFromConfig$visib","visibleForYear","_yearFromConfig$selec","selectPropsForYear","_monthFromConfig$visi","visibleForMonth","_monthFromConfig$sele","selectPropsForMonth","_weekend$visible","visibleForWeekendToggle","_weekend$showWeekendB","_weekend$hideWeekendB","_current$visible","visibleForCurrent","_current$currentDayBu","_current$currentMonth","_useState","useState","_useState2","_slicedToArray","setMode","_useState3","dayjs","_useState4","setValue","_useState5","Number","_useState6","setYear","_useState7","parseInt","_useState8","setMonth","_useState9","_useState0","isShowWeekend","setIsShowWeekend","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","local","t","weekLabelList","split","colHeaderList","useMemo","weekTextArr","Array","isArray","_toConsumableArray","list","i","push","day","text","rangeFromTo","_range","v1","v2","isBefore","from","to","controllerOptions","dayJsFilterDate","concat","re","filterDate","toDate","formattedFilterDate","_useMemo","isRangeValid","checkMonthSelectorDisabled","yearIn","monthIn","beginYear","endYear","beginMon","endMon","yearList","monthList","yearBegin","Math","max","minYear","yearEnd","_useMemo2","yearSelectList","monthSelectList","dateList","createDateList","createMonthList","createCalendarCell","useCallback","cellData","toCurrent","valueIn","now","isValid","React","useImperativeHandle","handleMonthChange","newMonth","String","execCellEvent","event","calendarCell","handleFunc","e","clickCell","formattedDate","doubleClickCell","rightClickCell","preventDefault","useEffect","useLayoutEffect","prefixCls","usePrefixClass","currentDate","currentMonth","controlSectionSize","createElement","blockName","Select","autoWidth","size","options","map","item","label","yearSelection","onChange","selectYear","monthSelection","height","Radio","Group","variant","Button","monthRadio","yearRadio","CheckTag","checked","onClick","hideWeekend","showWeekend","thisMonth","today","key","dateRow","dateRowIndex","dateCell","dateCellIndex","indexOf","isNow","CalendarCellComp","isCurrent","isDisabled","belongTo","monthRow","monthRowIndex","monthCell","monthCellIndex","startsWith","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAMA,8BAAA,GAAiC,SAAjCA,8BAAAA,GAAA;AAAA,EAAA,IAAkCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAU,IAAsC,CAAA;EAAA,OAAA;AACtFD,IAAAA,OAAA,EAAAA,OAAA;AACAI,IAAAA,QAAU,EAAA,KAAA;AAEVC,IAAAA,IAAM,EAAA;AACJL,MAAAA,OAAS,EAAA,IAAA;AACTM,MAAAA,iBAAiB,EAAC;KACpB;AAEAC,IAAAA,IAAM,EAAA;AACJP,MAAAA,OAAS,EAAA,IAAA;AACTQ,MAAAA,WAAA,EAAa;AAAEC,QAAAA,UAAY,EAAA;AAAEC,UAAAA,mBAAmB;AAAEC,YAAAA,KAAA,EAAO,OAAA;AAAQ,WAAA;AAAE,SAAA;AAAE,OAAA;KACvE;AAEAC,IAAAA,KAAO,EAAA;AACLZ,MAAAA,OAAS,EAAA,IAAA;AACTQ,MAAAA,WAAA,EAAa;AAAEC,QAAAA,UAAY,EAAA;AAAEC,UAAAA,mBAAmB;AAAEC,YAAAA,KAAA,EAAO,MAAA;AAAO,WAAA;AAAE,SAAA;AAAE,OAAA;KACtE;AAEAE,IAAAA,OAAS,EAAA;AACPb,MAAAA,OAAS,EAAA,IAAA;MACTc,wBAAwB,EAAC;AACzBC,MAAAA,wBAAwB,EAAC;KAC3B;AAEAC,IAAAA,OAAS,EAAA;AACPhB,MAAAA,OAAS,EAAA,IAAA;MACTiB,uBAAuB,EAAC;AACxBC,MAAAA,yBAAyB,EAAC;AAC5B,KAAA;GACF,CAAA;AAAA,CAAA,CAAA;AAEMC,IAAAA,QAAW,gBAAAC,gBAAA,CAA2C,UAACC,KAAA,EAAOC,GAAQ,EAAA;AACpE,EAAA,IAAAC,gBAAA,GAwBFC,gCAA+B,CAAAH,KAAA,EAAOI,0CAAoB,CAAA;IAvB5DC,SAAA,GAAAH,gBAAA,CAAAG,SAAA;IACAC,KAAA,GAAAJ,gBAAA,CAAAI,KAAA;IACMC,aAAA,GAAAL,gBAAA,CAANlB,IAAM;IACCwB,cAAA,GAAAN,gBAAA,CAAPO,KAAO;IAAAC,qBAAA,GAAAR,gBAAA,CACPS,cAAiB;AAAjBA,IAAAA,cAAiB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAAA,qBAAA;IACjBE,MAAA,GAAAV,gBAAA,CAAAU,MAAA;IACAC,KAAA,GAAAX,gBAAA,CAAAW,KAAA;IACAC,IAAA,GAAAZ,gBAAA,CAAAY,IAAA;IACAC,IAAA,GAAAb,gBAAA,CAAAa,IAAA;IACAC,UAAA,GAAAd,gBAAA,CAAAc,UAAA;IACAC,IAAA,GAAAf,gBAAA,CAAAe,IAAA;IACAC,KAAA,GAAAhB,gBAAA,CAAAgB,KAAA;IACAC,gBAAA,GAAAjB,gBAAA,CAAAiB,gBAAA;IAAAC,qBAAA,GAAAlB,gBAAA,CACAmB,oBAAuB;AAAvBA,IAAAA,oBAAuB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAAA,qBAAA;IAAAE,qBAAA,GAAApB,gBAAA,CACvBqB,sBAAyB;AAAzBA,IAAAA,sBAAyB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAAA,qBAAA;IAClBE,UAAA,GAAAtB,gBAAA,CAAPX,KAAO;IACDkC,SAAA,GAAAvB,gBAAA,CAANhB,IAAM;IAAAwC,qBAAA,GAAAxB,gBAAA,CACNyB,kBAAqB;AAArBA,IAAAA,kBAAqB,GAAAD,qBAAA,KAAAE,KAAAA,CAAAA,GAAAA,qBAAA,GAAAF,qBAAA;IAAAG,qBAAA,GAAA3B,gBAAA,CACrB4B,WAAc;AAAdA,IAAAA,WAAc,GAAAD,qBAAA,KAAAD,KAAAA,CAAAA,GAAAA,qBAAA,GAAAC,qBAAA;IAAAE,sBAAA,GAAA7B,gBAAA,CACd8B,iBAAoB;AAApBA,IAAAA,iBAAoB,GAAAD,sBAAA,KAAAH,KAAAA,CAAAA,GAAAA,qBAAA,GAAAG,sBAAA;IAAAE,sBAAA,GAAA/B,gBAAA,CACpBgC,gBAAmB;AAAnBA,IAAAA,gBAAmB,GAAAD,sBAAA,KAAAL,KAAAA,CAAAA,GAAAA,qBAAA,GAAAK,sBAAA;IAAAE,qBAAA,GAAAjC,gBAAA,CACnBkC,aAAgB;AAAhBA,IAAAA,aAAgB,GAAAD,qBAAA,KAAAP,KAAAA,CAAAA,GAAAA,qBAAA,GAAAO,qBAAA;IAChBE,YAAA,GAAAnC,gBAAA,CAAAmC,YAAA,CAAA;EAIF,IAAMC,oBACJ,GAAA,OAAOnB,gBAAqB,KAAA,SAAA,GACxBzC,8BAA+B,CAAAyC,gBAAgB,CAC/C,GAAAoB,aAAA,CAAAA,aAAA,CAAA,EAAA,EAAK7D,8BAAA,EAAkC,CAAGyC,EAAAA,gBAAiB,CAAA,CAAA;AAG7D,EAAA,IAAA,OAAOA,qBAAqB,SAAW,EAAA;AACzC,IAAA,IAAIK,UAAY,EAAA;AACdc,MAAAA,oBAAA,CAAqB/C,MAAMZ,OAAU,GAAA,IAAA,CAAA;AACvC,KAAA;AACA,IAAA,IAAI8C,SAAW,EAAA;AACba,MAAAA,oBAAA,CAAqBpD,KAAKP,OAAU,GAAA,IAAA,CAAA;AACtC,KAAA;AACF,GAAA;AAGM,EAAA,IACJA,OAAA,GAOE2D,oBAAA,CAPF3D,OAAA;IACAI,QAAA,GAMEuD,oBAAA,CANFvD,QAAA;IACMyD,cAAA,GAKJF,oBAAA,CALFtD,IAAM;IACAyD,cAAA,GAIJH,oBAAA,CAJFpD,IAAM;IACCwD,eAAA,GAGLJ,oBAAA,CAHF/C,KAAO;IACPC,OAAA,GAEE8C,oBAAA,CAFF9C,OAAA;IACAG,OAAA,GACE2C,oBAAA,CADF3C,OAAA,CAAA;AAEI,EAAA,IAAAgD,qBAAA,GAAmFH,cAAA,CAAjF7D;AAASiE,IAAAA,cAAiB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAAA,qBAAA;IAAAE,qBAAA,GAAuDL,cAAA,CAAjDvD;AAAiB6D,IAAAA,sBAAyB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA;AAC5E,EAAA,IAAAE,qBAAA,GAA2EN,cAAA,CAAzE9D;AAASqE,IAAAA,cAAiB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAAA,qBAAA;IAAAE,qBAAA,GAA+CR,cAAA,CAAzCtD;AAAa+D,IAAAA,kBAAqB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA;AACpE,EAAA,IAAAE,qBAAA,GAA6ET,eAAA,CAA3E/D;AAASyE,IAAAA,eAAkB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAAA,qBAAA;IAAAE,qBAAA,GAAgDX,eAAA,CAA1CvD;AAAamE,IAAAA,mBAAsB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA;AACtE,EAAA,IAAAE,gBAAA,GAAwG/D,OAAA,CAAtGb,OAAS;AAAA6E,IAAAA,uBAAA,GAAAD,gBAAA,KAA0B,KAAA,CAAA,GAAA,IAAM,GAAAA,gBAAA;IAAAE,qBAAA,GAA6DjE,OAAA,CAA7DC,sBAAA;AAAAA,IAAAA,sBAAA,GAAAgE,qBAAA,KAAA,KAAA,CAAA,GAAyB,EAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAgClE,OAAA,CAAhCE,sBAAA;AAAAA,IAAAA,sBAAA,GAAAgE,qBAAA,KAAA,KAAA,CAAA,GAAyB,EAAC,GAAAA,qBAAA,CAAA;AAClG,EAAA,IAAAC,gBAAA,GAAkGhE,OAAA,CAAhGhB,OAAS;AAAAiF,IAAAA,iBAAA,GAAAD,gBAAA,KAAoB,KAAA,CAAA,GAAA,IAAM,GAAAA,gBAAA;IAAAE,qBAAA,GAA6DlE,OAAA,CAA7DC,qBAAA;AAAAA,IAAAA,qBAAA,GAAAiE,qBAAA,KAAA,KAAA,CAAA,GAAwB,EAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAiCnE,OAAA,CAAjCE,uBAAA;AAAAA,IAAAA,uBAAA,GAAAiE,qBAAA,KAAA,KAAA,CAAA,GAA0B,EAAC,GAAAA,qBAAA,CAAA;AAElG,EAAA,IAAAC,SAAA,GAAwBC,eAAiB,OAAO,CAAA;IAAAC,UAAA,GAAAC,4BAAA,CAAAH,SAAA,EAAA,CAAA,CAAA;AAAzC/E,IAAAA,IAAA,GAAAiF,UAAA,CAAA,CAAA,CAAA;AAAME,IAAAA,OAAO,GAAAF,UAAA,CAAA,CAAA,CAAA,CAAA;EACpB,IAAAG,UAAA,GAA0BJ,cAAsB,CAAA,YAAA;AAAA,MAAA,OAAMK,yBAAM,CAAA7D,cAAA,IAAkB6D,yBAAM,EAAA,CAAEzD,MAAO,CAAA,YAAY,CAAC,CAAC,CAAA;KAAA,CAAA;IAAA0D,UAAA,GAAAJ,4BAAA,CAAAE,UAAA,EAAA,CAAA,CAAA;AAApG3D,IAAAA,KAAA,GAAA6D,UAAA,CAAA,CAAA,CAAA;AAAOC,IAAAA,QAAQ,GAAAD,UAAA,CAAA,CAAA,CAAA,CAAA;EACtB,IAAAE,UAAA,GAAwBR,cAAiB,CAAA,YAAA;MAAA,OAAOvC,SAAY,GAAAgD,MAAA,CAAOhD,SAAS,CAAA,GAAIhB,KAAM,CAAAvB,IAAA,EAAO,CAAA;KAAA,CAAA;IAAAwF,UAAA,GAAAR,4BAAA,CAAAM,UAAA,EAAA,CAAA,CAAA;AAAtFtF,IAAAA,IAAA,GAAAwF,UAAA,CAAA,CAAA,CAAA;AAAMC,IAAAA,OAAO,GAAAD,UAAA,CAAA,CAAA,CAAA,CAAA;EACpB,IAAAE,UAAA,GAA0BZ,cAAA,CAAiB,YAAA;AAAA,MAAA,OAAOxC,UAAa,GAAAiD,MAAA,CAAOjD,UAAU,CAAA,GAAIqD,SAASpE,KAAM,CAAAG,MAAA,CAAO,GAAG,CAAA,EAAG,EAAE,CAAE,CAAA;KAAA,CAAA;IAAAkE,UAAA,GAAAZ,4BAAA,CAAAU,UAAA,EAAA,CAAA,CAAA;AAA7GrF,IAAAA,KAAO,GAAAuF,UAAA,CAAA,CAAA,CAAA;AAAAC,IAAAA,QAAQ,GAAAD,UAAA,CAAA,CAAA,CAAA,CAAA;AACtB,EAAA,IAAAE,UAAA,GAA0ChB,eAAkB3C,oBAAoB,CAAA;IAAA4D,UAAA,GAAAf,4BAAA,CAAAc,UAAA,EAAA,CAAA,CAAA;AAAzEE,IAAAA,aAAA,GAAAD,UAAA,CAAA,CAAA,CAAA;AAAeE,IAAAA,gBAAgB,GAAAF,UAAA,CAAA,CAAA,CAAA,CAAA;AAEtC,EAAA,IAAAG,kBAAA,GAAmBC,uCAAkB,UAAU,CAAA;IAAAC,mBAAA,GAAApB,4BAAA,CAAAkB,kBAAA,EAAA,CAAA,CAAA;AAAxCG,IAAAA,KAAA,GAAAD,mBAAA,CAAA,CAAA,CAAA;AAAOE,IAAAA,CAAC,GAAAF,mBAAA,CAAA,CAAA,CAAA,CAAA;AAGf,EAAA,IAAMG,gBAAgBD,CAAE,CAAAD,KAAA,CAAMtE,IAAI,CAAA,CAAEyE,MAAM,GAAG,CAAA,CAAA;AACvC,EAAA,IAAAC,aAAA,GAAgBC,cAAQ,YAAM;AAClC,IAAA,IAAI5G,IAAS,KAAA,MAAA,EAAQ,OAAO,EAAC,CAAA;IACvB,IAAA6G,WAAA,GAAcC,KAAM,CAAAC,OAAA,CAAQ9E,IAAI,CAAA,IAAKA,IAAK,CAAApC,MAAA,IAAU,CAAI,GAAAoC,IAAA,GAAA+E,oCAAA,CAAWP,aAAa,CAAA,CAAA;IACtF,IAAMQ,OAAO,EAAC,CAAA;IACd,KAAA,IAASC,CAAI,GAAAvF,cAAA,EAAgBuF,CAAK,IAAA,CAAA,EAAGA,CAAK,EAAA,EAAA;AACpC,MAAA,IAAA,CAAChB,aAAiB,IAAAgB,CAAA,GAAI,CAAG,EAAA;AAC3B,QAAA,MAAA;AACF,OAAA;MACAD,IAAA,CAAKE,IAAK,CAAA;AACRC,QAAAA,GAAK,EAAAF,CAAA;AACLG,QAAAA,IAAA,EAAMR,YAAYK,CAAI,GAAA,CAAA,CAAA;AACxB,OAAC,CAAA,CAAA;AACH,KAAA;IACA,IAAIvF,iBAAiB,CAAG,EAAA;MACtB,KAAA,IAASuF,EAAI,GAAA,CAAA,EAAGA,EAAI,GAAAvF,cAAA,EAAgBuF,EAAK,EAAA,EAAA;AACnC,QAAA,IAAA,CAAChB,aAAiB,IAAAgB,EAAA,GAAI,CAAG,EAAA;AAC3B,UAAA,MAAA;AACF,SAAA;QACAD,IAAA,CAAKE,IAAK,CAAA;AACRC,UAAAA,GAAK,EAAAF,EAAA;AACLG,UAAAA,IAAA,EAAMR,YAAYK,EAAI,GAAA,CAAA,CAAA;AACxB,SAAC,CAAA,CAAA;AACH,OAAA;AACF,KAAA;AACO,IAAA,OAAAD,IAAA,CAAA;AACT,KAAG,CAACjH,IAAA,EAAM2B,gBAAgBuE,aAAe,EAAAjE,IAAA,EAAMwE,aAAa,CAAC,CAAA,CAAA;AAGvD,EAAA,IAAAa,WAAA,GAAcV,cAAQ,YAAM;IAChC,IAAI,CAAC/E,KAAA,IAASA,KAAM,CAAAhC,MAAA,GAAS,CAAG,EAAA;AACvB,MAAA,OAAA,IAAA,CAAA;AACT,KAAA;AACM,IAAA,IAAA0H,MAAA,GAAArC,4BAAA,CAAWrD,KAAA,EAAA,CAAA,CAAA;AAAV2F,MAAAA,EAAI,GAAAD,MAAA,CAAA,CAAA,CAAA;AAAAE,MAAAA,EAAE,GAAAF,MAAA,CAAA,CAAA,CAAA,CAAA;AACb,IAAA,IAAIlC,0BAAMmC,EAAE,CAAA,CAAEE,SAASrC,yBAAM,CAAAoC,EAAE,CAAC,CAAG,EAAA;MAC1B,OAAA;AACLE,QAAAA,IAAM,EAAAH,EAAA;AACNI,QAAAA,EAAI,EAAAH,EAAAA;OACN,CAAA;AACF,KAAA;IACO,OAAA;AACLE,MAAAA,IAAM,EAAAF,EAAA;AACNG,MAAAA,EAAI,EAAAJ,EAAAA;KACN,CAAA;AACF,GAAA,EAAG,CAAC3F,KAAK,CAAC,CAAA,CAAA;AAGJ,EAAA,IAAAgG,iBAAA,GAAuCjB,cAAQ,YAAM;AACzD,IAAA,IAAMkB,eAA+B,GAAAzC,yBAAA,CAAA,EAAA,CAAA0C,MAAA,CAAS7H,IAAA,EAAA,GAAA,CAAA,CAAA6H,MAAA,CAAQxH,KAAO,CAAA,CAAA,CAAA;AAC7D,IAAA,IAAMyH,EAAK,GAAA;AACTC,MAAAA,UAAA,EAAYH,gBAAgBI,MAAO,EAAA;AACnCC,MAAAA,mBAAA,EAAqBL,eAAgB,CAAAlG,MAAA,CAAOA,MAAM,CAAA;AAClD5B,MAAAA,IAAA,EAAAA,IAAA;AACAkG,MAAAA,aAAA,EAAAA,aAAAA;KACF,CAAA;AACO,IAAA,OAAA8B,EAAA,CAAA;AACT,KAAG,CAAC9B,aAAA,EAAelG,MAAME,IAAM,EAAAK,KAAA,EAAOqB,MAAM,CAAC,CAAA,CAAA;AAG7C,EAAA,IAAAwG,QAAA,GAA0CxB,cAAQ,YAAM;MACtD,IAAMyB,YAAe,GAAAf,WAAA,IAAeA,WAAY,CAAAK,IAAA,IAAQL,WAAY,CAAAM,EAAA,CAAA;MAC9D,IAAAU,0BAAA,GAA6B,SAA7BA,0BAAAA,CAA8BC,MAAA,EAAgBC,OAA6B,EAAA;AAC/E,QAAA,IAAIH,YAAc,EAAA;UAChB,IAAMI,SAAY,GAAApD,yBAAA,CAAMiC,WAAY,CAAAK,IAAI,EAAEzH,IAAK,EAAA,CAAA;UAC/C,IAAMwI,OAAU,GAAArD,yBAAA,CAAMiC,WAAY,CAAAM,EAAE,EAAE1H,IAAK,EAAA,CAAA;UAC3C,IAAIqI,WAAWE,SAAW,EAAA;AAClB,YAAA,IAAAE,QAAA,GAAW9C,SAASR,yBAAM,CAAAiC,WAAA,CAAYK,IAAI,CAAE,CAAA/F,MAAA,CAAO,GAAG,CAAA,EAAG,EAAE,CAAA,CAAA;YACjE,OAAO4G,OAAU,GAAAG,QAAA,CAAA;AACnB,WAAA;UACA,IAAIJ,WAAWG,OAAS,EAAA;AAChB,YAAA,IAAAE,MAAA,GAAS/C,SAASR,yBAAM,CAAAiC,WAAA,CAAYM,EAAE,CAAE,CAAAhG,MAAA,CAAO,GAAG,CAAA,EAAG,EAAE,CAAA,CAAA;YAC7D,OAAO4G,OAAU,GAAAI,MAAA,CAAA;AACnB,WAAA;AACF,SAAA;AACO,QAAA,OAAA,KAAA,CAAA;OACT,CAAA;MAEA,IAAMC,WAAW,EAAC,CAAA;MAClB,IAAMC,aAAY,EAAC,CAAA;MAEnB,IAAMC,SAAY,GAAAV,YAAA,GAAehD,yBAAM,CAAAiC,WAAA,CAAYK,IAAI,CAAA,CAAEzH,IAAK,EAAA,GAAI8I,IAAK,CAAAC,GAAA,CAAIC,sBAAS,EAAAhJ,IAAA,GAAO,EAAE,CAAA,CAAA;MAC7F,IAAMiJ,OAAU,GAAAd,YAAA,GAAehD,yBAAM,CAAAiC,WAAA,CAAYM,EAAE,CAAA,CAAE1H,IAAK,EAAA,GAAI8I,IAAK,CAAAC,GAAA,CAAIC,sBAAS,EAAAhJ,IAAA,GAAO,EAAE,CAAA,CAAA;MACzF,KAAA,IAASgH,CAAI,GAAA6B,SAAA,EAAW7B,CAAK,IAAAiC,OAAA,EAASjC,CAAK,EAAA,EAAA;QACzC2B,QAAA,CAAS1B,IAAK,CAAA;AACZ1F,UAAAA,KAAO,EAAAyF,CAAA;AACPnH,UAAAA,QAAA,EAAUuI,0BAA2B,CAAApB,CAAA,EAAG3G,KAAK,CAAA;AAC/C,SAAC,CAAA,CAAA;AACH,OAAA;MAEA,KAAA,IAAS2G,GAAI,GAAA,CAAA,EAAGA,GAAK,IAAA,EAAA,EAAIA,GAAK,EAAA,EAAA;QAC5B4B,WAAU3B,IAAK,CAAA;AACb1F,UAAAA,KAAO,EAAAyF,GAAA;AACPnH,UAAAA,QAAA,EAAUuI,0BAA2B,CAAApI,IAAA,EAAMgH,GAAC,CAAA;AAC9C,SAAC,CAAA,CAAA;AACH,OAAA;AACO,MAAA,OAAA,CAAC2B,UAAUC,UAAS,CAAA,CAAA;KAC1B,EAAA,CAACxB,WAAa,EAAApH,IAAA,EAAMK,KAAK,CAAC,CAAA;IAAA6I,SAAA,GAAAlE,4BAAA,CAAAkD,QAAA,EAAA,CAAA,CAAA;AArCtBiB,IAAAA,cAAA,GAAAD,SAAA,CAAA,CAAA,CAAA;AAAgBE,IAAAA,eAAe,GAAAF,SAAA,CAAA,CAAA,CAAA,CAAA;EAwCtC,IAAMG,QAAW,GAAA3C,aAAA,CACf,YAAA;IAAA,OAAM4C,6BAAe,CAAAtJ,IAAA,EAAMK,KAAO,EAAAoB,cAAA,EAAgBF,OAAOG,MAAM,CAAA,CAAA;GAC/D,EAAA,CAAC1B,IAAA,EAAMK,KAAO,EAAAoB,cAAA,EAAgBC,QAAQH,KAAK,CAC7C,CAAA,CAAA;EAGA,IAAMqH,SAAY,GAAAlC,aAAA,CAA0B,YAAA;AAAA,IAAA,OAAM6C,8BAAA,CAAgBvJ,IAAM,EAAAuB,KAAA,EAAOG,MAAM,CAAA,CAAA;AAAA,GAAA,EAAG,CAAC1B,IAAA,EAAMuB,KAAO,EAAAG,MAAM,CAAC,CAAA,CAAA;AAG7G,EAAA,IAAM8H,kBAAqB,GAAAC,iBAAA,CACzB,UAACC,QAA0C,EAAA;AAAA,IAAA,OAAArG,aAAA,CAAAA,aAAA,CACtCqG,EAAAA,EAAAA,QAAA,GACA/B,iBAAA,CAAA,CAAA;AAAA,GACL,EACA,CAACA,iBAAiB,CACpB,CAAA,CAAA;AAEA,EAAA,IAAMgC,SAAY,GAAAF,iBAAA,CAAY,YAAmC;AAAA,IAAA,IAAlCG,OAAA,GAAAlK,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAyB,IAAS,CAAA;IAC/D,IAAMmK,GAAmB,GAAA1E,yBAAA,CAAMyE,OAAO,CAAA,CAAEE,SAAY,GAAA3E,yBAAA,CAAMyE,OAAO,CAAA,GAAIzE,yBAAM,CAAAA,yBAAA,EAAQ,CAAAzD,MAAA,CAAO,YAAY,CAAC,CAAA,CAAA;IACvG2D,QAAA,CAASwE,GAAG,CAAA,CAAA;AACJpE,IAAAA,OAAA,CAAAoE,GAAA,CAAI7J,MAAM,CAAA,CAAA;AAClB6F,IAAAA,QAAA,CAASF,SAASkE,GAAI,CAAAnI,MAAA,CAAO,GAAG,CAAA,EAAG,EAAE,CAAC,CAAA,CAAA;GACxC,EAAG,EAAE,CAAA,CAAA;AAECqI,EAAAA,yBAAA,CAAAC,mBAAA,CAAoBjJ,KAAK,YAAA;IAAA,OAAO;AAAE4I,MAAAA,WAAAA,SAAAA;KAAc,CAAA;AAAA,GAAA,EAAA,CAACA,SAAS,CAAC,CAAA,CAAA;AAG3D,EAAA,IAAAM,iBAAA,GAAoB,SAApBA,iBAAAA,CAAqBC,QAAqB,EAAA;IAC9CrE,QAAA,CAASqE,QAAQ,CAAA,CAAA;AACHhH,IAAAA,aAAA,CAAA;AAAE7C,MAAAA,OAAO8J,MAAO,CAAAD,QAAQ;MAAGlK,IAAM,EAAAmK,MAAA,CAAOnK,IAAI,CAAA;AAAE,KAAC,CAAA,CAAA;GAC/D,CAAA;EAGA,IAAMoK,aAAgB,GAAAX,iBAAA,CACpB,UAACY,KAAO,EAAAC,YAAA,EAAcC,UAAe,EAAA;AAC/B,IAAA,IAAAA,UAAA,IAAc,OAAOA,UAAA,KAAe,UAAY,EAAA;AACvCA,MAAAA,UAAA,CAAA;AACT1I,QAAAA,IAAA,EAAM2H,mBAAmBc,YAAY,CAAA;AACrCE,QAAAA,CAAG,EAAAH,KAAAA;AACL,OAAC,CAAA,CAAA;AACH,KAAA;AACF,GAAA,EACA,CAACb,kBAAkB,CACrB,CAAA,CAAA;EAGM,IAAAiB,SAAA,GAAY,SAAZA,SAAAA,CAAaJ,KAAA,EAAOC,YAA+B,EAAA;AAC9CjF,IAAAA,QAAA,CAAAF,yBAAA,CAAMmF,YAAa,CAAAI,aAAa,CAAC,CAAA,CAAA;AAC5BN,IAAAA,aAAA,CAAAC,KAAA,EAAOC,cAAc1H,WAAW,CAAA,CAAA;GAChD,CAAA;EAGM,IAAA+H,eAAA,GAAkB,SAAlBA,eAAAA,CAAmBN,KAAA,EAAOC,YAA+B,EAAA;AAC/CF,IAAAA,aAAA,CAAAC,KAAA,EAAOC,cAAcxH,iBAAiB,CAAA,CAAA;GACtD,CAAA;EAGM,IAAA8H,cAAA,GAAiB,SAAjBA,cAAAA,CAAkBP,KAAA,EAAOC,YAA+B,EAAA;AACxD,IAAA,IAAAjI,sBAAA,EAAwBgI,KAAA,CAAMQ,cAAe,EAAA,CAAA;AACnCT,IAAAA,aAAA,CAAAC,KAAA,EAAOC,cAActH,gBAAgB,CAAA,CAAA;GACrD,CAAA;AAGA8H,EAAAA,eAAA,CAAU,YAAM;IACdnB,SAAA,CAAUrI,cAAc,CAAA,CAAA;AAC1B,GAAG,EAAA,CAACA,cAAgB,EAAAqI,SAAS,CAAC,CAAA,CAAA;AAG9BmB,EAAAA,eAAA,CAAU,YAAM;AACd,IAAA,IAAIxI,UAAY,EAAA;AACLuD,MAAAA,QAAA,CAAAN,MAAA,CAAOjD,UAAU,CAAC,CAAA,CAAA;AAC7B,KAAA;AACF,GAAA,EAAG,CAACA,UAAU,CAAC,CAAA,CAAA;AAGfwI,EAAAA,eAAA,CAAU,YAAM;AACd,IAAA,IAAIvI,SAAW,EAAA;AACLkD,MAAAA,OAAA,CAAAF,MAAA,CAAOhD,SAAS,CAAC,CAAA,CAAA;AAC3B,KAAA;AACF,GAAA,EAAG,CAACA,SAAS,CAAC,CAAA,CAAA;AAGduI,EAAAA,eAAA,CAAU,YAAM;IACd7F,OAAA,CAAQ5D,aAAa,CAAA,CAAA;AACvB,GAAA,EAAG,CAACA,aAAa,CAAC,CAAA,CAAA;AAGlByJ,EAAAA,eAAA,CAAU,YAAM;IACd7E,gBAAA,CAAiB9D,oBAAoB,CAAA,CAAA;AACvC,GAAA,EAAG,CAACA,oBAAoB,CAAC,CAAA,CAAA;AAGzB4I,EAAAA,gCAAA,CAAgB,YAAM;IACpBtI,kBAAA,CAAmBkF,iBAAiB,CAAA,CAAA;AACtC,GAAG,EAAA,CAACA,iBAAmB,EAAAlF,kBAAkB,CAAC,CAAA,CAAA;AAE1C,EAAA,IAAMuI,YAAYC,wCAAe,EAAA,CAAA;EACjC,IAAMC,WAAc,GAAA/F,yBAAA,EAAQ,CAAAzD,MAAA,CAAO,YAAY,CAAA,CAAA;EAC/C,IAAMyJ,YAAe,GAAAhG,yBAAA,EAAQ,CAAAzD,MAAA,CAAO,SAAS,CAAA,CAAA;EACvC,IAAA0J,kBAAA,GAAqBpJ,KAAU,KAAA,MAAA,GAAS,OAAU,GAAA,QAAA,CAAA;AAExD,EAAA,sBACG+H,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAA,EAAW6J,SAAU,CAAAM,wBAAA,EAAW,CAACA,wBAAA,EAAW,EAAI,EAAAtJ,KAAK,CAAC,CAAA,CAAE6F,MAAO,CAAA,GAAA,EAAK1G,SAAS,CAAA;AAAGC,IAAAA,KAAA,EAAAA,KAAAA;GAAA,EAElF3B,0BACEsK,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,SAAS,CAAC,CAAA;AAAA,GAAA,iBAC7CvB,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,OAAO,CAAC,CAAA;AAAA,GAAA,EAC1C,YAAM;IACF,IAAA1J,IAAA,IAAQ,OAAOA,IAAS,KAAA,UAAA,EAAY,OAAOA,KAAK+F,iBAAiB,CAAA,CAAA;IACjE,IAAA/F,IAAA,IAAQ,OAAOA,IAAS,KAAA,UAAA,EAAmB,OAAAA,IAAA,CAAA;GACjD,EACF,CAAA,iBACCmI,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,iBAAiB,CAAC,CAAA;AAAA,GAAA,iBAErDvB,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,sBAAsB,CAAC,CAAA;GAAA,EAC1DxH,iCACEiG,yBAAA,CAAAsB,aAAA,CAAAE,mBAAA,EAAAlI,aAAA,CAAA;AACCmI,IAAAA,SAAW,EAAA,IAAA;AACXC,IAAAA,IAAM,EAAAL,kBAAA;AACN7J,IAAAA,KAAO,EAAAvB,IAAA;AACPH,IAAAA,QAAA,EAAAA,QAAA;AACA6L,IAAAA,OAAS,EAAAvC,cAAA,CAAewC,GAAI,CAAA,UAACC,IAAU,EAAA;MAAA,OAAA;AACrCC,QAAAA,KAAA,EAAOvF,EAAED,KAAM,CAAAyF,aAAA,EAAe;UAAE9L,IAAM,EAAA4L,IAAA,CAAKrK,KAAAA;AAAM,SAAC,CAAA;QAClDA,OAAOqK,IAAK,CAAArK,KAAA;QACZ1B,UAAU+L,IAAK,CAAA/L,QAAAA;OACf,CAAA;AAAA,KAAA,CAAA;AACFkM,IAAAA,QAAU,EAAA,SAAVA,QAAUA,CAACC,UAAe,EAAA;MAAA,OAAAvG,OAAA,CAAQuG,UAAoB,CAAA,CAAA;AAAA,KAAA;GAClDhI,EAAAA,kBAAA,CACN,CAEJ,kBAEC+F,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,sBAAsB,CAAC,CAAA;AAC1D,GAAA,EAAApH,eAAA,IAAmBpE,IAAS,KAAA,OAAA,mBAC1BiK,yBAAA,CAAAsB,aAAA,CAAAE,mBAAA,EAAAlI,aAAA,CAAA;AACCmI,IAAAA,SAAW,EAAA,IAAA;AACXC,IAAAA,IAAM,EAAAL,kBAAA;AACN7J,IAAAA,KAAO,EAAAlB,KAAA;AACPqL,IAAAA,OAAS,EAAAtC,eAAA,CAAgBuC,GAAI,CAAA,UAACC,IAAU,EAAA;MAAA,OAAA;AACtCC,QAAAA,KAAA,EAAOvF,EAAED,KAAM,CAAA4F,cAAA,EAAgB;UAAE5L,KAAO,EAAAuL,IAAA,CAAKrK,KAAAA;AAAM,SAAC,CAAA;QACpDA,OAAOqK,IAAK,CAAArK,KAAA;QACZ1B,UAAU+L,IAAK,CAAA/L,QAAAA;OACf,CAAA;AAAA,KAAA,CAAA;AACFA,IAAAA,QAAA,EAAAA,QAAA;AACAkM,IAAAA,QAAU,EAAA9B,iBAAAA;GACN7F,EAAAA,mBAAA,CACN,CAEJ,kBAEC2F,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;IAAIlK,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,sBAAsB,CAAC,CAAA;AAAGlK,IAAAA,KAAA,EAAO;AAAE8K,MAAAA,MAAA,EAAQ,MAAA;AAAO,KAAA;AACrF,GAAA,EAAAxI,cAAA,mBACEqG,yBAAA,CAAAsB,aAAA,CAAAc,iBAAA,CAAMC,KAAN,EAAA/I,aAAA,CAAA;AACCgJ,IAAAA,OAAQ,EAAA,gBAAA;AACRZ,IAAAA,IAAM,EAAAL,kBAAA;AACN7J,IAAAA,KAAO,EAAAzB,IAAA;AACPD,IAAAA,QAAA,EAAAA,QAAA;AACAkM,IAAAA,QAAU,EAAA,SAAVA,QAAUA,CAACxK,MAAU,EAAA;MAAA,OAAA0D,OAAA,CAAQ1D,MAAe,CAAA,CAAA;AAAA,KAAA;GACxCqC,EAAAA,sBAAA,CAEJ,iBAAAmG,yBAAA,CAAAsB,aAAA,CAACc,kBAAMG,MAAN,EAAA;AAAa/K,IAAAA,KAAM,EAAA,OAAA;AAAA,GAAA,EAAS+E,EAAED,KAAM,CAAAkG,UAAU,CAAE,CACjD,iBAAAxC,yBAAA,CAAAsB,aAAA,CAACc,kBAAMG,MAAN,EAAA;AAAa/K,IAAAA,KAAM,EAAA,MAAA;GAAA,EAAQ+E,CAAE,CAAAD,KAAA,CAAMmG,SAAS,CAAE,CACjD,CAEJ,CAEC,EAAA1M,IAAA,KAAS,OAAW,IAAAkC,KAAA,KAAU,MAAU,IAAAsC,uBAAA,mBACtCyF,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,sBAAsB,CAAC,CAAA;GAAA,iBAC1DvB,yBAAA,CAAAsB,aAAA,CAAAoB,uBAAA,EAAApJ,aAAA,CAAA;AACClC,IAAAA,SAAU,EAAA,yBAAA;IACVuL,SAAS,CAAC1G,aAAA;AACVnG,IAAAA,QAAA,EAAAA,QAAA;AACA4L,IAAAA,IAAM,EAAAL,kBAAA;AACNuB,IAAAA,SAAS,SAATA,UAAe;MACb1G,gBAAA,CAAiB,CAACD,aAAa,CAAA,CAAA;AACjC,KAAA;AAAA,GAAA,EACKA,gBAAgBxF,sBAAyB,GAAAD,sBAAA,MAAAsH,MAAA,CAE1C7B,aAAA,GAAgBM,CAAE,CAAAD,KAAA,CAAMuG,WAAW,CAAI,GAAAtG,CAAA,CAAED,KAAM,CAAAwG,WAAW,EAChE,CACF,CAAA,EAGD7K,KAAU,KAAA,MAAA,IAAU0C,oCAClBqF,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,sBAAsB,CAAC,CAAA;GAAA,iBAC1DvB,yBAAA,CAAAsB,aAAA,CAAAiB,mBAAA,EAAAjJ,aAAA,CAAA;AACCoI,IAAAA,IAAM,EAAAL,kBAAA;AACNvL,IAAAA,QAAA,EAAAA,QAAA;AACA8M,IAAAA,SAAS,SAATA,UAAe;AACHhD,MAAAA,SAAA,EAAA,CAAA;AACZ,KAAA;AAAA,GAAA,EACK7J,IAAS,KAAA,MAAA,GAASa,uBAA0B,GAAAD,qBAAA,CAAA,EAEhDZ,IAAS,KAAA,MAAA,GAASwG,CAAE,CAAAD,KAAA,CAAMyG,SAAS,CAAI,GAAAxG,CAAA,CAAED,KAAM,CAAA0G,KAAK,CACvD,CACF,CAEJ,CACF,kBAGDhD,yBAAA,CAAAsB,aAAA,CAAA,KAAA,EAAA;AAAIlK,IAAAA,SAAA,EAAW6J,SAAU,CAAA,CAACM,wBAAW,EAAA,OAAO,GAAG,CAACA,wBAAA,EAAA,SAAA,CAAAzD,MAAA,CAAqB/H,IAAA,CAAO,CAAA,CAAA;AAAA,GAAA,iBAC1EiK,yBAAA,CAAAsB,aAAA,CAAA,OAAA,EAAA;AAAMlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,OAAO,CAAC,CAAA;AAE7C,GAAA,EAAA7E,aAAA,CAAc9G,MAAS,GAAA,CAAA,mBACrBoK,yBAAA,CAAAsB,aAAA,CAAA,OAAA,EAAA;AAAMlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,YAAY,CAAC,CAAA;AAAA,GAAA,iBAClDvB,yBAAA,CAAAsB,aAAA,CAAA,IAAA,EAAA;AAAGlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,gBAAgB,CAAC,CAAA;AAAA,GAAA,EACnD7E,aAAc,CAAAkF,GAAA,CAAI,UAACC,IAAA,EAAA;AAAA,IAAA,sBACjB7B,yBAAA,CAAAsB,aAAA,CAAA,IAAA,EAAA;MAAG2B,KAAKpB,IAAK,CAAA1E,GAAA;AAAK/F,MAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,iBAAiB,CAAC,CAAA;KAAA,EACnEvJ,QAAQ,OAAOA,IAAA,KAAS,aAAaA,IAAK,CAAA;MAAEmF,KAAK0E,IAAK,CAAA1E,GAAAA;AAAI,KAAC,CAAI,GAAA0E,IAAA,CAAKzE,IACvE,CACD,CAAA;AAAA,GAAA,CACH,CACF,CAGD,EAAArH,IAAA,KAAS,0BACPiK,yBAAA,CAAAsB,aAAA,CAAA,OAAA,EAAA;AAAMlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,YAAY,CAAC,CAAA;GAAA,EAClDjC,QAAS,CAAAsC,GAAA,CAAI,UAACsB,OAAA,EAASC;0BACrBnD,yBAAA,CAAAsB,aAAA,CAAA,IAAA,EAAA;AAAG2B,MAAAA,GAAA,EAAK7C,OAAO+C,YAAY,CAAA;AAAG/L,MAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,gBAAgB,CAAC,CAAA;KAAA,EAC9E2B,OAAQ,CAAAtB,GAAA,CAAI,UAACwB,QAAA,EAAUC,aAAkB,EAAA;AAEpC,MAAA,IAAA,CAACpH,iBAAiB,CAAC,CAAA,EAAG,CAAC,CAAE,CAAAqH,OAAA,CAAQF,QAAS,CAAAjG,GAAG,CAAK,IAAA,CAAA,EAAU,OAAA,IAAA,CAAA;AAE1D,MAAA,IAAAoG,KAAA,GAAQH,SAASzC,aAAkB,KAAAQ,WAAA,CAAA;AACzC,MAAA,sBACGnB,yBAAA,CAAAsB,aAAA,CAAAkC,oCAAA,EAAA;AACCP,QAAAA,GAAK,EAAAI,aAAA;AACLtN,QAAAA,IAAA,EAAAA,IAAA;AACAkC,QAAAA,KAAA,EAAAA,KAAA;AACAH,QAAAA,IAAA,EAAAA,IAAA;AACA6H,QAAAA,QAAU,EAAAyD,QAAA;AACVrL,QAAAA,UAAA,EAAAA,UAAA;AACAqB,QAAAA,YAAA,EAAAA,YAAA;QACAqK,WAAWL,QAAS,CAAAK,SAAA;AACpBF,QAAAA,KAAA,EAAAA,KAAA;AACAG,QAAAA,UAAA,EAAYN,SAASO,QAAa,KAAA,CAAA;AAClClE,QAAAA,kBAAA,EAAAA,kBAAA;AACA5G,QAAAA,WAAa,EAAA,SAAbA,WAAaA,CAACyH,KAAU,EAAA;AAAA,UAAA,OAAAI,SAAA,CAAUJ,OAAO8C,QAAQ,CAAA,CAAA;AAAA,SAAA;AACjDrK,QAAAA,iBAAmB,EAAA,SAAnBA,iBAAmBA,CAACuH,KAAU,EAAA;AAAA,UAAA,OAAAM,eAAA,CAAgBN,OAAO8C,QAAQ,CAAA,CAAA;AAAA,SAAA;AAC7DnK,QAAAA,gBAAkB,EAAA,SAAlBA,gBAAkBA,CAACqH,KAAU,EAAA;AAAA,UAAA,OAAAO,cAAA,CAAeP,OAAO8C,QAAQ,CAAA,CAAA;AAAA,SAAA;AAC7D,OAAA,CAAA,CAAA;AAEJ,KAAC,CACH,CACD,CAAA;AAAA,GAAA,CACH,CAGD,EAAArN,IAAA,KAAS,yBACPiK,yBAAA,CAAAsB,aAAA,CAAA,OAAA,EAAA;AAAMlK,IAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,YAAY,CAAC,CAAA;GAAA,EAClD1C,SAAU,CAAA+C,GAAA,CAAI,UAACgC,QAAA,EAAUC;0BACvB7D,yBAAA,CAAAsB,aAAA,CAAA,IAAA,EAAA;AAAG2B,MAAAA,GAAA,EAAK7C,OAAOyD,aAAa,CAAA;AAAGzM,MAAAA,SAAW,EAAA6J,SAAA,CAAU,CAACM,wBAAA,EAAW,gBAAgB,CAAC,CAAA;KAAA,EAC/EqC,QAAS,CAAAhC,GAAA,CAAI,UAACkC,SAAA,EAAWC,cAAmB,EAAA;MAC3C,IAAMR,KAAQ,GAAAO,SAAA,CAAUnD,aAAc,CAAAqD,UAAA,CAAW5C,YAAY,CAAA,CAAA;AAC7D,MAAA,sBACGpB,yBAAA,CAAAsB,aAAA,CAAAkC,oCAAA,EAAA;AACCP,QAAAA,GAAK,EAAAc,cAAA;AACLhO,QAAAA,IAAA,EAAAA,IAAA;AACAkC,QAAAA,KAAA,EAAAA,KAAA;AACAH,QAAAA,IAAA,EAAAA,IAAA;AACA6H,QAAAA,QAAU,EAAAmE,SAAA;AACV/L,QAAAA,UAAA,EAAAA,UAAA;AACAqB,QAAAA,YAAA,EAAAA,YAAA;QACAqK,WAAWK,SAAU,CAAAL,SAAA;AACrBF,QAAAA,KAAA,EAAAA,KAAA;AACA9D,QAAAA,kBAAA,EAAAA,kBAAA;AACA5G,QAAAA,WAAa,EAAA,SAAbA,WAAaA,CAACyH,KAAU,EAAA;AAAA,UAAA,OAAAI,SAAA,CAAUJ,OAAOwD,SAAS,CAAA,CAAA;AAAA,SAAA;AAClD/K,QAAAA,iBAAmB,EAAA,SAAnBA,iBAAmBA,CAACuH,KAAU,EAAA;AAAA,UAAA,OAAAM,eAAA,CAAgBN,OAAOwD,SAAS,CAAA,CAAA;AAAA,SAAA;AAC9D7K,QAAAA,gBAAkB,EAAA,SAAlBA,gBAAkBA,CAACqH,KAAU,EAAA;AAAA,UAAA,OAAAO,cAAA,CAAeP,OAAOwD,SAAS,CAAA,CAAA;AAAA,SAAA;AAC9D,OAAA,CAAA,CAAA;AAEJ,KAAC,CACH,CACD,CAAA;GACH,CAAA,CAEJ,CACF,CACF,CAAA,CAAA;AAEJ,CAAC,EAAA;AAEDjN,QAAA,CAASoN,WAAc,GAAA,UAAA;;;;"}