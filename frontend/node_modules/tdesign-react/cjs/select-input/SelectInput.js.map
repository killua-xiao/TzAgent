{"version":3,"file":"SelectInput.js","sources":["../../../components/select-input/SelectInput.tsx"],"sourcesContent":["import React, { useRef, useImperativeHandle } from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../hooks/useConfig';\nimport Popup, { PopupRef, PopupVisibleChangeContext } from '../popup';\nimport useSingle from './useSingle';\nimport useMultiple from './useMultiple';\nimport useOverlayInnerStyle from './useOverlayInnerStyle';\nimport { TdSelectInputProps } from './type';\nimport { StyledProps } from '../common';\nimport { selectInputDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport { InputRef } from '../input';\n\nexport interface SelectInputProps extends TdSelectInputProps, StyledProps {\n  updateScrollTop?: (content: HTMLDivElement) => void;\n  options?: any[]; // 参数穿透options, 给SelectInput/SelectInput 自定义选中项呈现的内容和多选状态下设置折叠项内容\n}\n\nconst SelectInput = React.forwardRef<Partial<PopupRef & InputRef>, SelectInputProps>((originalProps, ref) => {\n  const props = useDefaultProps<SelectInputProps>(originalProps, selectInputDefaultProps);\n  const selectInputRef = useRef<PopupRef>(null);\n  const selectInputWrapRef = useRef<HTMLDivElement>(null);\n  const { classPrefix: prefix } = useConfig();\n  const { multiple, value, popupVisible, popupProps, borderless, disabled } = props;\n  const { commonInputProps, inputRef, singleInputValue, onInnerClear, renderSelectSingle } = useSingle(props);\n  const { tagInputRef, multipleInputValue, renderSelectMultiple } = useMultiple(props);\n\n  const { tOverlayInnerStyle, innerPopupVisible, onInnerPopupVisibleChange } = useOverlayInnerStyle(props, {\n    afterHidePopup: onInnerBlur,\n  });\n\n  const popupClasses = classNames([\n    props.className,\n    `${prefix}-select-input`,\n    {\n      [`${prefix}-select-input--borderless`]: borderless,\n      [`${prefix}-select-input--multiple`]: multiple,\n      [`${prefix}-select-input--popup-visible`]: popupVisible ?? innerPopupVisible,\n      [`${prefix}-select-input--empty`]: value instanceof Array ? !value.length : !value,\n    },\n  ]);\n\n  useImperativeHandle(ref, () => ({\n    ...(selectInputRef.current || {}),\n    ...(inputRef.current || {}),\n    ...(tagInputRef.current || {}),\n  }));\n\n  // 浮层显示的受控与非受控\n  const visibleProps = { visible: popupVisible ?? innerPopupVisible };\n\n  // SelectInput.blur is not equal to Input or TagInput, example: click popup panel.\n  // if trigger blur on click popup panel, filter data of tree select can not be checked.\n  function onInnerBlur(ctx: PopupVisibleChangeContext) {\n    const inputValue = props.multiple ? multipleInputValue : singleInputValue;\n    const params: Parameters<TdSelectInputProps['onBlur']>[1] = { e: ctx.e, inputValue };\n    props.onBlur?.(props.value, params);\n  }\n\n  // TODO: Popup trigger need to support array. both click and focus can open panel\n  const mainContent = (\n    <div className={popupClasses} style={props.style}>\n      <Popup\n        ref={selectInputRef}\n        trigger={popupProps?.trigger || 'click'}\n        placement=\"bottom-left\"\n        content={props.panel}\n        hideEmptyPopup={true}\n        onVisibleChange={onInnerPopupVisibleChange}\n        updateScrollTop={props.updateScrollTop}\n        {...visibleProps}\n        {...popupProps}\n        disabled={disabled}\n        overlayInnerStyle={tOverlayInnerStyle}\n      >\n        {multiple\n          ? renderSelectMultiple({\n              commonInputProps,\n              onInnerClear,\n              popupVisible: visibleProps.visible,\n              allowInput: props.allowInput,\n            })\n          : renderSelectSingle(visibleProps.visible)}\n      </Popup>\n    </div>\n  );\n\n  if (!props.tips) {\n    return mainContent;\n  }\n\n  return (\n    <div ref={selectInputWrapRef} className={`${prefix}-select-input__wrap`}>\n      {mainContent}\n      {props.tips && (\n        <div className={`${prefix}-input__tips ${prefix}-input__tips--${props.status || 'normal'}`}>{props.tips}</div>\n      )}\n    </div>\n  );\n});\n\nSelectInput.displayName = 'SelectInput';\n\nexport default SelectInput;\n"],"names":["SelectInput","React","forwardRef","originalProps","ref","props","useDefaultProps","selectInputDefaultProps","selectInputRef","useRef","selectInputWrapRef","_useConfig","useConfig","prefix","classPrefix","multiple","value","popupVisible","popupProps","borderless","disabled","_useSingle","useSingle","commonInputProps","inputRef","singleInputValue","onInnerClear","renderSelectSingle","_useMultiple","useMultiple","tagInputRef","multipleInputValue","renderSelectMultiple","_useOverlayInnerStyle","useOverlayInnerStyle","afterHidePopup","onInnerBlur","tOverlayInnerStyle","innerPopupVisible","onInnerPopupVisibleChange","popupClasses","classNames","className","concat","_defineProperty","Array","length","useImperativeHandle","_objectSpread","current","visibleProps","visible","ctx","_props$onBlur","inputValue","params","e","onBlur","call","mainContent","createElement","style","Popup","trigger","placement","content","panel","hideEmptyPopup","onVisibleChange","updateScrollTop","overlayInnerStyle","allowInput","tips","status","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBMA,IAAAA,WAAc,gBAAAC,yBAAA,CAAMC,UAA2D,CAAA,UAACC,eAAeC,GAAQ,EAAA;AACrG,EAAA,IAAAC,KAAA,GAAQC,gCAAkC,CAAAH,aAAA,EAAeI,gDAAuB,CAAA,CAAA;AAChF,EAAA,IAAAC,cAAA,GAAiBC,aAAiB,IAAI,CAAA,CAAA;AACtC,EAAA,IAAAC,kBAAA,GAAqBD,aAAuB,IAAI,CAAA,CAAA;AACtD,EAAA,IAAAE,UAAA,GAAgCC,0BAAU,EAAA;IAArBC,MAAO,GAAAF,UAAA,CAApBG,WAAA,CAAA;AACR,EAAA,IAAQC,QAAU,GAA0DV,KAAA,CAApEU,QAAU;IAAAC,KAAA,GAA0DX,KAAA,CAA1DW,KAAA;IAAOC,eAAmDZ,KAAA,CAAnDY;IAAcC,UAAY,GAAyBb,KAAA,CAArCa,UAAY;IAAAC,UAAA,GAAyBd,KAAA,CAAzBc,UAAA;IAAYC,WAAaf,KAAA,CAAbe;AACzD,EAAA,IAAAC,UAAA,GAAqFC,iCAAUjB,KAAK,CAAA;IAAlGkB,8BAAAA;IAAkBC,QAAU,GAAAH,UAAA,CAAVG,QAAU;IAAAC,gBAAA,GAAAJ,UAAA,CAAAI,gBAAA;IAAkBC,0BAAAA;IAAcC,kBAAmB,GAAAN,UAAA,CAAnBM,kBAAmB,CAAA;AACvF,EAAA,IAAAC,YAAA,GAAkEC,mCAAYxB,KAAK,CAAA;IAA3EyB,WAAa,GAAAF,YAAA,CAAbE,WAAa;IAAAC,kBAAA,GAAAH,YAAA,CAAAG,kBAAA;IAAoBC,oBAAqB,GAAAJ,YAAA,CAArBI,oBAAqB,CAAA;AAE9D,EAAA,IAAAC,qBAAA,GAA6EC,4CAAqB7B,KAAO,EAAA;AACvG8B,MAAAA,cAAgB,EAAAC,WAAAA;AAClB,KAAC,CAAA;IAFOC,kBAAoB,GAAAJ,qBAAA,CAApBI,kBAAoB;IAAAC,iBAAA,GAAAL,qBAAA,CAAAK,iBAAA;IAAmBC,yBAA0B,GAAAN,qBAAA,CAA1BM,yBAA0B,CAAA;AAIzE,EAAA,IAAMC,eAAeC,8BAAW,CAAA,CAC9BpC,KAAM,CAAAqC,SAAA,EAAAC,EAAAA,CAAAA,MAAA,CACH9B,MAAA,EAAA+B,eAAAA,CAAAA,EAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAD,EAAAA,EAAAA,EAAAA,CAAAA,MAAA,CAEG9B,MAAoC,EAAAM,2BAAAA,CAAAA,EAAAA,UAAA,CAAAwB,EAAAA,EAAAA,CAAAA,MAAA,CACpC9B,MAAkC,EAAAE,yBAAAA,CAAAA,EAAAA,QAAA,CAAA4B,EAAAA,EAAAA,CAAAA,MAAA,CAClC9B,MAAA,EAAuCI,8BAAAA,CAAAA,EAAAA,YAAgB,KAAhBA,IAAAA,IAAAA,YAAgB,KAAhBA,KAAAA,CAAAA,GAAAA,YAAgB,GAAAqB,iBAAA,CAAAK,EAAAA,EAAAA,CAAAA,MAAA,CACvD9B,MAA+B,EAAAG,sBAAAA,CAAAA,EAAAA,KAAA,YAAiB6B,QAAQ,CAAC7B,KAAA,CAAM8B,SAAS,CAAC9B,KAAA,EAEhF,CAAA,CAAA;EAED+B,yBAAA,CAAoB3C,KAAK,YAAA;IAAA,OAAA4C,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACnBxC,cAAe,CAAAyC,OAAA,IAAW,EAAC,GAC3BzB,QAAS,CAAAyB,OAAA,IAAW,EAAC,CACrBnB,EAAAA,WAAY,CAAAmB,OAAA,IAAW,EAAC,CAAA,CAAA;AAAA,GAC5B,CAAA,CAAA;AAGF,EAAA,IAAMC,YAAe,GAAA;AAAEC,IAAAA,OAAS,EAAAlC,YAAA,KAAA,IAAA,IAAAA,YAAA,KAAA,KAAA,CAAA,GAAAA,YAAA,GAAgBqB,iBAAAA;GAAkB,CAAA;EAIlE,SAASF,YAAYgB,GAAgC,EAAA;AAAA,IAAA,IAAAC,aAAA,CAAA;IAC7C,IAAAC,UAAA,GAAajD,KAAM,CAAAU,QAAA,GAAWgB,kBAAqB,GAAAN,gBAAA,CAAA;AACzD,IAAA,IAAM8B,MAAsD,GAAA;MAAEC,CAAG,EAAAJ,GAAA,CAAII;AAAGF,MAAAA,UAAW,EAAXA,UAAAA;KAAW,CAAA;AAC7E,IAAA,CAAAD,aAAA,GAAAhD,KAAA,CAAAoD,MAAA,MAAA,IAAA,IAAAJ,aAAA,KAAAA,KAAAA,CAAAA,IAAAA,aAAA,CAAAK,IAAA,CAAArD,KAAA,EAASA,KAAM,CAAAW,KAAA,EAAOuC,MAAM,CAAA,CAAA;AACpC,GAAA;EAGA,IAAMI,6BACH1D,yBAAA,CAAA2D,aAAA,CAAA,KAAA,EAAA;AAAIlB,IAAAA,SAAW,EAAAF,YAAA;IAAcqB,OAAOxD,KAAM,CAAAwD,KAAAA;AAAA,GAAA,iBACxC5D,yBAAA,CAAA2D,aAAA,CAAAE,iBAAA,EAAAd,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAA;AACC5C,IAAAA,GAAK,EAAAI,cAAA;IACLuD,OAAA,EAAS,CAAA7C,eAAAA,IAAAA,IAAAA,iCAAAA,WAAY6C,OAAW,KAAA,OAAA;AAChCC,IAAAA,SAAU,EAAA,aAAA;IACVC,SAAS5D,KAAM,CAAA6D,KAAA;AACfC,IAAAA,cAAgB,EAAA,IAAA;AAChBC,IAAAA,eAAiB,EAAA7B,yBAAA;IACjB8B,iBAAiBhE,KAAM,CAAAgE,eAAAA;GACnBnB,EAAAA,YAAA,GACAhC,UAAA,CAAA,EAAA,EAAA,EAAA;AACJE,IAAAA,QAAA,EAAAA,QAAA;AACAkD,IAAAA,iBAAmB,EAAAjC,kBAAAA;GAElBtB,CAAAA,EAAAA,WACGiB,oBAAqB,CAAA;AACnBT,IAAAA,gBAAA,EAAAA,gBAAA;AACAG,IAAAA,YAAA,EAAAA,YAAA;IACAT,cAAciC,YAAa,CAAAC,OAAA;IAC3BoB,YAAYlE,KAAM,CAAAkE,UAAAA;GACnB,CACD,GAAA5C,kBAAA,CAAmBuB,YAAa,CAAAC,OAAO,CAC7C,CACF,CAAA,CAAA;AAGE,EAAA,IAAA,CAAC9C,MAAMmE,IAAM,EAAA;AACR,IAAA,OAAAb,WAAA,CAAA;AACT,GAAA;AAEA,EAAA,sBACG1D,yBAAA,CAAA2D,aAAA,CAAA,KAAA,EAAA;AAAIxD,IAAAA,GAAK,EAAAM,kBAAA;IAAoBgC,qBAAc7B,MAAA,EAAA,qBAAA,CAAA;AACzC,GAAA,EAAA8C,WAAA,EACAtD,KAAM,CAAAmE,IAAA,mBACJvE,yBAAA,CAAA2D,aAAA,CAAA,KAAA,EAAA;AAAIlB,IAAAA,SAAW,EAAAC,EAAAA,CAAAA,MAAA,CAAG9B,MAAsB,mBAAA8B,MAAA,CAAA9B,MAAA,EAAA,gBAAA,CAAA,CAAA8B,MAAA,CAAuBtC,MAAMoE,MAAU,IAAA,QAAA,CAAA;AAAa,GAAA,EAAApE,KAAA,CAAMmE,IAAK,CAE5G,CAAA,CAAA;AAEJ,CAAC,EAAA;AAEDxE,WAAA,CAAY0E,WAAc,GAAA,aAAA;;;;"}