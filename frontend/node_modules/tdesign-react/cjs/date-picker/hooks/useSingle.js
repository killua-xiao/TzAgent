/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-0006fcfa.js');
var slicedToArray = require('../../_chunks/dep-8e4d656d.js');
var classNames = require('classnames');
var dayjs = require('dayjs');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var format = require('../../_chunks/dep-0227e11a.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var datePicker_hooks_useSingleValue = require('./useSingleValue.js');
var omit = require('../../_chunks/dep-d5e8c967.js');
require('../../_chunks/dep-667ac7af.js');
require('../../_chunks/dep-00b49251.js');
require('../../_chunks/dep-5b5ab11b.js');
require('../../_chunks/dep-1d328330.js');
require('../../_chunks/dep-59671c87.js');
require('../../_chunks/dep-4ed9eda4.js');
require('../../_chunks/dep-25585736.js');
require('../../_chunks/dep-64577888.js');
require('../../_chunks/dep-62e73936.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-1df1dad8.js');
require('../../_chunks/dep-f32c03f1.js');
require('../../_chunks/dep-31c4bc3d.js');
require('../../_chunks/dep-eea2872a.js');
require('../../_chunks/dep-71455db7.js');
require('../../_chunks/dep-9e5a468d.js');
require('../../_chunks/dep-ec8d2dca.js');
require('../../_chunks/dep-fc596d16.js');
require('../../_chunks/dep-f26edb7b.js');
require('../../_chunks/dep-f33c1939.js');
require('../../_chunks/dep-21ece627.js');
require('../../_chunks/dep-25e4aa84.js');
require('../../_chunks/dep-e1fbe1c3.js');
require('../../_chunks/dep-df2b541f.js');
require('../../_chunks/dep-edd366db.js');
require('../../_chunks/dep-a56c4939.js');
require('../../_chunks/dep-6c297e20.js');
require('../../_chunks/dep-b7ad4d54.js');
require('../../_chunks/dep-a2cb9299.js');
require('../../_chunks/dep-f981815b.js');
require('../../hooks/useControlled.js');
require('../../_util/noop.js');
require('../../_chunks/dep-66114ce9.js');
require('../../_chunks/dep-62d1dd66.js');
require('../../_chunks/dep-7a148045.js');
require('../../_chunks/dep-255ceed8.js');
require('../../_chunks/dep-79629634.js');
require('../../_chunks/dep-a48c7e8b.js');
require('../../_chunks/dep-3d4656ee.js');
require('../../_chunks/dep-0ffc9d96.js');
require('../../_chunks/dep-efe6d243.js');
require('../../_chunks/dep-4b18243f.js');
require('../../_chunks/dep-bff2c990.js');
require('../../_chunks/dep-9a375a19.js');
require('../../_chunks/dep-3398c1f2.js');
require('../../_chunks/dep-d915c90f.js');
require('../../_chunks/dep-373af7a2.js');
require('../../_chunks/dep-fc29b8b5.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useSingleInput(props) {
  var _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps2, _props$popupProps3;
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix,
    globalDatePickerConfig = _useConfig.datePicker;
  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
      CalendarIcon: tdesignIconsReact.CalendarIcon
    }),
    CalendarIcon = _useGlobalIcon.CalendarIcon;
  var name = "".concat(classPrefix, "-date-picker");
  var _getDefaultFormat = format.getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.multiple ? false : props.enableTimePicker
    }),
    format$1 = _getDefaultFormat.format,
    valueType = _getDefaultFormat.valueType,
    timeFormat = _getDefaultFormat.timeFormat;
  var inputRef = React.useRef(null);
  var _useSingleValue = datePicker_hooks_useSingleValue["default"](props),
    value = _useSingleValue.value,
    onChange = _useSingleValue.onChange,
    time = _useSingleValue.time,
    setTime = _useSingleValue.setTime,
    month = _useSingleValue.month,
    setMonth = _useSingleValue.setMonth,
    year = _useSingleValue.year,
    setYear = _useSingleValue.setYear,
    cacheValue = _useSingleValue.cacheValue,
    setCacheValue = _useSingleValue.setCacheValue;
  var _useState = React.useState(false),
    _useState2 = slicedToArray._slicedToArray(_useState, 2),
    popupVisible = _useState2[0],
    setPopupVisible = _useState2[1];
  var _useState3 = React.useState(false),
    _useState4 = slicedToArray._slicedToArray(_useState3, 2),
    isHoverCell = _useState4[0],
    setIsHoverCell = _useState4[1];
  var _useState5 = React.useState(function () {
      return format.formatDate(value, {
        format: format$1
      });
    }),
    _useState6 = slicedToArray._slicedToArray(_useState5, 2),
    inputValue = _useState6[0],
    setInputValue = _useState6[1];
  var handlePopupInvisible = function handlePopupInvisible() {
    var _props$popupProps, _props$popupProps$onV;
    setPopupVisible(false);
    (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 || (_props$popupProps$onV = _props$popupProps.onVisibleChange) === null || _props$popupProps$onV === void 0 || _props$popupProps$onV.call(_props$popupProps, false, {});
  };
  var inputProps = _objectSpread(_objectSpread({}, props.inputProps), {}, {
    ref: inputRef,
    size: props.size,
    clearable: props.clearable,
    prefixIcon: props.prefixIcon,
    allowInput: props.allowInput,
    placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
    suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null),
    className: classNames__default["default"](defineProperty._defineProperty({}, "".concat(name, "__input--placeholder"), isHoverCell)),
    onClear: function onClear(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      handlePopupInvisible();
      onChange("", {
        dayjsValue: dayjs__default["default"](),
        trigger: "clear"
      });
    },
    onBlur: function onBlur(val, _ref2) {
      var _props$onBlur;
      var e = _ref2.e;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
        value: val,
        e: e
      });
    },
    onFocus: function onFocus(_, _ref3) {
      var _props$onFocus;
      var e = _ref3.e;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
        value: value,
        e: e
      });
    },
    onChange: function onChange(val) {
      setInputValue(val);
      if (!format.isValidDate(val, format$1)) return;
      setCacheValue(val);
      var newMonth = format.parseToDayjs(val, format$1).month();
      var newYear = format.parseToDayjs(val, format$1).year();
      var newTime = format.formatTime(val, format$1, timeFormat, props.defaultTime);
      !Number.isNaN(newYear) && setYear(newYear);
      !Number.isNaN(newMonth) && setMonth(newMonth);
      !Number.isNaN(newTime) && setTime(newTime);
    },
    onEnter: function onEnter(val) {
      if (!val) {
        onChange("", {
          dayjsValue: dayjs__default["default"](),
          trigger: "enter"
        });
        handlePopupInvisible();
        return;
      }
      if (!format.isValidDate(val, format$1) && !format.isValidDate(value, format$1)) return;
      handlePopupInvisible();
      if (format.isValidDate(val, format$1)) {
        onChange(format.formatDate(val, {
          format: format$1,
          targetFormat: valueType
        }), {
          dayjsValue: format.parseToDayjs(val, format$1),
          trigger: "enter"
        });
      } else if (format.isValidDate(value, format$1)) {
        setInputValue(format.formatDate(value, {
          format: format$1
        }));
      } else {
        setInputValue("");
      }
    }
  });
  var popupProps = _objectSpread(_objectSpread({
    expandAnimation: true
  }, props.popupProps), {}, {
    trigger: "mousedown",
    overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
      width: "auto"
    },
    overlayClassName: classNames__default["default"]((_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 ? void 0 : _props$popupProps3.overlayClassName, "".concat(name, "__panel-container")),
    onVisibleChange: function onVisibleChange(visible, context) {
      var _props$popupProps4, _props$popupProps4$on;
      if (props.disabled) return;
      (_props$popupProps4 = props.popupProps) === null || _props$popupProps4 === void 0 || (_props$popupProps4$on = _props$popupProps4.onVisibleChange) === null || _props$popupProps4$on === void 0 || _props$popupProps4$on.call(_props$popupProps4, visible, context);
      if (context.trigger === "trigger-element-mousedown") {
        return setPopupVisible(true);
      }
      setPopupVisible(visible);
    }
  });
  var tagInputProps = {};
  if (props.multiple) {
    var _props$placeholder2, _props$suffixIcon2;
    inputProps = omit.omit(inputProps, ["ref", "className", "placeholder", "suffixIcon"]);
    popupProps = _objectSpread(_objectSpread({}, popupProps), {}, {
      trigger: "click"
    });
    tagInputProps = {
      clearable: props.clearable,
      placeholder: (_props$placeholder2 = props.placeholder) !== null && _props$placeholder2 !== void 0 ? _props$placeholder2 : globalDatePickerConfig.placeholder[props.mode],
      suffixIcon: (_props$suffixIcon2 = props.suffixIcon) !== null && _props$suffixIcon2 !== void 0 ? _props$suffixIcon2 : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null)
    };
  }
  React.useEffect(function () {
    if (!value) {
      setInputValue("");
      return;
    }
    if (!format.isValidDate(value, format$1)) return;
    setInputValue(format.formatDate(value, {
      format: format$1
    }));
  }, [value]);
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    inputValue: inputValue,
    popupVisible: popupVisible,
    inputProps: inputProps,
    popupProps: popupProps,
    tagInputProps: tagInputProps,
    inputRef: inputRef,
    cacheValue: cacheValue,
    onChange: onChange,
    setYear: setYear,
    setMonth: setMonth,
    setTime: setTime,
    setIsHoverCell: setIsHoverCell,
    setInputValue: setInputValue,
    setPopupVisible: setPopupVisible,
    setCacheValue: setCacheValue
  };
}

exports["default"] = useSingleInput;
//# sourceMappingURL=useSingle.js.map
