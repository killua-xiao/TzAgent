{"version":3,"file":"FormItem.js","sources":["../../../components/form/FormItem.tsx"],"sourcesContent":["import React, { forwardRef, ReactNode, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport {\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n} from 'tdesign-icons-react';\nimport { flattenDeep, get, isEqual, isFunction, isObject, isString, merge, set, unset } from 'lodash-es';\nimport { StyledProps } from '../common';\nimport useConfig from '../hooks/useConfig';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { ValidateStatus } from './const';\nimport { formItemDefaultProps } from './defaultProps';\nimport { useFormContext, useFormListContext } from './FormContext';\nimport { parseMessage, validate as validateModal } from './formModel';\nimport { HOOK_MARK } from './hooks/useForm';\nimport useFormItemInitialData, { ctrlKeyMap } from './hooks/useFormItemInitialData';\nimport useFormItemStyle from './hooks/useFormItemStyle';\nimport type {\n  FormInstanceFunctions,\n  FormItemValidateMessage,\n  FormRule,\n  NamePath,\n  TdFormItemProps,\n  ValueType,\n} from './type';\nimport { calcFieldValue } from './utils';\n\nexport interface FormItemProps extends TdFormItemProps, StyledProps {\n  children?: React.ReactNode | React.ReactNode[] | ((form: FormInstanceFunctions) => React.ReactElement);\n}\n\nexport interface FormItemInstance {\n  name?: NamePath;\n  isUpdated?: boolean;\n  value?: any;\n  getValue?: Function;\n  setValue?: Function;\n  setField?: Function;\n  validate?: Function;\n  resetField?: Function;\n  setValidateMessage?: Function;\n  getValidateMessage?: Function;\n  resetValidate?: Function;\n  validateOnly?: Function;\n  isFormList?: boolean;\n}\n\nconst FormItem = forwardRef<FormItemInstance, FormItemProps>((originalProps, ref) => {\n  const [locale, t] = useLocaleReceiver('form');\n  const { classPrefix, form: globalFormConfig } = useConfig();\n  const { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon } = useGlobalIcon({\n    CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n    CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n    ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n  });\n  const {\n    form,\n    colon,\n    layout,\n    requiredMark: requiredMarkFromContext,\n    requiredMarkPosition,\n    labelAlign: labelAlignFromContext,\n    labelWidth: labelWidthFromContext,\n    showErrorMessage: showErrorMessageFromContext,\n    disabled: disabledFromContext,\n    resetType: resetTypeFromContext,\n    rules: rulesFromContext,\n    statusIcon: statusIconFromContext,\n    errorMessage,\n    formMapRef,\n    onFormItemValueChange,\n  } = useFormContext();\n\n  const { name: formListName, rules: formListRules, formListMapRef, form: formOfFormList } = useFormListContext();\n  const props = useDefaultProps<FormItemProps>(originalProps, formItemDefaultProps);\n\n  const {\n    children,\n    style,\n    label,\n    name,\n    status,\n    tips,\n    help,\n    valueFormat,\n    initialData,\n    className,\n    shouldUpdate,\n    successBorder,\n    statusIcon = statusIconFromContext,\n    rules: innerRules = getInnerRules(name, rulesFromContext, formListName, formListRules),\n    labelWidth = labelWidthFromContext,\n    labelAlign = labelAlignFromContext,\n    requiredMark = requiredMarkFromContext,\n  } = props;\n\n  const { getDefaultInitialData } = useFormItemInitialData(name);\n\n  const [, forceUpdate] = useState({}); // custom render state\n  const [freeShowErrorMessage, setFreeShowErrorMessage] = useState(undefined);\n  const [errorList, setErrorList] = useState([]);\n  const [successList, setSuccessList] = useState([]);\n  const [verifyStatus, setVerifyStatus] = useState('validating');\n  const [resetValidating, setResetValidating] = useState(false);\n  const [needResetField, setNeedResetField] = useState(false);\n  const [formValue, setFormValue] = useState(() => {\n    const fieldName = flattenDeep([formListName, name]);\n    const storeValue = get(form?.store, fieldName);\n    // if (!storeValue && formListName) return; // TODO 针对新增空的动态表单情况，避免回填默认值\n    return (\n      storeValue ??\n      getDefaultInitialData({\n        children,\n        initialData,\n      })\n    );\n  });\n\n  const formItemRef = useRef<FormItemInstance>(null); // 当前 formItem 实例\n  const innerFormItemsRef = useRef([]);\n  const shouldEmitChangeRef = useRef(false); // onChange 冒泡开关\n  const isUpdatedRef = useRef(false); // 校验开关\n  const shouldValidate = useRef(false); // 校验开关\n  const valueRef = useRef(formValue); // 当前最新值\n  const errorListMapRef = useRef(new Map());\n\n  const isSameForm = useMemo(() => isEqual(form, formOfFormList), [form, formOfFormList]); // 用于处理 Form 嵌套的情况\n  const snakeName = []\n    .concat(isSameForm ? formListName : undefined, name)\n    .filter((item) => item !== undefined)\n    .toString(); // 转化 name\n\n  const errorMessages = useMemo(() => errorMessage ?? globalFormConfig.errorMessage, [errorMessage, globalFormConfig]);\n\n  const showErrorMessage = useMemo(() => {\n    if (typeof freeShowErrorMessage === 'boolean') return freeShowErrorMessage;\n    if (typeof props.showErrorMessage === 'boolean') return props.showErrorMessage;\n    return showErrorMessageFromContext;\n  }, [freeShowErrorMessage, props.showErrorMessage, showErrorMessageFromContext]);\n\n  const { formItemClass, formItemLabelClass, contentClass, labelStyle, contentStyle, helpNode, extraNode } =\n    useFormItemStyle({\n      className,\n      help,\n      tips,\n      snakeName,\n      status,\n      successBorder,\n      errorList,\n      successList,\n      layout,\n      verifyStatus,\n      label,\n      labelWidth,\n      labelAlign,\n      requiredMark,\n      requiredMarkPosition,\n      showErrorMessage,\n      innerRules,\n    });\n\n  // 更新 form 表单字段\n  const updateFormValue = (newVal: any, validate = true, shouldEmitChange = false) => {\n    const { setPrevStore } = form?.getInternalHooks?.(HOOK_MARK) || {};\n    setPrevStore?.(form?.getFieldsValue?.(true));\n    shouldEmitChangeRef.current = shouldEmitChange;\n    isUpdatedRef.current = true;\n    shouldValidate.current = validate;\n    valueRef.current = newVal;\n\n    let fieldName = [].concat(name);\n    let fieldValue = formValue;\n    if (formListName) {\n      fieldName = [].concat(formListName, name);\n      fieldValue = get(form?.store, fieldName);\n    }\n\n    fieldName = fieldName.filter((item) => item !== undefined);\n\n    if (!fieldName) return;\n    if (isEqual(fieldValue, newVal)) return;\n    set(form?.store, fieldName, newVal);\n    setFormValue(newVal);\n  };\n\n  // 初始化 rules，最终以 formItem 上优先级最高\n  function getInnerRules(name, formRules, formListName, formListRules): FormRule[] {\n    if (Array.isArray(name)) {\n      return get(formRules?.[formListName], name) || get(formListRules, name) || get(formRules, name.join('.')) || [];\n    }\n    return formRules?.[name] || formListRules || [];\n  }\n\n  const renderSuffixIcon = () => {\n    if (statusIcon === false) return null;\n\n    const resultIcon = (iconSlot: ReactNode) => <span className={`${classPrefix}-form__status`}>{iconSlot}</span>;\n\n    const getDefaultIcon = () => {\n      const iconMap = {\n        success: <CheckCircleFilledIcon size=\"25px\" />,\n        error: <CloseCircleFilledIcon size=\"25px\" />,\n        warning: <ErrorCircleFilledIcon size=\"25px\" />,\n      };\n      if (verifyStatus === ValidateStatus.SUCCESS) {\n        return resultIcon(iconMap[verifyStatus]);\n      }\n      if (errorList && errorList[0]) {\n        const type = errorList[0].type || 'error';\n        return resultIcon(iconMap[type]);\n      }\n      return null;\n    };\n\n    if (React.isValidElement(statusIcon)) {\n      // @ts-ignore\n      return resultIcon(React.cloneElement(statusIcon, { style: { color: 'unset' }, ...statusIcon.props }));\n    }\n    if (statusIcon === true) {\n      return getDefaultIcon();\n    }\n\n    return null;\n  };\n\n  async function analysisValidateResult(trigger) {\n    const result = {\n      successList: [],\n      errorList: [],\n      rules: [],\n      resultList: [],\n      allowSetValue: false,\n    };\n    result.rules = trigger === 'all' ? innerRules : innerRules.filter((item) => (item.trigger || 'change') === trigger);\n    if (!result.rules?.length) {\n      setResetValidating(false);\n      return result;\n    }\n    result.allowSetValue = true;\n    result.resultList = await validateModal(formValue, result.rules);\n    result.errorList = result.resultList\n      .filter((item) => item.result !== true)\n      .map((item) => {\n        Object.keys(item).forEach((key) => {\n          if (!item.message && errorMessages[key]) {\n            // eslint-disable-next-line\n            item.message = parseMessage(errorMessages[key], {\n              validate: item[key],\n              name: isString(label) ? label : String(name),\n            });\n          }\n        });\n        return item;\n      });\n    // 仅有自定义校验方法才会存在 successList\n    result.successList = result.resultList.filter(\n      (item) => item.result === true && item.message && item.type === 'success',\n    );\n\n    return result;\n  }\n\n  async function validate(trigger = 'all', showErrorMessage?: boolean) {\n    if (innerFormItemsRef.current.length) {\n      return innerFormItemsRef.current.map((innerFormItem) => innerFormItem?.validate(trigger, showErrorMessage));\n    }\n\n    setResetValidating(true);\n    // undefined | boolean\n    setFreeShowErrorMessage(showErrorMessage);\n    const {\n      successList: innerSuccessList,\n      errorList: innerErrorList,\n      rules: validateRules,\n      resultList,\n      allowSetValue,\n    } = await analysisValidateResult(trigger);\n\n    // 缓存不同 trigger 下的错误信息 all 包含了所有场景需过滤\n    if (innerErrorList.length && trigger !== 'all') {\n      errorListMapRef.current.set(trigger, innerErrorList);\n    } else {\n      errorListMapRef.current.delete(trigger);\n    }\n\n    // all 校验无错误信息时清空所有错误缓存\n    if (!innerErrorList.length && trigger === 'all') {\n      errorListMapRef.current.clear();\n    }\n\n    const cacheErrorList = [...errorListMapRef.current.values()].flat();\n\n    if (allowSetValue) {\n      setSuccessList(innerSuccessList);\n      setErrorList(cacheErrorList.length ? cacheErrorList : innerErrorList);\n    }\n    // 根据校验结果设置校验状态\n    if (validateRules.length) {\n      let status = ValidateStatus.SUCCESS;\n      if (innerErrorList.length || cacheErrorList.length) {\n        status = innerErrorList?.[0]?.type || cacheErrorList?.[0]?.type || ValidateStatus.ERROR;\n      }\n      setVerifyStatus(status);\n    } else {\n      setVerifyStatus(ValidateStatus.VALIDATING);\n    }\n    // 重置处理\n    if (needResetField) {\n      resetHandler();\n    }\n    setResetValidating(false);\n    return {\n      [snakeName]: innerErrorList.length === 0 ? true : resultList,\n    };\n  }\n\n  async function validateOnly(trigger = 'all') {\n    const { errorList: innerErrorList, resultList } = await analysisValidateResult(trigger);\n\n    return {\n      [snakeName]: innerErrorList.length === 0 ? true : resultList,\n    };\n  }\n\n  // blur 下触发校验\n  function handleItemBlur() {\n    const filterRules = innerRules.filter((item) => item.trigger === 'blur');\n\n    filterRules.length && validate('blur');\n  }\n\n  function getResetValue(resetType: string): ValueType {\n    if (resetType === 'initial') {\n      return getDefaultInitialData({\n        children,\n        initialData,\n      });\n    }\n\n    let emptyValue: ValueType;\n    if (Array.isArray(formValue)) {\n      emptyValue = [];\n    } else if (isObject(formValue)) {\n      emptyValue = {};\n    } else if (isString(formValue)) {\n      emptyValue = '';\n    }\n\n    return emptyValue;\n  }\n\n  function resetField(type: string) {\n    if (typeof name === 'undefined') return;\n\n    const resetType = type || resetTypeFromContext;\n    const resetValue = getResetValue(resetType);\n    // reset 不校验\n    updateFormValue(resetValue, false);\n\n    if (resetValidating) {\n      setNeedResetField(true);\n    } else {\n      resetHandler();\n    }\n  }\n\n  function resetHandler() {\n    setNeedResetField(false);\n    setErrorList([]);\n    setSuccessList([]);\n    setVerifyStatus(ValidateStatus.VALIDATING);\n  }\n\n  function setField(field: { value?: string; status?: ValidateStatus; validateMessage?: FormItemValidateMessage }) {\n    const { value, status, validateMessage } = field;\n    if (typeof status !== 'undefined') {\n      setErrorList(validateMessage ? [validateMessage] : []);\n      setSuccessList(validateMessage ? [validateMessage] : []);\n      setNeedResetField(false);\n      setVerifyStatus(status);\n    }\n    if (typeof value !== 'undefined') {\n      // 手动设置 status 则不需要校验 交给用户判断\n      updateFormValue(value, typeof status === 'undefined' ? true : false, true);\n    }\n  }\n\n  function setValidateMessage(validateMessage: FormItemValidateMessage[]) {\n    if (!validateMessage || !Array.isArray(validateMessage)) return;\n    if (validateMessage.length === 0) {\n      setErrorList([]);\n      setVerifyStatus(ValidateStatus.SUCCESS);\n      return;\n    }\n    setErrorList(validateMessage);\n    const status = validateMessage?.[0]?.type || ValidateStatus.ERROR;\n    setVerifyStatus(status);\n  }\n\n  function getValidateMessage() {\n    return errorList;\n  }\n\n  useEffect(() => {\n    // 注册自定义更新回调\n    if (!shouldUpdate || !form) return;\n\n    const { getPrevStore, registerWatch } = form?.getInternalHooks?.(HOOK_MARK) || {};\n\n    const cancelRegister = registerWatch?.(() => {\n      const currStore = form?.getFieldsValue?.(true) || {};\n      let updateFlag = shouldUpdate as boolean;\n      if (isFunction(shouldUpdate)) updateFlag = shouldUpdate(getPrevStore?.(), currStore);\n\n      if (updateFlag) forceUpdate({});\n    });\n\n    return cancelRegister;\n  }, [shouldUpdate, form]);\n\n  useEffect(() => {\n    // 记录填写 name 属性 formItem\n    if (typeof name === 'undefined') return;\n\n    // formList 下特殊处理\n    if (formListName && isSameForm) {\n      formListMapRef.current.set(name, formItemRef);\n      return () => {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        formListMapRef.current.delete(name);\n        unset(form?.store, name);\n      };\n    }\n    if (!formMapRef) return;\n    formMapRef.current.set(name, formItemRef);\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      formMapRef.current.delete(name);\n      unset(form?.store, name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [snakeName, formListName]);\n\n  useEffect(() => {\n    // value 变化通知 watch 事件\n    form?.getInternalHooks?.(HOOK_MARK)?.notifyWatch?.(name);\n\n    // 控制是否需要校验\n    if (!shouldValidate.current) return;\n\n    // value change event\n    if (typeof name !== 'undefined' && shouldEmitChangeRef.current) {\n      if (formListName && isSameForm) {\n        // 整理 formItem 的值\n        const formListValue = merge([], calcFieldValue(name, formValue));\n        // 整理 formList 的值\n        const fieldValue = calcFieldValue(formListName, formListValue);\n        onFormItemValueChange?.({ ...fieldValue });\n      } else {\n        const fieldValue = calcFieldValue(name, formValue);\n        onFormItemValueChange?.({ ...fieldValue });\n      }\n    }\n\n    const filterRules = innerRules.filter((item) => (item.trigger || 'change') === 'change');\n\n    filterRules.length && validate('change');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValue, snakeName]);\n\n  // 暴露 ref 实例方法\n  const instance: FormItemInstance = {\n    name,\n    value: formValue,\n    isUpdated: isUpdatedRef.current,\n    getValue: () => valueRef.current,\n    setValue: (newVal: any) => updateFormValue(newVal, true, true),\n    setField,\n    validate,\n    validateOnly,\n    resetField,\n    setValidateMessage,\n    getValidateMessage,\n    resetValidate: resetHandler,\n  };\n  useImperativeHandle(ref, (): FormItemInstance => instance);\n  useImperativeHandle(formItemRef, (): FormItemInstance => instance);\n\n  // 传入 form 实例支持自定义渲染\n  if (isFunction(children)) return children(form);\n\n  return (\n    <div className={formItemClass} style={style}>\n      {label && (\n        <div className={formItemLabelClass} style={labelStyle}>\n          <label htmlFor={props?.for}>{label}</label>\n          {colon && t(locale.colonText)}\n        </div>\n      )}\n      <div className={contentClass()} style={contentStyle}>\n        <div className={`${classPrefix}-form__controls-content`}>\n          {React.Children.map(children, (child, index) => {\n            if (!child) return null;\n\n            let ctrlKey = 'value';\n            if (React.isValidElement(child)) {\n              if (child.type === FormItem) {\n                return React.cloneElement(child, {\n                  // @ts-ignore\n                  ref: (el) => {\n                    if (!el) return;\n                    innerFormItemsRef.current[index] = el;\n                  },\n                });\n              }\n              if (typeof child.type === 'object') {\n                ctrlKey = ctrlKeyMap.get(child.type) || 'value';\n              }\n              const childProps = child.props as any;\n              return React.cloneElement(child, {\n                disabled: disabledFromContext,\n                ...childProps,\n                [ctrlKey]: formValue,\n                onChange: (value: any, ...args: any[]) => {\n                  const newValue = valueFormat ? valueFormat(value) : value;\n                  updateFormValue(newValue, true, true);\n                  childProps?.onChange?.call?.(null, value, ...args);\n                },\n                onBlur: (value: any, ...args: any[]) => {\n                  handleItemBlur();\n                  childProps?.onBlur?.call?.(null, value, ...args);\n                },\n              });\n            }\n            return child;\n          })}\n          {renderSuffixIcon()}\n        </div>\n        {helpNode}\n        {extraNode}\n      </div>\n    </div>\n  );\n});\n\nFormItem.displayName = 'FormItem';\n\nexport default FormItem;\n"],"names":["FormItem","forwardRef","originalProps","ref","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","_slicedToArray","locale","t","_useConfig","useConfig","classPrefix","globalFormConfig","form","_useGlobalIcon","useGlobalIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","_useFormContext","useFormContext","colon","layout","requiredMarkFromContext","requiredMark","requiredMarkPosition","labelAlignFromContext","labelAlign","labelWidthFromContext","labelWidth","showErrorMessageFromContext","showErrorMessage","disabledFromContext","disabled","resetTypeFromContext","resetType","rulesFromContext","rules","statusIconFromContext","statusIcon","errorMessage","formMapRef","onFormItemValueChange","_useFormListContext","useFormListContext","formListName","name","formListRules","formListMapRef","formOfFormList","props","useDefaultProps","formItemDefaultProps","children","style","label","status","tips","help","valueFormat","initialData","className","shouldUpdate","successBorder","_props$statusIcon","_props$rules","innerRules","getInnerRules","_props$labelWidth","_props$labelAlign","_props$requiredMark","_useFormItemInitialDa","useFormItemInitialData","getDefaultInitialData","_useState","useState","_useState2","forceUpdate","_useState3","_useState4","freeShowErrorMessage","setFreeShowErrorMessage","_useState5","_useState6","errorList","setErrorList","_useState7","_useState8","successList","setSuccessList","_useState9","_useState0","verifyStatus","setVerifyStatus","_useState1","_useState10","resetValidating","setResetValidating","_useState11","_useState12","needResetField","setNeedResetField","_useState13","fieldName","flattenDeep","storeValue","get","store","_useState14","formValue","setFormValue","formItemRef","useRef","innerFormItemsRef","shouldEmitChangeRef","isUpdatedRef","shouldValidate","valueRef","errorListMapRef","Map","isSameForm","useMemo","isEqual","snakeName","concat","filter","item","toString","errorMessages","_useFormItemStyle","useFormItemStyle","formItemClass","formItemLabelClass","contentClass","labelStyle","contentStyle","helpNode","extraNode","updateFormValue","newVal","_form$getInternalHook","_form$getFieldsValue","validate","arguments","length","undefined","shouldEmitChange","_ref","getInternalHooks","call","HOOK_MARK","setPrevStore","getFieldsValue","current","fieldValue","set","formRules","Array","isArray","join","renderSuffixIcon","resultIcon","iconSlot","React","createElement","getDefaultIcon","iconMap","success","size","error","warning","ValidateStatus","SUCCESS","type","isValidElement","cloneElement","_objectSpread","color","analysisValidateResult","_callee","trigger","_result$rules","result","_regeneratorRuntime","wrap","_context","prev","next","resultList","allowSetValue","abrupt","validateModal","sent","map","Object","keys","forEach","key","message","parseMessage","isString","String","stop","_analysisValidateResult","apply","_validate","_asyncToGenerator","mark","_callee2","showErrorMessage2","_yield$analysisValida","innerSuccessList","innerErrorList","validateRules","cacheErrorList","status2","_innerErrorList$","_cacheErrorList$","_args2","_context2","innerFormItem","clear","_toConsumableArray","values","flat","ERROR","VALIDATING","resetHandler","_defineProperty","validateOnly","_validateOnly","_callee3","_yield$analysisValida2","_args3","_context3","handleItemBlur","filterRules","getResetValue","emptyValue","isObject","resetField","resetValue","setField","field","value","validateMessage","setValidateMessage","_validateMessage$","getValidateMessage","useEffect","_form$getInternalHook2","_ref2","getPrevStore","registerWatch","cancelRegister","_form$getFieldsValue2","currStore","updateFlag","isFunction","unset","_form$getInternalHook3","_form$getInternalHook4","notifyWatch","formListValue","merge","calcFieldValue","instance","isUpdated","getValue","setValue","resetValidate","useImperativeHandle","htmlFor","colonText","Children","child","index","ctrlKey","el","_typeof","ctrlKeyMap","childProps","onChange","_childProps$onChange","_childProps$onChange$","newValue","_len","args","_key","onBlur","_childProps$onBlur","_childProps$onBlur$ca","_len2","_key2","displayName"],"mappings":"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"}