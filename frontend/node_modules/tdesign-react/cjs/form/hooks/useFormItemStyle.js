/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-0006fcfa.js');
var React = require('react');
var classNames = require('classnames');
var hooks_useConfig = require('../../hooks/useConfig.js');
var _util_parseTNode = require('../../_util/parseTNode.js');
var form_const = require('../const.js');
require('../../_chunks/dep-667ac7af.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-1df1dad8.js');
require('../../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../../_chunks/dep-f32c03f1.js');
require('../../_chunks/dep-31c4bc3d.js');
require('../../_chunks/dep-eea2872a.js');
require('../../_chunks/dep-25585736.js');
require('../../_chunks/dep-62e73936.js');
require('../../_chunks/dep-64577888.js');
require('../../_chunks/dep-71455db7.js');
require('../../_chunks/dep-9e5a468d.js');
require('../../_chunks/dep-ec8d2dca.js');
require('../../_chunks/dep-fc596d16.js');
require('../../_chunks/dep-f26edb7b.js');
require('../../_chunks/dep-f33c1939.js');
require('../../_chunks/dep-21ece627.js');
require('../../_chunks/dep-25e4aa84.js');
require('../../_chunks/dep-e1fbe1c3.js');
require('../../_chunks/dep-df2b541f.js');
require('../../_chunks/dep-edd366db.js');
require('../../_chunks/dep-a56c4939.js');
require('../../_chunks/dep-6c297e20.js');
require('../../_chunks/dep-b7ad4d54.js');
require('../../_chunks/dep-a2cb9299.js');
require('../../_chunks/dep-f981815b.js');
require('../../_chunks/dep-59671c87.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function useFormItemStyle(props) {
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var className = props.className,
    help = props.help,
    tips = props.tips,
    snakeName = props.snakeName,
    status = props.status,
    successBorder = props.successBorder,
    errorList = props.errorList,
    successList = props.successList,
    layout = props.layout,
    verifyStatus = props.verifyStatus,
    label = props.label,
    labelWidth = props.labelWidth,
    labelAlign = props.labelAlign,
    requiredMark = props.requiredMark,
    requiredMarkPosition = props.requiredMarkPosition,
    showErrorMessage = props.showErrorMessage,
    innerRules = props.innerRules;
  var renderStatus = status || verifyStatus;
  var helpNode = help && /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-input__help")
  }, _util_parseTNode["default"](help));
  var needRequiredMark = requiredMark || (requiredMark !== null && requiredMark !== void 0 ? requiredMark : innerRules.filter(function (rule) {
    return rule.required;
  }).length > 0);
  var extraNode = React.useMemo(function () {
    var _errorList$;
    var extra = tips ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__extra"),
      title: tips
    }, tips) : null;
    if (showErrorMessage && errorList !== null && errorList !== void 0 && (_errorList$ = errorList[0]) !== null && _errorList$ !== void 0 && _errorList$.message) {
      extra = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: errorList[0].message
      }, errorList[0].message);
    } else if (successList.length) {
      extra = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: successList[0].message
      }, successList[0].message);
    }
    return extra;
  }, [showErrorMessage, errorList, successList, tips, classPrefix]);
  var formSnakeName = snakeName.split(",").join("_");
  var formItemClass = classNames__default["default"]("".concat(classPrefix, "-form__item"), className, defineProperty._defineProperty(defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(classPrefix, "-form-item__").concat(formSnakeName), formSnakeName), "".concat(classPrefix, "-form__item-with-help"), helpNode), "".concat(classPrefix, "-form__item-with-extra"), extraNode));
  var formItemLabelClass = classNames__default["default"]("".concat(classPrefix, "-form__label"), defineProperty._defineProperty(defineProperty._defineProperty(defineProperty._defineProperty(defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(classPrefix, "-form__label--required"), needRequiredMark), "".concat(classPrefix, "-form__label--required-right"), needRequiredMark && requiredMarkPosition === "right"), "".concat(classPrefix, "-form__label--top"), labelAlign === "top" || !labelWidth), "".concat(classPrefix, "-form__label--left"), labelAlign === "left" && labelWidth), "".concat(classPrefix, "-form__label--right"), labelAlign === "right" && labelWidth));
  var contentClass = function contentClass() {
    var controlCls = "".concat(classPrefix, "-form__controls");
    if (!showErrorMessage) return controlCls;
    var isSuccess = renderStatus === form_const.ValidateStatus.SUCCESS;
    if (isSuccess) {
      return classNames__default["default"](controlCls, "".concat(classPrefix, "-is-success"), defineProperty._defineProperty({}, "".concat(classPrefix, "-form--success-border"), successBorder));
    }
    return classNames__default["default"](controlCls, defineProperty._defineProperty(defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(classPrefix, "-is-warning"), renderStatus === "warning"), "".concat(classPrefix, "-is-error"), ["fail", "error"].includes(renderStatus)), "".concat(classPrefix, "-form--has-error"), renderStatus === form_const.ValidateStatus.ERROR || renderStatus === form_const.ValidateStatus.WARNING));
  };
  var labelStyle = {};
  var contentStyle = {};
  if (label && labelWidth && labelAlign !== "top") {
    if (typeof labelWidth === "number") {
      labelStyle = {
        width: "".concat(labelWidth, "px")
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? "".concat(labelWidth, "px") : ""
      };
    } else {
      labelStyle = {
        width: labelWidth
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? labelWidth : ""
      };
    }
  }
  return {
    formItemClass: formItemClass,
    formItemLabelClass: formItemLabelClass,
    contentClass: contentClass,
    labelStyle: labelStyle,
    contentStyle: contentStyle,
    helpNode: helpNode,
    extraNode: extraNode
  };
}

exports["default"] = useFormItemStyle;
//# sourceMappingURL=useFormItemStyle.js.map
