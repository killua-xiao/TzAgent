{"version":3,"file":"dep-e83bd2ab.js","sources":["../../../components/select/util/helper.ts","../../../components/select/hooks/useOptions.ts"],"sourcesContent":["import { ReactElement } from 'react';\nimport { isPlainObject, get } from 'lodash-es';\nimport OptionGroup from '../base/OptionGroup';\nimport Option from '../base/Option';\n\nimport { SelectValue, TdOptionProps, SelectKeysType, TdSelectProps, SelectOption } from '../type';\nimport { isSelectOptionGroup } from '../hooks/useOptions';\n\ntype SelectLabeledValue = Required<Omit<TdOptionProps, 'disabled'>>;\n\nexport type ValueToOption = {\n  [value: string | number]: TdOptionProps;\n};\n\nfunction setValueToOptionFormOptionDom(dom: ReactElement, valueToOption: ValueToOption, keys: SelectKeysType) {\n  const { value, label, children } = dom.props;\n  // eslint-disable-next-line no-param-reassign\n  valueToOption[value] = {\n    ...dom.props,\n    [keys?.value || 'value']: value,\n    [keys?.label || 'label']: label || children || value,\n  };\n}\n\n// 获取 value => option，用于快速基于 value 找到对应的 option\nexport const getValueToOption = (\n  children: ReactElement,\n  options: SelectOption[],\n  keys: SelectKeysType,\n): ValueToOption => {\n  const valueToOption = {};\n\n  // options 优先级高于 children\n  if (Array.isArray(options)) {\n    options.forEach((option) => {\n      if (isSelectOptionGroup(option)) {\n        option.children?.forEach((child) => {\n          valueToOption[get(child, keys?.value || 'value')] = {\n            ...child,\n            value: get(child, keys?.value || 'value'),\n            label: get(child, keys?.label || 'label'),\n          };\n        });\n      } else {\n        valueToOption[get(option, keys?.value || 'value')] = {\n          ...option,\n          value: get(option, keys?.value || 'value'),\n          label: get(option, keys?.label || 'label'),\n        };\n      }\n    });\n    return valueToOption;\n  }\n\n  if (isPlainObject(children)) {\n    if (children.type === Option) {\n      setValueToOptionFormOptionDom(children, valueToOption, keys);\n      return valueToOption;\n    }\n\n    if (children.type === OptionGroup) {\n      const groupChildren = children.props.children;\n\n      if (Array.isArray(groupChildren)) {\n        groupChildren.forEach((item) => {\n          setValueToOptionFormOptionDom(item, valueToOption, keys);\n        });\n        return valueToOption;\n      }\n    }\n  }\n\n  /**\n   * children如果存在ReactElement和map函数混写的情况，会出现嵌套数组\n   */\n  if (Array.isArray(children)) {\n    const handlerElement = (item: ReactElement) => {\n      if (item.type === Option) {\n        setValueToOptionFormOptionDom(item, valueToOption, keys);\n      }\n\n      if (item.type === OptionGroup) {\n        const groupChildren = (item.props as SelectOption).children;\n        if (Array.isArray(groupChildren)) {\n          groupChildren.forEach((groupItem) => {\n            setValueToOptionFormOptionDom(groupItem, valueToOption, keys);\n          });\n        }\n      }\n\n      if (Array.isArray(item)) {\n        item.forEach((child) => {\n          handlerElement(child);\n        });\n      }\n    };\n    children.forEach((item: ReactElement) => handlerElement(item));\n  }\n\n  return valueToOption;\n};\n\n// 获取单选的 label\nexport const getLabel = (\n  children: ReactElement,\n  value: SelectValue<TdOptionProps>,\n  options: TdOptionProps[],\n  keys: SelectKeysType,\n) => {\n  let selectedLabel = '';\n  // 处理带 options 属性的情况\n  if (Array.isArray(options)) {\n    options.some((option) => {\n      if ([get(value, keys?.value || 'value'), value].includes(option.value)) {\n        selectedLabel = option.label;\n        return true;\n      }\n      return false;\n    });\n\n    return selectedLabel;\n  }\n\n  if (isPlainObject(children)) {\n    selectedLabel = children.props.label;\n\n    if (children.type === OptionGroup) {\n      const groupChildren = children.props.children;\n\n      if (Array.isArray(groupChildren)) {\n        groupChildren.some((item) => {\n          const selectedValue = isPlainObject(value) ? get(value, 'value') : value;\n          if (isPlainObject(item.props) && item.props.value === selectedValue) {\n            selectedLabel = item.props.label || item.props.children;\n            return true;\n          }\n          return false;\n        });\n      }\n    }\n  }\n\n  if (Array.isArray(children)) {\n    children.some((item: ReactElement) => {\n      // 处理分组\n      if (item.type === OptionGroup) {\n        const groupChildren = item.props.children;\n        if (Array.isArray(groupChildren)) {\n          const isSelected = groupChildren.some((item) => {\n            const selectedValue = isPlainObject(value) ? get(value, 'value') : value;\n            if (isPlainObject(item.props) && item.props.value === selectedValue) {\n              selectedLabel = item.props.label || item.props.children;\n              return true;\n            }\n            return false;\n          });\n          return isSelected;\n        }\n      }\n      const selectedValue = isPlainObject(value) ? get(value, 'value') : value;\n      if (isPlainObject(item.props) && item.props.value === selectedValue) {\n        selectedLabel = item.props.label || item.props.children;\n        return true;\n      }\n      return false;\n    });\n  }\n\n  return selectedLabel;\n};\n\nexport const getMultipleTags = (values: SelectValue[], keys: SelectKeysType) => {\n  const tags = values.map((item) => ({\n    label: get(item, keys?.label || 'label') || item.toString(),\n    value: get(item, keys?.value || 'value') || item,\n  }));\n  return tags;\n};\n\nexport const getSelectValueArr = (\n  values: SelectValue | SelectValue[],\n  activeValue: SelectValue,\n  selected?: boolean,\n  valueType?: TdSelectProps['valueType'],\n  keys?: SelectKeysType,\n  objVal?: SelectValue,\n) => {\n  // eslint-disable-next-line no-param-reassign\n  values = Array.isArray(values) ? values : [];\n\n  if (Array.isArray(values)) {\n    let currentValues = [...values];\n    const isValueObj = valueType === 'object';\n    if (selected) {\n      currentValues = currentValues.filter((item: SelectLabeledValue) => {\n        if (isValueObj) {\n          if (isPlainObject(activeValue)) {\n            return get(item, keys?.value || 'value') !== get(activeValue, keys?.value || 'value');\n          }\n          return get(item, keys?.value || 'value') !== activeValue;\n        }\n        return item !== activeValue;\n      });\n    } else {\n      const item = isValueObj ? objVal : activeValue;\n\n      currentValues.push(item as SelectValue);\n    }\n    return currentValues;\n  }\n};\n\n// 计算onChange事件回调的selectedOptions参数\nexport const getSelectedOptions = (\n  value: SelectValue,\n  multiple: TdSelectProps['multiple'],\n  valueType: TdSelectProps['valueType'],\n  keys: SelectKeysType,\n  valueToOption: ValueToOption,\n  selectedValue?: SelectValue,\n) => {\n  const isObjectType = valueType === 'object';\n  // 当前所有选中的选项\n  let currentSelectedOptions = [];\n  // 当前选中的选项\n  let currentOption: SelectOption;\n  // 全选值\n  let allSelectedValue: Array<SelectValue>;\n  // 所有可选项\n  const tmpPropOptions = Object.values(valueToOption);\n  if (multiple) {\n    currentSelectedOptions = isObjectType\n      ? (value as Array<SelectValue>)\n      : tmpPropOptions?.filter?.((v) => (value as Array<string | number>).includes?.(v[keys?.value || 'value']));\n\n    allSelectedValue = isObjectType\n      ? currentSelectedOptions\n      : currentSelectedOptions?.map((v) => v[keys?.value || 'value']);\n\n    currentOption = isObjectType\n      ? (value as Array<SelectValue>).find((v) => v[keys?.value || 'value'] === selectedValue)\n      : currentSelectedOptions?.find((option) => option[keys?.value || 'value'] === selectedValue);\n  } else {\n    currentSelectedOptions = isObjectType\n      ? [value]\n      : tmpPropOptions?.filter?.((v) => value === v[keys?.value || 'value']) || [];\n    allSelectedValue = currentSelectedOptions;\n    currentOption = isObjectType\n      ? value\n      : currentSelectedOptions?.find((option) => option[keys?.value || 'value'] === selectedValue);\n  }\n\n  return { currentSelectedOptions, currentOption, allSelectedValue };\n};\n","import React, { useState, useEffect, ReactNode, ReactElement } from 'react';\nimport { get } from 'lodash-es';\nimport type { SelectKeysType, SelectOption, SelectOptionGroup, SelectValue, TdOptionProps } from '../type';\nimport { getValueToOption, type ValueToOption } from '../util/helper';\nimport Option from '../base/Option';\nimport OptionGroup from '../base/OptionGroup';\n\nexport function isSelectOptionGroup(option: SelectOption): option is SelectOptionGroup {\n  return !!option && 'group' in option && 'children' in option;\n}\n\ntype OptionValueType = SelectValue<SelectOption>;\n\n// 处理 options 的逻辑\nfunction UseOptions(\n  keys: SelectKeysType,\n  options: SelectOption[],\n  children: ReactNode,\n  valueType: 'object' | 'value',\n  value: OptionValueType,\n  reserveKeyword: boolean,\n) {\n  const [valueToOption, setValueToOption] = useState<ValueToOption>({});\n  const [currentOptions, setCurrentOptions] = useState<SelectOption[]>([]);\n  const [tmpPropOptions, setTmpPropOptions] = useState<SelectOption[]>([]);\n  const [selectedOptions, setSelectedOptions] = useState<SelectOption[]>([]);\n\n  // 处理设置 option 的逻辑\n  useEffect(() => {\n    let transformedOptions = options;\n\n    const arrayChildren = React.Children.toArray(children);\n    const optionChildren = arrayChildren.filter((v: ReactElement) => v.type === Option || v.type === OptionGroup);\n    const isChildrenFilterable = arrayChildren.length > 0 && optionChildren.length === arrayChildren.length;\n    if (reserveKeyword && currentOptions.length && isChildrenFilterable) return;\n\n    if (isChildrenFilterable) {\n      const handlerOptionElement = (v) => {\n        if (React.isValidElement<SelectOption>(v)) {\n          if (v.type === OptionGroup) {\n            return {\n              ...v.props,\n              group: v.props.label,\n              children: v.props.children?.map((v) => handlerOptionElement(v)),\n            };\n          }\n          return {\n            ...v.props,\n            label: v.props.label || v.props.children,\n          };\n        }\n        return { label: v };\n      };\n      transformedOptions = arrayChildren?.map<SelectOption>((v) => handlerOptionElement(v));\n    }\n    if (keys) {\n      // 如果有定制 keys 先做转换\n      transformedOptions = transformedOptions?.map<SelectOption>((option) => ({\n        ...option,\n        value: get(option, keys?.value || 'value'),\n        label: get(option, keys?.label || 'label'),\n      }));\n    }\n    setCurrentOptions(transformedOptions);\n    setTmpPropOptions(transformedOptions);\n\n    setValueToOption(getValueToOption(children as ReactElement, options as TdOptionProps[], keys) || {});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, keys, children, reserveKeyword]);\n\n  // 同步 value 对应的 options\n  useEffect(() => {\n    const valueKey = keys?.value || 'value';\n    const labelKey = keys?.label || 'label';\n\n    setSelectedOptions((oldSelectedOptions: SelectOption[]) => {\n      const createOptionFromValue = (item: OptionValueType) => {\n        if (valueType === 'value') {\n          return (\n            valueToOption[item as string | number] ||\n            oldSelectedOptions.find((option) => get(option, valueKey) === item) || {\n              [valueKey]: item,\n              [labelKey]: item,\n            }\n          );\n        }\n        if (typeof item === 'object' && item !== null) {\n          return item;\n        }\n        return [];\n      };\n\n      // 多选\n      if (Array.isArray(value)) {\n        return value.map(createOptionFromValue);\n      }\n\n      // 单选\n      if (value !== undefined && value !== null) {\n        const option = createOptionFromValue(value);\n        return option ? [option] : [];\n      }\n\n      return [];\n    });\n  }, [value, keys, valueType, valueToOption, setSelectedOptions]);\n\n  return {\n    currentOptions,\n    setCurrentOptions,\n    tmpPropOptions,\n    setTmpPropOptions,\n    valueToOption,\n    setValueToOption,\n    selectedOptions,\n    setSelectedOptions,\n  };\n}\n\nexport default UseOptions;\n"],"names":["setValueToOptionFormOptionDom","dom","valueToOption","keys","_dom$props","props","value","label","children","_objectSpread","_defineProperty","getValueToOption","options","Array","isArray","forEach","option","isSelectOptionGroup","_option$children","child","get","isPlainObject","type","Option","OptionGroup","groupChildren","item","handlerElement","groupItem","getLabel","selectedLabel","some","includes","selectedValue","isSelected","getMultipleTags","values","tags","map","toString","getSelectValueArr","activeValue","selected","valueType","objVal","currentValues","_toConsumableArray","isValueObj","filter","push","getSelectedOptions","multiple","isObjectType","currentSelectedOptions","currentOption","allSelectedValue","tmpPropOptions","Object","_tmpPropOptions$filte","_currentSelectedOptio","_currentSelectedOptio2","call","v","_value$includes","find","_tmpPropOptions$filte2","_currentSelectedOptio3","UseOptions","reserveKeyword","_useState","useState","_useState2","_slicedToArray","setValueToOption","_useState3","_useState4","currentOptions","setCurrentOptions","_useState5","_useState6","setTmpPropOptions","_useState7","_useState8","selectedOptions","setSelectedOptions","useEffect","transformedOptions","arrayChildren","React","Children","toArray","optionChildren","isChildrenFilterable","length","handlerOptionElement","isValidElement","_v$props$children","group","_transformedOptions","valueKey","labelKey","oldSelectedOptions","createOptionFromValue","_typeof"],"mappings":"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"}