{"version":3,"file":"dep-d048f54a.js","sources":["../../../common/js/color-picker/format.ts","../../../components/color-picker/components/panel/format/inputs.tsx"],"sourcesContent":["import Color from './color';\nimport { ALPHA_FORMAT_MAP, COLOR_FORMAT_INPUTS, FORMATS } from './constants';\nimport type { AlphaConvertibleFormat, BasicColorFormat, ColorFormat } from './types';\n\n/**\n * 兜底处理用户传入的格式，例如：\n * - 传入 `RGB`， 但 `enableAlpha` ，则返回 `RGBA`\n */\nexport const initColorFormat = (format: ColorFormat, enableAlpha: boolean) => {\n  if (enableAlpha && format in ALPHA_FORMAT_MAP) {\n    return format in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[format as AlphaConvertibleFormat] : format;\n  }\n  return format as BasicColorFormat;\n};\n\n/**\n * 获取不同格式的输入输出值\n * - encode：将字符串转换为单独的颜色值，例如 `{r: 255, g: 255, b: 255}`\n * - decode：获取完整的颜色字符串，例如 `rgb(255, 255, 255)`\n */\nexport const getColorFormatMap = (color: Color, type: 'encode' | 'decode') => {\n  if (type === 'encode') {\n    return {\n      HSV: color.getHsva(),\n      HSVA: color.getHsva(),\n      HSL: color.getHsla(),\n      HSLA: color.getHsla(),\n      RGB: color.getRgba(),\n      RGBA: color.getRgba(),\n      CMYK: color.getCmyk(),\n      CSS: {\n        css: color.css,\n      },\n      HEX: {\n        hex: color.hex,\n      },\n      HEX8: {\n        hex: color.hex8, // 为了减少转换 hex8 的 key 也对应 hex\n      },\n    };\n  }\n\n  // decode\n  return color.getFormatsColorMap();\n};\n\n/**\n * 获取下拉框的格式选项\n */\nexport const getColorFormatOptions = (enableAlpha: boolean) => (\n  enableAlpha\n    ? FORMATS.map((item) => (item in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[item as AlphaConvertibleFormat] : item))\n    : FORMATS\n);\n\n/**\n * 获取当前格式的输入框配置\n */\nexport const getColorFormatInputs = (\n  format: ColorFormat = 'RGB',\n  enableAlpha: boolean\n) => {\n  let finalFormat;\n\n  /* 为了减少 `ALPHA_FORMAT_MAP` 中的重复代码\n     `RGBA/HEX8/HSLA/HSVA` 会被转换为 `RGB/HEX/HSL/HSV` 后再匹配\n     但在下一步会 push 一个代表透明度的输入框 */\n  if (enableAlpha) {\n    finalFormat = Object.keys(ALPHA_FORMAT_MAP).find(\n      (key) => key in ALPHA_FORMAT_MAP && ALPHA_FORMAT_MAP[key as AlphaConvertibleFormat] === format\n    ) || format;\n  } else {\n    finalFormat = format;\n  }\n\n  if (!COLOR_FORMAT_INPUTS[finalFormat as BasicColorFormat]) return [];\n\n  const configs = [\n    ...(COLOR_FORMAT_INPUTS[finalFormat as BasicColorFormat]),\n  ];\n\n  // CMYK 格式不支持透明度\n  if (enableAlpha && format !== 'CMYK') {\n    configs.push({\n      type: 'inputNumber',\n      key: 'a',\n      min: 0,\n      max: 100,\n      format: (value: number) => `${value}%`,\n      flex: 1.15,\n    });\n  }\n\n  return configs;\n};\n","import React, { useRef, useEffect } from 'react';\nimport { throttle } from 'lodash-es';\nimport { Color, getColorFormatInputs, getColorFormatMap } from '@tdesign/common-js/color-picker/index';\nimport type { TdColorFormatProps } from '.';\nimport Input from '../../../../input';\nimport InputNumber from '../../../../input-number';\n\nconst FormatInputs = (props: TdColorFormatProps) => {\n  const { format, enableAlpha, inputProps, disabled, onInputChange, color } = props;\n  const modelValueRef = useRef({});\n  const lastModelValue = useRef({});\n  const inputKey = useRef<number>(0);\n\n  const updateModelValue = () => {\n    const value = getColorFormatMap(color, 'encode')[format];\n    if (!value) return;\n\n    if (enableAlpha) {\n      // @ts-ignore\n      value.a = Math.round(color.alpha * 100);\n    }\n\n    const changedFormatValue = {};\n    Object.keys(value).forEach((key) => {\n      if (value[key] !== modelValueRef.current[key]) {\n        changedFormatValue[key] = value[key];\n      }\n      lastModelValue.current[key] = value[key];\n    });\n\n    if (Object.keys(changedFormatValue).length > 0) {\n      modelValueRef.current = value;\n    }\n  };\n\n  const handleInputChange = (key: string, v: number | string, max: number) => {\n    inputKey.current = performance.now(); // 重新渲染，处理多次空值的场景\n\n    if (v.toString().trim() === '') {\n      const lastValue = lastModelValue.current[key];\n      color.update(lastValue as string);\n      onInputChange();\n      return;\n    }\n\n    if (!v || v === lastModelValue.current[key] || Number(v) < 0 || Number(v) > max) return;\n    lastModelValue.current[key] = v;\n\n    const newFormatValue = {\n      ...modelValueRef.current,\n      [key]: v,\n    };\n    modelValueRef.current = newFormatValue;\n    // 对应 COLOR_FORMAT_INPUTS 中的 key\n    if (key === 'a') {\n      // 透明通道\n      color.alpha = (v as number) / 100;\n    } else if (key === 'hex' || key === 'css') {\n      // 纯字符串类型的格式\n      color.update(v as string);\n    } else {\n      /* 待进一步优化：手动修改某个输入框，其它输入框的值有时会被覆盖 \n         https://github.com/bgrins/TinyColor/issues/86 */\n      color.update(Color.object2color(newFormatValue, format));\n    }\n    onInputChange();\n  };\n\n  updateModelValue();\n  useEffect(() => {\n    const throttleUpdate = throttle(updateModelValue, 100);\n    throttleUpdate();\n    return () => throttleUpdate.cancel();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [color.saturation, color.hue, color.value, color.alpha, format]);\n\n  return (\n    <div className=\"input-group\">\n      {getColorFormatInputs(format, enableAlpha).map((config) => {\n        const currentValue = modelValueRef.current[config.key];\n        const commonProps = {\n          ...inputProps,\n          disabled,\n          title: currentValue,\n          align: 'center' as const,\n          size: 'small' as const,\n          onBlur: (v: string) => handleInputChange(config.key, v, config.max),\n          onEnter: (v: string) => handleInputChange(config.key, v, config.max),\n        };\n\n        return (\n          <div\n            className=\"input-group__item\"\n            key={config.key}\n            style={{\n              flex: config.flex || 1,\n            }}\n          >\n            {config.type === 'input' ? (\n              <Input\n                {...commonProps}\n                defaultValue={currentValue}\n                key={`${inputKey.current}-${currentValue}`}\n                maxlength={format === 'HEX' ? 9 : undefined}\n              />\n            ) : (\n              <InputNumber\n                {...commonProps}\n                min={config.min}\n                max={config.max}\n                // @ts-ignore\n                format={config.format}\n                step={1}\n                value={currentValue}\n                onChange={(v) => handleInputChange(config.key, v || config.min, config.max)}\n                theme=\"normal\"\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(FormatInputs);\n"],"names":["initColorFormat","format","enableAlpha","ALPHA_FORMAT_MAP","getColorFormatMap","color","type","HSV","getHsva","HSVA","HSL","getHsla","HSLA","RGB","getRgba","RGBA","CMYK","getCmyk","CSS","css","HEX","hex","HEX8","hex8","getFormatsColorMap","getColorFormatOptions","FORMATS","map","item","getColorFormatInputs","arguments","length","undefined","finalFormat","Object","keys","find","key","COLOR_FORMAT_INPUTS","configs","_toConsumableArray","push","min","max","value","concat","flex","FormatInputs","props","inputProps","disabled","onInputChange","modelValueRef","useRef","lastModelValue","inputKey","updateModelValue","a","Math","round","alpha","changedFormatValue","forEach","current","handleInputChange","v","performance","now","toString","trim","lastValue","update","Number","newFormatValue","_objectSpread","_defineProperty","Color","object2color","useEffect","throttleUpdate","throttle","cancel","saturation","hue","React","createElement","className","config","currentValue","commonProps","title","align","size","onBlur","onEnter","style","Input","defaultValue","maxlength","InputNumber","step","onChange","theme","memo"],"mappings":"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"}