{"version":3,"file":"dep-5180cc1e.js","sources":["../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/uniqueId.js","../../../common/js/tree-v1/tree-node-model.ts","../../../common/js/tree-v1/tree-node.ts"],"sourcesContent":["import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","import { isUndefined, isBoolean, pick, omit } from 'lodash-es';\nimport { TreeNode } from './tree-node';\nimport { OptionData } from '../common';\nimport {\n  TreeNodeValue,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TreeNodeModelProps,\n} from './types';\nimport log from '../log/log';\n\n// 获取节点需要暴露的属性\nfunction getExposedProps(node: TreeNode): TreeNodeModelProps {\n  const props = pick(node, [\n    'value',\n    'label',\n    'data',\n    'actived',\n    'expanded',\n    'checked',\n    'indeterminate',\n    'loading',\n  ]) as TreeNodeModelProps;\n  return props;\n}\n\n// 封装对外暴露的对象\nexport function createNodeModel(node: TreeNode): TypeTreeNodeModel {\n  const props = getExposedProps(node);\n\n  const model: TypeTreeNodeModel = {\n    ...props,\n\n    /**\n     * 获取节点所处层级\n     * @return number 节点层级序号\n     */\n    getLevel() {\n      return node.getLevel();\n    },\n\n    /**\n     * 获取节点在父节点的子节点列表中的位置\n     * - 如果没有父节点，则获取节点在根节点列表的位置\n     * @return number 节点位置序号\n     */\n    getIndex() {\n      return node.getIndex();\n    },\n\n    /**\n     * 是否为兄弟节点中的第一个节点\n     * @return boolean 是否为第一个节点\n     */\n    isFirst() {\n      return node.isFirst();\n    },\n\n    /**\n     * 是否为兄弟节点中的最后一个节点\n     * @return boolean 是否为最后一个节点\n     */\n    isLast() {\n      return node.isLast();\n    },\n\n    /**\n     * 是否为叶子节点，叶子节点没有子节点\n     * @return boolean 是否为叶子节点\n     */\n    isLeaf() {\n      return node.isLeaf();\n    },\n\n    /**\n     * 在当前节点之前插入节点\n     * @param {object} newData 要插入的节点或者数据\n     * @return void\n     */\n    insertBefore(newData: TypeTreeItem) {\n      return node.insertBefore(newData);\n    },\n\n    /**\n     * 在当前节点之后插入节点\n     * @param {object} newData 要插入的节点或者数据\n     * @return void\n     */\n    insertAfter(newData: TypeTreeItem) {\n      return node.insertAfter(newData);\n    },\n\n    /**\n     * 追加节点数据\n     * @param {object | object[]} data 节点数据\n     * @return void\n     */\n    appendData(data: TypeTreeNodeData | TypeTreeNodeData[]) {\n      return node.append(data);\n    },\n\n    /**\n     * 返回路径节点\n     * - 路径节点包含自己在内\n     * - 节点顺序与父级节点顺序相反，从根到当前\n     * @return TreeNodeModel[] 路径节点数组\n     */\n    getPath(): TypeTreeNodeModel[] {\n      const nodes = node.getPath();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    /**\n     * 获取本节点的父节点\n     * @return TreeNodeModel 父节点\n     */\n    getParent(): TypeTreeNodeModel {\n      return node.parent?.getModel();\n    },\n\n    /**\n     * 获取所有父级节点\n     * - 顺序为从当前到根\n     * @return TreeNodeModel[] 父级节点数组\n     */\n    getParents(): TypeTreeNodeModel[] {\n      const nodes = node.getParents();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    /**\n     * 获取本节点的根节点\n     * @return TreeNodeModel 根节点\n     */\n    getRoot(): TypeTreeNodeModel {\n      const root = node.getRoot();\n      return root?.getModel();\n    },\n\n    /**\n     * 获取所有兄弟节点，包含自己在内\n     * @return TreeNodeModel[] 兄弟节点数组\n     */\n    getSiblings(): TypeTreeNodeModel[] {\n      const nodes = node.getSiblings();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    /**\n     * 获取当前节点的子节点\n     * @param {boolean} deep 是否获取所有深层子节点\n     * @return TreeNodeModel[] 子节点数组\n     */\n    getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n      let childrenModel: boolean | TypeTreeNodeModel[] = false;\n      const { children } = node;\n      if (Array.isArray(children)) {\n        if (children.length > 0) {\n          if (deep) {\n            const nodes = node.walk();\n            nodes.shift();\n            childrenModel = nodes.map((item) => item.getModel());\n          } else {\n            childrenModel = children.map((item) => item.getModel());\n          }\n        } else {\n          childrenModel = false;\n        }\n      } else if (isBoolean(children)) {\n        childrenModel = children;\n      }\n      return childrenModel;\n    },\n\n    /**\n     * 移除节点\n     * - 提供 value 参数，移除本节点子节点中的节点\n     * - 不提供 value 参数，移除自己\n     * @param {string} value 目标节点值\n     * @return void\n     */\n    remove(value?: TreeNodeValue) {\n      if (!value) {\n        node.remove();\n        return;\n      }\n\n      const { tree } = node;\n      const targetNode = tree.getNode(value);\n      if (!targetNode) {\n        log.warnOnce('Tree', `\\`${value}\\` is not exist`);\n        return;\n      }\n\n      const parents = targetNode.getParents();\n      const parentValues = parents.map((pnode) => (pnode.value));\n      if (parentValues.indexOf(node.value) < 0) {\n        log.warnOnce('Tree', `\\`${value}\\` is not a childNode of current node`);\n        return;\n      }\n      targetNode.remove();\n    },\n\n    /**\n     * 设置本节点携带的元数据\n     * @param {object} data 节点数据\n     * @return void\n     */\n    setData(data: OptionData) {\n      // 详细细节可见 https://github.com/Tencent/tdesign-common/issues/655\n      const _data = omit(data, ['children', 'value', 'label']);\n      const { keys } = node.tree.config;\n      const dataValue = data[keys?.value || 'value'];\n      const dataLabel = data[keys?.label || 'label'];\n      if (!isUndefined(dataValue)) _data.value = dataValue;\n      if (!isUndefined(dataLabel)) _data.label = dataLabel;\n\n      Object.assign(node.data, _data);\n      Object.assign(node, _data);\n    },\n  };\n\n  return model;\n}\n\n/**\n * 同步节点属性到封装对象\n * @param {TreeNodeModel} 节点封装对象\n * @param {object} data 节点数据\n * @return void\n */\nexport function updateNodeModel(model: TypeTreeNodeModel, node: TreeNode) {\n  // 同步节点属性\n  const props = getExposedProps(node);\n  Object.assign(model, props);\n}\n","import { isNull, isFunction, isNumber, uniqueId, isBoolean, isNil, get } from 'lodash-es';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport { createNodeModel, updateNodeModel } from './tree-node-model';\nimport log from '../log';\n\nconst { hasOwnProperty } = Object.prototype;\n\n// 这里的属性为 data 中属性可以同步到 treeNode 实例属性的白名单\n// 仅 label 属性和在列表中的属性可以通过 set 方法配置到 treeNode 实例上\nexport const settableStatus: Record<string, boolean | null> = {\n  expandMutex: null,\n  activable: null,\n  checkable: null,\n  draggable: null,\n  loading: false,\n};\n\nexport const settableProps = Object.keys(settableStatus);\n\nexport const syncableProps = [\n  ...settableProps,\n  'actived',\n  'expanded',\n  'checked',\n];\n\nexport const privateKey = '__tdesign_id__';\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\n// public 方法，在 ui 组件中有可能在使用，会保障其输入输出实现\n// private 方法，可能会改动其输入输出\n\n/**\n * tree 节点数据模型\n * @class TreeNode\n * @param {TreeStore} tree TreeStore 实例\n * @param {object} [data] 节点数据\n * @param {TreeNode} parent 指定的当前 TreeStore 实例中的父节点\n */\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点私有 id，不接受外部传入，确保唯一性\n  public [privateKey]: string;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: null | boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: null | boolean;\n\n  // 是否可选中\n  public checkable: null | boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  public isIndeterminateManual: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: null | boolean;\n\n  // 节点是否可拖动\n  public draggable: null | boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = config.keys || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n    const propsDisabled = keys.disabled || 'disabled';\n\n    // 节点自身初始化数据\n    this.model = null;\n    this.children = null;\n    this.level = 0;\n\n    // vm 开头为视图属性，不可以外部设置\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = false;\n    this.vmIsLocked = false;\n\n    // 初始化节点基本状态\n    this.visible = false;\n    this.actived = false;\n    this.checked = false;\n    this.indeterminate = false;\n    this.loading = false;\n    this.expanded = config.expandAll;\n\n    // 下面几个属性，节点初始化的时候，可以设置与 treeStore.config 不同的值\n    // 初始化默认值为 null, 则在方法判断时，默认以 treeStore.config 为准\n    // 传递或者设置属性为 boolean 类型的值，则以节点属性值为准\n    // 这种处理方式主要是解决 treeStore.setConfig 方法配置全局属性导致的状态切换与保留的问题\n    this.activable = null;\n    this.checkable = null;\n    this.expandMutex = null;\n    this.draggable = null;\n\n    // 为节点设置唯一 id\n    // tree 数据替换时，value 相同有可能导致节点状态渲染冲突\n    // 用这个 唯一 id 来解决，用于类似 vue 组件的唯一 key 指定场景\n    this[privateKey] = uniqueId(prefix);\n\n    // 设置 value\n    // 没有 value 的时候，value 默认使用自动生成的 唯一 id\n    this.value = isNil(get(data, propValue))\n      ? this[privateKey]\n      : get(data, propValue);\n    const { nodeMap, privateMap } = tree;\n    if (nodeMap.get(this.value)) {\n      log.warn('Tree', `Dulplicate value: ${this.value}`);\n    }\n    nodeMap.set(this.value, this);\n    privateMap.set(this[privateKey], this);\n\n    // 设置标签\n    this.label = get(data, propLabel) || '';\n    // 设置是否禁用\n    this.disabled = get(data, propsDisabled);\n\n    // 设置子节点\n    const children = data[propChildren];\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 设置父节点\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 同步数据属性到节点属性\n    // 仅 syncableStatus 列举的属性被同步到 treeNode 实例属性\n    syncableProps.forEach((prop) => {\n      if (typeof data[prop] !== 'undefined') {\n        // @ts-ignore\n        // TODO: 待移除\n        this[prop] = data[prop];\n      }\n    });\n\n    // 初始化节点状态\n    this.initActived();\n    this.initExpanded();\n    this.initChecked();\n\n    // 这里的子节点加载逻辑不能放到状态初始化之前\n    // 因为子节点状态计算依赖父节点初始化状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    if (this.isLeaf()) {\n      // initExpanded 时，子节点没有完全加载，无法依赖 isLeaf 状态判断\n      this.expanded = false;\n      this.tree.expandedMap.delete(this.value);\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此子节点插入之后需要再次更新状态\n    this.updateChecked();\n\n    // 标记节点更新\n    this.update();\n    // 创建节点需要回流操作\n    tree.reflow(this);\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  /**\n   * 初始化选中态\n   * @return void\n   */\n  private initChecked(): void {\n    const { tree, value, parent } = this;\n    const { checkedMap } = tree;\n    const { checkStrictly } = tree.config;\n    if (this.checked) {\n      checkedMap.set(value, true);\n    }\n    // 这里不可以使用 parent.isChecked 方法\n    // 因为当前节点创建时尚未插入父节点的 children 数组，可能父节点选中态仅受到之前子节点状态的影响\n    // 这会导致父节点状态计算错误，进而引发子节点变更了选中状态\n    if (!checkStrictly && parent?.checked) {\n      checkedMap.set(value, true);\n    }\n    this.updateChecked();\n  }\n\n  /**\n   * 初始化节点展开状态\n   * @return void\n   */\n  private initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (isNumber(config.expandLevel) && this.getLevel() < config.expandLevel) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  /**\n   * 初始化节点激活状态\n   * @return void\n   */\n  private initActived(): void {\n    const { tree, actived } = this;\n    if (actived && this.isActivable()) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  /**\n   * 追加节点数据\n   * @param {object | object[]} data 节点数据\n   * @return void\n   */\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n\n    const wasLeaf = this.isLeaf();\n\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n\n    // 如果之前是叶子节点，现在有了子节点，且 expandAll 为 true，则展开\n    if (wasLeaf && tree.config.expandAll && !this.isLeaf()) {\n      tree.expandedMap.set(this.value, true);\n      this.expanded = true;\n    }\n\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  /**\n   * 将当前节点追加到某个父节点的子节点列表中\n   * @param {TreeStore} tree 目标树\n   * @param {TreeNode} [parent] 目标父节点\n   * @param {number} [index] 预期在子节点列表中的位置\n   * @return void\n   */\n  public appendTo(tree: TreeStore, parent?: TreeNode, index?: number): void {\n    const parentNode = parent;\n    let targetIndex = -1;\n    if (isNumber(index)) {\n      targetIndex = index;\n    }\n\n    const targetParents = parentNode?.getParents() || [];\n    const includeCurrent = targetParents.some((pnode) => pnode === this);\n    if (includeCurrent) {\n      throw new Error('无法将父节点插入到子节点');\n    }\n\n    if (parentNode === this) {\n      throw new Error('无法将节点插入到本节点');\n    }\n\n    if (Array.isArray(parentNode?.children)) {\n      const targetPosNode = parentNode?.children[targetIndex];\n      if (targetPosNode && targetPosNode === this) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    // 先要取得 siblings\n    // 因为要应对节点在同一个 siblings 中变换位置的情况\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode?.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n\n    // 上面的逻辑其实已经覆盖了所有业务情况\n    // 这里的逻辑报错仅用于极限兜底，防止 treeStore 被误使用\n    if (!Array.isArray(siblings)) {\n      throw new Error('无法插入到目标位置，可插入的节点列表不存在');\n    }\n\n    const prevLength = siblings.length;\n    const prevIndex = this.getIndex();\n\n    this.remove();\n\n    if (isNumber(index)) {\n      let targetIndex = index;\n      if (parentNode === this.parent) {\n        // 前置节点被拔出后再插入到同一个 siblings 时，会引起目标 index 的变化\n        // 因此要相应的变更插入位置\n        // 后置节点被拔出时，目标 index 是不变的\n        const curLength = siblings.length;\n        if (curLength < prevLength && prevIndex <= targetIndex) {\n          targetIndex -= 1;\n        }\n      }\n      siblings.splice(targetIndex, 0, this);\n    } else {\n      siblings.push(this);\n    }\n\n    this.parent = parentNode;\n\n    // 插入节点应当继承展开状态\n    // 但不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      tree.privateMap.set(node[privateKey], node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode?.walk() || tree.children.map((item) => item.walk()).flat();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  /**\n   * 插入一个节点或者数据到到同级节点的目标位置\n   * @param {TreeNode | object} item 要插入的节点或者数据\n   * @param {number} [index] 预期在子节点列表中的位置\n   * @return void\n   */\n  private insert(item: TypeTreeItem, index?: number): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (isNumber(index)) {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  /**\n   * 在当前节点之前插入节点\n   * @param {TreeNode | object} newData 要插入的节点或者数据\n   * @return void\n   */\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  /**\n   * 在当前节点之后插入节点\n   * @param {TreeNode | object} newData 要插入的节点或者数据\n   * @return void\n   */\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  /**\n   * 从当前树中移除本节点\n   * @return void\n   */\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  /**\n   * 清除本节点与当前树的关系\n   * @return void\n   */\n  private clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n    tree.filterMap.delete(value);\n    tree.privateMap.delete(this[privateKey]);\n  }\n\n  /**\n   * 异步加载子节点\n   * @return Promise<void>\n   */\n  private async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if ('load' in config && isFunction(config.load)) {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * 设置节点状态\n   * - 为节点设置独立于配置的 disabled 状态: set({ disabled: true })\n   * - 清除独立于配置的 disabled 状态: set({ disabled: null })\n   * @param {object} item 节点状态对象\n   * @return void\n   */\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (\n        hasOwnProperty.call(settableStatus, key)\n        || key === 'label'\n        || key === 'disabled'\n      ) {\n        // @ts-ignore\n        // TODO: 待移除\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  /**\n   * 获取本节点的父节点\n   * @return TreeNode 父节点\n   */\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  /**\n   * 获取所有父级节点\n   * - 顺序为从当前到根\n   * @return TreeNode[] 父级节点数组\n   */\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  /**\n   * 获取所有兄弟节点，包含自己在内\n   * @return TreeNode[] 兄弟节点数组\n   */\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  /**\n   * 获取当前节点的子节点\n   * @param {boolean} deep 是否获取所有深层子节点\n   * @return TreeNodeModel[] 子节点数组\n   */\n  public getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n    let childrenModel: boolean | TypeTreeNodeModel[] = false;\n    const { children } = this;\n    if (Array.isArray(children)) {\n      if (children.length > 0) {\n        if (deep) {\n          const nodes = this.walk();\n          nodes.shift();\n          childrenModel = nodes.map((item) => item.getModel());\n        } else {\n          childrenModel = children.map((item) => item.getModel());\n        }\n      } else {\n        childrenModel = false;\n      }\n    } else if (isBoolean(children)) {\n      childrenModel = children;\n    }\n    return childrenModel;\n  }\n\n  /**\n   * 获取本节点的根节点\n   * @return TreeNode 根节点\n   */\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  /**\n   * 获取节点在父节点的子节点列表中的位置\n   * - 如果没有父节点，则获取节点在根节点列表的位置\n   * @return number 节点位置序号\n   */\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  /**\n   * 返回路径节点\n   * - 路径节点包含自己在内\n   * - 节点顺序与父级节点顺序相反，从根到当前\n   * @return TreeNode[] 路径节点数组\n   */\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  /**\n   * 获取节点所在层级\n   * @return number 层级序号\n   */\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  /**\n   * 判断节点是否被过滤\n   * @return boolean 是否被过滤方法命中\n   */\n  public isRest(): boolean {\n    const { config, filterMap, hasFilter } = this.tree;\n\n    let rest = false;\n    if (hasFilter) {\n      // 仅在存在过滤条件时，过滤命中才有效\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  /**\n   * 判断节点是否可见\n   * @return boolean 是否可见\n   */\n  public isVisible(): boolean {\n    const { nodeMap, hasFilter, config } = this.tree;\n    const { allowFoldNodeOnFilter } = config;\n\n    let visible = true;\n\n    if (!nodeMap.get(this.value)) {\n      // 节点不在当前树上，所以不可见\n      return false;\n    }\n\n    if (hasFilter && !allowFoldNodeOnFilter) {\n      // 如果存在过滤条件\n      // 锁定状态和过滤命中状态，直接呈现\n      visible = this.vmIsLocked || this.vmIsRest;\n      return visible;\n    }\n\n    // 标志所有父节点展开导致的可见状态\n    let expandVisible = true;\n    const parents = this.getParents();\n    if (parents.length > 0) {\n      expandVisible = parents.every((node: TreeNode) => node.expanded);\n    }\n\n    if (hasFilter) {\n      visible = expandVisible && (this.vmIsRest || this.vmIsLocked);\n    } else {\n      visible = expandVisible;\n    }\n    return visible;\n  }\n\n  /**\n   * 判断节点是否被禁用\n   * @return boolean 是否被禁用\n   */\n  public isDisabled(): boolean {\n    const { tree } = this;\n    const { hasFilter, config } = tree;\n    const { disabled, allowFoldNodeOnFilter, checkStrictly } = config;\n    if (\n      hasFilter\n      && !allowFoldNodeOnFilter\n      && this.vmIsLocked\n      && !this.vmIsRest\n    ) {\n      return true;\n    }\n    let state = disabled || false;\n    if (typeof this.disabled === 'boolean') {\n      state = this.disabled;\n    }\n    if (!checkStrictly && this.parent?.isDisabled()) {\n      state = true;\n    }\n    return state;\n  }\n\n  /**\n   * 判断节点是否能拖拽\n   * @return boolean 是否能拖拽\n   */\n  public isDraggable(): boolean {\n    let state = !!get(this, 'tree.config.draggable');\n    if (typeof this.draggable === 'boolean') {\n      state = this.draggable;\n    }\n    return state;\n  }\n\n  /**\n   * 判断子节点是否互斥展开\n   * @return boolean 子节点是否互斥展开\n   */\n  public isExpandMutex(): boolean {\n    let state = !!get(this, 'tree.config.expandMutex');\n    if (typeof this.expandMutex === 'boolean') {\n      state = this.expandMutex;\n    }\n    return state;\n  }\n\n  /**\n   * 节点是否可被激活\n   * @return boolean 是否可被激活\n   */\n  public isActivable() {\n    let state = !!get(this, 'tree.config.activable');\n    if (typeof this.activable === 'boolean') {\n      state = this.activable;\n    }\n    return state;\n  }\n\n  /**\n   * 节点是否可选\n   * @return boolean 是否可选\n   */\n  public isCheckable() {\n    let state = !!get(this, 'tree.config.checkable');\n    if (typeof this.checkable === 'boolean') {\n      state = this.checkable;\n    }\n    return state;\n  }\n\n  /**\n   * 节点是否被激活\n   * @param {Map} [map] 预设激活节点 map, 用于计算节点在预期环境中的激活状态\n   * @return boolean 是否被激活\n   */\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  /**\n   * 节点是否已展开\n   * @param {Map} [map] 预设展开节点 map, 用于计算节点在预期环境中的展开状态\n   * @return boolean 是否已展开\n   */\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    const { hasFilter, config } = tree;\n    const { allowFoldNodeOnFilter } = config;\n    if (hasFilter && !allowFoldNodeOnFilter && vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  /**\n   * 节点是否被选中\n   * @param {Map} [map] 预设选中节点 map, 用于计算节点在预期环境中的选中态\n   * @return boolean 是否被选中\n   */\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree, value } = this;\n    const { checkStrictly, valueMode } = tree.config;\n    // 节点不在当前树上，视为未选中\n    if (!tree.nodeMap.get(value)) return false;\n    // 节点不可选，视为未选中\n    if (!this.isCheckable()) return false;\n    const checkedMap = map || tree.checkedMap;\n    // 严格模式，则已经可以判定选中状态\n    if (checkStrictly) {\n      return !!checkedMap.get(value);\n    }\n    let checked = false;\n    // 在 checkedMap 中，则根据 valueMode 的值进行判断\n    if (checkedMap.get(value)\n      && (\n        // 如果 valueMode 为 all、parentFirst，则视为选中\n        valueMode !== 'onlyLeaf'\n        // 如果 valueMode 为 onlyLeaf 并且当前节点是叶子节点，则视为选中\n        || this.isLeaf()\n      )\n    ) {\n      return true;\n    }\n    // 如果 valueMode 为 onlyLeaf 并且当前节点是父节点，则进一步判断\n    if (Array.isArray(children) && children.length > 0) {\n      // 子节点全部选中，则当前节点选中\n      checked = children.every((node) => {\n        const childIsChecked = node.isChecked(checkedMap);\n        return childIsChecked;\n      });\n    } else {\n      // 从父节点状态推断子节点状态\n      // 这里再调用 isChecked 会导致死循环\n      const parents = this.getParents();\n      checked = parents.some((node) => checkedMap.get(node.value));\n    }\n    return checked;\n  }\n\n  /**\n   * 是否为半选状态\n   * @return boolean 是否为半选状态\n   */\n  public isIndeterminate(): boolean {\n    const { children, tree, value } = this;\n    const { checkStrictly } = tree.config;\n    // 节点不在当前树上，视为未选中\n    if (!tree.nodeMap.get(value)) return false;\n    // 节点不可选，视为未选中\n    if (!this.isCheckable()) return false;\n    // 严格模式没有半选状态\n    if (checkStrictly) return false;\n    // 叶节点不存在半选状态\n    if (!Array.isArray(children)) return false;\n\n    let childChecked: null | boolean = null;\n    const indeterminate = children.some((node: TreeNode) => {\n      if (node.isIndeterminate()) {\n        // 子节点有任意一个半选，则其为半选状态\n        return true;\n      }\n      if (isNull(childChecked)) {\n        childChecked = node.isChecked();\n      }\n      if (childChecked !== node.isChecked()) {\n        // 子节点选中状态不一致，则其为半选状态\n        return true;\n      }\n      return false;\n    });\n\n    return indeterminate;\n  }\n\n  /**\n   * 是否为兄弟节点中的第一个节点\n   * @return boolean 是否为第一个节点\n   */\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  /**\n   * 是否为兄弟节点中的最后一个节点\n   * @return boolean 是否为最后一个节点\n   */\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  /**\n   * 是否为叶子节点，叶子节点没有子节点\n   * @return boolean 是否为叶子节点\n   */\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  /**\n   * 锁定节点，解锁节点\n   * - 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n   * @param {boolean} lockState 锁定状态\n   * @return void\n   */\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  /**\n   * 节点展开关闭后需要调用的状态检查函数\n   * @return void\n   */\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n    this.updateChildren();\n  }\n\n  /**\n   * 切换节点展开状态\n   * - 用于受控逻辑处理\n   * - 仅返回预期状态值数组，不直接操作状态\n   * @return string[] 当前树展开的节点值数组\n   */\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  /**\n   * 设置节点展开状态\n   * @param {boolean} expanded 节点展开状态\n   * @param {object} [opts] 操作选项\n   * @param {boolean} [opts.directly=false] 是否直接操作节点状态\n   * @return string[] 当前树展开的节点值数组\n   */\n  public setExpanded(\n    expanded: boolean,\n    opts?: TypeSettingOptions\n  ): TreeNodeValue[] {\n    const { tree } = this;\n    const { config } = tree;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      // 列举需要展开的节点\n      const shouldExpandNodes = [];\n      // 自己一定在展开列表中\n      shouldExpandNodes.push(this);\n      if (config.expandParent) {\n        // expandParent 为 true，则父节点都要展开\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        // 对于每一个节点，都需要判断是否启用手风琴效果\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          // 折叠列表中，先移除同级节点\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n            // 同级节点相关状态更新\n            snode.update();\n            snode.updateChildren();\n          });\n        }\n        // 最后设置自己的折叠状态\n        map.set(node.value, true);\n        node.update();\n        node.updateChildren();\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  /**\n   * 切换节点激活状态\n   * - 用于受控逻辑处理\n   * - 仅返回预期状态值数组，不直接操作状态\n   * @return string[] 当前树激活的节点值数组\n   */\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  /**\n   * 设置节点激活状态\n   * @param {boolean} actived 节点激活状态\n   * @param {object} [opts] 操作选项\n   * @param {boolean} [opts.directly=false] 是否直接操作节点状态\n   * @return string[] 当前树激活的节点值数组\n   */\n  public setActived(\n    actived: boolean,\n    opts?: TypeSettingOptions\n  ): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        const prevKeys = Array.from(map.keys());\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        prevKeys.forEach((value) => {\n          const node = tree.getNode(value);\n          node?.update();\n        });\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    this.update();\n    return tree.getActived(map);\n  }\n\n  /**\n   * 切换节点选中状态\n   * - 用于受控逻辑处理\n   * - 仅返回预期状态值数组，不直接操作状态\n   * @return string[] 当前树选中的节点值数组\n   */\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  /**\n   * 设置节点选中状态\n   * - 节点 UI 操作时调用这个方法\n   * - 节点设置自身状态时调用这个方法\n   * @param {boolean} checked 节点选中状态\n   * @param {object} [opts] 操作选项\n   * @param {boolean} [opts.isAction=true] 是否为 UI 动作\n   * @param {boolean} [opts.directly=false] 是否直接操作节点状态\n   * @return string[] 当前树选中的节点值数组\n   */\n  public setChecked(\n    checked: boolean,\n    opts?: TypeSettingOptions\n  ): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options: TypeSettingOptions = {\n      // 为 true, 为 UI 操作，状态扩散受 disabled 影响\n      // 为 false, 为值操作, 状态扩散不受 disabled 影响\n      isAction: true,\n      // 为 true, 直接操作节点状态\n      // 为 false, 返回预期状态\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (!this.isCheckable()) {\n      // 当前节点非可选节点，则不可设置选中态\n      return tree.getChecked(map);\n    }\n    if (options.isAction && this.isDisabled()) {\n      // 对于 UI 动作，禁用时不可切换选中态\n      return tree.getChecked(map);\n    }\n    if (checked === this.isChecked()) {\n      // 值没有变更，则选中态无变化\n      return tree.getChecked(map);\n    }\n\n    if (checked) {\n      map.set(this.value, true);\n    } else {\n      map.delete(this.value);\n    }\n\n    if (config.checkStrictly) {\n      // 严格模式下，选中态不扩散，仅操作节点自身\n      if (options.directly) {\n        // 严格模式值更新节点自身\n        this.updateChecked();\n      }\n    } else {\n      // 先向下游扩散选中态\n      this.spreadChildrenChecked(checked, map, options);\n      // 再计算上游选中态\n      this.spreadParentChecked(checked, map, options);\n      // 状态更新务必放到扩散动作之后\n      // 过早的状态更新会导致后续计算出错\n      if (options.directly) {\n        const relatedNodes = tree.getRelatedNodes([this.value], {\n          reverse: true,\n        });\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    this.isIndeterminateManual = false;\n\n    return tree.getChecked(map);\n  }\n\n  public setIndeterminate(indeterminate: boolean, opts?: TypeSettingOptions) {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options: TypeSettingOptions = {\n      // 为 true, 为 UI 操作，状态扩散受 disabled 影响\n      // 为 false, 为值操作, 状态扩散不受 disabled 影响\n      isAction: true,\n      // 为 true, 直接操作节点状态\n      // 为 false, 返回预期状态\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (!this.isCheckable()) {\n      // 当前节点非可选节点，则不可设置选中态\n      return tree.getChecked(map);\n    }\n    if (options.isAction && this.isDisabled()) {\n      // 对于 UI 动作，禁用时不可切换选中态\n      return tree.getChecked(map);\n    }\n    if (indeterminate === this.isIndeterminate()) {\n      // 值没有变更，则选中态无变化\n      return tree.getChecked(map);\n    }\n    this.indeterminate = indeterminate;\n    this.isIndeterminateManual = true;\n\n    return tree.getChecked(map);\n  }\n\n  // 选中态向上游扩散\n  private spreadParentChecked(\n    checked: boolean,\n    map?: TypeIdMap,\n    opts?: TypeSettingOptions\n  ) {\n    const options: TypeSettingOptions = {\n      isAction: true,\n      directly: false,\n      ...opts,\n    };\n    // 碰到不可选节点，中断扩散\n    if (!this.isCheckable()) return;\n\n    const { children } = this;\n    if (Array.isArray(children) && children.length > 0) {\n      // 有子节点，则选中态由子节点选中态集合来决定\n      map.delete(this.value);\n    }\n\n    const { parent } = this;\n    if (!parent) return;\n    parent.spreadParentChecked(checked, map, options);\n  }\n\n  // 选中态向下游扩散\n  private spreadChildrenChecked(\n    checked: boolean,\n    map?: TypeIdMap,\n    opts?: TypeSettingOptions\n  ) {\n    const options: TypeSettingOptions = {\n      isAction: true,\n      directly: false,\n      ...opts,\n    };\n\n    // 碰到不可选节点，中断扩散\n    if (!this.isCheckable()) return;\n    // 对于 UI 动作操作，节点禁用，中断扩散\n    if (options.isAction && this.isDisabled()) return;\n\n    const { children } = this;\n    if (!Array.isArray(children)) return;\n    children.forEach((node) => {\n      // 对于 UI 动作，向下扩散时，禁用状态会阻止状态切换\n      if (options.isAction && node.isDisabled()) return;\n      if (checked) {\n        map.set(node.value, true);\n      } else {\n        map.delete(node.value);\n      }\n      node.spreadChildrenChecked(checked, map, options);\n    });\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  /**\n   * 更新节点当前状态，将节点放到延时更新检查队列\n   * @return void\n   */\n  public update(): void {\n    this.level = this.getLevel();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.vmCheckable = this.isCheckable();\n    this.vmIsRest = this.isRest();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n    this.tree.updated(this);\n  }\n\n  /**\n   * 更新节点选中态\n   * @return void\n   */\n  public updateChecked(from?: string): void {\n    const { tree, value, isIndeterminateManual } = this;\n    if (isIndeterminateManual && ['refresh'].includes(from)) {\n      return;\n    }\n\n    const { checkedMap } = tree;\n    this.checked = this.isChecked();\n    this.indeterminate = this.isIndeterminate();\n    if (this.checked) {\n      checkedMap.set(value, true);\n    }\n    tree.updated(this);\n  }\n\n  /**\n   * 更新所有子节点状态\n   * - 不包含自己\n   * @return void\n   */\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  /**\n   * 更新所有父级节点状态\n   * - 不包含自己\n   * @return void\n   */\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  /**\n   * 更新上下游相关节点状态\n   * - 包含自己\n   * @return void\n   */\n  public updateRelated(): void {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      if (node.isIndeterminateManual && node.indeterminate) return;\n      node.updateChecked();\n    });\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  /**\n   * 获取包含自己在内所有的子节点\n   * - 包含自己\n   * @return TreeNode[] 遍历结果节点数组\n   */\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  /**\n   * 获取节点封装对象\n   * - TreeNode 对象 => TypeTreeNodeModel 对象\n   * - TypeTreeNodeModel 用于封装 treeNode 对外暴露的 api\n   * - 用户仅可操作经过封装的对象，减少了对外暴露的 api，利于代码重构\n   * @return TypeTreeNodeModel 节点封装对象\n   */\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["idCounter","uniqueId","prefix","id","toString","getExposedProps","node","props","pick","createNodeModel","model","_objectSpread","getLevel","getIndex","isFirst","isLast","isLeaf","insertBefore","newData","insertAfter","appendData","data","append","getPath","nodes","map","item","getModel","getParent","_node$parent","parent","getParents","getRoot","root","getSiblings","getChildren","deep","childrenModel","children","Array","isArray","length","walk","shift","isBoolean","remove","value","tree","targetNode","getNode","log","warnOnce","concat","parents","parentValues","pnode","indexOf","setData","_data","omit","keys","config","dataValue","dataLabel","label","isUndefined","Object","assign","updateNodeModel","hasOwnProperty","prototype","settableStatus","expandMutex","activable","checkable","draggable","loading","settableProps","syncableProps","privateKey","TreeNode","_this","_classCallCheck","propChildren","propLabel","propValue","propsDisabled","disabled","level","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","visible","actived","checked","indeterminate","expanded","expandAll","isNil","get","nodeMap","privateMap","warn","set","forEach","prop","initActived","initExpanded","initChecked","lazy","loadChildren","expandedMap","updateChecked","update","reflow","_createClass","key","checkedMap","checkStrictly","isNumber","expandLevel","isActivable","activedMap","_this2","list","push","apply","_toConsumableArray","wasLeaf","appendTo","updateRelated","index","_this3","parentNode","targetIndex","targetParents","includeCurrent","some","Error","targetPosNode","siblings","prevLength","prevIndex","curLength","splice","updateNodes","flat","insert","sibling","clean","updateParents","filterMap","_loadChildren","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","isFunction","load","sent","emit","stop","arguments","_this4","call","updated","unshift","reverse","isRest","_this$tree","hasFilter","rest","nodeModel","filter","isVisible","_this$tree2","allowFoldNodeOnFilter","expandVisible","every","isDisabled","_this$parent","state","isDraggable","isExpandMutex","isCheckable","isActived","isExpanded","isChecked","_tree$config","valueMode","childIsChecked","isIndeterminate","childChecked","isNull","lock","lockState","afterExpanded","updateChildren","toggleExpanded","setExpanded","opts","options","directly","Map","shouldExpandNodes","expandParent","_tree$config2","snode","getExpanded","toggleActived","setActived","prevKeys","from","activeMultiple","clear","getActived","toggleChecked","setChecked","isAction","getChecked","spreadChildrenChecked","spreadParentChecked","relatedNodes","getRelatedNodes","isIndeterminateManual","setIndeterminate","includes"],"mappings":"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"}