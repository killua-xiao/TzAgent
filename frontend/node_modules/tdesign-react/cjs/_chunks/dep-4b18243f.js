/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

var _overArg = require('./dep-71455db7.js');
var _Map = require('./dep-25e4aa84.js');
var _baseGetTag = require('./dep-25585736.js');
var _Set = require('./dep-bff2c990.js');

/* Built-in method references that are verified to be native. */
var WeakMap = _Map.getNative(_baseGetTag.root, 'WeakMap');
var WeakMap$1 = WeakMap;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = _overArg.overArg(Object.keys, Object);
var nativeKeys$1 = nativeKeys;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!_overArg.isPrototype(object)) {
    return nativeKeys$1(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/* Built-in method references that are verified to be native. */
var DataView = _Map.getNative(_baseGetTag.root, 'DataView');
var DataView$1 = DataView;

/* Built-in method references that are verified to be native. */
var Promise$1 = _Map.getNative(_baseGetTag.root, 'Promise');
var Promise$2 = Promise$1;

/** `Object#toString` result references. */
var mapTag = '[object Map]',
  objectTag = '[object Object]',
  promiseTag = '[object Promise]',
  setTag = '[object Set]',
  weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = _Map.toSource(DataView$1),
  mapCtorString = _Map.toSource(_Map.Map),
  promiseCtorString = _Map.toSource(Promise$2),
  setCtorString = _Map.toSource(_Set.Set),
  weakMapCtorString = _Map.toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = _baseGetTag.baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag || _Map.Map && getTag(new _Map.Map()) != mapTag || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || _Set.Set && getTag(new _Set.Set()) != setTag || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag) {
  getTag = function getTag(value) {
    var result = _baseGetTag.baseGetTag(value),
      Ctor = result == objectTag ? value.constructor : undefined,
      ctorString = Ctor ? _Map.toSource(Ctor) : '';
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}
var getTag$1 = getTag;

exports.baseKeys = baseKeys;
exports.getTag = getTag$1;
//# sourceMappingURL=dep-4b18243f.js.map
