{"version":3,"file":"Space.js","sources":["../../../components/space/Space.tsx"],"sourcesContent":["import React, { CSSProperties, ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { isFragment } from 'react-is';\nimport { getFlexGapPolyFill } from '@tdesign/common-js/utils/helper';\nimport useConfig from '../hooks/useConfig';\nimport { TdSpaceProps } from './type';\nimport { StyledProps } from '../common';\nimport { spaceDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\n// export for test\nexport const SizeMap = { small: '8px', medium: '16px', large: '24px' };\nconst defaultNeedPolyfill = getFlexGapPolyFill();\n\nexport interface SpaceProps extends TdSpaceProps, StyledProps {\n  children?: React.ReactNode;\n  /** 强制使用 margin 间距代替 gap 属性间距（某些浏览器不支持 gap 属性） */\n  forceFlexGapPolyfill?: boolean;\n}\n\nconst toArray = (children: React.ReactNode): React.ReactElement[] => {\n  let ret: React.ReactElement[] = [];\n\n  React.Children.forEach(children, (child: any) => {\n    if (child === undefined || child === null) {\n      return;\n    }\n\n    if (Array.isArray(child)) {\n      ret = ret.concat(toArray(child));\n    } else if (isFragment(child) && child.props) {\n      ret = ret.concat(toArray((child as any).props.children));\n    } else {\n      ret.push(child);\n    }\n  });\n\n  return ret;\n};\n\nconst EMPTY_NODE: ReactNode[] = ['', false, null, undefined];\n\nconst Space = React.forwardRef<HTMLDivElement, SpaceProps>((originalProps, ref) => {\n  const props = useDefaultProps<SpaceProps>(originalProps, spaceDefaultProps);\n  const { className, style, align, direction, size, breakLine, separator, forceFlexGapPolyfill } = props;\n  const { classPrefix } = useConfig();\n\n  const needPolyfill = Boolean(forceFlexGapPolyfill || defaultNeedPolyfill);\n\n  const renderStyle = useMemo<React.CSSProperties>(() => {\n    let renderGap = '';\n    if (Array.isArray(size)) {\n      renderGap = size\n        .map((s) => {\n          if (typeof s === 'number') {\n            return `${s}px`;\n          }\n          if (typeof s === 'string') {\n            return SizeMap[s] || s;\n          }\n          return s;\n        })\n        .join(' ');\n    } else if (typeof size === 'string') {\n      renderGap = SizeMap[size] || size;\n    } else if (typeof size === 'number') {\n      renderGap = `${size}px`;\n    }\n\n    const tStyle: CSSProperties = { ...style };\n    if (needPolyfill) {\n      const [columnGap, rowGap] = renderGap.split(' ');\n      tStyle['--td-space-column-gap'] = columnGap;\n      tStyle['--td-space-row-gap'] = rowGap || columnGap;\n    } else {\n      tStyle.gap = renderGap;\n    }\n    return tStyle;\n  }, [style, size, needPolyfill]);\n\n  const childrenNode = React.useMemo<React.ReactNode[]>(() => {\n    const children = toArray(props.children);\n    const childCount = React.Children.count(children);\n    return React.Children.map(children, (child, index) => {\n      // filter last child\n      const showSeparator = index + 1 !== childCount && separator;\n      return (\n        <>\n          {EMPTY_NODE.includes(child) ? null : <div className={`${classPrefix}-space-item`}>{child}</div>}\n          {showSeparator && <div className={`${classPrefix}-space-item-separator`}>{separator}</div>}\n        </>\n      );\n    });\n  }, [props.children, classPrefix, separator]);\n\n  return (\n    <div\n      ref={ref}\n      style={renderStyle}\n      className={classNames(`${classPrefix}-space`, className, {\n        [`${classPrefix}-space-align-${align}`]: align,\n        [`${classPrefix}-space-${direction}`]: direction,\n        [`${classPrefix}-space--break-line`]: breakLine,\n        [`${classPrefix}-space--polyfill`]: needPolyfill,\n      })}\n    >\n      {childrenNode}\n    </div>\n  );\n});\n\nSpace.displayName = 'Space';\n\nexport default Space;\n"],"names":["SizeMap","small","medium","large","defaultNeedPolyfill","getFlexGapPolyFill","toArray","children","ret","React","Children","forEach","child","Array","isArray","concat","isFragment","props","push","EMPTY_NODE","Space","forwardRef","originalProps","ref","useDefaultProps","spaceDefaultProps","className","style","align","direction","size","breakLine","separator","forceFlexGapPolyfill","_useConfig","useConfig","classPrefix","needPolyfill","Boolean","renderStyle","useMemo","renderGap","map","s","join","tStyle","_objectSpread","_renderGap$split","split","_renderGap$split2","_slicedToArray","columnGap","rowGap","gap","childrenNode","childCount","count","index","showSeparator","includes","createElement","classNames","_defineProperty","displayName"],"mappings":"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"}