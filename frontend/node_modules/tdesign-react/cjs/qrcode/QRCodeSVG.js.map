{"version":3,"file":"QRCodeSVG.js","sources":["../../../components/qrcode/QRCodeSVG.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  DEFAULT_BACKGROUND_COLOR,\n  DEFAULT_FRONT_COLOR,\n  DEFAULT_NEED_MARGIN,\n  DEFAULT_LEVEL,\n  DEFAULT_MINVERSION,\n  DEFAULT_SIZE,\n  excavateModules,\n  generatePath,\n} from '@tdesign/common-js/qrcode/utils';\nimport { useQRCode, QRPropsSVG } from './hooks/useQRCode';\n\nconst QRCodeSVG = React.forwardRef<SVGSVGElement, QRPropsSVG>((props, ref) => {\n  const {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BACKGROUND_COLOR,\n    fgColor = DEFAULT_FRONT_COLOR,\n    includeMargin = DEFAULT_NEED_MARGIN,\n    minVersion = DEFAULT_MINVERSION,\n    title,\n    marginSize,\n    imageSettings,\n    ...otherProps\n  } = props;\n\n  const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n    value,\n    level,\n    minVersion,\n    includeMargin,\n    marginSize,\n    imageSettings,\n    size,\n  });\n\n  let cellsToDraw = cells;\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cellsToDraw = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n\n    image = (\n      <image\n        href={imageSettings.src}\n        height={calculatedImageSettings.h}\n        width={calculatedImageSettings.w}\n        x={calculatedImageSettings.x + margin}\n        y={calculatedImageSettings.y + margin}\n        preserveAspectRatio=\"none\"\n        opacity={calculatedImageSettings.opacity}\n        // when crossOrigin is not set, the image will be tainted\n        // and the canvas cannot be exported to an image\n        // eslint-disable-next-line react/no-unknown-property\n        crossOrigin={calculatedImageSettings.crossOrigin}\n      />\n    );\n  }\n\n  const fgPath = generatePath(cellsToDraw, margin);\n\n  return (\n    <svg height={size} width={size} viewBox={`0 0 ${numCells} ${numCells}`} ref={ref} role=\"img\" {...otherProps}>\n      {!!title && <title>{title}</title>}\n      <path fill={bgColor} d={`M0,0 h${numCells}v${numCells}H0z`} shapeRendering=\"crispEdges\" />\n      <path fill={fgColor} d={fgPath} shapeRendering=\"crispEdges\" />\n      {image}\n    </svg>\n  );\n});\n\nQRCodeSVG.displayName = 'QRCodeSVG';\n\nexport { QRCodeSVG };\n"],"names":["QRCodeSVG","React","forwardRef","props","ref","value","_props$size","size","DEFAULT_SIZE","_props$level","level","DEFAULT_LEVEL","_props$bgColor","bgColor","DEFAULT_BACKGROUND_COLOR","_props$fgColor","fgColor","DEFAULT_FRONT_COLOR","_props$includeMargin","includeMargin","DEFAULT_NEED_MARGIN","_props$minVersion","minVersion","DEFAULT_MINVERSION","title","marginSize","imageSettings","otherProps","_objectWithoutProperties","_excluded","_useQRCode","useQRCode","margin","cells","numCells","calculatedImageSettings","cellsToDraw","image","excavation","excavateModules","createElement","href","src","height","h","width","w","x","y","preserveAspectRatio","opacity","crossOrigin","fgPath","generatePath","_objectSpread","viewBox","concat","role","fill","d","shapeRendering","displayName"],"mappings":"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"}