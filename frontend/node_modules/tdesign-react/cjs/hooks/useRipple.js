/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var setStyle = require('../_chunks/dep-dc4ce063.js');
var hooks_useConfig = require('./useConfig.js');
var hooks_useAnimation = require('./useAnimation.js');
var _util_style = require('../_chunks/dep-381fa848.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-0006fcfa.js');
require('../_chunks/dep-667ac7af.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-ec8d2dca.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('../_chunks/dep-4ed9eda4.js');

var period = 200;
var noneRippleBg = "rgba(0, 0, 0, 0)";
var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
var getRippleColor = function getRippleColor(el, fixedRippleColor) {
  var _el$dataset;
  if (fixedRippleColor) {
    return fixedRippleColor;
  }
  if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
    var rippleColor = el.dataset.ripple;
    return rippleColor;
  }
  var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
  if (cssVariable) {
    return cssVariable;
  }
  return defaultRippleColor;
};
function useRipple(el, fixedRippleColor) {
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var _useAnimation = hooks_useAnimation["default"](),
    keepRipple = _useAnimation.keepRipple;
  var rippleContainer = React.useMemo(function () {
    if (!_util_style.canUseDocument) return null;
    var container = document.createElement("div");
    container.className = "".concat(classPrefix, "-ripple");
    return container;
  }, [classPrefix]);
  var handleAddRipple = React.useCallback(function (e) {
    var rippleColor = getRippleColor(el, fixedRippleColor);
    if (e.button !== 0 || !el || !keepRipple) return;
    if (el.classList.contains("".concat(classPrefix, "-is-active")) || el.classList.contains("".concat(classPrefix, "-is-disabled")) || el.classList.contains("".concat(classPrefix, "-is-checked")) || el.classList.contains("".concat(classPrefix, "-is-loading"))) return;
    var elStyle = getComputedStyle(el);
    var elBorder = parseInt(elStyle.borderWidth, 10);
    var border = elBorder > 0 ? elBorder : 0;
    var width = el.offsetWidth;
    var height = el.offsetHeight;
    if (rippleContainer.parentNode === null) {
      setStyle.setStyle(rippleContainer, {
        position: "absolute",
        left: "".concat(0 - border, "px"),
        top: "".concat(0 - border, "px"),
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        borderRadius: elStyle.borderRadius,
        pointerEvents: "none",
        overflow: "hidden"
      });
      el.appendChild(rippleContainer);
    }
    var ripple = document.createElement("div");
    ripple.className = "".concat(classPrefix, "-ripple__inner");
    setStyle.setStyle(ripple, {
      marginTop: "0",
      marginLeft: "0",
      right: "".concat(width, "px"),
      width: "".concat(width + 20, "px"),
      height: "100%",
      transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
      transform: "skewX(-8deg)",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      backgroundColor: rippleColor,
      opacity: "0.9"
    });
    var elMap = /* @__PURE__ */new WeakMap();
    for (var n = el.children.length, i = 0; i < n; ++i) {
      var child = el.children[i];
      if (child.style.zIndex === "" && child !== rippleContainer) {
        child.style.zIndex = "1";
        elMap.set(child, true);
      }
    }
    var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;
    if (initPosition === "" || initPosition === "static") {
      el.style.position = "relative";
    }
    rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
    setTimeout(function () {
      ripple.style.transform = "translateX(".concat(width, "px)");
    }, 0);
    var _handleClearRipple = function handleClearRipple() {
      ripple.style.backgroundColor = noneRippleBg;
      if (!el) return;
      el.removeEventListener("pointerup", _handleClearRipple, false);
      el.removeEventListener("pointerleave", _handleClearRipple, false);
      setTimeout(function () {
        ripple.remove();
        if (rippleContainer.children.length === 0) rippleContainer.remove();
      }, period * 2 + 100);
    };
    el.addEventListener("pointerup", _handleClearRipple, false);
    el.addEventListener("pointerleave", _handleClearRipple, false);
  }, [classPrefix, el, fixedRippleColor, rippleContainer, keepRipple]);
  React.useEffect(function () {
    if (!el) return;
    el.addEventListener("pointerdown", handleAddRipple, false);
    return function () {
      el.removeEventListener("pointerdown", handleAddRipple, false);
    };
  }, [handleAddRipple, fixedRippleColor, el]);
}

exports["default"] = useRipple;
//# sourceMappingURL=useRipple.js.map
