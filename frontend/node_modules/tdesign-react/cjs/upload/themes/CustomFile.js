/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-0006fcfa.js');
var React = require('react');
var upload_hooks_useDrag = require('../hooks/useDrag.js');
var _util_parseTNode = require('../../_util/parseTNode.js');
require('../../_chunks/dep-667ac7af.js');
require('../../_chunks/dep-8e4d656d.js');
require('../../_chunks/dep-00b49251.js');
require('../../_chunks/dep-f4d844cc.js');
require('../../_chunks/dep-59671c87.js');
require('../../_chunks/dep-ec8d2dca.js');
require('../../_chunks/dep-25585736.js');
require('../../_chunks/dep-fc596d16.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CustomFile = function CustomFile(props) {
  var classPrefix = props.classPrefix,
    displayFiles = props.displayFiles,
    accept = props.accept;
  var drag = upload_hooks_useDrag["default"](_objectSpread(_objectSpread({}, props.dragEvents), {}, {
    accept: accept
  }));
  var dragActive = drag.dragActive;
  var dragEvents = props.draggable ? {
    onDrop: drag.handleDrop,
    onDragEnter: drag.handleDragenter,
    onDragOver: drag.handleDragover,
    onDragLeave: drag.handleDragleave
  } : {};
  var renderDragContent = function renderDragContent() {
    var childrenContent = _util_parseTNode["default"](props.childrenNode, {
      dragActive: dragActive,
      files: displayFiles
    });
    var triggerContent = _util_parseTNode["default"](props.trigger, {
      dragActive: dragActive,
      files: displayFiles
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread(_objectSpread({
      className: "".concat(classPrefix, "-upload__dragger ").concat(classPrefix, "-upload__dragger-center")
    }, dragEvents), {}, {
      onClick: props.triggerUpload
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__trigger")
    }, _util_parseTNode["default"](props.dragContent, {
      dragActive: dragActive,
      files: displayFiles
    }) || triggerContent || childrenContent));
  };
  return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props.draggable ? renderDragContent() : /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-upload__trigger"),
    onClick: props.triggerUpload
  }, props.childrenNode || props.children));
};
CustomFile.displayName = "CustomFile";

exports["default"] = CustomFile;
//# sourceMappingURL=CustomFile.js.map
