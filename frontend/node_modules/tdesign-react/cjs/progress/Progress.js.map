{"version":3,"file":"Progress.js","sources":["../../../components/progress/Progress.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport {\n  CloseIcon as TdCloseIcon,\n  CheckIcon as TdCheckIcon,\n  ErrorIcon as TdErrorIcon,\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n} from 'tdesign-icons-react';\nimport useConfig from '../hooks/useConfig';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport getBackgroundColor from '../_util/linearGradient';\nimport { StyledProps } from '../common';\nimport { TdProgressProps } from './type';\nimport { progressDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface ProgressProps extends TdProgressProps, StyledProps {}\n/**\n * 按钮组件\n */\nconst Progress = forwardRef<HTMLDivElement, ProgressProps>((props, ref) => {\n  const { classPrefix } = useConfig();\n  const {\n    CheckCircleIcon,\n    CloseCircleIcon,\n    ErrorCircleIcon,\n    CheckCircleFilledIcon,\n    CloseCircleFilledIcon,\n    ErrorCircleFilledIcon,\n  } = useGlobalIcon({\n    CheckCircleIcon: TdCheckIcon,\n    CloseCircleIcon: TdCloseIcon,\n    ErrorCircleIcon: TdErrorIcon,\n    CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n    CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n    ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n  });\n\n  const {\n    theme,\n    percentage,\n    label,\n    color = '',\n    trackColor,\n    strokeWidth,\n    size,\n    className,\n    style,\n    status: customizeStatus,\n  } = useDefaultProps<ProgressProps>(props, progressDefaultProps);\n\n  const status = !customizeStatus && percentage >= 100 ? 'success' : customizeStatus;\n\n  let iconMap = {\n    success: CheckCircleFilledIcon,\n    error: CloseCircleFilledIcon,\n    warning: ErrorCircleFilledIcon,\n  };\n  // 进度条展示内容\n  const getInfoContent = () => {\n    if (!label) {\n      return '';\n    }\n    let info: React.ReactNode;\n    // 为布尔值，默认百分百展示，否则之间展示 label 内容\n    if (typeof label === 'boolean') {\n      info = <div className={`${classPrefix}-progress__info`}>{`${percentage}%`}</div>;\n      if (['success', 'error', 'warning'].includes(status)) {\n        const Icon = iconMap[status];\n        info = (\n          <div className={`${classPrefix}-progress__info`}>\n            <Icon className={`${classPrefix}-progress__icon`} />\n          </div>\n        );\n      }\n    } else {\n      info = <div className={`${classPrefix}-progress__info`}>{label}</div>;\n    }\n    return info;\n  };\n  const statusClassName = `${classPrefix}-progress--status--${status}`;\n  let progressDom: React.ReactNode;\n  if (theme === 'circle') {\n    iconMap = {\n      success: CheckCircleIcon,\n      error: CloseCircleIcon,\n      warning: ErrorCircleIcon,\n    };\n    // 获取直径\n    const getDiameter = (): number => {\n      let diameter = 112;\n      if (!size) {\n        return diameter;\n      }\n      switch (size) {\n        default:\n          diameter = Number(size);\n          break;\n        case 'small':\n          diameter = 72;\n          break;\n        case 'medium':\n          diameter = 112;\n          break;\n        case 'large':\n          diameter = 160;\n          break;\n      }\n      return diameter;\n    };\n    // 获取环形进度条 环的宽度\n    const getCircleStokeWidth = (): number => {\n      if (!strokeWidth) {\n        if (size === 'small') {\n          return 4;\n        }\n      }\n      if (typeof strokeWidth !== 'number' || Number.isNaN(strokeWidth)) {\n        return 6;\n      }\n      return strokeWidth;\n    };\n    // 环形进度条尺寸(进度条占位空间，长宽占位)\n    const circleStokeWidth = getCircleStokeWidth();\n    // 直径\n    const diameter = getDiameter();\n    // 半径\n    const radius = diameter / 2;\n    // 内环半径\n    const innerRadius = radius - circleStokeWidth;\n\n    const perimeter = Math.PI * 2 * radius;\n    const percent = percentage / 100;\n    const strokeDasharray = `${perimeter * percent}  ${perimeter * (1 - percent)}`;\n    // 自适应文字，根据半路，适度调整\n    const fontSizeRatio = innerRadius * 0.27;\n    const circleBoxStyle = {\n      width: diameter,\n      height: diameter,\n      fontSize: 4 + fontSizeRatio,\n    } as React.CSSProperties;\n    const circlePathStyle = {\n      stroke: color,\n      strokeLinecap: circleStokeWidth < 30 ? 'round' : 'buff',\n    } as React.CSSProperties;\n    const circleCenterInViewBox = radius + circleStokeWidth / 2;\n    progressDom = (\n      <div\n        ref={ref}\n        className={classNames(`${classPrefix}-progress--circle`, {\n          [`${statusClassName}`]: status,\n        })}\n        style={circleBoxStyle}\n      >\n        {getInfoContent()}\n        <svg\n          width={diameter}\n          height={diameter}\n          viewBox={`0 0 ${diameter + circleStokeWidth} ${diameter + circleStokeWidth}`}\n        >\n          <circle\n            cx={circleCenterInViewBox}\n            cy={circleCenterInViewBox}\n            r={radius}\n            strokeWidth={circleStokeWidth}\n            stroke={trackColor || 'var(--td-bg-color-component)'}\n            fill=\"none\"\n          ></circle>\n          {percentage > 0 && (\n            <circle\n              cx={circleCenterInViewBox}\n              cy={circleCenterInViewBox}\n              r={radius}\n              strokeWidth={circleStokeWidth}\n              fill=\"none\"\n              transform={`matrix(0,-1,1,0,0,${diameter + circleStokeWidth})`}\n              strokeDasharray={strokeDasharray}\n              className={`${classPrefix}-progress__circle-inner`}\n              style={circlePathStyle}\n            ></circle>\n          )}\n        </svg>\n      </div>\n    );\n    return <div className={className}>{progressDom}</div>;\n  }\n  // 进度条轨道高度\n  const getHeight = (): string => {\n    if (strokeWidth) {\n      return typeof strokeWidth === 'string' ? strokeWidth : `${strokeWidth}px`;\n    }\n  };\n  const trackStyle = {\n    height: getHeight(),\n    backgroundColor: trackColor,\n    borderRadius: getHeight(),\n  } as React.CSSProperties;\n  const barStyle = {\n    width: `${percentage}%`,\n    background: getBackgroundColor(color),\n    borderRadius: getHeight(),\n  } as React.CSSProperties;\n  if (theme === 'plump') {\n    const PLUMP_SEPARATE = 10;\n    progressDom = (\n      <div\n        ref={ref}\n        className={classNames(`${classPrefix}-progress__bar`, `${classPrefix}-progress--plump`, {\n          [`${statusClassName}`]: status,\n          [`${classPrefix}-progress--over-ten`]: percentage > PLUMP_SEPARATE,\n          [`${classPrefix}-progress--under-ten`]: percentage <= PLUMP_SEPARATE,\n        })}\n        style={trackStyle}\n      >\n        {percentage > PLUMP_SEPARATE ? (\n          <div className={`${classPrefix}-progress__inner`} style={barStyle}>\n            {label && (\n              <div className={`${classPrefix}-progress__info`} style={{ color: '#fff' }}>{`${percentage}%`}</div>\n            )}\n          </div>\n        ) : (\n          <>\n            <div className={`${classPrefix}-progress__inner`} style={barStyle}></div>\n            {getInfoContent()}\n          </>\n        )}\n      </div>\n    );\n  } else {\n    progressDom = (\n      <div\n        ref={ref}\n        className={classNames(`${classPrefix}-progress--thin`, {\n          [`${statusClassName}`]: status,\n        })}\n      >\n        <div className={`${classPrefix}-progress__bar`} style={trackStyle}>\n          <div className={`${classPrefix}-progress__inner`} style={barStyle}></div>\n        </div>\n        {getInfoContent()}\n      </div>\n    );\n  }\n  return (\n    <div className={className} style={style}>\n      {progressDom}\n    </div>\n  );\n});\n\nProgress.displayName = 'Progress';\n\nexport default Progress;\n"],"names":["Progress","forwardRef","props","ref","_useConfig","useConfig","classPrefix","_useGlobalIcon","useGlobalIcon","CheckCircleIcon","TdCheckIcon","CloseCircleIcon","TdCloseIcon","ErrorCircleIcon","TdErrorIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","_useDefaultProps","useDefaultProps","progressDefaultProps","theme","percentage","label","_useDefaultProps$colo","color","trackColor","strokeWidth","size","className","style","customizeStatus","status","iconMap","success","error","warning","getInfoContent","info","React","createElement","concat","includes","Icon","statusClassName","progressDom","getDiameter","diameter","Number","getCircleStokeWidth","isNaN","circleStokeWidth","radius","innerRadius","perimeter","Math","PI","percent","strokeDasharray","fontSizeRatio","circleBoxStyle","width","height","fontSize","circlePathStyle","stroke","strokeLinecap","circleCenterInViewBox","classNames","_defineProperty","viewBox","cx","cy","r","fill","transform","getHeight","trackStyle","backgroundColor","borderRadius","barStyle","background","getBackgroundColor","PLUMP_SEPARATE","displayName"],"mappings":"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"}