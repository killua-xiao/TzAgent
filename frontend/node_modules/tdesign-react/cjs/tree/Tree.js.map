{"version":3,"file":"Tree.js","sources":["../../../components/tree/Tree.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  useState,\n  useImperativeHandle,\n  useMemo,\n  RefObject,\n  MouseEvent,\n  useRef,\n  useCallback,\n} from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { get } from 'lodash-es';\n\nimport TreeNode from '@tdesign/common-js/tree-v1/tree-node';\nimport log from '@tdesign/common-js/log/index';\nimport type {\n  TreeNodeState,\n  TreeNodeValue,\n  TypeTreeNodeData,\n  TypeTreeNodeModel,\n} from '@tdesign/common-js/tree-v1/types';\nimport { TreeOptionData, StyledProps, ComponentScrollToElementParams } from '../common';\nimport { TreeItemProps } from './interface';\nimport TreeItem from './TreeItem';\n\nimport useControllable from './hooks/useControllable';\nimport { useStore } from './hooks/useStore';\nimport { useTreeConfig } from './hooks/useTreeConfig';\nimport { TreeDraggableContext } from './hooks/TreeDraggableContext';\nimport parseTNode from '../_util/parseTNode';\nimport { usePersistFn } from '../hooks/usePersistFn';\nimport useTreeVirtualScroll from './hooks/useTreeVirtualScroll';\n\nimport type { TreeInstanceFunctions, TdTreeProps } from './type';\nimport { treeDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport type TreeProps = TdTreeProps & StyledProps;\n\nconst Tree = forwardRef<TreeInstanceFunctions<TreeOptionData>, TreeProps>((originalProps, ref) => {\n  const { treeClassNames, transitionNames, transitionClassNames, transitionDuration, locale } = useTreeConfig();\n\n  const { value, onChange, expanded, onExpand, onActive, actived, setTreeIndeterminate, indeterminate } =\n    useControllable(originalProps);\n  const props = useDefaultProps<TreeProps>(originalProps, treeDefaultProps);\n  const {\n    empty,\n    activable,\n    disabled,\n    checkable,\n    checkProps,\n    disableCheck,\n    hover,\n    icon,\n    line,\n    label,\n    operations,\n    transition, // 动画默认开启\n    expandOnClickNode,\n    onClick,\n    scroll,\n    className,\n    style,\n    allowDrop,\n    onScroll,\n  } = props;\n\n  // 可见节点集合\n  const [visibleNodes, setVisibleNodes] = useState([]);\n\n  // 国际化文本初始化\n  const emptyText = empty || locale('empty');\n\n  const store = useStore(\n    {\n      ...props,\n      value,\n      onChange,\n      expanded,\n      onExpand,\n      onActive,\n      actived,\n      indeterminate,\n      setTreeIndeterminate,\n    },\n    initial,\n  );\n\n  function initial() {\n    const nodes = store?.getNodes();\n    const newVisibleNodes = nodes?.filter((node) => node.visible);\n    setVisibleNodes(newVisibleNodes);\n  }\n  // 因为是被 useImperativeHandle 依赖的方法，使用 usePersistFn 变成持久化的。或者也可以使用 useCallback\n  const setExpanded = usePersistFn(\n    (\n      node: TreeNode,\n      isExpanded: boolean,\n      ctx: { e?: MouseEvent<HTMLDivElement>; trigger: 'node-click' | 'icon-click' | 'setItem' },\n    ) => {\n      const { e, trigger } = ctx;\n      const expanded = node.setExpanded(isExpanded);\n      const treeNodeModel = node?.getModel();\n      (e || trigger) && onExpand?.(expanded, { node: treeNodeModel, e, trigger });\n      return expanded;\n    },\n  );\n\n  // 因为是被 useImperativeHandle 依赖的方法，使用 usePersistFn 变成持久化的。或者也可以使用 useCallback\n  const setIndeterminate = usePersistFn(\n    (\n      node: TreeNode,\n      isIndeterminate: boolean,\n      ctx: { e?: MouseEvent<HTMLDivElement>; trigger: 'node-click' | 'icon-click' | 'setItem' },\n    ) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { e, trigger } = ctx;\n      const indeterminate = node.setIndeterminate(isIndeterminate);\n      return indeterminate;\n    },\n  );\n\n  const treeRef = useRef(null);\n\n  const {\n    visibleData,\n    isVirtual,\n    treeNodeStyle: virtualTreeNodeStyle,\n    cursorStyle,\n    handleRowMounted,\n    scrollToElement,\n  } = useTreeVirtualScroll({\n    treeRef,\n    scroll,\n    data: visibleNodes,\n    onScroll,\n  });\n\n  const setActived = usePersistFn(\n    (\n      node: TreeNode,\n      isActived: boolean,\n      ctx: { e?: MouseEvent<HTMLDivElement>; trigger: 'node-click' | 'setItem' },\n    ) => {\n      const actived = node.setActived(isActived);\n      const treeNodeModel = node?.getModel();\n      onActive?.(actived, { node: treeNodeModel, ...ctx });\n      return actived;\n    },\n  );\n\n  const setChecked = usePersistFn(\n    (node: TreeNode, isChecked: boolean, ctx: { e?: any; trigger: 'node-click' | 'setItem' }) => {\n      const checked = node.setChecked(isChecked);\n      const treeNodeModel = node?.getModel();\n      onChange?.(checked, { node: treeNodeModel, ...ctx });\n      return checked;\n    },\n  );\n\n  const handleItemClick: TreeItemProps['onClick'] = (node, options) => {\n    if (!node) {\n      return;\n    }\n    const isDisabled = disabled || node.disabled;\n    const { expand, active, e, trigger } = options;\n    if (expand) setExpanded(node, !node.isExpanded(), { e, trigger });\n\n    if (!isDisabled) {\n      const treeNodeModel = node?.getModel();\n      if (active) {\n        setActived(node, !node.isActived(), { e, trigger: 'node-click' });\n        onClick?.({ node: treeNodeModel, e });\n      } else {\n        onClick?.({ node: treeNodeModel, e });\n      }\n    }\n  };\n\n  const handleChange: TreeItemProps['onChange'] = (node, ctx) => {\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n    setChecked(node, !node.isChecked(), { ...ctx, trigger: 'node-click' });\n  };\n  const handleScrollToElement = useCallback(\n    (params: ComponentScrollToElementParams) => {\n      let { index } = params;\n\n      if (!index && index !== 0) {\n        if (!params.key) {\n          log.error('Tree', 'scrollToElement: one of `index` or `key` must exist.');\n          return;\n        }\n        const data = visibleNodes;\n        index = data?.findIndex((item) => [get(item.data, 'key'), get(item.data, 'value')].includes(params.key));\n        if (index < 0) {\n          log.error('Tree', `${params.key} does not exist in data, check \\`key\\` or \\`data\\` please.`);\n        }\n      }\n      scrollToElement({ ...params, index });\n    },\n    [scrollToElement, visibleNodes],\n  );\n  /** 对外暴露的公共方法 * */\n  useImperativeHandle<unknown, TreeInstanceFunctions>(\n    ref,\n    () => ({\n      store,\n      scrollTo: (p: ComponentScrollToElementParams) => handleScrollToElement(p),\n      appendTo(value, newData) {\n        let list = [];\n        if (Array.isArray(newData)) {\n          list = newData;\n        } else {\n          list = [newData];\n        }\n        list.forEach((item) => {\n          store.appendNodes(value, item);\n        });\n      },\n      getIndex(value: TreeNodeValue): number {\n        return store.getNodeIndex(value);\n      },\n      getItem(value: TreeNodeValue): TypeTreeNodeModel {\n        const node: TreeNode = store.getNode(value);\n        return node?.getModel();\n      },\n      getItems(value?: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getNodes(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getParent(value: TreeNodeValue): TypeTreeNodeModel {\n        const node = store.getParent(value);\n        return node?.getModel();\n      },\n      getParents(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getParents(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getPath(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const node = store.getNode(value);\n        let pathNodes = [];\n        if (node) {\n          pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n        }\n        return pathNodes;\n      },\n      insertAfter(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertAfter(value, newData as TypeTreeNodeData);\n      },\n      insertBefore(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertBefore(value, newData as TypeTreeNodeData);\n      },\n      remove(value: TreeNodeValue): void {\n        return store.remove(value);\n      },\n      setItem(value: TreeNodeValue, options: TreeNodeState): void {\n        const node: TreeNode = this.store.getNode(value);\n        const spec = options;\n        if (node && spec) {\n          if ('expanded' in options) {\n            setExpanded(node, spec.expanded, { trigger: 'setItem' });\n            delete spec.expanded;\n          }\n          if ('actived' in options) {\n            setActived(node, spec.actived, { trigger: 'setItem' });\n            delete spec.actived;\n          }\n          if ('checked' in options) {\n            setChecked(node, spec.checked, { trigger: 'setItem' });\n            delete spec.checked;\n          }\n          if ('indeterminate' in options) {\n            // @ts-ignore\n            setTreeIndeterminate((prevIndeterminate: TreeNodeValue[]) => [...prevIndeterminate, value]);\n            setIndeterminate(node, spec.indeterminate, { trigger: 'setItem' });\n            delete spec.indeterminate;\n          }\n          node.set(spec);\n        }\n      },\n    }),\n    [store, setExpanded, setActived, setTreeIndeterminate, setChecked, setIndeterminate, handleScrollToElement],\n  );\n\n  /* ======== render ======= */\n  // https://github.com/reactjs/react-transition-group/issues/668\n  // CSSTransition 不指定 nodeRef 的时候会使用 findDOMNode 获取 dom\n  // 因为 CSSTransition 是个数组，与 visibleNodes 对应，所以这里根据 visibleNodes 的长度创建 ref 用来保存 dom\n  // visibleNodes 改变的时候，释放上一个 nodeList，防止内存泄漏\n  const nodeList = useMemo<RefObject<HTMLDivElement>[]>(\n    () => visibleNodes.map(() => React.createRef()),\n    [visibleNodes],\n  );\n\n  const renderEmpty = () => parseTNode(emptyText);\n\n  const renderItems = (renderNode: TreeNode[]) => {\n    if (renderNode.length <= 0) {\n      return renderEmpty();\n    }\n    if (isVirtual)\n      return (\n        <div className={treeClassNames.treeList} style={virtualTreeNodeStyle}>\n          {renderNode.map((node, index) => (\n            <TreeItem\n              ref={nodeList[index]}\n              key={node.value}\n              node={node}\n              keys={props.keys}\n              empty={empty}\n              icon={icon}\n              label={label}\n              line={line}\n              allowDrop={allowDrop}\n              transition={transition}\n              expandOnClickNode={expandOnClickNode}\n              activable={activable}\n              operations={operations}\n              checkProps={checkProps}\n              disableCheck={disableCheck}\n              onClick={handleItemClick}\n              onChange={handleChange}\n              onTreeItemMounted={handleRowMounted}\n              isVirtual={isVirtual}\n            />\n          ))}\n        </div>\n      );\n\n    return (\n      <TransitionGroup name={transitionNames.treeNode} className={treeClassNames.treeList}>\n        {renderNode.map((node, index) => (\n          // https://github.com/reactjs/react-transition-group/issues/668\n          <CSSTransition\n            nodeRef={nodeList[index]}\n            key={node.value}\n            timeout={transitionDuration}\n            classNames={transitionClassNames}\n          >\n            <TreeItem\n              ref={nodeList[index]}\n              node={node}\n              keys={props.keys}\n              empty={empty}\n              icon={icon}\n              label={label}\n              line={line}\n              allowDrop={allowDrop}\n              transition={transition}\n              expandOnClickNode={expandOnClickNode}\n              activable={activable}\n              operations={operations}\n              checkProps={checkProps}\n              disableCheck={disableCheck}\n              onClick={handleItemClick}\n              onChange={handleChange}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  };\n\n  const draggable = useMemo(\n    () => ({\n      props,\n      store,\n    }),\n    [props, store],\n  );\n\n  return (\n    <TreeDraggableContext.Provider value={draggable}>\n      <div\n        className={classNames(treeClassNames.tree, className, {\n          [treeClassNames.disabled]: disabled,\n          [treeClassNames.treeHoverable]: hover,\n          [treeClassNames.treeCheckable]: checkable,\n          [treeClassNames.treeFx]: transition,\n          [treeClassNames.treeBlockNode]: expandOnClickNode,\n          [treeClassNames.treeVscroll]: props.scroll, // 开启虚拟滚动就要有overflow 否则低于 threshold 无法正常运行 scrollto\n        })}\n        style={style}\n        ref={treeRef}\n      >\n        {isVirtual ? (\n          <>\n            <div className={treeClassNames.treeVscrollCursor} style={cursorStyle} />\n            {renderItems(visibleData)}\n          </>\n        ) : (\n          renderItems(visibleNodes)\n        )}\n      </div>\n    </TreeDraggableContext.Provider>\n  );\n});\n\nTree.displayName = 'Tree';\n\nexport default Tree;\n"],"names":["Tree","forwardRef","originalProps","ref","_useTreeConfig","useTreeConfig","treeClassNames","transitionNames","transitionClassNames","transitionDuration","locale","_useControllable","useControllable","value","onChange","expanded","onExpand","onActive","actived","setTreeIndeterminate","indeterminate","props","useDefaultProps","treeDefaultProps","empty","activable","disabled","checkable","checkProps","disableCheck","hover","icon","line","label","operations","transition","expandOnClickNode","onClick","scroll","className","style","allowDrop","onScroll","_useState","useState","_useState2","_slicedToArray","visibleNodes","setVisibleNodes","emptyText","store","useStore","_objectSpread","initial","nodes","getNodes","newVisibleNodes","filter","node","visible","setExpanded","usePersistFn","isExpanded","ctx","e","trigger","treeNodeModel","getModel","setIndeterminate","isIndeterminate","treeRef","useRef","_useTreeVirtualScroll","useTreeVirtualScroll","data","visibleData","isVirtual","virtualTreeNodeStyle","treeNodeStyle","cursorStyle","handleRowMounted","scrollToElement","setActived","isActived","setChecked","isChecked","checked","handleItemClick","options","isDisabled","expand","active","handleChange","handleScrollToElement","useCallback","params","index","key","log","error","findIndex","item","get","includes","concat","useImperativeHandle","scrollTo","p","appendTo","newData","list","Array","isArray","forEach","appendNodes","getIndex","getNodeIndex","getItem","getNode","getItems","map","getParent","getParents","getPath","pathNodes","insertAfter","insertBefore","remove","setItem","spec","prevIndeterminate","_toConsumableArray","set","nodeList","useMemo","React","createRef","renderEmpty","parseTNode","renderItems","renderNode","length","createElement","treeList","TreeItem","keys","onTreeItemMounted","TransitionGroup","name","treeNode","CSSTransition","nodeRef","timeout","classNames","draggable","TreeDraggableContext","Provider","tree","_defineProperty","treeHoverable","treeCheckable","treeFx","treeBlockNode","treeVscroll","treeVscrollCursor","displayName"],"mappings":"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"}