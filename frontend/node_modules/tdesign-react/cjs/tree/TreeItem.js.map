{"version":3,"file":"TreeItem.js","sources":["../../../components/tree/TreeItem.tsx"],"sourcesContent":["import React, {\n  CSSProperties,\n  DragEventHandler,\n  forwardRef,\n  MouseEvent,\n  ReactNode,\n  useRef,\n  DragEvent,\n  isValidElement,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { isFunction } from 'lodash-es';\nimport { CaretRightSmallIcon as TdCaretRightSmallIcon } from 'tdesign-icons-react';\nimport TreeNode from '@tdesign/common-js/tree-v1/tree-node';\nimport type { TypeTreeNodeData } from '@tdesign/common-js/tree-v1/types';\nimport Loading from '../loading';\nimport useRipple from '../hooks/useRipple';\nimport useDomRefCallback from '../hooks/useDomRefCallback';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport Checkbox from '../checkbox';\nimport { useTreeConfig } from './hooks/useTreeConfig';\nimport useDraggable from './hooks/useDraggable';\nimport composeRefs from '../_util/composeRefs';\nimport useConfig from '../hooks/useConfig';\n\nimport type { CheckboxProps } from '../checkbox'\nimport type { TdTreeProps } from './type';\nimport type { TreeItemProps } from './interface';\n\n/**\n * 树节点组件\n */\nconst TreeItem = forwardRef(\n  (\n    props: TreeItemProps & {\n      onTreeItemMounted?: (rowData: { ref: HTMLElement; data: TreeNode }) => void;\n      isVirtual?: boolean;\n      keys: TdTreeProps['keys'];\n      allowDrop?: TdTreeProps['allowDrop'];\n    },\n    ref: React.Ref<HTMLDivElement>,\n  ) => {\n    const {\n      node,\n      icon,\n      label,\n      line,\n      expandOnClickNode,\n      activable,\n      checkProps,\n      disableCheck,\n      operations,\n      onClick,\n      onChange,\n      isVirtual,\n      onTreeItemMounted,\n      allowDrop,\n    } = props;\n\n    const { CaretRightSmallIcon } = useGlobalIcon({\n      CaretRightSmallIcon: TdCaretRightSmallIcon,\n    });\n    const { level } = node;\n    const nodeRef = useRef<HTMLDivElement>(null);\n\n    const { treeClassNames, locale } = useTreeConfig();\n    const { classPrefix } = useConfig();\n\n    useEffect(() => {\n      onTreeItemMounted?.({ ref: nodeRef.current, data: node });\n    }, [isVirtual, nodeRef, node, onTreeItemMounted]);\n\n    const handleClick = (evt: MouseEvent<HTMLDivElement>) => {\n      const srcTarget = evt.target as HTMLElement;\n      const isBranchTrigger =\n        node.children &&\n        expandOnClickNode &&\n        (srcTarget.className === `${classPrefix}-checkbox__input` || srcTarget.tagName.toLowerCase() === 'input');\n\n      if (isBranchTrigger) return;\n\n      // 处理expandOnClickNode时与checkbox的选中的逻辑冲突\n      if (expandOnClickNode && node.children && srcTarget.className?.indexOf?.(`${classPrefix}-tree__label`) !== -1)\n        evt.preventDefault();\n\n      onClick?.(node, {\n        e: evt,\n        expand: expandOnClickNode,\n        active: activable,\n        trigger: 'node-click',\n      });\n    };\n\n    const handleItemClick = (evt: MouseEvent<HTMLDivElement>) => {\n      if (node.loading) {\n        return;\n      }\n      onClick?.(node, {\n        e: evt,\n        expand: true,\n        active: false,\n        trigger: 'icon-click',\n      });\n    };\n\n    const handleIconClick = (evt: MouseEvent<HTMLDivElement>) => {\n      if (!icon) return;\n      evt.stopPropagation();\n      handleItemClick(evt);\n    };\n\n    const stopPropagation = (e: MouseEvent) => {\n      e.stopPropagation();\n    };\n\n    /* ======== render ======= */\n    const renderIcon = () => {\n      // 这里按 vue 的逻辑定义\n      let isDefaultIcon = false;\n      const renderIconNode = () => {\n        if (icon === false) {\n          return null;\n        }\n        if (icon instanceof Function) {\n          return icon(node.getModel());\n        }\n        if (React.isValidElement(icon)) {\n          return icon;\n        }\n        if (icon && icon !== true) {\n          // 非 ReactNode、Function、Boolean 类型，抛出错误提示\n          throw new Error('invalid type of icon');\n        }\n\n        if (!node.isLeaf()) {\n          isDefaultIcon = true;\n          if (node.loading && node.expanded) {\n            return <Loading loading={true} />;\n          }\n\n          return <CaretRightSmallIcon className={treeClassNames.treeIconRight} />;\n        }\n        return null;\n      };\n\n      const iconNode = renderIconNode();\n      return (\n        <span\n          className={classNames(treeClassNames.treeIcon, treeClassNames.folderIcon, {\n            [treeClassNames.treeIconDefault]: isDefaultIcon,\n          })}\n          onClick={handleIconClick}\n        >\n          {iconNode}\n        </span>\n      );\n    };\n\n    const renderLine = () => {\n      const iconVisible = icon !== false;\n\n      if (line === false) {\n        return null;\n      }\n\n      if (isFunction(line)) {\n        return line(node.getModel());\n      }\n\n      if (React.isValidElement(line)) {\n        return line;\n      }\n\n      if (node.parent && node.tree) {\n        // 如果节点的父节点，不是最后的节点\n        // 则需要绘制节点延长线\n        const shadowStyles: string[] = [];\n        const parents = node.getParents();\n        parents.pop();\n        parents.forEach((pnode: TreeNode, index: number) => {\n          if (!pnode.vmIsLast) {\n            shadowStyles.push(`calc(-${index + 1} * var(--space)) 0 var(--color)`);\n          }\n        });\n\n        const styles = {\n          '--level': level,\n          boxShadow: shadowStyles.join(','),\n        };\n\n        return (\n          <span\n            className={classNames(\n              // 每个节点绘制抵达上一层级的折线\n              treeClassNames.line,\n              {\n                // 叶子节点，折线宽度延长，因为没有 icon 呈现\n                // 任意节点，icon 不呈现时也是要延长折线宽度\n                [treeClassNames.lineIsLeaf]: node.vmIsLeaf || !iconVisible,\n                // 分支首节点，到上一节点的折线高度要缩短，让位给 icon 呈现\n                // 如果 icon 隐藏了，则不必缩短折线高度\n                [treeClassNames.lineIsFirst]: node.vmIsFirst && iconVisible,\n              },\n            )}\n            style={styles}\n            onClick={stopPropagation}\n          />\n        );\n      }\n      return null;\n    };\n\n    // 使用 斜八角动画\n    const [labelDom, setRefCurrent] = useDomRefCallback();\n    useRipple(labelDom);\n\n    // setData需要强制刷新组件来更新数据\n    const [, updateRender] = useState({});\n\n    const renderLabel = () => {\n      const emptyView = locale('empty');\n      let labelText: string | ReactNode = '';\n      if (label instanceof Function) {\n        const { setData: nodeSetData, ...rest } = node.getModel();\n        labelText =\n          label({\n            ...rest,\n            // 拦截setData render tree-item\n            setData: (value: TypeTreeNodeData) => {\n              nodeSetData(value);\n              updateRender({});\n            },\n          }) || emptyView;\n      } else {\n        labelText = node.label || emptyView;\n      }\n\n      const labelClasses = classNames(treeClassNames.treeLabel, treeClassNames.treeLabelStrictly, {\n        [treeClassNames.actived]: node.isActivable() ? node.actived : false,\n      });\n\n      if (node.isCheckable()) {\n        let checkboxDisabled: boolean;\n        if (typeof disableCheck === 'function') {\n          checkboxDisabled = disableCheck(node.getModel());\n        } else {\n          checkboxDisabled = !!disableCheck;\n        }\n\n        if (node.isDisabled()) {\n          checkboxDisabled = true;\n        }\n\n        let checkboxProps: CheckboxProps;\n        if (typeof checkProps === 'function') {\n          checkboxProps = checkProps(node.getModel());\n        } else {\n          checkboxProps = checkProps;\n        }\n\n        return (\n          <Checkbox\n            ref={setRefCurrent}\n            checked={node.checked}\n            indeterminate={node.indeterminate}\n            disabled={checkboxDisabled}\n            name={String(node.value)}\n            onChange={(checked, ctx) => onChange(node, ctx)}\n            className={labelClasses}\n            stopLabelTrigger={expandOnClickNode && !!node.children}\n            {...checkboxProps}\n          >\n            <span data-target=\"label\">{labelText}</span>\n          </Checkbox>\n        );\n      }\n      return (\n        <span\n          ref={setRefCurrent}\n          data-target=\"label\"\n          className={labelClasses}\n          // label 可以传入 ReactNode， 如果直接取里面的 children 值，当多层级的时候会有问题\n          // 所以这里判断如果 label是 ReactNode， 并且 text没有值 就不展示 title\n          title={isValidElement(node.label) && !node.data?.text ? '' : String(node.data?.text || node.label)}\n        >\n          <span style={{ position: 'relative' }}>{labelText}</span>\n        </span>\n      );\n    };\n\n    const renderOperations = () => {\n      let operationsView = null;\n      if (operations) {\n        // ReactNode 类型处理\n        if (React.isValidElement(operations)) {\n          operationsView = operations;\n        } else if (operations instanceof Function) {\n          // Function 类型处理\n          const treeNodeModel = node?.getModel();\n          operationsView = operations(treeNodeModel);\n        } else {\n          // 非 ReactNode、Function 类型，抛出错误提示\n          throw new Error('invalid type of operations');\n        }\n      }\n\n      if (operationsView) {\n        return (\n          <span className={treeClassNames.treeOperations} data-target=\"operations\">\n            {operationsView}\n          </span>\n        );\n      }\n      return null;\n    };\n\n    const { setDragStatus, isDragging, dropPosition, isDragOver } = useDraggable({\n      node,\n      nodeRef,\n      allowDrop,\n    });\n\n    const handleDragStart: DragEventHandler<HTMLDivElement> = (evt: DragEvent<HTMLDivElement>) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragStart', evt);\n\n      try {\n        // ie throw error firefox-need-it\n        evt.dataTransfer?.setData('text/plain', '');\n      } catch (e) {\n        // empty\n      }\n    };\n    const handleDragEnd: DragEventHandler<HTMLDivElement> = (evt: DragEvent<HTMLDivElement>) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragEnd', evt);\n    };\n    const handleDragOver: DragEventHandler<HTMLDivElement> = (evt: DragEvent<HTMLDivElement>) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      evt.preventDefault();\n      setDragStatus('dragOver', evt);\n    };\n    const handleDragLeave: DragEventHandler<HTMLDivElement> = (evt: DragEvent<HTMLDivElement>) => {\n      const { node } = props;\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      setDragStatus('dragLeave', evt);\n    };\n    const handleDrop: DragEventHandler<HTMLDivElement> = (evt: DragEvent<HTMLDivElement>) => {\n      const { node } = props;\n\n      if (!node.isDraggable()) return;\n      evt.stopPropagation();\n      evt.preventDefault();\n      setDragStatus('drop', evt);\n    };\n\n    return (\n      <div\n        ref={composeRefs(ref, nodeRef)}\n        data-value={node.value}\n        data-level={level}\n        className={classNames(treeClassNames.treeNode, {\n          [treeClassNames.treeNodeOpen]: node.expanded,\n          [treeClassNames.actived]: node.isActivable() ? node.actived : false,\n          [treeClassNames.disabled]: node.isDisabled(),\n          [treeClassNames.treeNodeDraggable]: !node.isDisabled() && node.isDraggable(),\n          [treeClassNames.treeNodeDragging]: isDragging,\n          [treeClassNames.treeNodeDragTipTop]: isDragOver && dropPosition < 0,\n          [treeClassNames.treeNodeDragTipBottom]: isDragOver && dropPosition > 0,\n          [treeClassNames.treeNodeDragTipHighlight]: !isDragging && isDragOver && dropPosition === 0,\n        })}\n        style={\n          {\n            '--level': level,\n            boxShadow: '',\n          } as CSSProperties\n        }\n        onClick={handleClick}\n        draggable={!node.isDisabled() && node.isDraggable()}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n      >\n        {renderLine()}\n        {renderIcon()}\n        {renderLabel()}\n        {renderOperations()}\n      </div>\n    );\n  },\n);\n\nTreeItem.displayName = 'TreeItem';\n\nexport default TreeItem;\n"],"names":["TreeItem","forwardRef","props","ref","node","icon","label","line","expandOnClickNode","activable","checkProps","disableCheck","operations","onClick","onChange","isVirtual","onTreeItemMounted","allowDrop","_useGlobalIcon","useGlobalIcon","CaretRightSmallIcon","TdCaretRightSmallIcon","level","nodeRef","useRef","_useTreeConfig","useTreeConfig","treeClassNames","locale","_useConfig","useConfig","classPrefix","useEffect","current","data","handleClick","evt","_srcTarget$className","_srcTarget$className$","srcTarget","target","isBranchTrigger","children","className","concat","tagName","toLowerCase","indexOf","call","preventDefault","e","expand","active","trigger","handleItemClick","loading","handleIconClick","stopPropagation","renderIcon","isDefaultIcon","renderIconNode","Function","getModel","React","isValidElement","Error","isLeaf","expanded","createElement","Loading","treeIconRight","iconNode","classNames","treeIcon","folderIcon","_defineProperty","treeIconDefault","renderLine","iconVisible","isFunction","parent","tree","shadowStyles","parents","getParents","pop","forEach","pnode","index","vmIsLast","push","styles","boxShadow","join","lineIsLeaf","vmIsLeaf","lineIsFirst","vmIsFirst","style","_useDomRefCallback","useDomRefCallback","_useDomRefCallback2","_slicedToArray","labelDom","setRefCurrent","useRipple","_useState","useState","_useState2","updateRender","renderLabel","_node$data","_node$data2","emptyView","labelText","_node$getModel","nodeSetData","setData","rest","_objectWithoutProperties","_excluded","_objectSpread","value","labelClasses","treeLabel","treeLabelStrictly","actived","isActivable","isCheckable","checkboxDisabled","isDisabled","checkboxProps","Checkbox","checked","indeterminate","disabled","name","String","ctx","stopLabelTrigger","title","text","position","renderOperations","operationsView","treeNodeModel","treeOperations","_useDraggable","useDraggable","setDragStatus","isDragging","dropPosition","isDragOver","handleDragStart","isDraggable","_evt$dataTransfer","dataTransfer","handleDragEnd","handleDragOver","handleDragLeave","handleDrop","composeRefs","treeNode","treeNodeOpen","treeNodeDraggable","treeNodeDragging","treeNodeDragTipTop","treeNodeDragTipBottom","treeNodeDragTipHighlight","draggable","onDragStart","onDragEnd","onDragOver","onDragLeave","onDrop","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCMA,IAAAA,QAAW,gBAAAC,gBAAA,CACf,UACEC,OAMAC,GACG,EAAA;AACG,EAAA,IACJC,IAAA,GAcEF,KAAA,CAdFE,IAAA;IACAC,IAAA,GAaEH,KAAA,CAbFG,IAAA;IACAC,KAAA,GAYEJ,KAAA,CAZFI,KAAA;IACAC,IAAA,GAWEL,KAAA,CAXFK,IAAA;IACAC,iBAAA,GAUEN,KAAA,CAVFM,iBAAA;IACAC,SAAA,GASEP,KAAA,CATFO,SAAA;IACAC,UAAA,GAQER,KAAA,CARFQ,UAAA;IACAC,YAAA,GAOET,KAAA,CAPFS,YAAA;IACAC,UAAA,GAMEV,KAAA,CANFU,UAAA;IACAC,OAAA,GAKEX,KAAA,CALFW,OAAA;IACAC,SAAA,GAIEZ,KAAA,CAJFY,QAAA;IACAC,SAAA,GAGEb,KAAA,CAHFa,SAAA;IACAC,iBAAA,GAEEd,KAAA,CAFFc,iBAAA;IACAC,SAAA,GACEf,KAAA,CADFe,SAAA,CAAA;EAGI,IAAAC,cAAA,GAA0BC,8BAAc,CAAA;AAC5CC,MAAAA,mBAAqB,EAAAC,qCAAAA;AACvB,KAAC,CAAA;IAFOD,mBAAoB,GAAAF,cAAA,CAApBE,mBAAoB,CAAA;AAGtB,EAAA,IAAEE,QAAUlB,IAAA,CAAVkB;AACF,EAAA,IAAAC,OAAA,GAAUC,aAAuB,IAAI,CAAA,CAAA;AAE3C,EAAA,IAAAC,cAAA,GAAmCC,sCAAc,EAAA;IAAzCC,cAAA,GAAAF,cAAA,CAAAE,cAAA;IAAgBC,MAAO,GAAAH,cAAA,CAAPG,MAAO,CAAA;AACzB,EAAA,IAAAC,UAAA,GAAkBC,0BAAU,EAAA;IAA1BC,WAAY,GAAAF,UAAA,CAAZE,WAAY,CAAA;AAEpBC,EAAAA,eAAA,CAAU,YAAM;AACdhB,IAAAA,iBAAA,KAAAA,IAAAA,IAAAA,iBAAA,KAAAA,KAAAA,CAAAA,IAAAA,iBAAA,CAAoB;MAAEb,GAAK,EAAAoB,OAAA,CAAQU,OAAS;AAAAC,MAAAA,IAAA,EAAM9B,IAAAA;AAAK,KAAC,CAAA,CAAA;KACvD,CAACW,SAAA,EAAWQ,OAAS,EAAAnB,IAAA,EAAMY,iBAAiB,CAAC,CAAA,CAAA;AAE1C,EAAA,IAAAmB,WAAA,GAAc,SAAdA,WAAAA,CAAeC,GAAoC,EAAA;IAAA,IAAAC,oBAAA,EAAAC,qBAAA,CAAA;AACvD,IAAA,IAAMC,YAAYH,GAAI,CAAAI,MAAA,CAAA;IAChB,IAAAC,eAAA,GACJrC,IAAK,CAAAsC,QAAA,IACLlC,iBACC,KAAA+B,SAAA,CAAUI,SAAc,KAAAC,EAAAA,CAAAA,MAAA,CAAGb,WAAiC,EAAA,kBAAA,CAAA,IAAAQ,SAAA,CAAUM,OAAQ,CAAAC,WAAA,EAAkB,KAAA,OAAA,CAAA,CAAA;AAE/F,IAAA,IAAAL,eAAA,EAAiB,OAAA;AAGjB,IAAA,IAAAjC,iBAAA,IAAqBJ,KAAKsC,QAAY,IAAA,EAAAL,oBAAA,GAAAE,SAAA,CAAUI,mFAAVN,oBAAA,CAAqBU,OAAU,MAAA,IAAA,IAAAT,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA/BA,qBAAA,CAAAU,IAAA,CAAAX,oBAAA,EAAA,EAAA,CAAAO,MAAA,CAAkCb,4BAAyB,CAAM,MAAA,CAAA,CAAA,EACzGK,GAAA,CAAIa,cAAe,EAAA,CAAA;AAErBpC,IAAAA,OAAA,aAAAA,OAAA,KAAA,KAAA,CAAA,IAAAA,OAAA,CAAUT,IAAM,EAAA;AACd8C,MAAAA,CAAG,EAAAd,GAAA;AACHe,MAAAA,MAAQ,EAAA3C,iBAAA;AACR4C,MAAAA,MAAQ,EAAA3C,SAAA;AACR4C,MAAAA,OAAS,EAAA,YAAA;AACX,KAAC,CAAA,CAAA;GACH,CAAA;AAEM,EAAA,IAAAC,eAAA,GAAkB,SAAlBA,eAAAA,CAAmBlB,GAAoC,EAAA;IAC3D,IAAIhC,KAAKmD,OAAS,EAAA;AAChB,MAAA,OAAA;AACF,KAAA;AACA1C,IAAAA,OAAA,aAAAA,OAAA,KAAA,KAAA,CAAA,IAAAA,OAAA,CAAUT,IAAM,EAAA;AACd8C,MAAAA,CAAG,EAAAd,GAAA;AACHe,MAAAA,MAAQ,EAAA,IAAA;AACRC,MAAAA,MAAQ,EAAA,KAAA;AACRC,MAAAA,OAAS,EAAA,YAAA;AACX,KAAC,CAAA,CAAA;GACH,CAAA;AAEM,EAAA,IAAAG,eAAA,GAAkB,SAAlBA,eAAAA,CAAmBpB,GAAoC,EAAA;IAC3D,IAAI,CAAC/B,IAAA,EAAM,OAAA;IACX+B,GAAA,CAAIqB,eAAgB,EAAA,CAAA;IACpBH,eAAA,CAAgBlB,GAAG,CAAA,CAAA;GACrB,CAAA;AAEM,EAAA,IAAAqB,eAAA,GAAkB,SAAlBA,eAAAA,CAAmBP,CAAkB,EAAA;IACzCA,CAAA,CAAEO,eAAgB,EAAA,CAAA;GACpB,CAAA;AAGA,EAAA,IAAMC,aAAa,SAAbA,aAAmB;IAEvB,IAAIC,aAAgB,GAAA,KAAA,CAAA;AACpB,IAAA,IAAMC,iBAAiB,SAAjBA,iBAAuB;MAC3B,IAAIvD,SAAS,KAAO,EAAA;AACX,QAAA,OAAA,IAAA,CAAA;AACT,OAAA;MACA,IAAIA,gBAAgBwD,QAAU,EAAA;AACrB,QAAA,OAAAxD,IAAA,CAAKD,IAAK,CAAA0D,QAAA,EAAU,CAAA,CAAA;AAC7B,OAAA;AACI,MAAA,iBAAAC,yBAAA,CAAMC,cAAe,CAAA3D,IAAI,CAAG,EAAA;AACvB,QAAA,OAAAA,IAAA,CAAA;AACT,OAAA;AACI,MAAA,IAAAA,IAAA,IAAQA,SAAS,IAAM,EAAA;AAEnB,QAAA,MAAA,IAAI4D,MAAM,sBAAsB,CAAA,CAAA;AACxC,OAAA;AAEI,MAAA,IAAA,CAAC7D,IAAK,CAAA8D,MAAA,EAAU,EAAA;AACFP,QAAAA,aAAA,GAAA,IAAA,CAAA;AACZ,QAAA,IAAAvD,IAAA,CAAKmD,OAAW,IAAAnD,IAAA,CAAK+D,QAAU,EAAA;AACjC,UAAA,sBAAQJ,yBAAA,CAAAK,aAAA,CAAAC,qBAAA,EAAA;AAAQd,YAAAA,OAAS,EAAA,IAAA;AAAM,WAAA,CAAA,CAAA;AACjC,SAAA;AAEA,QAAA,sBAAQQ,yBAAA,CAAAK,aAAA,CAAAhD,mBAAA,EAAA;UAAoBuB,WAAWhB,cAAe,CAAA2C,aAAAA;AAAe,SAAA,CAAA,CAAA;AACvE,OAAA;AACO,MAAA,OAAA,IAAA,CAAA;KACT,CAAA;AAEA,IAAA,IAAMC,WAAWX,cAAe,EAAA,CAAA;AAChC,IAAA,sBACGG,yBAAA,CAAAK,aAAA,CAAA,MAAA,EAAA;AACCzB,MAAAA,SAAW,EAAA6B,8BAAA,CAAW7C,cAAe,CAAA8C,QAAA,EAAU9C,eAAe+C,UAAY,EAAAC,8BAAA,KACvEhD,eAAeiD,eAAkB,EAAAjB,aAAA,CACnC,CAAA;AACD9C,MAAAA,OAAS,EAAA2C,eAAAA;KAAA,EAERe,QACH,CAAA,CAAA;GAEJ,CAAA;AAEA,EAAA,IAAMM,aAAa,SAAbA,aAAmB;AACvB,IAAA,IAAMC,cAAczE,IAAS,KAAA,KAAA,CAAA;IAE7B,IAAIE,SAAS,KAAO,EAAA;AACX,MAAA,OAAA,IAAA,CAAA;AACT,KAAA;AAEI,IAAA,IAAAwE,qBAAA,CAAWxE,IAAI,CAAG,EAAA;AACb,MAAA,OAAAA,IAAA,CAAKH,IAAK,CAAA0D,QAAA,EAAU,CAAA,CAAA;AAC7B,KAAA;AAEI,IAAA,iBAAAC,yBAAA,CAAMC,cAAe,CAAAzD,IAAI,CAAG,EAAA;AACvB,MAAA,OAAAA,IAAA,CAAA;AACT,KAAA;AAEI,IAAA,IAAAH,IAAA,CAAK4E,MAAU,IAAA5E,IAAA,CAAK6E,IAAM,EAAA;MAG5B,IAAMC,eAAyB,EAAC,CAAA;AAC1B,MAAA,IAAAC,OAAA,GAAU/E,KAAKgF,UAAW,EAAA,CAAA;MAChCD,OAAA,CAAQE,GAAI,EAAA,CAAA;AACJF,MAAAA,OAAA,CAAAG,OAAA,CAAQ,UAACC,KAAA,EAAiBC,KAAkB,EAAA;AAC9C,QAAA,IAAA,CAACD,MAAME,QAAU,EAAA;UACNP,YAAA,CAAAQ,IAAA,CAAA9C,QAAAA,CAAAA,MAAA,CAAc4C,KAAA,GAAQ,CAAkC,EAAA,iCAAA,CAAA,CAAA,CAAA;AACvE,SAAA;AACF,OAAC,CAAA,CAAA;AAED,MAAA,IAAMG,MAAS,GAAA;AACb,QAAA,SAAW,EAAArE,KAAA;AACXsE,QAAAA,SAAA,EAAWV,YAAa,CAAAW,IAAA,CAAK,GAAG,CAAA;OAClC,CAAA;AAEA,MAAA,sBACG9B,yBAAA,CAAAK,aAAA,CAAA,MAAA,EAAA;AACCzB,QAAAA,SAAW,EAAA6B,8BAAA,CAET7C,cAAe,CAAApB,IAAA,EAAAoE,8BAAA,CAAAA,8BAAA,CAAA,EAAA,EAIZhD,cAAA,CAAemE,UAAa,EAAA1F,IAAA,CAAK2F,YAAY,CAACjB,WAAA,CAAA,EAG9CnD,cAAA,CAAeqE,WAAc,EAAA5F,IAAA,CAAK6F,SAAa,IAAAnB,WAAA,CAEpD,CAAA;AACAoB,QAAAA,KAAO,EAAAP,MAAA;AACP9E,QAAAA,OAAS,EAAA4C,eAAAA;AACX,OAAA,CAAA,CAAA;AAEJ,KAAA;AACO,IAAA,OAAA,IAAA,CAAA;GACT,CAAA;AAGA,EAAA,IAAA0C,kBAAA,GAAkCC,kCAAkB,EAAA;IAAAC,mBAAA,GAAAC,4BAAA,CAAAH,kBAAA,EAAA,CAAA,CAAA;AAA7CI,IAAAA,QAAA,GAAAF,mBAAA,CAAA,CAAA,CAAA;AAAUG,IAAAA,aAAa,GAAAH,mBAAA,CAAA,CAAA,CAAA,CAAA;EAC9BI,0BAAA,CAAUF,QAAQ,CAAA,CAAA;AAGlB,EAAA,IAAAG,SAAA,GAAyBC,cAAA,CAAS,EAAE,CAAA;IAAAC,UAAA,GAAAN,4BAAA,CAAAI,SAAA,EAAA,CAAA,CAAA;AAA3BG,IAAAA,YAAY,GAAAD,UAAA,CAAA,CAAA,CAAA,CAAA;AAErB,EAAA,IAAME,cAAc,SAAdA,cAAoB;IAAA,IAAAC,UAAA,EAAAC,WAAA,CAAA;AAClB,IAAA,IAAAC,SAAA,GAAYrF,OAAO,OAAO,CAAA,CAAA;IAChC,IAAIsF,SAAgC,GAAA,EAAA,CAAA;IACpC,IAAI5G,iBAAiBuD,QAAU,EAAA;AAC7B,MAAA,IAAAsD,cAAA,GAA0C/G,KAAK0D,QAAS,EAAA;QAAvCsD,WAAA,GAAAD,cAAA,CAATE,OAAS;AAAgBC,QAAAA,IAAK,GAAAC,gDAAA,CAAAJ,cAAA,EAAAK,SAAA,CAAA,CAAA;AACtCN,MAAAA,SAAA,GACE5G,KAAM,CAAAmH,aAAA,CAAAA,aAAA,KACDH,IAAA,CAAA,EAAA,EAAA,EAAA;AAEHD,QAAAA,OAAA,EAAS,SAATA,OAAAA,CAAUK,KAA4B,EAAA;UACpCN,WAAA,CAAYM,KAAK,CAAA,CAAA;UACjBb,YAAA,CAAa,EAAE,CAAA,CAAA;AACjB,SAAA;OACD,CAAA,CAAK,IAAAI,SAAA,CAAA;AACV,KAAO,MAAA;AACLC,MAAAA,SAAA,GAAY9G,KAAKE,KAAS,IAAA2G,SAAA,CAAA;AAC5B,KAAA;AAEA,IAAA,IAAMU,YAAe,GAAAnD,8BAAA,CAAW7C,cAAe,CAAAiG,SAAA,EAAWjG,eAAekG,iBAAmB,EAAAlD,8BAAA,CACzFhD,EAAAA,EAAAA,cAAe,CAAAmG,OAAA,EAAU1H,KAAK2H,WAAY,EAAA,GAAI3H,KAAK0H,OAAU,GAAA,KAAA,CAC/D,CAAA,CAAA;AAEG,IAAA,IAAA1H,IAAA,CAAK4H,aAAe,EAAA;AAClB,MAAA,IAAAC,gBAAA,CAAA;AACA,MAAA,IAAA,OAAOtH,iBAAiB,UAAY,EAAA;QACnBsH,gBAAA,GAAAtH,YAAA,CAAaP,IAAK,CAAA0D,QAAA,EAAU,CAAA,CAAA;AACjD,OAAO,MAAA;QACLmE,gBAAA,GAAmB,CAAC,CAACtH,YAAA,CAAA;AACvB,OAAA;AAEI,MAAA,IAAAP,IAAA,CAAK8H,YAAc,EAAA;AACFD,QAAAA,gBAAA,GAAA,IAAA,CAAA;AACrB,OAAA;AAEI,MAAA,IAAAE,aAAA,CAAA;AACA,MAAA,IAAA,OAAOzH,eAAe,UAAY,EAAA;QACpByH,aAAA,GAAAzH,UAAA,CAAWN,IAAK,CAAA0D,QAAA,EAAU,CAAA,CAAA;AAC5C,OAAO,MAAA;AACWqE,QAAAA,aAAA,GAAAzH,UAAA,CAAA;AAClB,OAAA;AAEA,MAAA,sBACGqD,yBAAA,CAAAK,aAAA,CAAAgE,uBAAA,EAAAX,aAAA,CAAA;AACCtH,QAAAA,GAAK,EAAAqG,aAAA;QACL6B,SAASjI,IAAK,CAAAiI,OAAA;QACdC,eAAelI,IAAK,CAAAkI,aAAA;AACpBC,QAAAA,QAAU,EAAAN,gBAAA;AACVO,QAAAA,IAAA,EAAMC,MAAO,CAAArI,IAAA,CAAKsH,KAAK,CAAA;AACvB5G,QAAAA,UAAU,SAAVA,SAAWuH,OAAA,EAASK,GAAQ,EAAA;AAAA,UAAA,OAAA5H,SAAA,CAASV,MAAMsI,GAAG,CAAA,CAAA;AAAA,SAAA;AAC9C/F,QAAAA,SAAW,EAAAgF,YAAA;AACXgB,QAAAA,gBAAkB,EAAAnI,iBAAA,IAAqB,CAAC,CAACJ,IAAK,CAAAsC,QAAAA;OAC1CyF,EAAAA,aAAA,kBAEHpE,yBAAA,CAAAK,aAAA,CAAA,MAAA,EAAA;AAAK,QAAA,aAAY,EAAA,OAAA;OAAA,EAAS8C,SAAU,CACvC,CAAA,CAAA;AAEJ,KAAA;AACA,IAAA,sBACGnD,yBAAA,CAAAK,aAAA,CAAA,MAAA,EAAA;AACCjE,MAAAA,GAAK,EAAAqG,aAAA;AACL,MAAA,aAAY,EAAA,OAAA;AACZ7D,MAAAA,SAAW,EAAAgF,YAAA;AAGXiB,MAAAA,KAAO,eAAA5E,oBAAA,CAAe5D,IAAK,CAAAE,KAAK,KAAK,EAAAyG,CAAAA,UAAA,GAAC3G,IAAA,CAAK8B,IAAM,MAAA6E,IAAAA,IAAAA,UAAA,eAAXA,UAAA,CAAW8B,IAAA,CAAA,GAAO,KAAKJ,MAAO,CAAA,CAAAzB,CAAAA,WAAA,GAAA5G,IAAA,CAAK8B,IAAM,MAAA8E,IAAAA,IAAAA,WAAA,uBAAXA,WAAA,CAAW6B,IAAA,KAAQzI,KAAKE,KAAK,CAAA;AAAA,KAAA,iBAEhGyD,yBAAA,CAAAK,aAAA,CAAA,MAAA,EAAA;AAAK8B,MAAAA,KAAA,EAAO;AAAE4C,QAAAA,QAAA,EAAU,UAAA;AAAW,OAAA;KAAA,EAAI5B,SAAU,CACpD,CAAA,CAAA;GAEJ,CAAA;AAEA,EAAA,IAAM6B,mBAAmB,SAAnBA,mBAAyB;IAC7B,IAAIC,cAAiB,GAAA,IAAA,CAAA;AACrB,IAAA,IAAIpI,UAAY,EAAA;AAEV,MAAA,iBAAAmD,yBAAA,CAAMC,cAAe,CAAApD,UAAU,CAAG,EAAA;AACnBoI,QAAAA,cAAA,GAAApI,UAAA,CAAA;AACnB,OAAA,MAAA,IAAWA,sBAAsBiD,QAAU,EAAA;QAEnC,IAAAoF,aAAA,GAAgB7I,SAAAA,IAAAA,IAAAA,2BAAAA,KAAM0D,QAAS,EAAA,CAAA;AACrCkF,QAAAA,cAAA,GAAiBpI,WAAWqI,aAAa,CAAA,CAAA;AAC3C,OAAO,MAAA;AAEC,QAAA,MAAA,IAAIhF,MAAM,4BAA4B,CAAA,CAAA;AAC9C,OAAA;AACF,KAAA;AAEA,IAAA,IAAI+E,cAAgB,EAAA;AAClB,MAAA,sBACGjF,yBAAA,CAAAK,aAAA,CAAA,MAAA,EAAA;QAAKzB,WAAWhB,cAAe,CAAAuH,cAAA;AAAgB,QAAA,aAAY,EAAA,YAAA;OAAA,EACzDF,cACH,CAAA,CAAA;AAEJ,KAAA;AACO,IAAA,OAAA,IAAA,CAAA;GACT,CAAA;EAEA,IAAAG,aAAA,GAAgEC,kCAAa,CAAA;AAC3EhJ,MAAAA,IAAA,EAAAA,IAAA;AACAmB,MAAAA,OAAA,EAAAA,OAAA;AACAN,MAAAA,SAAA,EAAAA,SAAAA;AACF,KAAC,CAAA;IAJOoI,aAAe,GAAAF,aAAA,CAAfE,aAAe;IAAAC,UAAA,GAAAH,aAAA,CAAAG,UAAA;IAAYC,YAAc,GAAAJ,aAAA,CAAdI,YAAc;IAAAC,UAAA,GAAAL,aAAA,CAAAK,UAAA,CAAA;AAM3C,EAAA,IAAAC,eAAA,GAAoD,SAApDA,eAAAA,CAAqDrH,GAAmC,EAAA;AACtF,IAAA,IAAEhC,KAAAA,GAASF,KAAA,CAATE,IAAAA,CAAAA;AACJ,IAAA,IAAA,CAACA,MAAKsJ,WAAY,EAAA,EAAG,OAAA;IACzBtH,GAAA,CAAIqB,eAAgB,EAAA,CAAA;AACpB4F,IAAAA,aAAA,CAAc,aAAajH,GAAG,CAAA,CAAA;IAE1B,IAAA;AAAA,MAAA,IAAAuH,iBAAA,CAAA;AAEE,MAAA,CAAAA,iBAAA,GAAAvH,GAAA,CAAAwH,YAAA,MAAAD,IAAAA,IAAAA,iBAAA,KAAAA,KAAAA,CAAAA,IAAAA,iBAAA,CAActC,OAAQ,CAAA,YAAA,EAAc,EAAE,CAAA,CAAA;AAC5C,aAASnE,CAAP,EAAA,EAEF;GACF,CAAA;AACM,EAAA,IAAA2G,aAAA,GAAkD,SAAlDA,aAAAA,CAAmDzH,GAAmC,EAAA;AACpF,IAAA,IAAEhC,KAAAA,GAASF,KAAA,CAATE,IAAAA,CAAAA;AACJ,IAAA,IAAA,CAACA,MAAKsJ,WAAY,EAAA,EAAG,OAAA;IACzBtH,GAAA,CAAIqB,eAAgB,EAAA,CAAA;AACpB4F,IAAAA,aAAA,CAAc,WAAWjH,GAAG,CAAA,CAAA;GAC9B,CAAA;AACM,EAAA,IAAA0H,cAAA,GAAmD,SAAnDA,cAAAA,CAAoD1H,GAAmC,EAAA;AACrF,IAAA,IAAEhC,KAAAA,GAASF,KAAA,CAATE,IAAAA,CAAAA;AACJ,IAAA,IAAA,CAACA,MAAKsJ,WAAY,EAAA,EAAG,OAAA;IACzBtH,GAAA,CAAIqB,eAAgB,EAAA,CAAA;IACpBrB,GAAA,CAAIa,cAAe,EAAA,CAAA;AACnBoG,IAAAA,aAAA,CAAc,YAAYjH,GAAG,CAAA,CAAA;GAC/B,CAAA;AACM,EAAA,IAAA2H,eAAA,GAAoD,SAApDA,eAAAA,CAAqD3H,GAAmC,EAAA;AACtF,IAAA,IAAEhC,KAAAA,GAASF,KAAA,CAATE,IAAAA,CAAAA;AACJ,IAAA,IAAA,CAACA,MAAKsJ,WAAY,EAAA,EAAG,OAAA;IACzBtH,GAAA,CAAIqB,eAAgB,EAAA,CAAA;AACpB4F,IAAAA,aAAA,CAAc,aAAajH,GAAG,CAAA,CAAA;GAChC,CAAA;AACM,EAAA,IAAA4H,UAAA,GAA+C,SAA/CA,UAAAA,CAAgD5H,GAAmC,EAAA;AACjF,IAAA,IAAEhC,KAAAA,GAASF,KAAA,CAATE,IAAAA,CAAAA;AAEJ,IAAA,IAAA,CAACA,MAAKsJ,WAAY,EAAA,EAAG,OAAA;IACzBtH,GAAA,CAAIqB,eAAgB,EAAA,CAAA;IACpBrB,GAAA,CAAIa,cAAe,EAAA,CAAA;AACnBoG,IAAAA,aAAA,CAAc,QAAQjH,GAAG,CAAA,CAAA;GAC3B,CAAA;AAEA,EAAA,sBACG2B,yBAAA,CAAAK,aAAA,CAAA,KAAA,EAAA;AACCjE,IAAAA,GAAA,EAAK8J,4BAAY,CAAA9J,GAAA,EAAKoB,OAAO,CAAA;IAC7B,cAAYnB,IAAK,CAAAsH,KAAA;AACjB,IAAA,YAAY,EAAApG,KAAA;IACZqB,SAAA,EAAW6B,8BAAW,CAAA7C,cAAA,CAAeuI,QAAU,EAAAvF,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAAA,8BAAA,CAAA,EAAA,EAC5ChD,cAAe,CAAAwI,YAAA,EAAe/J,IAAK,CAAA+D,QAAA,CACnCxC,EAAAA,cAAe,CAAAmG,OAAA,EAAU1H,KAAK2H,WAAY,EAAA,GAAI3H,KAAK0H,OAAU,GAAA,KAAA,CAC7DnG,EAAAA,cAAA,CAAe4G,QAAW,EAAAnI,IAAA,CAAK8H,UAAW,EAAA,GAC1CvG,eAAeyI,iBAAoB,EAAA,CAAChK,KAAK8H,UAAW,EAAA,IAAK9H,KAAKsJ,WAAY,EAAA,CAC1E/H,EAAAA,eAAe0I,gBAAmB,EAAAf,UAAA,CAClC3H,EAAAA,cAAA,CAAe2I,kBAAqB,EAAAd,UAAA,IAAcD,YAAe,GAAA,CAAA,CAAA,EACjE5H,cAAA,CAAe4I,qBAAwB,EAAAf,UAAA,IAAcD,YAAe,GAAA,CAAA,CAAA,EACpE5H,cAAe,CAAA6I,wBAAA,EAA2B,CAAClB,UAAA,IAAcE,cAAcD,YAAiB,KAAA,CAAA,CAC1F,CAAA;AACDrD,IAAAA,KACE,EAAA;AACE,MAAA,SAAW,EAAA5E,KAAA;AACXsE,MAAAA,SAAW,EAAA,EAAA;KACb;AAEF/E,IAAAA,OAAS,EAAAsB,WAAA;AACTsI,IAAAA,WAAW,CAACrK,IAAA,CAAK8H,UAAW,EAAA,IAAK9H,KAAKsJ,WAAY,EAAA;AAClDgB,IAAAA,WAAa,EAAAjB,eAAA;AACbkB,IAAAA,SAAW,EAAAd,aAAA;AACXe,IAAAA,UAAY,EAAAd,cAAA;AACZe,IAAAA,WAAa,EAAAd,eAAA;AACbe,IAAAA,MAAQ,EAAAd,UAAAA;AAAA,GAAA,EAEPnF,YACA,EAAAnB,UAAA,IACAoD,WAAY,EAAA,EACZiC,kBACH,CAAA,CAAA;AAEJ,CACF,EAAA;AAEA/I,QAAA,CAAS+K,WAAc,GAAA,UAAA;;;;"}