{"version":3,"file":"useStore.js","sources":["../../../../components/tree/hooks/useStore.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { cloneDeep } from 'lodash-es';\nimport TreeStore from '@tdesign/common-js/tree-v1/tree-store';\nimport type { TreeNodeValue, TypeTreeNodeData } from '@tdesign/common-js/tree-v1/types';\nimport TreeNode from '@tdesign/common-js/tree-v1/tree-node';\nimport useUpdateLayoutEffect from '../../hooks/useUpdateLayoutEffect';\nimport usePrevious from '../../hooks/usePrevious';\nimport { usePersistFn } from '../../hooks/usePersistFn';\n\nimport type { TdTreeProps } from '../type';\nimport type { TypeEventState } from '../interface';\n\nexport function useStore(\n  props: TdTreeProps & { indeterminate: any; setTreeIndeterminate: any },\n  refresh: () => void,\n): TreeStore {\n  const storeRef = useRef<TreeStore>(null);\n  const [filterChanged, toggleFilterChanged] = useState(false);\n  const [prevExpanded, changePrevExpanded] = useState(null);\n  const {\n    data,\n    keys,\n    expandAll,\n    expandParent,\n    expanded,\n    expandLevel,\n    expandMutex,\n    activable,\n    activeMultiple,\n    actived,\n    disabled,\n    draggable,\n    checkable,\n    value,\n    checkStrictly,\n    load,\n    lazy,\n    valueMode,\n    filter,\n    onLoad,\n    indeterminate,\n    setTreeIndeterminate,\n    allowFoldNodeOnFilter = false,\n  } = props;\n\n  const preFilter = usePrevious(filter);\n\n  useEffect(() => {\n    if (!allowFoldNodeOnFilter) return;\n    toggleFilterChanged(JSON.stringify(preFilter) !== JSON.stringify(filter));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filter, allowFoldNodeOnFilter]);\n\n  // 在 update 之后检查，如果之前 filter 有变更，则检查路径节点是否需要展开\n  // 如果 filter 属性被清空，则重置为开启搜索之前的结果\n  const expandFilterPath = () => {\n    if (!allowFoldNodeOnFilter || !filterChanged) return;\n    // 确保 filter 属性未变更时，不会重复检查展开状态\n    toggleFilterChanged(false);\n    const store = storeRef.current;\n    if (props.filter) {\n      if (!prevExpanded) changePrevExpanded(store.getExpanded()); // 缓存之前的展开状态\n\n      // 展开搜索命中节点的路径节点\n      const pathValues = [];\n      const allNodes = store.getNodes();\n      allNodes.forEach((node) => {\n        if (node.vmIsLocked) {\n          pathValues.push(node.value);\n        }\n      });\n      store.setExpanded(pathValues);\n    } else if (prevExpanded) {\n      // filter 属性置空，还原最开始的展开状态\n      store.replaceExpanded(prevExpanded);\n      changePrevExpanded(null);\n    }\n  };\n\n  // 传入 TreeStore 中调用的，但是每次都需要使用最新的值，所以使用 usePersistFn\n  const handleUpdate = usePersistFn(() => {\n    expandFilterPath();\n    refresh();\n  });\n\n  const getExpandedArr = (arr: TdTreeProps['expanded'], store: TreeStore) => {\n    const expandedMap = new Map();\n    arr.forEach((val) => {\n      expandedMap.set(val, true);\n      if (expandParent) {\n        const node = store.getNode(val);\n        node?.getParents().forEach((tn) => {\n          expandedMap.set(tn.value, true);\n        });\n      }\n    });\n    return Array.from(expandedMap.keys());\n  };\n\n  const createStore = () => {\n    const store = new TreeStore({\n      keys,\n      activable,\n      activeMultiple,\n      checkable,\n      checkStrictly,\n      expandAll,\n      expandLevel,\n      expandMutex,\n      expandParent,\n      disabled,\n      draggable,\n      load,\n      lazy,\n      valueMode,\n      filter,\n      onLoad: (info: TypeEventState) => {\n        const { node } = info;\n        onLoad?.({\n          node: node.getModel(),\n        });\n      },\n      onUpdate: handleUpdate,\n      allowFoldNodeOnFilter,\n    });\n\n    // 初始化 store 的节点排列 + 状态\n    let list = cloneDeep(data);\n    if (!Array.isArray(list)) {\n      list = [];\n    }\n\n    store.append(list as Array<TypeTreeNodeData>);\n\n    // 刷新节点，必须在配置选中之前执行\n    // 这样选中态联动判断才能找到父节点\n    store.refreshNodes();\n    // 初始化选中状态\n    if (Array.isArray(value)) {\n      store.setChecked(value);\n    }\n\n    // 初始化展开状态\n    if (Array.isArray(expanded)) {\n      const expandedArr = getExpandedArr(expanded, store);\n      store.setExpanded(expandedArr);\n    }\n\n    // 初始化激活状态\n    if (Array.isArray(actived)) {\n      store.setActived(actived);\n    }\n\n    store.refreshNodes();\n    return store;\n  };\n\n  if (!storeRef.current) {\n    storeRef.current = createStore();\n  }\n\n  /* ======== 由 props 引发的 store 更新 ======= */\n  const store = storeRef.current;\n\n  useUpdateLayoutEffect(() => {\n    if (data && Array.isArray(data)) {\n      const expanded = store.getExpanded();\n      const checked = store.getChecked();\n      const actived = store.getActived();\n      store.removeAll();\n      store.append(data as Array<TypeTreeNodeData>);\n      store.setChecked(checked);\n      store.setActived(actived);\n      store.setExpanded(expanded);\n    }\n  }, [data, store]);\n\n  useUpdateLayoutEffect(() => {\n    store.setConfig({\n      keys,\n      expandAll,\n      expandLevel,\n      expandMutex,\n      expandParent,\n      activable,\n      activeMultiple,\n      disabled,\n      checkable,\n      draggable,\n      checkStrictly,\n      load,\n      lazy,\n      valueMode,\n    });\n\n    store.refreshState();\n  }, [\n    activable,\n    activeMultiple,\n    checkStrictly,\n    draggable,\n    checkable,\n    disabled,\n    expandAll,\n    expandLevel,\n    expandMutex,\n    expandParent,\n    keys,\n    lazy,\n    load,\n    store,\n    valueMode,\n  ]);\n\n  useUpdateLayoutEffect(() => {\n    if (expandAll) {\n      const valueList = store\n        .getNodes()\n        .filter((node) => Array.isArray(node.children) && node.children.length)\n        .map((node) => node.value);\n      store.setExpanded(valueList);\n    } else {\n      store.replaceExpanded(prevExpanded);\n      changePrevExpanded(null);\n    }\n  }, [store, expandAll]);\n\n  useUpdateLayoutEffect(() => {\n    if (Array.isArray(value)) {\n      store.replaceChecked(value);\n      const checkedValue = store.getCheckedNodes().map((v: TreeNode) => v.data[keys?.value || 'value']);\n      const indeterminateConflict = checkedValue.filter((v) => indeterminate.includes(v));\n      if (indeterminateConflict.length) {\n        setTreeIndeterminate(indeterminate.filter((v: TreeNodeValue) => !indeterminateConflict.includes(v)));\n      }\n    }\n  }, [store, value, data]);\n\n  useUpdateLayoutEffect(() => {\n    if (Array.isArray(expanded)) {\n      const expandedArr = getExpandedArr(expanded, store);\n      store.replaceExpanded(expandedArr);\n    }\n  }, [expanded, store]);\n\n  useUpdateLayoutEffect(() => {\n    if (Array.isArray(actived)) {\n      store.replaceActived(actived);\n    }\n  }, [actived, store]);\n\n  useUpdateLayoutEffect(() => {\n    if (Array.isArray(indeterminate)) {\n      store.replaceIndeterminate(indeterminate);\n    }\n  }, [indeterminate, store, data]);\n\n  useUpdateLayoutEffect(() => {\n    store.setConfig({\n      filter,\n    });\n    store.updateAll();\n  }, [filter, store]);\n\n  return storeRef.current;\n}\n"],"names":["useStore","props","refresh","storeRef","useRef","_useState","useState","_useState2","_slicedToArray","filterChanged","toggleFilterChanged","_useState3","_useState4","prevExpanded","changePrevExpanded","data","keys","expandAll","expandParent","expanded","expandLevel","expandMutex","activable","activeMultiple","actived","disabled","draggable","checkable","value","checkStrictly","load","lazy","valueMode","filter","onLoad","indeterminate","setTreeIndeterminate","_props$allowFoldNodeO","allowFoldNodeOnFilter","preFilter","usePrevious","useEffect","JSON","stringify","expandFilterPath","store","current","getExpanded","pathValues","allNodes","getNodes","forEach","node","vmIsLocked","push","setExpanded","replaceExpanded","handleUpdate","usePersistFn","getExpandedArr","arr","expandedMap","Map","val","set","getNode","getParents","tn","Array","from","createStore","TreeStore","info","getModel","onUpdate","list","cloneDeep","isArray","append","refreshNodes","setChecked","expandedArr","setActived","useUpdateLayoutEffect","checked","getChecked","getActived","removeAll","setConfig","refreshState","valueList","children","length","map","replaceChecked","checkedValue","getCheckedNodes","v","indeterminateConflict","includes","replaceActived","replaceIndeterminate","updateAll"],"mappings":"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"}