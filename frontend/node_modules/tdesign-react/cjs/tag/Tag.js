/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-0006fcfa.js');
var objectWithoutProperties = require('../_chunks/dep-8fa3a4c2.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var tinycolor = require('../_chunks/dep-4d5c26af.js');
var _util_noop = require('../_util/noop.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var tag_defaultProps = require('./defaultProps.js');
var hooks_useDefaultProps = require('../hooks/useDefaultProps.js');
require('../_chunks/dep-667ac7af.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-ec8d2dca.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["theme", "size", "shape", "variant", "closable", "maxWidth", "icon", "content", "onClick", "onClose", "className", "style", "disabled", "children", "color", "title"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TagFunction = function TagFunction(originalProps, ref) {
  var props = hooks_useDefaultProps["default"](originalProps, tag_defaultProps.tagDefaultProps);
  var theme = props.theme,
    size = props.size,
    shape = props.shape,
    variant = props.variant,
    closable = props.closable,
    maxWidth = props.maxWidth,
    icon = props.icon,
    content = props.content,
    _props$onClick = props.onClick,
    _onClick = _props$onClick === void 0 ? _util_noop["default"] : _props$onClick,
    _props$onClose = props.onClose,
    onClose = _props$onClose === void 0 ? _util_noop["default"] : _props$onClose,
    className = props.className,
    style = props.style,
    disabled = props.disabled,
    children = props.children,
    color = props.color,
    titleAttr = props.title,
    otherTagProps = objectWithoutProperties._objectWithoutProperties(props, _excluded);
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
      CloseIcon: tdesignIconsReact.CloseIcon
    }),
    CloseIcon = _useGlobalIcon.CloseIcon;
  var tagClassPrefix = "".concat(classPrefix, "-tag");
  var sizeMap = {
    large: "".concat(classPrefix, "-size-l"),
    small: "".concat(classPrefix, "-size-s")
  };
  var tagClassNames = classNames__default["default"](tagClassPrefix, "".concat(tagClassPrefix, "--").concat(theme), "".concat(tagClassPrefix, "--").concat(variant), defineProperty._defineProperty(defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(tagClassPrefix, "--").concat(shape), shape !== "square"), "".concat(tagClassPrefix, "--ellipsis"), !!maxWidth), "".concat(tagClassPrefix, "--disabled"), disabled), sizeMap[size], className);
  var deleteIcon = /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
    onClick: function onClick(e) {
      if (disabled) return;
      onClose({
        e: e
      });
    },
    className: "".concat(tagClassPrefix, "__icon-close")
  });
  var title = React.useMemo(function () {
    if (Reflect.has(props, "title")) return titleAttr;
    if (children && typeof children === "string") return children;
    if (content && typeof content === "string") return content;
  }, [children, content, props, titleAttr]);
  var titleAttribute = title ? {
    title: title
  } : void 0;
  var getTagStyle = React.useMemo(function () {
    if (!color) return style;
    var luminance = tinycolor.tinycolor(color).getLuminance();
    var calculatedStyle = {};
    calculatedStyle.color = luminance > 0.5 ? "black" : "white";
    if (variant === "outline" || variant === "light-outline") {
      calculatedStyle.borderColor = color;
    }
    if (variant !== "outline") {
      var getLightestShade = function getLightestShade() {
        var _tinycolor$toRgb = tinycolor.tinycolor(color).toRgb(),
          r = _tinycolor$toRgb.r,
          g = _tinycolor$toRgb.g,
          b = _tinycolor$toRgb.b;
        return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", 0.1)");
      };
      calculatedStyle.backgroundColor = variant === "dark" ? color : getLightestShade();
    }
    if (variant !== "dark") {
      calculatedStyle.color = color;
    }
    return _objectSpread(_objectSpread({}, calculatedStyle), style);
  }, [color, variant, style]);
  var getTextStyle = React.useMemo(function () {
    if (!maxWidth) return {};
    return {
      maxWidth: isNaN(Number(maxWidth)) ? String(maxWidth) : "".concat(maxWidth, "px")
    };
  }, [maxWidth]);
  var tag = /* @__PURE__ */React__default["default"].createElement("div", _objectSpread({
    ref: ref,
    className: tagClassNames,
    onClick: function onClick(e) {
      if (disabled) return;
      _onClick({
        e: e
      });
    },
    style: getTagStyle
  }, otherTagProps), /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, icon, /* @__PURE__ */React__default["default"].createElement("span", _objectSpread({
    className: maxWidth ? "".concat(tagClassPrefix, "--text") : void 0,
    style: getTextStyle
  }, titleAttribute), children !== null && children !== void 0 ? children : content), closable && !disabled && deleteIcon));
  return tag;
};
var Tag = /*#__PURE__*/React.forwardRef(TagFunction);
Tag.displayName = "Tag";

exports.Tag = Tag;
exports.TagFunction = TagFunction;
exports["default"] = Tag;
//# sourceMappingURL=Tag.js.map
