/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-0006fcfa.js');
var slicedToArray = require('../_chunks/dep-8e4d656d.js');
var React = require('react');
var classNames = require('classnames');
var log = require('../_chunks/dep-59671c87.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var autoComplete_HighlightOption = require('../_chunks/dep-5883d975.js');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var _util_listener = require('../_util/listener.js');
var isFunction = require('../_chunks/dep-ec8d2dca.js');
require('../_chunks/dep-667ac7af.js');
require('../_chunks/dep-00b49251.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('../_chunks/dep-255ceed8.js');
require('../_chunks/dep-79629634.js');
require('../_chunks/dep-4ed9eda4.js');
require('../config-provider/ConfigProvider.js');
require('../_chunks/dep-ab2f63ec.js');
require('../_chunks/dep-a48c7e8b.js');
require('../_chunks/dep-3d4656ee.js');
require('../_chunks/dep-0ffc9d96.js');
require('../_chunks/dep-efe6d243.js');
require('../_chunks/dep-4b18243f.js');
require('../_chunks/dep-bff2c990.js');
require('../_chunks/dep-381fa848.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var OptionsList = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var value = props.value,
    popupVisible = props.popupVisible,
    onSelect = props.onSelect;
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var _useState = React.useState(""),
    _useState2 = slicedToArray._slicedToArray(_useState, 2),
    active = _useState2[0],
    setActive = _useState2[1];
  var activeIndexRef = React.useRef(-1);
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("autoComplete"),
    _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 1),
    global = _useLocaleReceiver2[0];
  var classes = "".concat(classPrefix, "-select__list");
  var optionClasses = ["".concat(classPrefix, "-select-option"), defineProperty._defineProperty({}, props.sizeClassNames[props.size], props.size)];
  var tOptions = React.useMemo(function () {
    var options = (props.options || []).map(function (item) {
      var option = {};
      if (typeof item === "string") {
        option = {
          text: item,
          label: item
        };
      } else {
        if (item.text && typeof item.text !== "string") {
          log.log.warn("AutoComplete", "`text` must be a string.");
        }
        if (!item.text) {
          if (typeof item.label === "string") {
            option = _objectSpread(_objectSpread({}, item), {}, {
              text: item.label
            });
          } else {
            log.log.warn("AutoComplete", "one of `label` and `text` must be a existed string.");
          }
        } else {
          option = item;
        }
      }
      return option;
    });
    if (props.filter) {
      options = options.filter(function (option) {
        return props.filter(value, option);
      });
    } else if (props.filterable) {
      var regExp = new RegExp(autoComplete_HighlightOption.escapeRegExp(value), "i");
      options = options.filter(function (item) {
        return regExp.test(item.text);
      });
    }
    return options;
  }, [props.options, value, props.filterable]);
  var onOptionClick = function onOptionClick(e) {
    var liNode = e.target;
    while (liNode && liNode.tagName !== "LI") {
      liNode = liNode.parentNode;
    }
    var keyword = liNode.getAttribute("title");
    setActive(keyword);
    onSelect(keyword, {
      e: e
    });
  };
  var onKeyInnerPress = function onKeyInnerPress(e) {
    if (e.code === "Enter" || e.key === "Enter") {
      var currentIndex = activeIndexRef.current;
      if (currentIndex === -1) {
        return;
      }
      onSelect(tOptions[activeIndexRef.current].text, {
        e: e
      });
    } else {
      var _tOptions$newIndex;
      var index = activeIndexRef.current;
      var newIndex;
      if (e.code === "ArrowUp" || e.key === "ArrowUp") {
        newIndex = index - 1 < 0 ? tOptions.length - 1 : index - 1;
      } else if (e.code === "ArrowDown" || e.key === "ArrowDown") {
        newIndex = index + 1 >= tOptions.length ? 0 : index + 1;
      }
      setActive((_tOptions$newIndex = tOptions[newIndex]) === null || _tOptions$newIndex === void 0 ? void 0 : _tOptions$newIndex.text);
    }
  };
  var addKeyboardListener = function addKeyboardListener() {
    _util_listener.on(document, "keydown", onKeyInnerPress);
  };
  var removeKeyboardListener = function removeKeyboardListener() {
    _util_listener.off(document, "keydown", onKeyInnerPress);
  };
  React.useImperativeHandle(ref, function () {
    return {
      addKeyboardListener: addKeyboardListener,
      removeKeyboardListener: removeKeyboardListener
    };
  });
  React.useEffect(function () {
    if (popupVisible) {
      addKeyboardListener();
    } else {
      removeKeyboardListener();
    }
    return function () {
      removeKeyboardListener();
    };
  }, [popupVisible]);
  React.useEffect(function () {
    if (!value) {
      setActive("");
    }
  }, [value]);
  React.useEffect(function () {
    activeIndexRef.current = tOptions.findIndex(function (item) {
      return item.text === active;
    });
  }, [active, tOptions]);
  if (!tOptions.length) {
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-auto-complete__panel--empty")
    }, props.empty || global.empty);
  }
  return /* @__PURE__ */React__default["default"].createElement("ul", {
    className: classes
  }, tOptions.map(function (item) {
    var cls = [].concat(optionClasses);
    if (item.text === active) {
      cls.push("".concat(classPrefix, "-select-option--hover"));
    }
    var content = (isFunction.isFunction(item.label) ? item.label() : item.label) || item.text;
    return /* @__PURE__ */React__default["default"].createElement("li", {
      key: item.text,
      className: classNames__default["default"](cls),
      title: item.text,
      onClick: onOptionClick
    }, typeof content === "string" && props.highlightKeyword ? /* @__PURE__ */React__default["default"].createElement(autoComplete_HighlightOption.HighlightOption, {
      content: content,
      keyword: value
    }) : content);
  }));
});
OptionsList.displayName = "OptionsList";

exports["default"] = OptionsList;
//# sourceMappingURL=OptionList.js.map
