{"version":3,"file":"Panel.js","sources":["../../../../components/cascader/components/Panel.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport Item from './Item';\n\nimport useConfig from '../../hooks/useConfig';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\nimport { getPanels } from '../core/helper';\nimport { expendClickEffect, valueChangeEffect } from '../core/effect';\n\nimport { TreeNode, CascaderContextType } from '../interface';\nimport { TdCascaderProps } from '../type';\nimport { StyledProps } from '../../common';\nimport parseTNode from '../../_util/parseTNode';\n\nexport interface CascaderPanelProps\n  extends StyledProps,\n    Pick<TdCascaderProps, 'trigger' | 'empty' | 'onChange' | 'loading' | 'loadingText' | 'option'> {\n  cascaderContext: CascaderContextType;\n}\n\nconst Panel = (props: CascaderPanelProps) => {\n  const { cascaderContext, option } = props;\n\n  const panels = useMemo(() => getPanels(cascaderContext.treeNodes), [cascaderContext.treeNodes]);\n\n  const handleExpand = (node: TreeNode, trigger: 'hover' | 'click') => {\n    const { trigger: propsTrigger, cascaderContext } = props;\n    expendClickEffect(propsTrigger, trigger, node, cascaderContext);\n  };\n\n  const { classPrefix } = useConfig();\n  const [global] = useLocaleReceiver('cascader');\n  const COMPONENT_NAME = `${classPrefix}-cascader`;\n\n  const renderItem = (node: TreeNode, index: number) => (\n    <Item\n      key={index}\n      node={node}\n      optionChild={node.data.content || parseTNode(option, { item: node.data, index, context: { node } })}\n      cascaderContext={cascaderContext}\n      onClick={() => {\n        handleExpand(node, 'click');\n      }}\n      onMouseEnter={() => {\n        handleExpand(node, 'hover');\n      }}\n      onChange={() => {\n        valueChangeEffect(node, cascaderContext);\n      }}\n    />\n  );\n\n  const renderList = (treeNodes: TreeNode[], isFilter = false, segment = true, key = '1') => (\n    <ul\n      className={classNames(`${COMPONENT_NAME}__menu`, 'narrow-scrollbar', {\n        [`${COMPONENT_NAME}__menu--segment`]: segment,\n        [`${COMPONENT_NAME}__menu--filter`]: isFilter,\n      })}\n      key={key}\n    >\n      {treeNodes.map((node: TreeNode, index: number) => renderItem(node, index))}\n    </ul>\n  );\n\n  const renderPanels = () => {\n    const { inputVal, treeNodes } = props.cascaderContext;\n    return inputVal\n      ? renderList(treeNodes, true)\n      : panels.map((treeNodes, index: number) =>\n          renderList(treeNodes, false, index !== panels.length - 1, `${COMPONENT_NAME}__menu${index}`),\n        );\n  };\n\n  let content;\n  if (props.loading) {\n    content = <div className={`${COMPONENT_NAME}__panel--empty`}>{props.loadingText ?? global.loadingText}</div>;\n  } else {\n    content = panels?.length ? (\n      renderPanels()\n    ) : (\n      <div className={`${COMPONENT_NAME}__panel--empty`}>{props.empty ?? global.empty}</div>\n    );\n  }\n  return (\n    <div\n      className={classNames(\n        `${COMPONENT_NAME}__panel`,\n        { [`${COMPONENT_NAME}--normal`]: panels.length && !props.loading },\n        props.className,\n      )}\n      style={props.style}\n    >\n      {content}\n    </div>\n  );\n};\n\nexport default Panel;\n"],"names":["Panel","props","cascaderContext","option","panels","useMemo","getPanels","treeNodes","handleExpand","node","trigger","propsTrigger","expendClickEffect","_useConfig","useConfig","classPrefix","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","_slicedToArray","global","COMPONENT_NAME","renderItem","index","React","createElement","Item","key","optionChild","data","content","parseTNode","item","context","onClick","onMouseEnter","onChange","valueChangeEffect","renderList","isFilter","arguments","length","undefined","segment","className","classNames","concat","_defineProperty","map","renderPanels","_props$cascaderContex","inputVal","loading","_props$loadingText","loadingText","_props$empty","empty","style"],"mappings":"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"}