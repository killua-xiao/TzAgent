{"version":3,"file":"effect.js","sources":["../../../../components/cascader/core/effect.ts"],"sourcesContent":["import { isNumber, isFunction, cloneDeep } from 'lodash-es';\nimport { TreeNode, CascaderContextType, TdCascaderProps, TreeNodeValue, TreeNodeModel } from '../interface';\nimport { getFullPathLabel, getTreeValue } from './helper';\n\n/**\n * 点击item的副作用\n * @param propsTrigger\n * @param trigger\n * @param node\n * @param cascaderContext\n */\nexport function expendClickEffect(\n  propsTrigger: TdCascaderProps['trigger'],\n  trigger: TdCascaderProps['trigger'],\n  node: TreeNode,\n  cascaderContext: CascaderContextType,\n) {\n  const { checkStrictly, multiple, treeStore, setVisible, setValue, setTreeNodes, setExpend, value, max, valueType } =\n    cascaderContext;\n\n  const isDisabled = node.disabled || (multiple && (value as TreeNodeValue[]).length >= max && max !== 0);\n\n  if (isDisabled) return;\n  // 点击展开节点，设置展开状态\n  if (propsTrigger === trigger && node.children !== null) {\n    const expanded = node.setExpanded(true);\n    treeStore.refreshNodes();\n    treeStore.replaceExpanded(expanded);\n    const nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n    setTreeNodes(nodes);\n\n    // 多选条件下手动维护expend\n    if (multiple) {\n      setExpend(expanded);\n    }\n  }\n\n  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === 'click') {\n    treeStore.resetChecked();\n    const checked = node.setChecked(!node.checked);\n    const [value] = checked;\n\n    // 非受控状态下更新状态\n    setValue(valueType === 'single' ? value : node.getPath().map((item) => item.value), 'check', node.getModel());\n\n    // 当 trigger 为 hover 时 ，点击节点一定是关闭 panel 的操作\n    if (!checkStrictly || propsTrigger === 'hover') {\n      setVisible(false, {});\n    }\n  }\n}\n\n/**\n * 多选状态下选中状态数据变化的副作用\n * @param node\n * @param cascaderContext\n * @returns\n */\nexport function valueChangeEffect(node: TreeNode, cascaderContext: CascaderContextType) {\n  const { disabled, max, inputVal, multiple, setVisible, setValue, treeNodes, treeStore, valueType } = cascaderContext;\n\n  if (!node || disabled || node.disabled) {\n    return;\n  }\n  const checked = node.setChecked(!node.isChecked());\n\n  if (isNumber(max) && max < 0) {\n    console.warn('TDesign Warn:', 'max should > 0');\n  }\n\n  if (checked.length > max && isNumber(max) && max > 0) {\n    return;\n  }\n\n  if (checked.length === 0) {\n    const expanded = treeStore.getExpanded();\n    setTimeout(() => {\n      treeStore.replaceExpanded(expanded);\n      treeStore.refreshNodes();\n    }, 0);\n  }\n\n  if (!multiple) {\n    setVisible(false, {});\n  }\n\n  const isSelectAll = treeNodes.every((item) => checked.indexOf(item.value) > -1);\n\n  if (inputVal && isSelectAll) {\n    setVisible(false, {});\n  }\n\n  // 处理不同数据类型\n  const resValue =\n    valueType === 'single'\n      ? checked\n      : checked.map((val) =>\n          treeStore\n            .getNode(val)\n            .getPath()\n            .map((item) => item.value),\n        );\n\n  setValue(resValue, node.checked ? 'uncheck' : 'check', node.getModel());\n}\n\n/**\n * closeIcon点击副作用\n * @param cascaderContext\n */\nexport function closeIconClickEffect(cascaderContext: CascaderContextType) {\n  const { setVisible, multiple, setExpend, setValue, treeStore } = cascaderContext;\n\n  const expanded = treeStore.getExpanded();\n  setTimeout(() => {\n    treeStore.replaceExpanded(expanded);\n    treeStore.refreshNodes();\n  }, 0);\n\n  setVisible(false, {});\n\n  // 手动设置的展开需要去除\n  if (multiple) {\n    setExpend([]);\n  }\n\n  setValue(multiple ? [] : '', 'clear');\n}\n\n/**\n * tag 关闭按钮点击副作用\n * @param cascaderContext\n */\nexport function handleRemoveTagEffect(\n  cascaderContext: CascaderContextType,\n  index: number,\n  onRemove: TdCascaderProps['onRemove'],\n) {\n  const { disabled, setValue, value, valueType, treeStore } = cascaderContext;\n\n  if (disabled) return;\n  const newValue = cloneDeep(value) as [];\n  const res = newValue.splice(index, 1);\n  const node = treeStore.getNodes(res[0])[0];\n  const checked = node.setChecked(!node.isChecked());\n\n  if (valueType === 'single') {\n    setValue(newValue, 'uncheck', node.getModel());\n  } else {\n    // 处理不同数据类型\n    const resValue = checked.map((val) =>\n      treeStore\n        .getNode(val)\n        .getPath()\n        .map((item) => item.value),\n    );\n    setValue(resValue, 'uncheck', node.getModel());\n  }\n\n  if (isFunction(onRemove)) {\n    onRemove({ value: checked, node: node as any });\n  }\n}\n\n/**\n * input和treeStore变化的副作用\n * @param inputVal\n * @param treeStore\n * @param setTreeNodes\n * @returns\n */\nexport const treeNodesEffect = (\n  inputVal: CascaderContextType['inputVal'],\n  treeStore: CascaderContextType['treeStore'],\n  setTreeNodes: CascaderContextType['setTreeNodes'],\n  filter: CascaderContextType['filter'],\n  checkStrictly: CascaderContextType['checkStrictly'],\n) => {\n  if (!treeStore) return;\n  let nodes = [];\n  if (inputVal) {\n    const filterMethods = (node: TreeNode) => {\n      if (!checkStrictly && !node.isLeaf()) return;\n      if (isFunction(filter)) {\n        return filter(`${inputVal}`, node as TreeNodeModel & TreeNode);\n      }\n      const fullPathLabel = getFullPathLabel(node, '');\n      return fullPathLabel.indexOf(`${inputVal}`) > -1;\n    };\n\n    nodes = treeStore.nodes.filter(filterMethods);\n  } else {\n    nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n  }\n  setTreeNodes(nodes);\n};\n\n/**\n * 初始化展开阶段与展开状态副作用\n * @param treeStore\n * @param treeValue\n * @param expend\n */\nexport const treeStoreExpendEffect = (\n  treeStore: CascaderContextType['treeStore'],\n  value: CascaderContextType['value'],\n  expend: TreeNodeValue[],\n) => {\n  const treeValue = getTreeValue(value);\n\n  if (!treeStore) return;\n  // init expanded, 无expend状态时设置\n  if (Array.isArray(treeValue) && expend.length === 0) {\n    const expandedMap = new Map();\n    const [val] = treeValue;\n    if (val) {\n      expandedMap.set(val, true);\n      const node = treeStore.getNode(val);\n      if (!node) {\n        treeStore.refreshNodes();\n        return;\n      }\n      node.getParents().forEach((tn: TreeNode) => {\n        expandedMap.set(tn.value, true);\n      });\n      const expandedArr = Array.from(expandedMap.keys());\n      treeStore.replaceExpanded(expandedArr);\n    } else {\n      treeStore.resetExpanded();\n    }\n  }\n  // 本地维护 expend，更加可控，不需要依赖于 tree 的状态\n  if (treeStore.getExpanded() && expend.length) {\n    treeStore.replaceExpanded(expend);\n  }\n  treeStore.refreshNodes();\n};\n"],"names":["expendClickEffect","propsTrigger","trigger","node","cascaderContext","checkStrictly","multiple","treeStore","setVisible","setValue","setTreeNodes","setExpend","value","max","valueType","isDisabled","disabled","length","children","expanded","setExpanded","refreshNodes","replaceExpanded","nodes","getNodes","filter","visible","isLeaf","resetChecked","checked","setChecked","_checked","_slicedToArray","getPath","map","item","getModel","valueChangeEffect","inputVal","treeNodes","isChecked","isNumber","console","warn","getExpanded","setTimeout","isSelectAll","every","indexOf","resValue","val","getNode","closeIconClickEffect","handleRemoveTagEffect","index","onRemove","newValue","cloneDeep","res","splice","isFunction","treeNodesEffect","filterMethods","concat","fullPathLabel","getFullPathLabel","treeStoreExpendEffect","expend","treeValue","getTreeValue","Array","isArray","expandedMap","Map","_treeValue","set","getParents","forEach","tn","expandedArr","from","keys","resetExpanded"],"mappings":"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"}