/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-0006fcfa.js');
var toConsumableArray = require('../../_chunks/dep-e4e1901e.js');
var slicedToArray = require('../../_chunks/dep-8e4d656d.js');
var classNames = require('classnames');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var table_hooks_useTreeDataExpand = require('../../_chunks/dep-d0353268.js');
var _util_parseTNode = require('../../_util/parseTNode.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var locale_LocalReceiver = require('../../locale/LocalReceiver.js');
var table_Cell = require('../Cell.js');
var table_hooks_useClassName = require('./useClassName.js');
var get = require('../../_chunks/dep-0c8c9057.js');
require('../../_chunks/dep-667ac7af.js');
require('../../_chunks/dep-00b49251.js');
require('../../_chunks/dep-69792df2.js');
require('../../_chunks/dep-2fff991d.js');
require('../../_chunks/dep-ec8d2dca.js');
require('../../_chunks/dep-25585736.js');
require('../../_chunks/dep-fc596d16.js');
require('../../_chunks/dep-59671c87.js');
require('../../_chunks/dep-221787fe.js');
require('../../_chunks/dep-79a54369.js');
require('../../_chunks/dep-e57bdc8f.js');
require('../../_chunks/dep-df2b541f.js');
require('../../_chunks/dep-edd366db.js');
require('../../_chunks/dep-25e4aa84.js');
require('../../_chunks/dep-e1fbe1c3.js');
require('../../_chunks/dep-3398c1f2.js');
require('../../_chunks/dep-64577888.js');
require('../../_chunks/dep-79629634.js');
require('../../_chunks/dep-62e73936.js');
require('../../_chunks/dep-21ece627.js');
require('../../_chunks/dep-255ceed8.js');
require('../../_chunks/dep-f33c1939.js');
require('../../hooks/useControlled.js');
require('../../_util/noop.js');
require('../../_chunks/dep-66114ce9.js');
require('../../_chunks/dep-62d1dd66.js');
require('../../_chunks/dep-7a148045.js');
require('../../hooks/usePrevious.js');
require('../../hooks/useConfig.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-1df1dad8.js');
require('../../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../../_chunks/dep-f32c03f1.js');
require('../../_chunks/dep-31c4bc3d.js');
require('../../_chunks/dep-eea2872a.js');
require('../../_chunks/dep-71455db7.js');
require('../../_chunks/dep-9e5a468d.js');
require('../../_chunks/dep-f26edb7b.js');
require('../../_chunks/dep-a56c4939.js');
require('../../_chunks/dep-6c297e20.js');
require('../../_chunks/dep-b7ad4d54.js');
require('../../_chunks/dep-a2cb9299.js');
require('../../_chunks/dep-f981815b.js');
require('../../_chunks/dep-4ed9eda4.js');
require('../../config-provider/ConfigProvider.js');
require('../../_chunks/dep-ab2f63ec.js');
require('../../_chunks/dep-a48c7e8b.js');
require('../../_chunks/dep-3d4656ee.js');
require('../../_chunks/dep-0ffc9d96.js');
require('../../_chunks/dep-efe6d243.js');
require('../../_chunks/dep-4b18243f.js');
require('../../_chunks/dep-bff2c990.js');
require('../Ellipsis.js');
require('../../_util/scroll.js');
require('raf');
require('../../_chunks/dep-381fa848.js');
require('../../_util/easing.js');
require('../../tooltip/index.js');
require('../../tooltip/Tooltip.js');
require('../../_chunks/dep-8fa3a4c2.js');
require('../../popup/index.js');
require('../../popup/Popup.js');
require('react-transition-group');
require('../../_util/ref.js');
require('react-is');
require('../../_util/isFragment.js');
require('../../common/Portal.js');
require('react-dom');
require('../../hooks/useLayoutEffect.js');
require('../../hooks/useAnimation.js');
require('../../hooks/useAttach.js');
require('../../hooks/useDefaultProps.js');
require('../../hooks/useMutationObserver.js');
require('../../hooks/useLatest.js');
require('../../_chunks/dep-eb6d55c1.js');
require('../../_chunks/dep-014b9b78.js');
require('../../_chunks/dep-abdd786a.js');
require('../../_chunks/dep-a231fdc5.js');
require('../../_chunks/dep-cf14666e.js');
require('../../hooks/usePopper.js');
require('@popperjs/core');
require('react-fast-compare');
require('../../hooks/useWindowSize.js');
require('../../popup/defaultProps.js');
require('../../popup/hooks/useTrigger.js');
require('../../_util/composeRefs.js');
require('../../_util/listener.js');
require('../../popup/utils/transition.js');
require('../../popup/PopupPlugin.js');
require('../../_chunks/dep-65ef8e09.js');
require('../../_util/react-render.js');
require('../../common/PluginContainer.js');
require('../../tooltip/defaultProps.js');
require('../../tooltip/TooltipLite.js');
require('../../hooks/useSwitch.js');
require('../../hooks/usePersistFn.js');
require('../../_chunks/dep-1438af5a.js');
require('../../hooks/useDebounce.js');
require('./useFixed.js');
require('../../_chunks/dep-002fcc1e.js');
require('../../_chunks/dep-2ffa3ff1.js');
require('../../_chunks/dep-b73b8db7.js');
require('../utils.js');
require('../../_chunks/dep-62f5b69f.js');
require('../../_chunks/dep-40e87384.js');
require('../../_chunks/dep-297a4933.js');
require('../../_chunks/dep-fc29b8b5.js');
require('../../_chunks/dep-139db759.js');
require('../../_chunks/dep-d915c90f.js');
require('../../_chunks/dep-1e4197a4.js');
require('../../_chunks/dep-22b1740a.js');
require('../../_chunks/dep-373af7a2.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useTreeData(props) {
  var _props$tree;
  var data = props.data,
    columns = props.columns,
    tree = props.tree,
    rowKey = props.rowKey,
    treeExpandAndFoldIcon = props.treeExpandAndFoldIcon,
    expandedTreeNodes = props.expandedTreeNodes;
  var _useState = React.useState(function () {
      return new table_hooks_useTreeDataExpand.TableTreeStore();
    }),
    _useState2 = slicedToArray._slicedToArray(_useState, 1),
    store = _useState2[0];
  var _useState3 = React.useState(function () {
      return getTreeNodeColumnCol();
    }),
    _useState4 = slicedToArray._slicedToArray(_useState3, 2),
    treeNodeCol = _useState4[0],
    setTreeNodeCol = _useState4[1];
  var _useState5 = React.useState(data || []),
    _useState6 = slicedToArray._slicedToArray(_useState5, 2),
    dataSource = _useState6[0],
    setDataSource = _useState6[1];
  var _useClassName = table_hooks_useClassName["default"](),
    tableTreeClasses = _useClassName.tableTreeClasses;
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("table"),
    _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
    locale = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
      AddRectangleIcon: tdesignIconsReact.AddRectangleIcon,
      MinusRectangleIcon: tdesignIconsReact.MinusRectangleIcon
    }),
    AddRectangleIcon = _useGlobalIcon.AddRectangleIcon,
    MinusRectangleIcon = _useGlobalIcon.MinusRectangleIcon;
  var rowDataKeys = React.useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  var _useTreeDataExpand = table_hooks_useTreeDataExpand.useTreeDataExpand(props, {
      store: store,
      dataSource: dataSource,
      rowDataKeys: rowDataKeys,
      setDataSource: setDataSource
    }),
    expandAll = _useTreeDataExpand.expandAll,
    foldAll = _useTreeDataExpand.foldAll,
    updateExpandOnDataChange = _useTreeDataExpand.updateExpandOnDataChange,
    onExpandFoldIconClick = _useTreeDataExpand.onExpandFoldIconClick;
  var checkedColumn = React.useMemo(function () {
    return columns.find(function (col) {
      return col.colKey === "row-select";
    });
  }, [columns]);
  React.useEffect(function () {
    if (!store || !checkedColumn) return;
    var rowValue = get.get(dataSource[0], rowDataKeys.rowKey);
    if (!store.treeDataMap.get(rowValue)) return;
    store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);
  }, [checkedColumn]);
  React.useEffect(function () {
    if (!data || !store) return;
    if (tree) {
      resetData(data);
    } else {
      setDataSource(data);
    }
  }, [data, expandedTreeNodes]);
  React.useEffect(function () {
    var treeNodeColTmp = getTreeNodeColumnCol();
    setTreeNodeCol(treeNodeColTmp);
  }, [columns, (_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.treeNodeColumnIndex]);
  function resetData(data2) {
    var columns2 = props.columns;
    store.initialTreeStore(data2, columns2, rowDataKeys);
    updateExpandOnDataChange(toConsumableArray._toConsumableArray(data2));
  }
  function getTreeNodeStyle(level) {
    var _props$tree2, _props$tree3;
    if (level === void 0) return;
    var indent = ((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.indent) === void 0 ? 24 : (_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent;
    return indent ? {
      paddingLeft: "".concat(level * indent || 1, "px")
    } : {};
  }
  function toggleExpandData(p, trigger) {
    var _props$onTreeExpandCh, _store$treeDataMap;
    var currentData = _objectSpread({}, p);
    if (p.row.__VIRTUAL_SCROLL_INDEX !== void 0) {
      currentData.rowIndex = p.row.__VIRTUAL_SCROLL_INDEX;
    }
    var newData = store.toggleExpandData(currentData, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));
    var rowValue = get.get(p.row, rowDataKeys.rowKey);
    (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 || _props$onTreeExpandCh.call(props, {
      row: p.row,
      rowIndex: p.rowIndex,
      rowState: store === null || store === void 0 || (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue),
      trigger: trigger
    });
  }
  function getTreeNodeColumnCol() {
    var _props$tree4;
    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.treeNodeColumnIndex) || 0;
    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;
      treeNodeColumnIndex += 1;
    }
    return columns2[treeNodeColumnIndex];
  }
  function formatTreeColumn(col) {
    if (!col || !treeNodeCol || !store) return {};
    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;
    var newCol = _objectSpread({}, treeNodeCol);
    newCol.cell = function (p) {
      var cellInfo = table_Cell.renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol)
      }), {
        cellEmptyContent: props.cellEmptyContent
      });
      var currentState = store.treeDataMap.get(get.get(p.row, rowDataKeys.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
      var classes = defineProperty._defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);
      var childrenNodes = get.get(p.row, rowDataKeys.childrenKey);
      if (Array.isArray(childrenNodes) && childrenNodes.length > 0 || childrenNodes === true) {
        var _store$treeDataMap$ge;
        var expanded = (_store$treeDataMap$ge = store.treeDataMap.get(get.get(p.row, rowDataKeys.rowKey))) === null || _store$treeDataMap$ge === void 0 ? void 0 : _store$treeDataMap$ge.expanded;
        var type = expanded ? "fold" : "expand";
        var defaultIconNode = t(locale.treeExpandAndFoldIcon, {
          type: type
        }) || (expanded ? /* @__PURE__ */React__default["default"].createElement(MinusRectangleIcon, null) : /* @__PURE__ */React__default["default"].createElement(AddRectangleIcon, null));
        var iconNode = treeExpandAndFoldIcon ? _util_parseTNode.parseContentTNode(treeExpandAndFoldIcon, _objectSpread({
          type: type
        }, p)) : defaultIconNode;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames__default["default"]([tableTreeClasses.col, classes]),
          style: colStyle
        }, !!(childrenNodes.length || childrenNodes === true) && /* @__PURE__ */React__default["default"].createElement("span", {
          className: tableTreeClasses.icon,
          onClick: function onClick(e) {
            onExpandFoldIconClick(p, "expand-fold-icon");
            e.stopPropagation();
          }
        }, iconNode), cellInfo);
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: colStyle,
        className: classNames__default["default"]([classes, tableTreeClasses.leafNode])
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: tableTreeClasses.icon
      }), cellInfo);
    };
    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (p) {
        return table_Cell.renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol)
        }));
      };
    }
    return newCol;
  }
  function setData(key, newRowData) {
    var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);
    var newData = toConsumableArray._toConsumableArray(dataSource);
    newData[rowIndex] = newRowData;
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }
  function getData(key) {
    return store.getData(key);
  }
  function remove(key) {
    var newData = store.remove(key, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }
  function removeChildren(key) {
    var newData = store.removeChildren(key, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }
  function appendTo(key, newData) {
    if (!key) {
      setDataSource(toConsumableArray._toConsumableArray(store.appendToRoot(newData, dataSource, rowDataKeys)));
      return;
    }
    setDataSource(toConsumableArray._toConsumableArray(store.appendTo(key, newData, dataSource, rowDataKeys)));
  }
  function insertAfter(rowValue, newData) {
    setDataSource(toConsumableArray._toConsumableArray(store.insertAfter(rowValue, newData, dataSource, rowDataKeys)));
  }
  function insertBefore(rowValue, newData) {
    setDataSource(toConsumableArray._toConsumableArray(store.insertBefore(rowValue, newData, dataSource, rowDataKeys)));
  }
  function swapData(params) {
    var r = store.swapData(params.data, params, rowDataKeys);
    if (r.result) {
      setDataSource(toConsumableArray._toConsumableArray(r.dataSource));
    } else {
      var _props$onAbnormalDrag;
      var params2 = {
        code: r.code,
        reason: r.reason
      };
      (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 || _props$onAbnormalDrag.call(props, params2);
    }
  }
  function getTreeNode() {
    return store.getTreeNode(dataSource, rowDataKeys);
  }
  function getTreeExpandedRow() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
    return store.getTreeExpandedRow(dataSource, rowDataKeys, type);
  }
  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    swapData: swapData,
    setData: setData,
    getData: getData,
    remove: remove,
    removeChildren: removeChildren,
    appendTo: appendTo,
    insertAfter: insertAfter,
    insertBefore: insertBefore,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData,
    expandAll: expandAll,
    foldAll: foldAll,
    getTreeNode: getTreeNode,
    resetData: resetData,
    getTreeExpandedRow: getTreeExpandedRow,
    onExpandFoldIconClick: onExpandFoldIconClick
  };
}

exports["default"] = useTreeData;
//# sourceMappingURL=useTreeData.js.map
