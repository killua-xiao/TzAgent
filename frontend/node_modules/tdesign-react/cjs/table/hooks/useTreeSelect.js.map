{"version":3,"file":"useTreeSelect.js","sources":["../../../../components/table/hooks/useTreeSelect.tsx"],"sourcesContent":["import { useMemo, useState, useEffect } from 'react';\nimport { get, intersection } from 'lodash-es';\nimport { KeysType, TableTreeDataMap, TreeDataMapType } from '@tdesign/common-js/table/tree-store';\nimport { TdEnhancedTableProps, TdPrimaryTableProps, TableRowData, PrimaryTableCol } from '../type';\nimport useControlled from '../../hooks/useControlled';\n\nexport interface GetChildrenDataReturnValue {\n  allChildren: Array<any>;\n  allChildrenKeys: Array<string | number>;\n  leafNodeKeys: Array<string | number>;\n}\n\n// 保存子节点信息，避免重复计算\nexport const childrenMap = new Map();\n\nexport function getChildrenData(\n  treeDataMap: TreeDataMapType,\n  data: TableRowData,\n  keys: { childrenKey: string; rowKey: string },\n  r?: GetChildrenDataReturnValue,\n): GetChildrenDataReturnValue {\n  if (childrenMap.get(data)) return childrenMap.get(data);\n  const result = r || { allChildren: [], allChildrenKeys: [], leafNodeKeys: [] };\n  const children = get(data, keys.childrenKey);\n  if (!children || !children.length) return result;\n  const selectableChildren = children.filter(\n    (item: TableRowData) => !treeDataMap.get(get(item, keys.rowKey))?.disabled,\n  );\n  result.allChildren = [...new Set(result.allChildren.concat(selectableChildren))];\n  for (let i = 0, len = children.length; i < len; i++) {\n    const tItem = children[i];\n    const c = get(tItem, keys.childrenKey);\n    if (c?.length) {\n      const nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);\n      result.allChildren = [...new Set(result.allChildren.concat(nextLevelData.allChildren))];\n    }\n  }\n  // 避免使用 forEach，减少上下文消耗\n  for (let i = 0, len = result.allChildren.length; i < len; i++) {\n    const item = result.allChildren[i];\n    const children = get(item, keys.childrenKey);\n    const rowValue = get(item, keys.rowKey);\n    result.allChildrenKeys.push(rowValue);\n    if (!children || !children.length) {\n      result.leafNodeKeys.push(rowValue);\n    }\n  }\n  result.allChildrenKeys = [...new Set(result.allChildrenKeys)];\n  result.leafNodeKeys = [...new Set(result.leafNodeKeys)];\n  return result;\n}\n\nexport interface RemoveParams {\n  // 当前选中的数据\n  selectedRowKeys: Array<string | number>;\n  // 需要移除的数据\n  removeKeys: Array<string | number>;\n}\n\nexport interface RemainData {\n  data: Array<any>;\n  keys: Array<string | number>;\n}\n\nexport function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData {\n  const { selectedRowKeys, removeKeys } = p;\n  const result = r || { data: [], keys: [] };\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    if (!removeKeys.includes(key)) {\n      result.keys.push(key);\n    }\n  }\n  return result;\n}\n\nexport interface GetKeyDataParams {\n  treeDataMap: TreeDataMapType;\n  data: Array<any>;\n  column: PrimaryTableCol;\n  keys: KeysType;\n}\n\nexport interface GetRowDataParams {\n  treeDataMap: TreeDataMapType;\n  selectedRowKeys: Array<string | number>;\n}\n\nexport function getRowDataByKeys(p: GetRowDataParams) {\n  const { treeDataMap, selectedRowKeys } = p;\n  const result = [];\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    result.push(treeDataMap.get(key));\n  }\n  return result;\n}\n\ntype SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;\n\nexport default function useTreeSelect(props: TdEnhancedTableProps, treeDataMap: TableTreeDataMap) {\n  const { tree, rowKey, data, indeterminateSelectedRowKeys } = props;\n  // 半选状态的节点：子节点选中至少一个，且没有全部选中\n  const [tIndeterminateSelectedRowKeys, setTIndeterminateSelectedRowKeys] = useState([]);\n  // eslint-disable-next-line\n  const [tSelectedRowKeys, setTSelectedRowKeys] = useControlled(props, 'selectedRowKeys', props.onSelectChange, {\n    defaultSelectedRowKeys: props.defaultSelectedRowKeys || [],\n  });\n\n  const rowDataKeys = useMemo(\n    () => ({\n      rowKey: rowKey || 'id',\n      childrenKey: tree?.childrenKey || 'children',\n    }),\n    [rowKey, tree?.childrenKey],\n  );\n\n  useEffect(() => {\n    if (!tree || !treeDataMap.size || tree.checkStrictly) return;\n    updateIndeterminateState();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tSelectedRowKeys, data, tree, treeDataMap]);\n\n  function updateIndeterminateState() {\n    if (!tree || tree.checkStrictly) return;\n    if (!tSelectedRowKeys.length) {\n      setTIndeterminateSelectedRowKeys([]);\n      return;\n    }\n    const keys: Array<string | number> = [];\n    const parentMap: { [key: string | number]: any[] } = {};\n    for (let i = 0, len = tSelectedRowKeys.length; i < len; i++) {\n      const rowValue = tSelectedRowKeys[i];\n      const state = treeDataMap.get(rowValue);\n      if (!state) continue;\n      const children = get(state.row, rowDataKeys.childrenKey);\n      // 根据选中的叶子结点计算父节点半选状态\n      if (!children || !children.length) {\n        let parentTmp = state.parent;\n        while (parentTmp) {\n          if (!parentMap[parentTmp.id]) {\n            parentMap[parentTmp.id] = [];\n          }\n          parentMap[parentTmp.id].push(state.row);\n          const checkedLength = parentMap[parentTmp.id].length;\n          const { allChildrenKeys } = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys);\n          const parentTmpIndex = keys.indexOf(parentTmp.id);\n          const selectedIndex = tSelectedRowKeys.indexOf(parentTmp.id);\n          if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {\n            parentTmpIndex === -1 && keys.push(parentTmp.id);\n          } else {\n            parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);\n          }\n          parentTmp = parentTmp.parent;\n        }\n      }\n    }\n    setTIndeterminateSelectedRowKeys(keys);\n  }\n\n  function updateParentCheckedState(\n    selectedKeys: (string | number)[],\n    currentRowKey: string | number,\n    type: 'check' | 'uncheck',\n  ) {\n    if (!tree || tree.checkStrictly) return;\n    const keys = [...selectedKeys];\n    const state = treeDataMap.get(currentRowKey);\n    let parentTmp = state.parent;\n    while (parentTmp) {\n      const { leafNodeKeys } = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys);\n      const checkedChildrenKeys = intersection(leafNodeKeys, selectedKeys);\n      const selectedIndex = keys.indexOf(parentTmp.id);\n      if (type === 'uncheck') {\n        selectedIndex !== -1 && keys.splice(selectedIndex, 1);\n      } else if (checkedChildrenKeys.length === leafNodeKeys.length) {\n        selectedIndex === -1 && keys.push(parentTmp.id);\n      }\n      parentTmp = parentTmp.parent;\n    }\n    return keys;\n  }\n\n  function onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    if (!tree || tree.checkStrictly) {\n      setTSelectedRowKeys(rowKeys, extraData);\n      return;\n    }\n    if (extraData.currentRowKey === 'CHECK_ALL_BOX') {\n      handleSelectAll(extraData);\n    } else {\n      handleSelect(rowKeys, extraData);\n    }\n  }\n\n  function handleSelectAll(extraData: SelectChangeParams[1]) {\n    const newRowKeys: Array<string | number> = [];\n    const newRowData: TableRowData[] = [];\n    if (extraData?.type === 'check') {\n      const arr = [...treeDataMap.values()];\n      for (let i = 0, len = arr.length; i < len; i++) {\n        const item = arr[i];\n        if (!item?.disabled) {\n          newRowData.push(item.row);\n          newRowKeys.push(get(item.row, rowDataKeys.rowKey));\n        }\n      }\n    }\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData || [],\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  function handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    let newRowKeys = [...rowKeys];\n    if (tree.checkStrictly === false) {\n      if (extraData.type === 'check') {\n        const result = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);\n        const { allChildrenKeys } = result;\n        childrenMap.set(extraData.currentRowData, result);\n        newRowKeys = [...new Set(newRowKeys.concat(allChildrenKeys))];\n      } else if (extraData.type === 'uncheck') {\n        const children = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);\n        const result = removeChildrenKeys({\n          selectedRowKeys: rowKeys,\n          removeKeys: children.allChildrenKeys,\n        });\n        newRowKeys = result.keys;\n      }\n    }\n    newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);\n    const newRowData = getRowDataByKeys({ treeDataMap, selectedRowKeys: newRowKeys });\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData,\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  return {\n    // 如果存在受控属性 indeterminateSelectedRowKeys 则优先使用；否则使用内部状态：tIndeterminateSelectedRowKeys\n    tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys || tIndeterminateSelectedRowKeys,\n    onInnerSelectChange,\n  };\n}\n"],"names":["childrenMap","Map","getChildrenData","treeDataMap","data","keys","r","get","result","allChildren","allChildrenKeys","leafNodeKeys","children","childrenKey","length","selectableChildren","filter","item","_treeDataMap$get","rowKey","disabled","_toConsumableArray","Set","concat","i","len","tItem","c","nextLevelData","rowValue","push","removeChildrenKeys","p","selectedRowKeys","removeKeys","key","includes","getRowDataByKeys","useTreeSelect","props","tree","indeterminateSelectedRowKeys","_useState","useState","_useState2","_slicedToArray","tIndeterminateSelectedRowKeys","setTIndeterminateSelectedRowKeys","_useControlled","useControlled","onSelectChange","defaultSelectedRowKeys","_useControlled2","tSelectedRowKeys","setTSelectedRowKeys","rowDataKeys","useMemo","useEffect","size","checkStrictly","updateIndeterminateState","parentMap","state","row","parentTmp","parent","id","checkedLength","_getChildrenData","parentTmpIndex","indexOf","selectedIndex","splice","updateParentCheckedState","selectedKeys","currentRowKey","type","_getChildrenData2","checkedChildrenKeys","intersection","onInnerSelectChange","rowKeys","extraData","handleSelectAll","handleSelect","newRowKeys","newRowData","arr","values","newExtraData","_objectSpread","selectedRowData","currentRowData","set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaaA,WAAA,sBAAkBC,GAAI,GAAA;AAE5B,SAASC,eACdA,CAAAC,WAAA,EACAC,IACA,EAAAC,IAAA,EACAC,CAC4B,EAAA;AACxB,EAAA,IAAAN,WAAA,CAAYO,IAAIH,IAAI,CAAA,EAAU,OAAAJ,WAAA,CAAYO,IAAIH,IAAI,CAAA,CAAA;EAChD,IAAAI,MAAA,GAASF,CAAK,IAAA;AAAEG,IAAAA,WAAa,EAAA,EAAI;AAAAC,IAAAA,eAAA,EAAiB,EAAC;AAAGC,IAAAA,YAAc,EAAA,EAAA;GAAG,CAAA;EAC7E,IAAMC,QAAW,GAAAL,OAAA,CAAIH,IAAM,EAAAC,IAAA,CAAKQ,WAAW,CAAA,CAAA;EACvC,IAAA,CAACD,QAAY,IAAA,CAACA,QAAS,CAAAE,MAAA,EAAe,OAAAN,MAAA,CAAA;AAC1C,EAAA,IAAMO,qBAAqBH,QAAS,CAAAI,MAAA,CAClC,UAACC,IAAuB,EAAA;AAAA,IAAA,IAAAC,gBAAA,CAAA;IAAA,OAAA,EAAA,CAAAA,gBAAA,GAACf,WAAY,CAAAI,GAAA,CAAIA,QAAIU,IAAM,EAAAZ,IAAA,CAAKc,MAAM,CAAC,CAAG,cAAAD,gBAAA,KAAA,KAAA,CAAA,IAAzCA,gBAAA,CAAyCE,QAAA,CAAA,CAAA;AAAA,GACpE,CAAA,CAAA;AACOZ,EAAAA,MAAA,CAAAC,WAAA,GAAAY,oCAAA,CAAkB,IAAIC,GAAA,CAAId,OAAOC,WAAY,CAAAc,MAAA,CAAOR,kBAAkB,CAAC,CAAC,CAAA,CAAA;AAC/E,EAAA,KAAA,IAASS,IAAI,CAAG,EAAAC,GAAA,GAAMb,SAASE,MAAQ,EAAAU,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AACnD,IAAA,IAAME,QAAQd,QAAS,CAAAY,CAAA,CAAA,CAAA;IACvB,IAAMG,CAAI,GAAApB,OAAA,CAAImB,KAAO,EAAArB,IAAA,CAAKQ,WAAW,CAAA,CAAA;AACrC,IAAA,IAAIc,MAAAA,IAAAA,IAAAA,gBAAAA,EAAGb,MAAQ,EAAA;MACb,IAAMc,aAAgB,GAAA1B,eAAA,CAAgBC,WAAa,EAAAuB,KAAA,EAAOrB,MAAMG,MAAM,CAAA,CAAA;AAC/DA,MAAAA,MAAA,CAAAC,WAAA,GAAAY,oCAAA,CAAkB,IAAIC,GAAA,CAAId,MAAO,CAAAC,WAAA,CAAYc,MAAO,CAAAK,aAAA,CAAcnB,WAAW,CAAC,CAAC,CAAA,CAAA;AACxF,KAAA;AACF,GAAA;AAES,EAAA,KAAA,IAAAe,EAAA,GAAI,GAAGC,IAAM,GAAAjB,MAAA,CAAOC,YAAYK,MAAQ,EAAAU,EAAA,GAAIC,MAAKD,EAAK,EAAA,EAAA;AACvD,IAAA,IAAAP,IAAA,GAAOT,OAAOC,WAAY,CAAAe,EAAA,CAAA,CAAA;IAChC,IAAMZ,SAAW,GAAAL,OAAA,CAAIU,IAAM,EAAAZ,IAAA,CAAKQ,WAAW,CAAA,CAAA;IAC3C,IAAMgB,QAAW,GAAAtB,OAAA,CAAIU,IAAM,EAAAZ,IAAA,CAAKc,MAAM,CAAA,CAAA;AAC/BX,IAAAA,MAAA,CAAAE,eAAA,CAAgBoB,KAAKD,QAAQ,CAAA,CAAA;AACpC,IAAA,IAAI,CAACjB,SAAAA,IAAY,CAACA,SAAAA,CAASE,MAAQ,EAAA;AAC1BN,MAAAA,MAAA,CAAAG,YAAA,CAAamB,KAAKD,QAAQ,CAAA,CAAA;AACnC,KAAA;AACF,GAAA;AACArB,EAAAA,MAAA,CAAOE,uDAAsB,IAAIY,GAAI,CAAAd,MAAA,CAAOE,eAAe,CAAC,CAAA,CAAA;AAC5DF,EAAAA,MAAA,CAAOG,oDAAmB,IAAIW,GAAI,CAAAd,MAAA,CAAOG,YAAY,CAAC,CAAA,CAAA;AAC/C,EAAA,OAAAH,MAAA,CAAA;AACT,CAAA;AAcgB,SAAAuB,kBAAAA,CAAmBC,GAAiB1B,CAA4B,EAAA;AACxE,EAAA,IAAE2B,eAAiB,GAAeD,CAAA,CAAhCC,eAAiB;IAAAC,UAAA,GAAeF,CAAA,CAAfE,UAAA,CAAA;EACnB,IAAA1B,MAAA,GAASF,KAAK;AAAEF,IAAAA,IAAA,EAAM,EAAI;AAAAC,IAAAA,IAAA,EAAM,EAAA;GAAG,CAAA;AACzC,EAAA,KAAA,IAASmB,IAAI,CAAG,EAAAC,GAAA,GAAMQ,gBAAgBnB,MAAQ,EAAAU,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAC1D,IAAA,IAAMW,MAAMF,eAAgB,CAAAT,CAAA,CAAA,CAAA;AAC5B,IAAA,IAAI,CAACU,UAAA,CAAWE,QAAS,CAAAD,GAAG,CAAG,EAAA;AACtB3B,MAAAA,MAAA,CAAAH,IAAA,CAAKyB,KAAKK,GAAG,CAAA,CAAA;AACtB,KAAA;AACF,GAAA;AACO,EAAA,OAAA3B,MAAA,CAAA;AACT,CAAA;AAcO,SAAS6B,iBAAiBL,CAAqB,EAAA;AAC9C,EAAA,IAAE7B,WAAa,GAAoB6B,CAAA,CAAjC7B,WAAa;IAAA8B,eAAA,GAAoBD,CAAA,CAApBC,eAAA,CAAA;EACrB,IAAMzB,SAAS,EAAC,CAAA;AAChB,EAAA,KAAA,IAASgB,IAAI,CAAG,EAAAC,GAAA,GAAMQ,gBAAgBnB,MAAQ,EAAAU,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAC1D,IAAA,IAAMW,MAAMF,eAAgB,CAAAT,CAAA,CAAA,CAAA;IAC5BhB,MAAA,CAAOsB,IAAK,CAAA3B,WAAA,CAAYI,GAAI,CAAA4B,GAAG,CAAC,CAAA,CAAA;AAClC,GAAA;AACO,EAAA,OAAA3B,MAAA,CAAA;AACT,CAAA;AAIwB,SAAA8B,aAAAA,CAAcC,OAA6BpC,WAA+B,EAAA;AAChG,EAAA,IAAQqC,IAAA,GAAqDD,KAAA,CAArDC,IAAA;IAAMrB,MAAQ,GAAuCoB,KAAA,CAA/CpB,MAAQ;IAAAf,IAAA,GAAuCmC,KAAA,CAAvCnC,IAAA;IAAMqC,+BAAiCF,KAAA,CAAjCE;AAE5B,EAAA,IAAAC,SAAA,GAA0EC,cAAA,CAAS,EAAE,CAAA;IAAAC,UAAA,GAAAC,4BAAA,CAAAH,SAAA,EAAA,CAAA,CAAA;AAA9EI,IAAAA,6BAA+B,GAAAF,UAAA,CAAA,CAAA,CAAA;AAAAG,IAAAA,gCAAgC,GAAAH,UAAA,CAAA,CAAA,CAAA,CAAA;EAEhE,IAAAI,cAAA,GAA0CC,+BAAcV,KAAO,EAAA,iBAAA,EAAmBA,MAAMW,cAAgB,EAAA;AAC5GC,MAAAA,sBAAA,EAAwBZ,KAAM,CAAAY,sBAAA,IAA0B,EAAA;AAC1D,KAAC,CAAA;IAAAC,eAAA,GAAAP,4BAAA,CAAAG,cAAA,EAAA,CAAA,CAAA;AAFMK,IAAAA;AAAkBC,IAAAA,mBAAmB,GAAAF,eAAA,CAAA,CAAA,CAAA,CAAA;EAI5C,IAAMG,WAAc,GAAAC,aAAA,CAClB,YAAA;IAAA,OAAO;MACLrC,QAAQA,MAAU,IAAA,IAAA;MAClBN,WAAA,EAAa,CAAA2B,iBAAAA,SAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAM3B,WAAe,KAAA,UAAA;KACpC,CAAA;AAAA,GAAA,EACA,CAACM,MAAQ,EAAAqB,IAAA,KAAA,IAAA,IAAAA,IAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,IAAA,CAAM3B,WAAW,CAC5B,CAAA,CAAA;AAEA4C,EAAAA,eAAA,CAAU,YAAM;IACd,IAAI,CAACjB,IAAA,IAAQ,CAACrC,WAAA,CAAYuD,QAAQlB,IAAK,CAAAmB,aAAA,EAAe,OAAA;AAC7BC,IAAAA,wBAAA,EAAA,CAAA;KAExB,CAACP,gBAAA,EAAkBjD,IAAM,EAAAoC,IAAA,EAAMrC,WAAW,CAAC,CAAA,CAAA;EAE9C,SAASyD,wBAA2BA,GAAA;AAC9B,IAAA,IAAA,CAACpB,QAAQA,IAAK,CAAAmB,aAAA,EAAe,OAAA;AAC7B,IAAA,IAAA,CAACN,iBAAiBvC,MAAQ,EAAA;MAC5BiC,gCAAA,CAAiC,EAAE,CAAA,CAAA;AACnC,MAAA,OAAA;AACF,KAAA;IACA,IAAM1C,OAA+B,EAAC,CAAA;IACtC,IAAMwD,YAA+C,EAAC,CAAA;AACtD,IAAA,KAAA,IAASrC,IAAI,CAAG,EAAAC,GAAA,GAAM4B,iBAAiBvC,MAAQ,EAAAU,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAC3D,MAAA,IAAMK,WAAWwB,gBAAiB,CAAA7B,CAAA,CAAA,CAAA;AAC5B,MAAA,IAAAsC,KAAA,GAAQ3D,WAAY,CAAAI,GAAA,CAAIsB,QAAQ,CAAA,CAAA;MACtC,IAAI,CAACiC,KAAA,EAAO,SAAA;MACZ,IAAMlD,QAAW,GAAAL,OAAA,CAAIuD,KAAM,CAAAC,GAAA,EAAKR,YAAY1C,WAAW,CAAA,CAAA;AAEvD,MAAA,IAAI,CAACD,QAAA,IAAY,CAACA,QAAA,CAASE,MAAQ,EAAA;AACjC,QAAA,IAAIkD,YAAYF,KAAM,CAAAG,MAAA,CAAA;AACtB,QAAA,OAAOD,SAAW,EAAA;AACZ,UAAA,IAAA,CAACH,SAAU,CAAAG,SAAA,CAAUE,EAAK,CAAA,EAAA;AAClBL,YAAAA,SAAA,CAAAG,SAAA,CAAUE,MAAM,EAAC,CAAA;AAC7B,WAAA;UACAL,SAAA,CAAUG,SAAU,CAAAE,EAAA,CAAA,CAAIpC,IAAK,CAAAgC,KAAA,CAAMC,GAAG,CAAA,CAAA;UAChC,IAAAI,aAAA,GAAgBN,SAAU,CAAAG,SAAA,CAAUE,EAAI,CAAA,CAAApD,MAAA,CAAA;UAC9C,IAAAsD,gBAAA,GAA4BlE,gBAAgBC,WAAa,EAAA6D,SAAA,CAAUD,KAAKR,WAAW,CAAA;YAA3E7C,eAAgB,GAAA0D,gBAAA,CAAhB1D,eAAgB,CAAA;UACxB,IAAM2D,cAAiB,GAAAhE,IAAA,CAAKiE,OAAQ,CAAAN,SAAA,CAAUE,EAAE,CAAA,CAAA;UAChD,IAAMK,aAAgB,GAAAlB,gBAAA,CAAiBiB,OAAQ,CAAAN,SAAA,CAAUE,EAAE,CAAA,CAAA;AAC3D,UAAA,IAAIC,gBAAgB,CAAK,IAAAA,aAAA,GAAgBzD,eAAgB,CAAAI,MAAA,IAAUyD,kBAAkB,CAAI,CAAA,EAAA;YACvFF,cAAA,KAAmB,CAAM,CAAA,IAAAhE,IAAA,CAAKyB,IAAK,CAAAkC,SAAA,CAAUE,EAAE,CAAA,CAAA;AACjD,WAAO,MAAA;YACLG,cAAA,KAAmB,CAAM,CAAA,IAAAhE,IAAA,CAAKmE,MAAO,CAAAH,cAAA,EAAgB,CAAC,CAAA,CAAA;AACxD,WAAA;UACAL,SAAA,GAAYA,SAAU,CAAAC,MAAA,CAAA;AACxB,SAAA;AACF,OAAA;AACF,KAAA;IACAlB,gCAAA,CAAiC1C,IAAI,CAAA,CAAA;AACvC,GAAA;AAES,EAAA,SAAAoE,wBAAAA,CACPC,YACA,EAAAC,aAAA,EACAC,IACA,EAAA;AACI,IAAA,IAAA,CAACpC,QAAQA,IAAK,CAAAmB,aAAA,EAAe,OAAA;AAC3B,IAAA,IAAAtD,IAAA,GAAAgB,oCAAA,CAAWqD,YAAY,CAAA,CAAA;AACvB,IAAA,IAAAZ,KAAA,GAAQ3D,WAAY,CAAAI,GAAA,CAAIoE,aAAa,CAAA,CAAA;AAC3C,IAAA,IAAIX,YAAYF,KAAM,CAAAG,MAAA,CAAA;AACtB,IAAA,OAAOD,SAAW,EAAA;MAChB,IAAAa,iBAAA,GAAyB3E,gBAAgBC,WAAa,EAAA6D,SAAA,CAAUD,KAAKR,WAAW,CAAA;QAAxE5C,YAAa,GAAAkE,iBAAA,CAAblE,YAAa,CAAA;AACf,MAAA,IAAAmE,mBAAA,GAAsBC,yBAAa,CAAApE,YAAA,EAAc+D,YAAY,CAAA,CAAA;MACnE,IAAMH,aAAgB,GAAAlE,IAAA,CAAKiE,OAAQ,CAAAN,SAAA,CAAUE,EAAE,CAAA,CAAA;MAC/C,IAAIU,SAAS,SAAW,EAAA;QACtBL,aAAA,KAAkB,CAAM,CAAA,IAAAlE,IAAA,CAAKmE,MAAO,CAAAD,aAAA,EAAe,CAAC,CAAA,CAAA;OAC3C,MAAA,IAAAO,mBAAA,CAAoBhE,MAAW,KAAAH,YAAA,CAAaG,MAAQ,EAAA;QAC7DyD,aAAA,KAAkB,CAAM,CAAA,IAAAlE,IAAA,CAAKyB,IAAK,CAAAkC,SAAA,CAAUE,EAAE,CAAA,CAAA;AAChD,OAAA;MACAF,SAAA,GAAYA,SAAU,CAAAC,MAAA,CAAA;AACxB,KAAA;AACO,IAAA,OAAA5D,IAAA,CAAA;AACT,GAAA;AAES,EAAA,SAAA2E,mBAAAA,CAAoBC,SAAgCC,SAAkC,EAAA;AACzF,IAAA,IAAA,CAAC1C,IAAQ,IAAAA,IAAA,CAAKmB,aAAe,EAAA;AAC/BL,MAAAA,mBAAA,CAAoB2B,SAASC,SAAS,CAAA,CAAA;AACtC,MAAA,OAAA;AACF,KAAA;AACI,IAAA,IAAAA,SAAA,CAAUP,kBAAkB,eAAiB,EAAA;MAC/CQ,eAAA,CAAgBD,SAAS,CAAA,CAAA;AAC3B,KAAO,MAAA;AACLE,MAAAA,YAAA,CAAaH,SAASC,SAAS,CAAA,CAAA;AACjC,KAAA;AACF,GAAA;EAEA,SAASC,gBAAgBD,SAAkC,EAAA;IACzD,IAAMG,aAAqC,EAAC,CAAA;IAC5C,IAAMC,aAA6B,EAAC,CAAA;IAChC,IAAA,CAAAJ,SAAA,KAAA,IAAA,IAAAA,SAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,SAAA,CAAWN,UAAS,OAAS,EAAA;MAC/B,IAAMW,GAAM,GAAAlE,oCAAA,CAAIlB,WAAA,CAAYqF,QAAQ,CAAA,CAAA;AACpC,MAAA,KAAA,IAAShE,IAAI,CAAG,EAAAC,GAAA,GAAM8D,IAAIzE,MAAQ,EAAAU,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAC9C,QAAA,IAAMP,OAAOsE,GAAI,CAAA/D,CAAA,CAAA,CAAA;QACb,IAAA,EAACP,SAAAA,IAAAA,IAAAA,mBAAAA,KAAMG,QAAU,CAAA,EAAA;AACRkE,UAAAA,UAAA,CAAAxD,IAAA,CAAKb,KAAK8C,GAAG,CAAA,CAAA;AACxBsB,UAAAA,UAAA,CAAWvD,KAAKvB,OAAI,CAAAU,IAAA,CAAK8C,GAAK,EAAAR,WAAA,CAAYpC,MAAM,CAAC,CAAA,CAAA;AACnD,SAAA;AACF,OAAA;AACF,KAAA;AACA,IAAA,IAAMsE,YAAe,GAAAC,aAAA,CAAAA,aAAA,KAChBR,SAAA,CAAA,EAAA,EAAA,EAAA;MACHS,eAAA,EAAiBL,cAAc,EAAA;KACjC,CAAA,CAAA;AACAhC,IAAAA,mBAAA,CAAoB+B,YAAYI,YAAY,CAAA,CAAA;AAC9C,GAAA;AAES,EAAA,SAAAL,YAAAA,CAAaH,SAAgCC,SAAkC,EAAA;AAClF,IAAA,IAAAG,UAAA,GAAAhE,oCAAA,CAAiB4D,OAAO,CAAA,CAAA;AACxB,IAAA,IAAAzC,IAAA,CAAKmB,kBAAkB,KAAO,EAAA;AAC5B,MAAA,IAAAuB,SAAA,CAAUN,SAAS,OAAS,EAAA;QAC9B,IAAMpE,MAAS,GAAAN,eAAA,CAAgBC,WAAa,EAAA+E,SAAA,CAAUU,gBAAgBrC,WAAW,CAAA,CAAA;AAC3E,QAAA,IAAE7C,kBAAoBF,MAAA,CAApBE;QACIV,WAAA,CAAA6F,GAAA,CAAIX,SAAU,CAAAU,cAAA,EAAgBpF,MAAM,CAAA,CAAA;AACnC6E,QAAAA,UAAA,GAAAhE,oCAAA,CAAI,IAAIC,GAAA,CAAI+D,WAAW9D,MAAO,CAAAb,eAAe,CAAC,CAAC,CAAA,CAAA;AAC9D,OAAA,MAAA,IAAWwE,SAAU,CAAAN,IAAA,KAAS,SAAW,EAAA;QACvC,IAAMhE,QAAW,GAAAV,eAAA,CAAgBC,WAAa,EAAA+E,SAAA,CAAUU,gBAAgBrC,WAAW,CAAA,CAAA;QACnF,IAAM/C,UAASuB,kBAAmB,CAAA;AAChCE,UAAAA,eAAiB,EAAAgD,OAAA;UACjB/C,YAAYtB,QAAS,CAAAF,eAAAA;AACvB,SAAC,CAAA,CAAA;QACD2E,UAAA,GAAa7E,OAAO,CAAAH,IAAA,CAAA;AACtB,OAAA;AACF,KAAA;AACAgF,IAAAA,UAAA,GAAaZ,wBAAyB,CAAAY,UAAA,EAAYH,SAAU,CAAAP,aAAA,EAAeO,UAAUN,IAAI,CAAA,CAAA;IACzF,IAAMU,aAAajD,gBAAiB,CAAA;AAAElC,MAAAA,WAAa,EAAbA,WAAa;AAAA8B,MAAAA,eAAA,EAAiBoD,UAAAA;AAAW,KAAC,CAAA,CAAA;AAChF,IAAA,IAAMI,YAAe,GAAAC,aAAA,CAAAA,aAAA,KAChBR,SAAA,CAAA,EAAA,EAAA,EAAA;AACHS,MAAAA,eAAiB,EAAAL,UAAAA;KACnB,CAAA,CAAA;AACAhC,IAAAA,mBAAA,CAAoB+B,YAAYI,YAAY,CAAA,CAAA;AAC9C,GAAA;EAEO,OAAA;IAEL3C,+BAA+BL,4BAAgC,IAAAK,6BAAA;AAC/DkC,IAAAA,mBAAA,EAAAA,mBAAAA;GACF,CAAA;AACF;;;;;;;;"}