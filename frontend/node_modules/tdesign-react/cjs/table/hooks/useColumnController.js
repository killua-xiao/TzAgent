/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-0006fcfa.js');
var slicedToArray = require('../../_chunks/dep-8e4d656d.js');
var toConsumableArray = require('../../_chunks/dep-e4e1901e.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var classNames = require('classnames');
var checkbox_index = require('../../checkbox/index.js');
var dialog_plugin = require('../../dialog/plugin.js');
var table_hooks_useTableHeader = require('./useTableHeader.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var hooks_useControlled = require('../../hooks/useControlled.js');
var table_utils = require('../utils.js');
var button_index = require('../../button/index.js');
var intersection = require('../../_chunks/dep-b41f97dc.js');
var xorWith = require('../../_chunks/dep-62f5b69f.js');
require('../../_chunks/dep-667ac7af.js');
require('../../_chunks/dep-00b49251.js');
require('../../_chunks/dep-e136a981.js');
require('../../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../../common/Check.js');
require('../../_chunks/dep-8fa3a4c2.js');
require('../../_util/helper.js');
require('../../_chunks/dep-840b1644.js');
require('../../_chunks/dep-255ceed8.js');
require('../../_chunks/dep-25585736.js');
require('../../_chunks/dep-64577888.js');
require('../../_chunks/dep-79629634.js');
require('../../_chunks/dep-62e73936.js');
require('../../_chunks/dep-66114ce9.js');
require('../../_chunks/dep-62d1dd66.js');
require('../../_chunks/dep-7a148045.js');
require('../../_chunks/dep-c16f1dc4.js');
require('../../config-provider/ConfigContext.js');
require('../../_chunks/dep-1df1dad8.js');
require('../../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../../_chunks/dep-f32c03f1.js');
require('../../_chunks/dep-31c4bc3d.js');
require('../../_chunks/dep-eea2872a.js');
require('../../_chunks/dep-71455db7.js');
require('../../_chunks/dep-9e5a468d.js');
require('../../_chunks/dep-ec8d2dca.js');
require('../../_chunks/dep-fc596d16.js');
require('../../_chunks/dep-f26edb7b.js');
require('../../_chunks/dep-f33c1939.js');
require('../../_chunks/dep-21ece627.js');
require('../../_chunks/dep-25e4aa84.js');
require('../../_chunks/dep-e1fbe1c3.js');
require('../../_chunks/dep-df2b541f.js');
require('../../_chunks/dep-edd366db.js');
require('../../_chunks/dep-a56c4939.js');
require('../../_chunks/dep-6c297e20.js');
require('../../_chunks/dep-b7ad4d54.js');
require('../../_chunks/dep-a2cb9299.js');
require('../../_chunks/dep-f981815b.js');
require('../../_util/noop.js');
require('../../checkbox/defaultProps.js');
require('../../hooks/useDefaultProps.js');
require('../../_chunks/dep-2ffa3ff1.js');
require('../../_chunks/dep-59671c87.js');
require('../../_util/react-render.js');
require('../../_chunks/dep-65ef8e09.js');
require('react-dom');
require('../../dialog/Dialog.js');
require('react-transition-group');
require('../../common/Portal.js');
require('../../_chunks/dep-381fa848.js');
require('../../_chunks/dep-4ed9eda4.js');
require('../../hooks/useLayoutEffect.js');
require('../../hooks/useAttach.js');
require('../../hooks/useDeepEffect.js');
require('../../_chunks/dep-eb6d55c1.js');
require('../../_chunks/dep-014b9b78.js');
require('../../_chunks/dep-abdd786a.js');
require('../../_chunks/dep-3d4656ee.js');
require('../../_chunks/dep-0ffc9d96.js');
require('../../_chunks/dep-efe6d243.js');
require('../../_chunks/dep-4b18243f.js');
require('../../_chunks/dep-bff2c990.js');
require('../../hooks/useSetState.js');
require('../../locale/LocalReceiver.js');
require('../../config-provider/ConfigProvider.js');
require('../../_chunks/dep-ab2f63ec.js');
require('../../_chunks/dep-a48c7e8b.js');
require('../../dialog/defaultProps.js');
require('../../dialog/DialogCard.js');
require('../../_util/parseTNode.js');
require('../../button/Button.js');
require('../../hooks/useDomRefCallback.js');
require('../../hooks/useRipple.js');
require('../../_chunks/dep-dc4ce063.js');
require('../../hooks/useAnimation.js');
require('../../loading/index.js');
require('../../loading/Loading.js');
require('../../loading/gradient.js');
require('../../_chunks/dep-002fcc1e.js');
require('../../loading/defaultProps.js');
require('../../loading/plugin.js');
require('../../common/PluginContainer.js');
require('../../button/defaultProps.js');
require('../../dialog/hooks/useDialogDrag.js');
require('../../hooks/useMouseEvent.js');
require('../../dialog/hooks/useDialogEsc.js');
require('../../dialog/hooks/useDialogPosition.js');
require('../../dialog/hooks/useLockStyle.js');
require('../../_chunks/dep-b73b8db7.js');
require('../../dialog/utils.js');
require('../../_chunks/dep-221787fe.js');
require('./useMultiHeader.js');
require('./useClassName.js');
require('../Ellipsis.js');
require('../../_util/scroll.js');
require('raf');
require('../../_util/easing.js');
require('../../tooltip/index.js');
require('../../tooltip/Tooltip.js');
require('../../popup/index.js');
require('../../popup/Popup.js');
require('../../_util/ref.js');
require('react-is');
require('../../_util/isFragment.js');
require('../../hooks/useMutationObserver.js');
require('../../hooks/useLatest.js');
require('../../_chunks/dep-a231fdc5.js');
require('../../_chunks/dep-cf14666e.js');
require('../../hooks/usePopper.js');
require('@popperjs/core');
require('react-fast-compare');
require('../../hooks/useWindowSize.js');
require('../../popup/defaultProps.js');
require('../../popup/hooks/useTrigger.js');
require('../../_util/composeRefs.js');
require('../../_util/listener.js');
require('../../popup/utils/transition.js');
require('../../popup/PopupPlugin.js');
require('../../tooltip/defaultProps.js');
require('../../tooltip/TooltipLite.js');
require('../../hooks/useSwitch.js');
require('../../hooks/usePersistFn.js');
require('../../_chunks/dep-1438af5a.js');
require('../../hooks/useDebounce.js');
require('../../_chunks/dep-0c8c9057.js');
require('../../_chunks/dep-3398c1f2.js');
require('../../_chunks/dep-297a4933.js');
require('../../_chunks/dep-40e87384.js');
require('../../_chunks/dep-fc29b8b5.js');
require('../../_chunks/dep-139db759.js');
require('../../_chunks/dep-d915c90f.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CheckboxGroup = checkbox_index.Checkbox.Group;
function getColumnKeys(columns) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;
    var col = columns[i];
    col.colKey && keys.add(col.colKey);
    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnKeys(col.children, keys);
    }
  }
  return keys;
}
function useColumnController(props, extra) {
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix,
    table = _useConfig.table;
  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
      SettingIcon: tdesignIconsReact.SettingIcon
    }),
    SettingIcon = _useGlobalIcon.SettingIcon;
  var columns = props.columns,
    columnController = props.columnController,
    _props$displayColumns = props.displayColumns,
    displayColumns = _props$displayColumns === void 0 ? [] : _props$displayColumns,
    columnControllerVisible = props.columnControllerVisible;
  var dialogInstance = React.useRef(null);
  var enabledColKeys = function () {
    var arr = ((columnController === null || columnController === void 0 ? void 0 : columnController.fields) || toConsumableArray._toConsumableArray(getColumnKeys(columns))).filter(function (v) {
      return v;
    });
    return new Set(arr);
  }();
  var keys = toConsumableArray._toConsumableArray(getColumnKeys(columns));
  var _useControlled = hooks_useControlled["default"](props, "displayColumns", props.onDisplayColumnsChange),
    _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
    tDisplayColumns = _useControlled2[0],
    setTDisplayColumns = _useControlled2[1];
  var defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;
  var columnCheckboxKeys = React.useRef(defaultColumnCheckboxKeys);
  React.useEffect(function () {
    var _dialogInstance$curre;
    columnCheckboxKeys.current = toConsumableArray._toConsumableArray(displayColumns || props.defaultDisplayColumns || keys);
    (_dialogInstance$curre = dialogInstance.current) === null || _dialogInstance$curre === void 0 || _dialogInstance$curre.update({
      body: getDialogContent()
    });
  }, [displayColumns]);
  function getCheckboxOptions(columns2) {
    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    for (var i = 0, len = columns2.length; i < len; i++) {
      var _item$children;
      var item = columns2[i];
      if (item.colKey) {
        arr.push({
          label: table_hooks_useTableHeader.renderTitle(item, i),
          value: item.colKey,
          disabled: !enabledColKeys.has(item.colKey)
        });
      }
      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      }
    }
    return arr;
  }
  var handleCheckChange = function handleCheckChange(val, ctx) {
    var _props$onColumnChange;
    columnCheckboxKeys.current = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: table_utils.getCurrentRowByKey(columns, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 || _props$onColumnChange.call(props, params);
    dialogInstance.current.update({
      body: getDialogContent()
    });
  };
  var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
    if (checked) {
      var _props$onColumnChange2;
      var checkboxOptions = getCheckboxOptions(columns);
      var newData = (checkboxOptions === null || checkboxOptions === void 0 ? void 0 : checkboxOptions.map(function (t) {
        return t.value;
      })) || [];
      columnCheckboxKeys.current = newData;
      (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 || _props$onColumnChange2.call(props, {
        type: "check",
        columns: newData,
        e: ctx.e
      });
    } else {
      var _props$onColumnChange3;
      var disabledColKeys = getCheckboxOptions(columns).filter(function (t) {
        return t.disabled;
      }).map(function (t) {
        return t.value;
      });
      columnCheckboxKeys.current = disabledColKeys;
      (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 || _props$onColumnChange3.call(props, {
        type: "uncheck",
        columns: disabledColKeys,
        e: ctx.e
      });
    }
    dialogInstance.current.update({
      body: getDialogContent()
    });
  };
  function getDialogContent() {
    var checkboxOptions = getCheckboxOptions(columns);
    var intersectionChecked = intersection.intersection(columnCheckboxKeys.current, toConsumableArray._toConsumableArray(enabledColKeys));
    var widthMode = (columnController === null || columnController === void 0 ? void 0 : columnController.displayType) === "fixed-width" ? "fixed" : "auto";
    var checkedLength = intersectionChecked.length;
    var isCheckedAll = checkedLength === enabledColKeys.size;
    var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames__default["default"](["".concat(classPrefix, "-table__column-controller"), "".concat(classPrefix, "-table__column-controller--").concat(widthMode)])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-body")
    }, /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-table__column-controller-desc")
    }, table.columnConfigDescriptionText), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React__default["default"].createElement(checkbox_index.Checkbox, {
      indeterminate: isIndeterminate,
      checked: isCheckedAll,
      onChange: handleClickAllShowColumns
    }, table.selectAllText)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React__default["default"].createElement(CheckboxGroup, _objectSpread(_objectSpread({
      options: checkboxOptions
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.checkboxProps) || {}), {}, {
      value: columnCheckboxKeys.current,
      onChange: handleCheckChange
    })))));
  }
  var handleToggleColumnController = function handleToggleColumnController() {
    dialogInstance.current = dialog_plugin.DialogPlugin.confirm(_objectSpread({
      header: table.columnConfigTitleText,
      body: getDialogContent(),
      confirmBtn: table.confirmText,
      cancelBtn: table.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        if (columnCheckboxKeys.current.length < displayColumns.length) {
          var _extra$onColumnReduce;
          var reduceKeys = xorWith.xorWith(displayColumns, columnCheckboxKeys.current);
          extra === null || extra === void 0 || (_extra$onColumnReduce = extra.onColumnReduce) === null || _extra$onColumnReduce === void 0 || _extra$onColumnReduce.call(extra, reduceKeys);
        }
        setTDisplayColumns(toConsumableArray._toConsumableArray(columnCheckboxKeys.current));
        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro;
          (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 || _props$onColumnContro.call(props, false, {
            trigger: "cancel"
          });
        }
      },
      onClose: function onClose() {
        columnCheckboxKeys.current = tDisplayColumns;
        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro2;
          (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 || _props$onColumnContro2.call(props, false, {
            trigger: "confirm"
          });
        }
      }
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.dialogProps) || {}));
  };
  React.useEffect(function () {
    if (columnControllerVisible === void 0) return;
    if (dialogInstance.current) {
      columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();
    } else {
      columnControllerVisible && handleToggleColumnController();
    }
  }, [columnControllerVisible, dialogInstance]);
  var renderColumnController = function renderColumnController() {
    var _props$columnControll;
    var isColumnController = !!(columnController && Object.keys(columnController).length);
    var placement = isColumnController ? columnController.placement || "top-right" : "";
    if (isColumnController && columnController.hideTriggerButton) return null;
    var classes = ["".concat(classPrefix, "-table__column-controller-trigger"), defineProperty._defineProperty({}, "".concat(classPrefix, "-align-").concat(placement), !!placement)];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames__default["default"](classes)
    }, /* @__PURE__ */React__default["default"].createElement(button_index.Button, _objectSpread({
      theme: "default",
      variant: "outline",
      onClick: handleToggleColumnController,
      content: table.columnConfigButtonText,
      icon: /* @__PURE__ */React__default["default"].createElement(SettingIcon, null)
    }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps)));
  };
  return {
    tDisplayColumns: tDisplayColumns,
    renderColumnController: renderColumnController
  };
}

exports["default"] = useColumnController;
exports.getColumnKeys = getColumnKeys;
//# sourceMappingURL=useColumnController.js.map
