/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-0006fcfa.js');
var slicedToArray = require('../../_chunks/dep-8e4d656d.js');
var React = require('react');
var utils = require('../../_chunks/dep-2fff991d.js');
var form_formModel = require('../../form/formModel.js');
var get = require('../../_chunks/dep-0c8c9057.js');
var isFunction = require('../../_chunks/dep-ec8d2dca.js');
require('../../_chunks/dep-667ac7af.js');
require('../../_chunks/dep-00b49251.js');
require('../../_chunks/dep-65ef8e09.js');
require('../../_chunks/dep-5b5ab11b.js');
require('../../_chunks/dep-002fcc1e.js');
require('../../_chunks/dep-e4e1901e.js');
require('../../_chunks/dep-2ffa3ff1.js');
require('../../_chunks/dep-25585736.js');
require('../../_chunks/dep-62e73936.js');
require('../../_chunks/dep-6283cbd9.js');
require('../../_chunks/dep-4b18243f.js');
require('../../_chunks/dep-71455db7.js');
require('../../_chunks/dep-9e5a468d.js');
require('../../_chunks/dep-f26edb7b.js');
require('../../_chunks/dep-25e4aa84.js');
require('../../_chunks/dep-fc596d16.js');
require('../../_chunks/dep-bff2c990.js');
require('../../_chunks/dep-eea2872a.js');
require('../../_chunks/dep-64577888.js');
require('../../_chunks/dep-3398c1f2.js');
require('../../_chunks/dep-79629634.js');
require('../../_chunks/dep-21ece627.js');
require('../../_chunks/dep-e1fbe1c3.js');
require('../../_chunks/dep-255ceed8.js');

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useEditableRow(props) {
  var cellRuleMap = React.useMemo(function () {
    return /* @__PURE__ */new Map();
  }, []);
  var editableRowKeys = props.editableRowKeys;
  var _useState = React.useState({}),
    _useState2 = slicedToArray._slicedToArray(_useState, 2),
    errorListMap = _useState2[0],
    setErrorListMap = _useState2[1];
  var editableKeysMap = React.useMemo(function () {
    return editableRowKeys && utils.getEditableKeysMap(editableRowKeys, props.data, props.rowKey || "id");
  }, [editableRowKeys, props.data, props.rowKey]);
  var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
    var errorMap = {};
    errors.forEach(function (_ref) {
      var row = _ref.row,
        col = _ref.col,
        errorList = _ref.errorList;
      var rowValue = get.get(row, props.rowKey || "id");
      var key = [rowValue, col.colKey].join("__");
      if (errorList !== null && errorList !== void 0 && errorList.length) {
        errorMap[key] = errorList;
      } else {
        delete errorMap[key];
      }
    });
    return errorMap;
  };
  var validateOneRowData = function validateOneRowData(rowValue) {
    var rowRules = cellRuleMap.get(rowValue);
    if (!rowRules) return;
    var list = rowRules.map(function (item) {
      return new Promise(function (resolve) {
        var editedRow = item.editedRow,
          col = item.col;
        var rules = isFunction.isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;
        if (!col.edit || !rules || !rules) {
          resolve(_objectSpread(_objectSpread({}, item), {}, {
            errorList: []
          }));
          return;
        }
        form_formModel.validate(get.get(editedRow, col.colKey), rules).then(function (r) {
          resolve(_objectSpread(_objectSpread({}, item), {}, {
            errorList: r.filter(function (t) {
              return !t.result;
            })
          }));
        });
      });
    });
    return new Promise(function (resolve, reject) {
      Promise.all(list).then(function (errors) {
        resolve({
          errors: errors.filter(function (t) {
            var _t$errorList;
            return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
          }),
          errorMap: getErrorListMapByErrors(errors)
        });
      }, reject);
    });
  };
  var validateRowData = function validateRowData(rowValue) {
    return new Promise(function (resolve, reject) {
      validateOneRowData(rowValue).then(function (_ref2) {
        var _props$onRowValidate;
        var errors = _ref2.errors,
          errorMap = _ref2.errorMap;
        setErrorListMap(errorMap);
        var tTrigger = "parent";
        (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 || _props$onRowValidate.call(props, {
          trigger: tTrigger,
          result: errors
        });
        resolve({
          trigger: tTrigger,
          result: errors
        });
      }, reject);
    });
  };
  var validateTableData = function validateTableData() {
    var promiseList = [];
    var data = props.data || [];
    for (var i = 0, len = data.length; i < len; i++) {
      var rowValue = get.get(data[i], props.rowKey || "id");
      promiseList.push(validateOneRowData(rowValue));
    }
    return new Promise(function (resolve, reject) {
      Promise.all(promiseList).then(function (rList) {
        var _props$onValidate;
        var allErrorListMap = {};
        rList.forEach(function () {
          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              errors: [],
              errorMap: {}
            },
            errorMap = _ref3.errorMap;
          errorMap && Object.assign(allErrorListMap, errorMap);
        });
        setErrorListMap(allErrorListMap);
        (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {
          result: allErrorListMap
        });
        resolve({
          result: allErrorListMap
        });
      }, reject);
    });
  };
  var onRuleChange = function onRuleChange(context) {
    if (props.editableRowKeys) {
      var rowValue = get.get(context.row, props.rowKey || "id");
      var rules = cellRuleMap.get(rowValue);
      if (rules) {
        var index = rules.findIndex(function (t) {
          return t.col.colKey === context.col.colKey;
        });
        if (index === -1) {
          rules.push(context);
        } else {
          rules[index] = context;
        }
        cellRuleMap.set(rowValue, rules);
      } else {
        cellRuleMap.set(rowValue, [context]);
      }
    }
  };
  var clearValidateData = function clearValidateData() {
    setErrorListMap({});
  };
  return {
    errorListMap: errorListMap,
    editableKeysMap: editableKeysMap,
    validateRowData: validateRowData,
    validateTableData: validateTableData,
    clearValidateData: clearValidateData,
    onRuleChange: onRuleChange
  };
}

exports.useEditableRow = useEditableRow;
//# sourceMappingURL=useEditableRow.js.map
