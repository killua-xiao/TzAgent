{"version":3,"file":"useTreeData.js","sources":["../../../../components/table/hooks/useTreeData.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { get } from 'lodash-es';\nimport React, { MouseEvent, useEffect, useMemo, useState } from 'react';\nimport {\n  AddRectangleIcon as TdAddRectangleIcon,\n  MinusRectangleIcon as TdMinusRectangleIcon,\n} from 'tdesign-icons-react';\nimport TableTreeStore, { SwapParams } from '@tdesign/common-js/table/tree-store';\nimport { parseContentTNode } from '../../_util/parseTNode';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\nimport { renderCell } from '../Cell';\nimport type { PrimaryTableCol, TableRowData, TableRowState, TableRowValue, TdEnhancedTableProps } from '../type';\nimport useClassName from './useClassName';\nimport useTreeDataExpand from './useTreeDataExpand';\n\nexport interface UseSwapParams<T> extends SwapParams<T> {\n  data: T[];\n}\n\nexport default function useTreeData(props: TdEnhancedTableProps) {\n  const { data, columns, tree, rowKey, treeExpandAndFoldIcon, expandedTreeNodes } = props;\n  const [store] = useState(() => new TableTreeStore() as InstanceType<typeof TableTreeStore>);\n  const [treeNodeCol, setTreeNodeCol] = useState<PrimaryTableCol>(() => getTreeNodeColumnCol());\n  const [dataSource, setDataSource] = useState<TdEnhancedTableProps['data']>(data || []);\n  const { tableTreeClasses } = useClassName();\n  const [locale, t] = useLocaleReceiver('table');\n  const { AddRectangleIcon, MinusRectangleIcon } = useGlobalIcon({\n    AddRectangleIcon: TdAddRectangleIcon,\n    MinusRectangleIcon: TdMinusRectangleIcon,\n  });\n\n  const rowDataKeys = useMemo(\n    () => ({\n      rowKey: rowKey || 'id',\n      childrenKey: tree?.childrenKey || 'children',\n    }),\n    [rowKey, tree?.childrenKey],\n  );\n\n  const { expandAll, foldAll, updateExpandOnDataChange, onExpandFoldIconClick } = useTreeDataExpand(props, {\n    store,\n    dataSource,\n    rowDataKeys,\n    setDataSource,\n  });\n\n  const checkedColumn = useMemo(() => columns.find((col) => col.colKey === 'row-select'), [columns]);\n\n  useEffect(() => {\n    if (!store || !checkedColumn) return;\n    // 第一次，不需要执行 updateDisabledState\n    const rowValue = get(dataSource[0], rowDataKeys.rowKey);\n    if (!store.treeDataMap.get(rowValue)) return;\n    store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedColumn]);\n\n  useEffect(\n    () => {\n      if (!data || !store) return;\n      // 如果没有树形解构，则不需要相关逻辑\n      if (tree) {\n        resetData(data);\n      } else {\n        setDataSource(data);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, expandedTreeNodes],\n  );\n\n  useEffect(\n    () => {\n      const treeNodeColTmp = getTreeNodeColumnCol();\n      setTreeNodeCol(treeNodeColTmp);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [columns, props.tree?.treeNodeColumnIndex],\n  );\n\n  function resetData(data: TableRowData[]) {\n    const { columns } = props;\n    store.initialTreeStore(data, columns, rowDataKeys);\n    updateExpandOnDataChange([...data]);\n  }\n\n  function getTreeNodeStyle(level: number) {\n    if (level === undefined) return;\n    const indent = props.tree?.indent === undefined ? 24 : props.tree?.indent;\n    // 默认 1px 是为了临界省略\n    return indent ? { paddingLeft: `${level * indent || 1}px` } : {};\n  }\n\n  /**\n   * 对外暴露的组件实例方法，展开或收起某一行\n   * @param p 行数据\n   */\n  function toggleExpandData(p: { row: TableRowData; rowIndex: number }, trigger?: 'expand-fold-icon' | 'row-click') {\n    const currentData = { ...p };\n    // eslint-disable-next-line\n    if (p.row.__VIRTUAL_SCROLL_INDEX !== undefined) {\n      // eslint-disable-next-line\n      currentData.rowIndex = p.row.__VIRTUAL_SCROLL_INDEX;\n    }\n    const newData = store.toggleExpandData(currentData, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n    const rowValue = get(p.row, rowDataKeys.rowKey);\n    props.onTreeExpandChange?.({\n      row: p.row,\n      rowIndex: p.rowIndex,\n      rowState: store?.treeDataMap?.get(rowValue),\n      trigger,\n    });\n  }\n\n  function getTreeNodeColumnCol() {\n    const { columns } = props;\n    let treeNodeColumnIndex = props.tree?.treeNodeColumnIndex || 0;\n    // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移\n    while (\n      columns[treeNodeColumnIndex]?.type ||\n      columns[treeNodeColumnIndex]?.colKey === '__EXPAND_ROW_ICON_COLUMN__'\n    ) {\n      treeNodeColumnIndex += 1;\n    }\n    return columns[treeNodeColumnIndex];\n  }\n\n  function formatTreeColumn(col: PrimaryTableCol): PrimaryTableCol {\n    if (!col || !treeNodeCol || !store) return {};\n    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;\n    const newCol = { ...treeNodeCol };\n    newCol.cell = (p) => {\n      const cellInfo = renderCell(\n        { ...p, col: { ...treeNodeCol } },\n        {\n          cellEmptyContent: props.cellEmptyContent,\n        },\n      );\n      const currentState = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey));\n      const colStyle = getTreeNodeStyle(currentState?.level);\n      const classes = { [tableTreeClasses.inlineCol]: !!col.ellipsis };\n      const childrenNodes = get(p.row, rowDataKeys.childrenKey);\n      if ((Array.isArray(childrenNodes) && childrenNodes.length > 0) || childrenNodes === true) {\n        const expanded = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey))?.expanded;\n        const type = expanded ? 'fold' : 'expand';\n        const defaultIconNode =\n          t(locale.treeExpandAndFoldIcon, { type }) || (expanded ? <MinusRectangleIcon /> : <AddRectangleIcon />);\n        const iconNode = treeExpandAndFoldIcon\n          ? parseContentTNode(treeExpandAndFoldIcon, { type, ...p })\n          : defaultIconNode;\n        return (\n          <div className={classNames([tableTreeClasses.col, classes])} style={colStyle}>\n            {!!(childrenNodes.length || childrenNodes === true) && (\n              <span\n                className={tableTreeClasses.icon}\n                onClick={(e: MouseEvent<HTMLSpanElement>) => {\n                  onExpandFoldIconClick(p, 'expand-fold-icon');\n                  e.stopPropagation();\n                }}\n              >\n                {iconNode}\n              </span>\n            )}\n            {cellInfo}\n          </div>\n        );\n      }\n      return (\n        <div style={colStyle} className={classNames([classes, tableTreeClasses.leafNode])}>\n          <span className={tableTreeClasses.icon}></span>\n          {cellInfo}\n        </div>\n      );\n    };\n    // 树形节点会显示操作符号 [+] 和 [-]，但省略显示的浮层中不需要操作符\n    if (newCol.ellipsis === true) {\n      newCol.ellipsis = (p) => renderCell({ ...p, col: { ...treeNodeCol } });\n    }\n    return newCol;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，设置行数据，自动刷新界面\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   */\n  function setData<T>(key: TableRowValue, newRowData: T) {\n    const rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);\n    const newData = [...dataSource];\n    newData[rowIndex] = newRowData;\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  function getData(key: TableRowValue): TableRowState {\n    return store.getData(key);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，对外暴露的组件实例方法，移除指定节点\n   * @param key 行唯一标识\n   */\n  function remove(key: TableRowValue) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    const newData = store.remove(key, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 移除子节点\n   * @param key 行唯一标识\n   */\n  function removeChildren(key: TableRowValue) {\n    const newData = store.removeChildren(key, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  function appendTo<T>(key: TableRowValue, newData: T | T[]) {\n    if (!key) {\n      setDataSource([...store.appendToRoot(newData, dataSource, rowDataKeys)]);\n      return;\n    }\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    setDataSource([...store.appendTo(key, newData, dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertAfter<T>(rowValue: TableRowValue, newData: T) {\n    setDataSource([...store.insertAfter(rowValue, newData, dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertBefore<T>(rowValue: TableRowValue, newData: T) {\n    setDataSource([...store.insertBefore(rowValue, newData, dataSource, rowDataKeys)]);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，交换行数据，React 在回掉函数函数中无法获取最新的 state 信息，因此需要参数 params.data\n   */\n  function swapData(params: UseSwapParams<TableRowData>) {\n    const r = store.swapData(params.data, params, rowDataKeys);\n    if (r.result) {\n      setDataSource([...r.dataSource]);\n    } else {\n      const params = {\n        code: r.code,\n        reason: r.reason,\n      };\n      props.onAbnormalDragSort?.(params);\n    }\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取全部数据的树形结构\n   * @param key 节点唯一标识\n   */\n  function getTreeNode() {\n    return store.getTreeNode(dataSource, rowDataKeys);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取树形结构展开的节点\n   */\n  function getTreeExpandedRow(type: 'unique' | 'data' | 'all' = 'data') {\n    return store.getTreeExpandedRow(dataSource, rowDataKeys, type);\n  }\n\n  return {\n    store,\n    rowDataKeys,\n    dataSource,\n    swapData,\n    setData,\n    getData,\n    remove,\n    removeChildren,\n    appendTo,\n    insertAfter,\n    insertBefore,\n    formatTreeColumn,\n    toggleExpandData,\n    expandAll,\n    foldAll,\n    getTreeNode,\n    resetData,\n    getTreeExpandedRow,\n    onExpandFoldIconClick,\n  };\n}\n\nexport type UseTreeDataReturnType = ReturnType<typeof useTreeData>;\n"],"names":["useTreeData","props","_props$tree","data","columns","tree","rowKey","treeExpandAndFoldIcon","expandedTreeNodes","_useState","useState","TableTreeStore","_useState2","_slicedToArray","store","_useState3","getTreeNodeColumnCol","_useState4","treeNodeCol","setTreeNodeCol","_useState5","_useState6","dataSource","setDataSource","_useClassName","useClassName","tableTreeClasses","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","locale","t","_useGlobalIcon","useGlobalIcon","AddRectangleIcon","TdAddRectangleIcon","MinusRectangleIcon","TdMinusRectangleIcon","rowDataKeys","useMemo","childrenKey","_useTreeDataExpand","useTreeDataExpand","expandAll","foldAll","updateExpandOnDataChange","onExpandFoldIconClick","checkedColumn","find","col","colKey","useEffect","rowValue","get","treeDataMap","updateDisabledState","resetData","treeNodeColTmp","treeNodeColumnIndex","initialTreeStore","_toConsumableArray","getTreeNodeStyle","level","_props$tree2","_props$tree3","indent","paddingLeft","concat","toggleExpandData","p","trigger","_props$onTreeExpandCh","_store$treeDataMap","currentData","_objectSpread","row","__VIRTUAL_SCROLL_INDEX","rowIndex","newData","onTreeExpandChange","call","rowState","_props$tree4","_columns2$treeNodeCol","type","_columns2$treeNodeCol2","formatTreeColumn","Object","keys","length","newCol","cell","cellInfo","renderCell","cellEmptyContent","currentState","colStyle","classes","_defineProperty","inlineCol","ellipsis","childrenNodes","Array","isArray","_store$treeDataMap$ge","expanded","defaultIconNode","React","createElement","iconNode","parseContentTNode","className","classNames","style","icon","onClick","e","stopPropagation","leafNode","setData","key","newRowData","updateData","getData","remove","removeChildren","appendTo","appendToRoot","insertAfter","insertBefore","swapData","params","r","result","_props$onAbnormalDrag","code","reason","onAbnormalDragSort","getTreeNode","getTreeExpandedRow"],"mappings":"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"}