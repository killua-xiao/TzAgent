/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('../_chunks/dep-667ac7af.js');
var defineProperty = require('../_chunks/dep-0006fcfa.js');
var toArray = require('../_chunks/dep-5eba010c.js');
var slicedToArray = require('../_chunks/dep-8e4d656d.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var classNames = require('classnames');
var log = require('../_chunks/dep-59671c87.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var table_Cell = require('./Cell.js');
var form_formModel = require('../form/formModel.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var get = require('../_chunks/dep-0c8c9057.js');
var isFunction = require('../_chunks/dep-ec8d2dca.js');
var cloneDeep = require('../_chunks/dep-ab2f63ec.js');
var set = require('../_chunks/dep-79a54369.js');
require('../_chunks/dep-e4e1901e.js');
require('../_chunks/dep-00b49251.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('./Ellipsis.js');
require('../_util/scroll.js');
require('raf');
require('../_chunks/dep-381fa848.js');
require('../_chunks/dep-4ed9eda4.js');
require('../_util/easing.js');
require('../tooltip/index.js');
require('../tooltip/Tooltip.js');
require('../_chunks/dep-8fa3a4c2.js');
require('../popup/index.js');
require('../popup/Popup.js');
require('react-transition-group');
require('../_util/ref.js');
require('react-is');
require('../_util/isFragment.js');
require('../common/Portal.js');
require('react-dom');
require('../hooks/useLayoutEffect.js');
require('../hooks/useAnimation.js');
require('../hooks/useAttach.js');
require('../hooks/useControlled.js');
require('../_util/noop.js');
require('../_chunks/dep-66114ce9.js');
require('../_chunks/dep-62d1dd66.js');
require('../_chunks/dep-7a148045.js');
require('../_chunks/dep-255ceed8.js');
require('../_chunks/dep-79629634.js');
require('../hooks/useDefaultProps.js');
require('../hooks/useMutationObserver.js');
require('../hooks/useLatest.js');
require('../_chunks/dep-eb6d55c1.js');
require('../_chunks/dep-014b9b78.js');
require('../_chunks/dep-abdd786a.js');
require('../_chunks/dep-3d4656ee.js');
require('../_chunks/dep-0ffc9d96.js');
require('../_chunks/dep-efe6d243.js');
require('../_chunks/dep-4b18243f.js');
require('../_chunks/dep-bff2c990.js');
require('../_chunks/dep-a231fdc5.js');
require('../_chunks/dep-cf14666e.js');
require('../hooks/usePopper.js');
require('@popperjs/core');
require('react-fast-compare');
require('../hooks/useWindowSize.js');
require('../popup/defaultProps.js');
require('../popup/hooks/useTrigger.js');
require('../_util/composeRefs.js');
require('../_util/listener.js');
require('../popup/utils/transition.js');
require('../popup/PopupPlugin.js');
require('../_chunks/dep-65ef8e09.js');
require('../_util/react-render.js');
require('../common/PluginContainer.js');
require('../config-provider/ConfigProvider.js');
require('../_chunks/dep-a48c7e8b.js');
require('../tooltip/defaultProps.js');
require('../tooltip/TooltipLite.js');
require('../hooks/useSwitch.js');
require('../hooks/usePersistFn.js');
require('../_chunks/dep-1438af5a.js');
require('../hooks/useDebounce.js');
require('./hooks/useFixed.js');
require('../_chunks/dep-002fcc1e.js');
require('../_chunks/dep-2ffa3ff1.js');
require('../_chunks/dep-b73b8db7.js');
require('../hooks/usePrevious.js');
require('./utils.js');
require('../_chunks/dep-3398c1f2.js');
require('../_chunks/dep-62f5b69f.js');
require('../_chunks/dep-40e87384.js');
require('../_chunks/dep-297a4933.js');
require('../_chunks/dep-fc29b8b5.js');
require('../_chunks/dep-139db759.js');
require('../_chunks/dep-d915c90f.js');
require('../_chunks/dep-1e4197a4.js');
require('../_chunks/dep-e57bdc8f.js');
require('../_chunks/dep-22b1740a.js');
require('../_chunks/dep-373af7a2.js');
require('../_chunks/dep-6283cbd9.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var EditableCell = function EditableCell(props) {
  var _col$edit, _col$edit6, _errorList$, _col$edit7, _errorList$2;
  var row = props.row,
    col = props.col,
    colIndex = props.colIndex,
    rowIndex = props.rowIndex,
    errors = props.errors,
    editable = props.editable,
    tableBaseClass = props.tableBaseClass;
  var _useGlobalIcon = hooks_useGlobalIcon["default"]({
      Edit1Icon: tdesignIconsReact.Edit1Icon
    }),
    Edit1Icon = _useGlobalIcon.Edit1Icon;
  var tableEditableCellRef = React.useRef(null);
  var isKeepEditMode = Boolean((_col$edit = col.edit) === null || _col$edit === void 0 ? void 0 : _col$edit.keepEditMode);
  var _useState = React.useState(function () {
      var _props$col$edit;
      return isKeepEditMode || ((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false;
    }),
    _useState2 = slicedToArray._slicedToArray(_useState, 2),
    isEdit = _useState2[0],
    setIsEdit = _useState2[1];
  var _useState3 = React.useState(),
    _useState4 = slicedToArray._slicedToArray(_useState3, 2),
    editValue = _useState4[0],
    setEditValue = _useState4[1];
  var _useState5 = React.useState([]),
    _useState6 = slicedToArray._slicedToArray(_useState5, 2),
    errorList = _useState6[0],
    setErrorList = _useState6[1];
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  React.useEffect(function () {
    if (isKeepEditMode) {
      setIsEdit(true);
    }
  }, [isKeepEditMode]);
  var getCurrentRow = function getCurrentRow(row2, colKey, value) {
    if (!colKey) return row2;
    var _ref = colKey.split(".") || [],
      _ref2 = toArray._toArray(_ref),
      firstKey = _ref2[0],
      restKeys = _ref2.slice(1);
    var newRow = _objectSpread({}, row2);
    if (restKeys.length) {
      newRow[firstKey] = cloneDeep.cloneDeep(row2[firstKey]);
      set.set(newRow[firstKey], restKeys.join("."), value);
    } else {
      set.set(newRow, colKey, value);
    }
    return newRow;
  };
  var cellParams = React.useMemo(function () {
    return {
      col: col,
      row: row,
      colIndex: colIndex,
      rowIndex: rowIndex
    };
  }, [col, row, colIndex, rowIndex]);
  var cellValue = React.useMemo(function () {
    return get.get(row, col.colKey);
  }, [row, col.colKey]);
  var currentRow = React.useMemo(function () {
    return getCurrentRow(row, col.colKey, editValue);
  }, [col.colKey, editValue, row]);
  var updateEditedCellValue = function updateEditedCellValue(val) {
    setEditValue(val);
  };
  var editOnListeners = React.useMemo(function () {
    var _col$edit2, _col$edit2$on;
    return ((_col$edit2 = col.edit) === null || _col$edit2 === void 0 || (_col$edit2$on = _col$edit2.on) === null || _col$edit2$on === void 0 ? void 0 : _col$edit2$on.call(_col$edit2, _objectSpread(_objectSpread({}, cellParams), {}, {
      editedRow: currentRow,
      updateEditedCellValue: updateEditedCellValue
    }))) || {};
  }, [cellParams, currentRow]);
  var cellNode = React.useMemo(function () {
    var node = table_Cell.renderCell({
      row: currentRow,
      col: _objectSpread(_objectSpread({}, col), {}, {
        cell: props.oldCell
      }),
      rowIndex: props.rowIndex,
      colIndex: props.colIndex
    }, {
      cellEmptyContent: props.cellEmptyContent
    });
    return node;
  }, [col, currentRow, props.cellEmptyContent, props.colIndex, props.oldCell, props.rowIndex]);
  var componentProps = React.useMemo(function () {
    var _edit$abortEditOnEven;
    var edit = col.edit;
    if (!edit) return {};
    var editProps = isFunction.isFunction(edit.props) ? edit.props(_objectSpread(_objectSpread({}, cellParams), {}, {
      editedRow: currentRow,
      updateEditedCellValue: updateEditedCellValue
    })) : _objectSpread({}, edit.props);
    delete editProps.onChange;
    delete editProps.value;
    (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 || _edit$abortEditOnEven.forEach(function (item) {
      delete editProps[item];
    });
    return editProps;
  }, [currentRow, cellParams, col]);
  var isAbortEditOnChange = React.useMemo(function () {
    var _edit$abortEditOnEven2;
    var edit = col.edit;
    if (!edit) return false;
    return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
  }, [col]);
  var validateEdit = function validateEdit(trigger, newVal) {
    return new Promise(function (resolve) {
      var params = {
        result: [_objectSpread(_objectSpread({}, cellParams), {}, {
          errorList: [],
          value: newVal
        })],
        trigger: trigger
      };
      var rules = isFunction.isFunction(col.edit.rules) ? col.edit.rules(cellParams) : col.edit.rules;
      if (!col.edit || !rules || !rules.length) {
        var _props$onValidate;
        (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, params);
        resolve(true);
        return;
      }
      form_formModel.validate(newVal, rules).then(function (result) {
        var _props$onValidate2;
        var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
          return !t.result;
        });
        params.result[0].errorList = list;
        (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, params);
        if (!list || !list.length) {
          setErrorList([]);
          resolve(true);
        } else {
          setErrorList(list);
          resolve(list);
        }
      });
    });
  };
  var isSame = function isSame(a, b) {
    if (_typeof._typeof(a) === "object" && _typeof._typeof(b) === "object") {
      return JSON.stringify(a) === JSON.stringify(b);
    }
    return a === b;
  };
  var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent, eventName) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    validateEdit("self", args[0].value).then(function (result) {
      var _editOnListeners$even;
      if (result !== true) return;
      var oldValue = get.get(row, col.colKey);
      if (!isSame(args[0].value, oldValue)) {
        setEditValue(oldValue);
        outsideAbortEvent === null || outsideAbortEvent === void 0 || outsideAbortEvent.apply(void 0, args);
      }
      (_editOnListeners$even = editOnListeners[eventName]) === null || _editOnListeners$even === void 0 || _editOnListeners$even.call(editOnListeners, args[2]);
      var timer = setTimeout(function () {
        if (!isKeepEditMode) {
          setIsEdit(false);
        }
        setErrorList([]);
        clearTimeout(timer);
      }, 0);
    });
  };
  var listeners = React.useMemo(function () {
    var _edit$abortEditOnEven3;
    var edit = col.edit;
    var isCellEditable = props.editable === void 0;
    if (!isEdit || !isCellEditable) return;
    if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
    var tListeners = {};
    var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
    edit.abortEditOnEvent.forEach(function (itemEvent) {
      if (itemEvent === "onChange") return;
      tListeners[itemEvent] = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        updateAndSaveAbort.apply(void 0, [outsideAbortEvent, itemEvent, _objectSpread(_objectSpread({}, cellParams), {}, {
          value: editValue,
          trigger: itemEvent,
          newRowData: currentRow
        })].concat(args));
      };
    });
    return tListeners;
  }, [col, currentRow, isEdit, props.rowIndex]);
  var onEditChange = function onEditChange(val) {
    var _props$onChange, _props$onRuleChange, _editOnListeners$onCh, _col$edit4;
    setEditValue(val);
    var params = _objectSpread(_objectSpread({}, cellParams), {}, {
      value: val,
      editedRow: set.set(_objectSpread({}, props.row), props.col.colKey, val)
    });
    (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, params);
    (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 || _props$onRuleChange.call(props, params);
    (_editOnListeners$onCh = editOnListeners.onChange) === null || _editOnListeners$onCh === void 0 || _editOnListeners$onCh.call(editOnListeners, params);
    var isCellEditable = props.editable === void 0;
    if (isCellEditable && isAbortEditOnChange) {
      var _col$edit3;
      var outsideAbortEvent = (_col$edit3 = col.edit) === null || _col$edit3 === void 0 ? void 0 : _col$edit3.onEdited;
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      updateAndSaveAbort.apply(void 0, [outsideAbortEvent, "change", {
        value: val,
        trigger: "onChange",
        newRowData: getCurrentRow(currentRow, col.colKey, val),
        rowIndex: props.rowIndex
      }].concat(args));
    }
    if (((_col$edit4 = col.edit) === null || _col$edit4 === void 0 ? void 0 : _col$edit4.validateTrigger) === "change") {
      validateEdit("self", val);
    }
  };
  var documentClickHandler = function documentClickHandler(e) {
    var _e$composedPath;
    if (!col.edit || !col.edit.component) return;
    if (!isEdit) return;
    var path = ((_e$composedPath = e.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e)) || e.path || [];
    var node = path.find(function (node2) {
      var _node2$classList;
      return (_node2$classList = node2.classList) === null || _node2$classList === void 0 ? void 0 : _node2$classList.contains("".concat(classPrefix, "-popup__content"));
    });
    if (node) return;
    var outsideAbortEvent = col.edit.onEdited;
    updateAndSaveAbort(outsideAbortEvent, "", {
      value: editValue,
      trigger: "document",
      newRowData: currentRow,
      rowIndex: props.rowIndex
    });
  };
  React.useEffect(function () {
    setEditValue(cellValue);
  }, [cellValue]);
  React.useEffect(function () {
    if (typeof document === "undefined") return;
    var isCellEditable = props.editable === void 0;
    if (!col.edit || !col.edit.component || !isCellEditable) return;
    if (isEdit) {
      document.addEventListener("click", documentClickHandler);
    } else {
      document.removeEventListener("click", documentClickHandler);
    }
    return function () {
      document.removeEventListener("click", documentClickHandler);
    };
  }, [col.edit, isEdit, editValue]);
  React.useEffect(function () {
    if (props.editable === false) {
      setEditValue(cellValue);
    }
  }, [cellValue, editable]);
  React.useEffect(function () {
    if (props.editable === true) {
      var _props$onRuleChange2;
      (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 || _props$onRuleChange2.call(props, _objectSpread(_objectSpread({}, cellParams), {}, {
        value: cellValue,
        editedRow: currentRow || row
      }));
    }
  }, [props.editable, cellValue, row, col, cellParams, currentRow]);
  React.useEffect(function () {
    setErrorList(errors);
  }, [errors]);
  if (props.readonly) {
    return cellNode || null;
  }
  if (props.editable === void 0 && !isEdit || editable === false) {
    var _col$edit5;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames__default["default"](tableBaseClass.cellEditable),
      onClick: function onClick(e) {
        setIsEdit(true);
        e.stopPropagation();
        e.nativeEvent.stopImmediatePropagation();
      }
    }, cellNode, ((_col$edit5 = col.edit) === null || _col$edit5 === void 0 ? void 0 : _col$edit5.showEditIcon) !== false && /* @__PURE__ */React__default["default"].createElement(Edit1Icon, null));
  }
  var Component = (_col$edit6 = col.edit) === null || _col$edit6 === void 0 ? void 0 : _col$edit6.component;
  if (!Component) {
    log.log.error("Table", "edit.component is required.");
    return null;
  }
  var errorMessage = errorList === null || errorList === void 0 || (_errorList$ = errorList[0]) === null || _errorList$ === void 0 ? void 0 : _errorList$.message;
  var tmpEditOnListeners = _objectSpread({}, editOnListeners);
  delete tmpEditOnListeners.onChange;
  if ((_col$edit7 = col.edit) !== null && _col$edit7 !== void 0 && (_col$edit7 = _col$edit7.abortEditOnEvent) !== null && _col$edit7 !== void 0 && _col$edit7.length) {
    col.edit.abortEditOnEvent.forEach(function (onEventName) {
      if (tmpEditOnListeners[onEventName]) {
        delete tmpEditOnListeners[onEventName];
      }
    });
  }
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: tableBaseClass.cellEditWrap,
    onClick: function onClick(e) {
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
    }
  }, /* @__PURE__ */React__default["default"].createElement(Component, _objectSpread(_objectSpread(_objectSpread(_objectSpread({
    ref: tableEditableCellRef,
    status: errorMessage ? (errorList === null || errorList === void 0 || (_errorList$2 = errorList[0]) === null || _errorList$2 === void 0 ? void 0 : _errorList$2.type) || "error" : void 0,
    tips: errorMessage
  }, componentProps), listeners), tmpEditOnListeners), {}, {
    value: editValue,
    onChange: onEditChange
  })));
};
EditableCell.displayName = "EditableCell";

exports["default"] = EditableCell;
//# sourceMappingURL=EditableCell.js.map
