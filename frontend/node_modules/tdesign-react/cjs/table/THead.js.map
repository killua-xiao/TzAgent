{"version":3,"file":"THead.js","sources":["../../../components/table/THead.tsx"],"sourcesContent":["import React, { useRef, MutableRefObject, CSSProperties, useMemo } from 'react';\nimport { isFunction } from 'lodash-es';\nimport classNames from 'classnames';\nimport { getColumnFixedStyles } from './hooks/useFixed';\nimport { RowAndColFixedPosition } from './interface';\nimport { TableColumns, ThRowspanAndColspan } from './hooks/useMultiHeader';\nimport useClassName from './hooks/useClassName';\nimport { BaseTableCol, TableRowData, TdBaseTableProps } from './type';\nimport { renderTitle } from './hooks/useTableHeader';\nimport TEllipsis from './Ellipsis';\nimport { formatClassNames } from './utils';\nimport { AttachNode } from '../common';\n\nexport interface TheadProps {\n  classPrefix: string;\n  ellipsisOverlayClassName: string;\n  // 是否固定表头\n  isFixedHeader: boolean;\n  maxHeight?: TdBaseTableProps['maxHeight'];\n  height?: TdBaseTableProps['height'];\n  // 固定列 left/right 具体值\n  rowAndColFixedPosition: RowAndColFixedPosition;\n  // 虚拟滚动单独渲染表头；表头吸顶单独渲染表头\n  thWidthList?: { [colKey: string]: number };\n  bordered: boolean;\n  isMultipleHeader: boolean;\n  thDraggable: boolean;\n  spansAndLeafNodes: {\n    rowspanAndColspanMap: ThRowspanAndColspan;\n    leafColumns: BaseTableCol<TableRowData>[];\n  };\n  thList: BaseTableCol<TableRowData>[][];\n  resizable?: boolean;\n  attach?: AttachNode;\n  showColumnShadow?: { left: boolean; right: boolean };\n  columnResizeParams?: {\n    resizeLineRef: MutableRefObject<HTMLDivElement>;\n    resizeLineStyle: CSSProperties;\n    onColumnMouseover: (\n      e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>,\n      col: BaseTableCol<TableRowData>,\n    ) => void;\n    onColumnMousedown: (\n      e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>,\n      col: BaseTableCol<TableRowData>,\n      index: number,\n    ) => void;\n  };\n}\n\nexport default function THead(props: TheadProps) {\n  const { columnResizeParams, classPrefix, showColumnShadow } = props;\n  const theadRef = useRef<HTMLTableSectionElement>(null);\n  const classnames = useClassName();\n  const { tableHeaderClasses, tableBaseClass } = classnames;\n  const theadClasses = [\n    tableHeaderClasses.header,\n    {\n      [tableHeaderClasses.fixed]: Boolean(props.maxHeight || props.height),\n      [tableBaseClass.bordered]: props.bordered && props.isMultipleHeader,\n      [tableHeaderClasses.multipleHeader]: props.isMultipleHeader,\n    },\n  ];\n\n  // 单行表格合并\n  const colspanSkipMap = useMemo(() => {\n    const map: { [key: string]: boolean } = {};\n    const list = props.thList[0];\n    for (let i = 0, len = list.length; i < len; i++) {\n      const item = list[i];\n      if (item.colspan > 1) {\n        for (let j = i + 1; j < i + item.colspan; j++) {\n          if (list[j]) {\n            map[list[j].colKey] = true;\n          }\n        }\n      }\n    }\n    return map;\n  }, [props.thList]);\n\n  const getTableNode = (thead: HTMLTableSectionElement) => {\n    let parent: HTMLElement = thead;\n    while (parent) {\n      parent = parent.parentNode as HTMLElement;\n      if (parent?.classList?.contains(`${props.classPrefix}-table`)) {\n        break;\n      }\n    }\n    return parent;\n  };\n\n  const renderThNodeList = (rowAndColFixedPosition: RowAndColFixedPosition, thWidthList: TheadProps['thWidthList']) => {\n    // thBorderMap: rowspan 会影响 tr > th 是否为第一列表头，从而影响边框\n    const thBorderMap = new Map<BaseTableCol<TableRowData>, boolean>();\n    const thRowspanAndColspan = props.spansAndLeafNodes.rowspanAndColspanMap;\n    return props.thList.map((row, rowIndex) => {\n      const thRow = row.map((col: TableColumns[0], index: number) => {\n        // 因合并单行表头，跳过\n        if (colspanSkipMap[col.colKey]) return null;\n        const rowspanAndColspan = thRowspanAndColspan.get(col);\n        if (index === 0 && rowspanAndColspan.rowspan > 1) {\n          for (let j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {\n            thBorderMap.set(props.thList[j][0], true);\n          }\n        }\n        const thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, classnames.tableColFixedClasses);\n        const colParams = {\n          col,\n          colIndex: index,\n          row: {},\n          rowIndex: -1,\n        };\n        const isLeftFixedActive = showColumnShadow.left && col.fixed === 'left';\n        const isRightFixedActive = showColumnShadow.right && col.fixed === 'right';\n        const canDragSort = props.thDraggable && !(isLeftFixedActive || isRightFixedActive);\n        const customClasses = formatClassNames(col.className, { ...colParams, type: 'th' });\n        const thCustomClasses = formatClassNames(col.thClassName, colParams);\n        const thClasses = [\n          thStyles.classes,\n          customClasses,\n          thCustomClasses,\n          {\n            // 受 rowspan 影响，部分 tr > th:first-child 需要补足左边框\n            [tableHeaderClasses.thBordered]: thBorderMap.get(col),\n            [`${classPrefix}-table__th-${col.colKey}`]: col.colKey,\n            [classnames.tdAlignClasses[col.align]]: col.align && col.align !== 'left',\n            // 允许拖拽的列类名\n            [classnames.tableDraggableClasses.dragSortTh]: canDragSort,\n          },\n        ];\n        const withoutChildren = !col.children?.length;\n        const width = withoutChildren && thWidthList?.[col.colKey] ? `${thWidthList?.[col.colKey]}px` : undefined;\n        const styles = { ...(thStyles.style || {}), width };\n        const innerTh = renderTitle(col, index);\n        if (!col.colKey) return null;\n        const resizeColumnListener =\n          props.resizable || !canDragSort\n            ? {\n                onMouseDown: (e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => {\n                  if (props.resizable) {\n                    columnResizeParams?.onColumnMousedown?.(e, col, index);\n                  }\n                  if (!canDragSort) {\n                    const timer = setTimeout(() => {\n                      const thList = theadRef.current.querySelectorAll<HTMLTableCellElement>('th');\n                      thList[index]?.removeAttribute('draggable');\n                      clearTimeout(timer);\n                    }, 10);\n                  }\n                },\n                onMouseMove: (e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => {\n                  props.resizable && columnResizeParams?.onColumnMouseover?.(e, col);\n                },\n              }\n            : {};\n        const content = isFunction(col.ellipsisTitle) ? col.ellipsisTitle({ col, colIndex: index }) : undefined;\n        const isEllipsis = col.ellipsisTitle !== undefined ? Boolean(col.ellipsisTitle) : Boolean(col.ellipsis);\n        const attrs = (isFunction(col.attrs) ? col.attrs({ ...colParams, type: 'th' }) : col.attrs) || {};\n        if (col.colspan > 1) {\n          attrs.colSpan = col.colspan;\n        }\n        return (\n          <th\n            key={col.colKey}\n            data-colkey={col.colKey}\n            className={classNames(thClasses)}\n            style={styles}\n            {...{ rowSpan: rowspanAndColspan.rowspan, colSpan: rowspanAndColspan.colspan }}\n            {...attrs}\n            {...resizeColumnListener}\n          >\n            <div className={tableBaseClass.thCellInner}>\n              {isEllipsis ? (\n                <TEllipsis\n                  placement=\"bottom\"\n                  attach={theadRef.current ? () => getTableNode(theadRef.current) : undefined}\n                  popupContent={content}\n                  // @ts-ignore TODO 待类型完善后移除\n                  tooltipProps={typeof col.ellipsisTitle === 'object' ? col.ellipsisTitle : undefined}\n                  overlayClassName={props.ellipsisOverlayClassName}\n                  classPrefix={props.classPrefix}\n                >\n                  {innerTh}\n                </TEllipsis>\n              ) : (\n                innerTh\n              )}\n            </div>\n          </th>\n        );\n      });\n      return <tr key={rowIndex}>{thRow}</tr>;\n    });\n  };\n\n  return (\n    <thead ref={theadRef} className={classNames(theadClasses)}>\n      {renderThNodeList(props.rowAndColFixedPosition, props.thWidthList)}\n    </thead>\n  );\n}\n"],"names":["THead","props","columnResizeParams","classPrefix","showColumnShadow","theadRef","useRef","classnames","useClassName","tableHeaderClasses","tableBaseClass","theadClasses","header","_defineProperty","fixed","Boolean","maxHeight","height","bordered","isMultipleHeader","multipleHeader","colspanSkipMap","useMemo","map","list","thList","i","len","length","item","colspan","j","colKey","getTableNode","thead","parent","_parent","parentNode","classList","contains","concat","renderThNodeList","rowAndColFixedPosition","thWidthList","thBorderMap","Map","thRowspanAndColspan","spansAndLeafNodes","rowspanAndColspanMap","row","rowIndex","thRow","col","index","_col$children","rowspanAndColspan","get","rowspan","set","thStyles","getColumnFixedStyles","tableColFixedClasses","colParams","colIndex","isLeftFixedActive","left","isRightFixedActive","right","canDragSort","thDraggable","customClasses","formatClassNames","className","_objectSpread","type","thCustomClasses","thClassName","thClasses","classes","thBordered","tdAlignClasses","align","tableDraggableClasses","dragSortTh","withoutChildren","children","width","styles","style","innerTh","renderTitle","resizeColumnListener","resizable","onMouseDown","e","_columnResizeParams$o","onColumnMousedown","call","timer","setTimeout","_thList$index","current","querySelectorAll","removeAttribute","clearTimeout","onMouseMove","_columnResizeParams$o2","onColumnMouseover","content","isFunction","ellipsisTitle","isEllipsis","ellipsis","attrs","colSpan","React","createElement","key","classNames","rowSpan","thCellInner","TEllipsis","placement","attach","popupContent","tooltipProps","_typeof","overlayClassName","ellipsisOverlayClassName","ref"],"mappings":"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"}