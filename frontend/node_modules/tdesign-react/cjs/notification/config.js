/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-0006fcfa.js');
var notification_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-667ac7af.js');

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var pluginDefaultConfig = _objectSpread(_objectSpread({}, notification_defaultProps.notificationDefaultProps), {}, {
  zIndex: 6e3,
  placement: "top-right",
  offset: ["-16px", "16px"]
});
var getConfig = function getConfig(options) {
  var currentOptions = _objectSpread({}, options);
  for (var i in currentOptions) {
    if (typeof currentOptions[i] === "undefined") {
      delete currentOptions[i];
    }
  }
  if (typeof currentOptions.duration !== "number" || currentOptions.duration < 0) {
    delete currentOptions.duration;
  }
  if (["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(currentOptions.placement) < 0) {
    delete currentOptions.placement;
  }
  if (["info", "success", "warning", "error"].indexOf(currentOptions.theme) < 0) {
    delete currentOptions.theme;
  }
  if (!Array.isArray(currentOptions.offset)) {
    delete currentOptions.offset;
  }
  return _objectSpread(_objectSpread({}, pluginDefaultConfig), currentOptions);
};
var setGlobalConfig = function setGlobalConfig(options) {
  pluginDefaultConfig = _objectSpread({}, getConfig(options));
};
var getDefaultConfig = function getDefaultConfig() {
  return _objectSpread({}, pluginDefaultConfig);
};

exports.getConfig = getConfig;
exports.getDefaultConfig = getDefaultConfig;
exports.setGlobalConfig = setGlobalConfig;
//# sourceMappingURL=config.js.map
