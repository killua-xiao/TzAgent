/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-0006fcfa.js');
var slicedToArray = require('../_chunks/dep-8e4d656d.js');
var objectWithoutProperties = require('../_chunks/dep-8fa3a4c2.js');
var React = require('react');
var reactTransitionGroup = require('react-transition-group');
var classNames = require('classnames');
var log = require('../_chunks/dep-59671c87.js');
var common_Portal = require('../common/Portal.js');
var hooks_useAttach = require('../hooks/useAttach.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useDeepEffect = require('../hooks/useDeepEffect.js');
var hooks_useDefaultProps = require('../hooks/useDefaultProps.js');
var hooks_useSetState = require('../hooks/useSetState.js');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var dialog_defaultProps = require('./defaultProps.js');
var dialog_DialogCard = require('./DialogCard.js');
var dialog_hooks_useDialogDrag = require('./hooks/useDialogDrag.js');
var dialog_hooks_useDialogEsc = require('./hooks/useDialogEsc.js');
var dialog_hooks_useDialogPosition = require('./hooks/useDialogPosition.js');
var dialog_hooks_useLockStyle = require('./hooks/useLockStyle.js');
var dialog_utils = require('./utils.js');
var isUndefined = require('../_chunks/dep-221787fe.js');
require('../_chunks/dep-667ac7af.js');
require('../_chunks/dep-00b49251.js');
require('react-dom');
require('../_chunks/dep-381fa848.js');
require('../_chunks/dep-4ed9eda4.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-62e73936.js');
require('../hooks/useLayoutEffect.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-ec8d2dca.js');
require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('../_chunks/dep-eb6d55c1.js');
require('../_chunks/dep-014b9b78.js');
require('../_chunks/dep-abdd786a.js');
require('../_chunks/dep-3d4656ee.js');
require('../_chunks/dep-0ffc9d96.js');
require('../_chunks/dep-efe6d243.js');
require('../_chunks/dep-4b18243f.js');
require('../_chunks/dep-bff2c990.js');
require('../config-provider/ConfigProvider.js');
require('../_chunks/dep-ab2f63ec.js');
require('../_chunks/dep-a48c7e8b.js');
require('tdesign-icons-react');
require('../button/index.js');
require('../button/Button.js');
require('../hooks/useDomRefCallback.js');
require('../hooks/useRipple.js');
require('../_chunks/dep-dc4ce063.js');
require('../hooks/useAnimation.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../loading/gradient.js');
require('../_chunks/dep-002fcc1e.js');
require('../_chunks/dep-e4e1901e.js');
require('../_chunks/dep-2ffa3ff1.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../_util/react-render.js');
require('../_chunks/dep-65ef8e09.js');
require('../common/PluginContainer.js');
require('../button/defaultProps.js');
require('../_util/parseTNode.js');
require('../hooks/useGlobalIcon.js');
require('../hooks/useMouseEvent.js');
require('../_chunks/dep-b73b8db7.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["children"],
  _excluded2 = ["className", "dialogClassName", "style", "width", "mode", "zIndex", "visible", "attach", "onBeforeOpen", "onBeforeClose", "onOpened", "onCancel", "onConfirm", "onClose", "onClosed", "isPlugin", "draggable", "onOverlayClick", "onEscKeydown", "closeOnEscKeydown", "confirmOnEnter", "showOverlay", "showInAttachedElement", "closeOnOverlayClick", "destroyOnClose", "preventScrollThrough", "onCloseBtnClick", "forceRender", "lazy"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Dialog = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
  var props = hooks_useDefaultProps["default"](originalProps, dialog_defaultProps.dialogDefaultProps);
  var children = props.children,
    restProps = objectWithoutProperties._objectWithoutProperties(props, _excluded);
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var componentCls = "".concat(classPrefix, "-dialog");
  var wrapRef = React.useRef(null);
  var maskRef = React.useRef(null);
  var contentClickRef = React.useRef(false);
  var dialogCardRef = React.useRef(null);
  var dialogPosition = React.useRef(null);
  var portalRef = React.useRef(null);
  var _useSetState = hooks_useSetState["default"](_objectSpread({
      isPlugin: false
    }, restProps)),
    _useSetState2 = slicedToArray._slicedToArray(_useSetState, 2),
    state = _useSetState2[0],
    setState = _useSetState2[1];
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("dialog"),
    _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 1),
    local = _useLocaleReceiver2[0];
  var className = state.className,
    dialogClassName = state.dialogClassName,
    style = state.style,
    width = state.width,
    mode = state.mode,
    zIndex = state.zIndex,
    visible = state.visible,
    attach = state.attach,
    onBeforeOpen = state.onBeforeOpen,
    onBeforeClose = state.onBeforeClose,
    onOpened = state.onOpened,
    onCancel = state.onCancel,
    onConfirm = state.onConfirm,
    onClose = state.onClose,
    onClosed = state.onClosed,
    isPlugin = state.isPlugin,
    draggable = state.draggable,
    onOverlayClick = state.onOverlayClick,
    onEscKeydown = state.onEscKeydown,
    closeOnEscKeydown = state.closeOnEscKeydown,
    confirmOnEnter = state.confirmOnEnter,
    showOverlay = state.showOverlay,
    showInAttachedElement = state.showInAttachedElement,
    closeOnOverlayClick = state.closeOnOverlayClick,
    destroyOnClose = state.destroyOnClose,
    preventScrollThrough = state.preventScrollThrough,
    onCloseBtnClick = state.onCloseBtnClick,
    forceRender = state.forceRender,
    lazy = state.lazy,
    restState = objectWithoutProperties._objectWithoutProperties(state, _excluded2);
  var dialogAttach = hooks_useAttach["default"]("dialog", attach);
  dialog_hooks_useLockStyle["default"]({
    preventScrollThrough: preventScrollThrough,
    visible: visible,
    mode: mode,
    showInAttachedElement: showInAttachedElement
  });
  dialog_hooks_useDialogEsc["default"](visible, wrapRef);
  dialog_hooks_useDialogPosition["default"](visible, dialogCardRef);
  dialog_hooks_useDialogDrag["default"]({
    dialogCardRef: dialogCardRef,
    canDraggable: draggable && mode === "modeless"
  });
  hooks_useDeepEffect["default"](function () {
    if (isPlugin) return;
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), props);
    });
  }, [props, setState]);
  React.useImperativeHandle(ref, function () {
    return {
      show: function show() {
        setState({
          visible: true
        });
      },
      hide: function hide() {
        setState({
          visible: false
        });
      },
      setConfirmLoading: function setConfirmLoading(loading) {
        setState({
          confirmLoading: loading
        });
      },
      destroy: function destroy() {
        setState({
          visible: false,
          destroyOnClose: true
        });
      },
      update: function update(newOptions) {
        setState(function (prevState) {
          return _objectSpread(_objectSpread({}, prevState), newOptions);
        });
      }
    };
  });
  if (props.mode === "normal") {
    log.log.error("Dialog", 'mode="normal" is not supported, please use DialogCard.');
    return /* @__PURE__ */React__default["default"].createElement(dialog_DialogCard["default"], _objectSpread({}, props));
  }
  var onMaskClick = function onMaskClick(e) {
    if (showOverlay && (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick)) {
      if (contentClickRef.current) {
        contentClickRef.current = false;
      } else if (e.target === dialogPosition.current) {
        onOverlayClick === null || onOverlayClick === void 0 || onOverlayClick({
          e: e
        });
        onClose === null || onClose === void 0 || onClose({
          e: e,
          trigger: "overlay"
        });
      }
    }
  };
  var handleCancel = function handleCancel(_ref) {
    var e = _ref.e;
    onCancel === null || onCancel === void 0 || onCancel({
      e: e
    });
    onClose === null || onClose === void 0 || onClose({
      e: e,
      trigger: "cancel"
    });
  };
  var handleClose = function handleClose(_ref2) {
    var e = _ref2.e;
    onCloseBtnClick === null || onCloseBtnClick === void 0 || onCloseBtnClick({
      e: e
    });
    onClose === null || onClose === void 0 || onClose({
      e: e,
      trigger: "close-btn"
    });
  };
  var handleKeyDown = function handleKeyDown(e) {
    if (e.key === "Escape") {
      e.stopPropagation();
      onEscKeydown === null || onEscKeydown === void 0 || onEscKeydown({
        e: e
      });
      if (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) {
        onClose === null || onClose === void 0 || onClose({
          e: e,
          trigger: "esc"
        });
      }
    } else if (e.key === "Enter" || e.key === "NumpadEnter") {
      e.stopPropagation();
      confirmOnEnter && (onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
        e: e
      }));
    }
  };
  var onAnimateLeave = function onAnimateLeave() {
    onClosed === null || onClosed === void 0 || onClosed();
    if (!wrapRef.current) return;
    wrapRef.current.style.display = "none";
  };
  var onAnimateStart = function onAnimateStart() {
    if (!wrapRef.current) return;
    onBeforeOpen === null || onBeforeOpen === void 0 || onBeforeOpen();
    wrapRef.current.style.display = "block";
  };
  var onInnerAnimateStart = function onInnerAnimateStart() {
    if (!dialogCardRef.current) return;
    dialogCardRef.current.style.display = "block";
  };
  var onInnerAnimateLeave = function onInnerAnimateLeave() {
    if (!dialogCardRef.current) return;
    dialogCardRef.current.style.display = "none";
  };
  var renderMask = function renderMask() {
    if (mode !== "modal") return null;
    return showOverlay ? /* @__PURE__ */React__default["default"].createElement(reactTransitionGroup.CSSTransition, {
      "in": visible,
      appear: true,
      timeout: 300,
      classNames: "".concat(componentCls, "-fade"),
      mountOnEnter: true,
      unmountOnExit: true,
      nodeRef: maskRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: maskRef,
      className: "".concat(componentCls, "__mask")
    })) : null;
  };
  return /* @__PURE__ */React__default["default"].createElement(reactTransitionGroup.CSSTransition, {
    "in": visible,
    appear: true,
    timeout: 300,
    mountOnEnter: isUndefined.isUndefined(forceRender) ? lazy : !forceRender,
    unmountOnExit: destroyOnClose,
    nodeRef: portalRef,
    onEnter: onAnimateStart,
    onEntered: onOpened,
    onExit: function onExit() {
      return onBeforeClose === null || onBeforeClose === void 0 ? void 0 : onBeforeClose();
    },
    onExited: onAnimateLeave
  }, /* @__PURE__ */React__default["default"].createElement(common_Portal["default"], {
    attach: dialogAttach,
    ref: portalRef
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: wrapRef,
    className: classNames__default["default"](className, "".concat(componentCls, "__ctx"), "".concat(componentCls, "__").concat(mode), defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(componentCls, "__ctx--fixed"), !showInAttachedElement), "".concat(componentCls, "__ctx--absolute"), showInAttachedElement)),
    style: {
      zIndex: zIndex,
      display: "none"
    },
    onKeyDown: handleKeyDown,
    tabIndex: 0
  }, renderMask(), /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(componentCls, "__wrap")
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: dialogPosition,
    className: classNames__default["default"]("".concat(componentCls, "__position"), defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(componentCls, "--top"), !!props.top || props.placement === "top"), "".concat(componentCls, "--center"), props.placement === "center" && !props.top)),
    style: {
      paddingTop: dialog_utils.parseValueToPx(props.top)
    },
    onClick: onMaskClick
  }, /* @__PURE__ */React__default["default"].createElement(reactTransitionGroup.CSSTransition, {
    "in": visible,
    appear: true,
    timeout: 300,
    classNames: "".concat(componentCls, "-zoom"),
    nodeRef: dialogCardRef,
    onEnter: onInnerAnimateStart,
    onExited: onInnerAnimateLeave
  }, /* @__PURE__ */React__default["default"].createElement(dialog_DialogCard["default"], _objectSpread(_objectSpread({
    ref: dialogCardRef
  }, restState), {}, {
    className: dialogClassName,
    style: _objectSpread(_objectSpread({}, style), {}, {
      width: dialog_utils.parseValueToPx(width || (style === null || style === void 0 ? void 0 : style.width))
    }),
    onConfirm: onConfirm,
    onCancel: handleCancel,
    onCloseBtnClick: handleClose
  }), children)))))));
});
Dialog.displayName = "Dialog";

exports["default"] = Dialog;
//# sourceMappingURL=Dialog.js.map
