{"version":3,"file":"plugin.js","sources":["../../../components/dialog/plugin.tsx"],"sourcesContent":["import React from 'react';\nimport log from '@tdesign/common-js/log/index';\nimport { render } from '../_util/react-render';\nimport DialogComponent, { DialogProps } from './Dialog';\n\nimport { getAttach } from '../_util/dom';\nimport { DialogOptions, DialogMethod, DialogConfirmMethod, DialogAlertMethod, DialogInstance } from './type';\nimport PluginContainer from '../common/PluginContainer';\nimport ConfigProvider from '../config-provider';\n\nexport interface DialogPluginType extends DialogMethod {\n  alert: DialogAlertMethod;\n  confirm: DialogConfirmMethod;\n}\n\nconst createDialog: DialogPluginType = (props: DialogOptions): DialogInstance => {\n  const dialogRef = React.createRef<DialogInstance>();\n  const options = { ...props };\n  const { visible = true } = options;\n\n  const fragment = document.createDocumentFragment();\n\n  const dGlobalConfig = ConfigProvider.getGlobalConfig();\n  render(<PluginContainer globalConfig={dGlobalConfig}><DialogComponent {...(options as DialogProps)} visible={visible} ref={dialogRef} isPlugin /></PluginContainer>, fragment);const container = getAttach(options.attach);\n  \n  if (container) {\n    container.appendChild(fragment);\n  } else {\n    log.error('Dialog', 'attach is not exist');\n  }\n\n  const dialogNode: DialogInstance = {\n    show: () => {\n      requestAnimationFrame(() => {\n        container.appendChild(fragment);\n        dialogRef.current?.show();\n      });\n    },\n    hide: () => {\n      requestAnimationFrame(() => {\n        dialogRef.current?.destroy();\n      });\n    },\n    setConfirmLoading: (loading: boolean) => {\n      requestAnimationFrame(() => {\n        dialogRef.current?.setConfirmLoading(loading);\n      });\n    },\n    update: (updateOptions: DialogOptions) => {\n      requestAnimationFrame(() => {\n        dialogRef.current?.update(updateOptions);\n      });\n    },\n    destroy: () => {\n      requestAnimationFrame(() => {\n        dialogRef.current?.destroy();\n      });\n    },\n  };\n  return dialogNode;\n};\n\nconst confirm: DialogConfirmMethod = (props: DialogOptions) => createDialog(props);\n\nconst alert: DialogAlertMethod = (props: Omit<DialogOptions, 'confirmBtn'>) => {\n  const options = { ...props };\n  options.cancelBtn = null;\n  return createDialog(options);\n};\n\ncreateDialog.alert = alert;\ncreateDialog.confirm = confirm;\n\nexport const DialogPlugin = createDialog;\n"],"names":["createDialog","props","dialogRef","React","createRef","options","_objectSpread","_options$visible","visible","fragment","document","createDocumentFragment","dGlobalConfig","ConfigProvider","getGlobalConfig","render","createElement","PluginContainer","globalConfig","DialogComponent","ref","isPlugin","container","getAttach","attach","appendChild","log","error","dialogNode","show","requestAnimationFrame","_dialogRef$current","current","hide","_dialogRef$current2","destroy","setConfirmLoading","loading","_dialogRef$current3","update","updateOptions","_dialogRef$current4","_dialogRef$current5","confirm","alert","cancelBtn","DialogPlugin"],"mappings":"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"}