{"version":3,"file":"Badge.js","sources":["../../../components/badge/Badge.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { StyledProps } from '../common';\nimport useConfig from '../hooks/useConfig';\nimport { TdBadgeProps } from './type';\nimport { badgeDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface BadgeProps extends TdBadgeProps, StyledProps {}\n\nconst Badge = forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n  const {\n    color,\n    dot,\n    maxCount,\n    count,\n    size,\n    shape,\n    showZero,\n    offset,\n    className,\n    content,\n    children,\n    style,\n    ...restProps\n  } = useDefaultProps<BadgeProps>(props, badgeDefaultProps);\n  const { classPrefix } = useConfig();\n\n  const childNode = content || children;\n\n  const badgeClassName = classNames(\n    !childNode && `${classPrefix}-badge--static`,\n    dot ? `${classPrefix}-badge--dot` : `${classPrefix}-badge--${shape}`,\n    size === 'small' && `${classPrefix}-size-s`,\n    !childNode && className,\n  );\n  const getDisplayCount = () => {\n    if (typeof count === 'number' && count > maxCount) {\n      return `${maxCount}+`;\n    }\n    return count;\n  };\n\n  let isHidden = !count;\n  if (typeof count === 'number') {\n    isHidden = count < 1 && !showZero;\n  }\n\n  const getStyle = () => {\n    const mergedStyle: React.CSSProperties = { ...style };\n    if (color) {\n      mergedStyle.backgroundColor = color;\n    }\n    if (offset) {\n      if (offset[0]) {\n        mergedStyle.right = +offset[0];\n      }\n      if (offset[1]) {\n        mergedStyle.marginTop = +offset[1];\n      }\n    }\n    return mergedStyle;\n  };\n\n  const badge = !isHidden ? (\n    <span {...(childNode ? {} : restProps)} className={badgeClassName} style={getStyle()}>\n      {!dot ? getDisplayCount() : null}\n    </span>\n  ) : null;\n\n  if (!childNode) {\n    return badge;\n  }\n\n  return (\n    <span {...restProps} className={classNames(`${classPrefix}-badge`, className)} ref={ref}>\n      {childNode}\n      {badge}\n    </span>\n  );\n});\n\nBadge.displayName = 'Badge';\n\nexport default Badge;\n"],"names":["Badge","forwardRef","props","ref","_useDefaultProps","useDefaultProps","badgeDefaultProps","color","dot","maxCount","count","size","shape","showZero","offset","className","content","children","style","restProps","_objectWithoutProperties","_excluded","_useConfig","useConfig","classPrefix","childNode","badgeClassName","classNames","concat","getDisplayCount","isHidden","getStyle","mergedStyle","_objectSpread","backgroundColor","right","marginTop","badge","React","createElement","displayName"],"mappings":"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"}