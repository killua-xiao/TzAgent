{"version":3,"file":"useInputNumber.js","sources":["../../../common/js/input-number/number.ts","../../../components/input-number/useInputNumber.tsx"],"sourcesContent":["import { isUndefined, isString, isNumber } from 'lodash-es';\n/** 普通数相关方法 */\nimport {\n  compareNumber,\n  formatENumber,\n  largeNumberToFixed,\n  isInputNumber,\n  largeNumberAdd,\n  largeNumberSubtract,\n} from './large-number';\nimport log from '../log';\nimport type { InputNumberDecimalPlaces } from './large-number';\n\nexport * from './large-number';\n\nexport type NumberType = number | string;\n\n// 小于最大值，才允许继续添加\nexport function canAddNumber(\n  num: NumberType,\n  max: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, max, largeNumber) < 0;\n  }\n  return num < max;\n}\n\n// 大于最小值，才允许继续减少\nexport function canReduceNumber(\n  num: NumberType,\n  min: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num && num !== 0) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, min, largeNumber) > 0;\n  }\n  return num > min;\n}\n\n/**\n * 将数字控制在 max 和 min 之间\n */\nexport function putInRangeNumber(\n  val: NumberType,\n  params: {\n    max?: NumberType;\n    min?: NumberType;\n    lastValue?: NumberType;\n    largeNumber?: boolean;\n  }\n) {\n  if (val === '') return undefined;\n  const { max, min, lastValue, largeNumber } = params;\n  if (!isInputNumber(val)) return lastValue;\n  if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {\n    if (compareNumber(max, val, largeNumber) < 0) return max;\n    if (compareNumber(min, val, largeNumber) > 0) return min;\n    return val;\n  }\n  return Math.max(Number(min), Math.min(Number(max), Number(val)));\n}\n\n/**\n * 仅支持正数，小数加法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveAdd(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) + (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  // 整数不存在精度问题，直接返回\n  if (!r1 && !r2) return num1 + num2;\n  let newNumber1 = num1;\n  let newNumber2 = num2;\n  const diff = Math.abs(r1 - r2);\n  const digit = 10 ** Math.max(r1, r2);\n  if (diff > 0) {\n    const cm = 10 ** diff;\n    if (r1 > r2) {\n      newNumber1 = Number(num1.toString().replace('.', ''));\n      newNumber2 = Number(num2.toString().replace('.', '')) * cm;\n    } else {\n      newNumber1 = Number(num1.toString().replace('.', '')) * cm;\n      newNumber2 = Number(num2.toString().replace('.', ''));\n    }\n  } else {\n    newNumber1 = Number(num1.toString().replace('.', ''));\n    newNumber2 = Number(num2.toString().replace('.', ''));\n  }\n  return (newNumber1 + newNumber2) / digit;\n}\n\n/**\n * 正数，小数减法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveSubtract(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) - (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  const digit = 10 ** Math.max(r1, r2);\n  const n = r1 >= r2 ? r1 : r2;\n  return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));\n}\n\n/**\n * 支持正数、负数、小数等全部数字的加法\n * -0.766 + 1       =>   1 - 0.766\n * -1 + (-0.766)    =>   - (1 + 0.766)\n * 1 + (-0.766)     =>   1 - 0.766\n * 1 + 0.766        =>   1 + 0.766\n */\nexport function add(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));\n  if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;\n  if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));\n  return positiveAdd(num1, num2);\n}\n\n/**\n * 支持正数、负数、小数等全部数字的减法\n * -0.766 - 1       =>   - (1 + 0.766)\n * -1 - (-0.766)    =>   0.766 - 1\n * 1 - (-0.766)     =>   1 + 0.766\n * 1 - 0.766        =>   1 - 0.766\n */\nexport function subtract(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;\n  if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));\n  if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));\n  return positiveSubtract(num1, num2);\n}\n\nexport function getStepValue(p: {\n  op: 'add' | 'reduce';\n  step: NumberType;\n  max?: NumberType;\n  min?: NumberType;\n  lastValue?: NumberType;\n  largeNumber?: boolean;\n}) {\n  const { op, step, lastValue, max, min, largeNumber } = p;\n  if (Number(step) <= 0) {\n    log.error('InputNumber', 'step must be larger than 0.');\n    return lastValue;\n  }\n  const tStep = isNumber(step) ? String(step) : step;\n  let newVal;\n  if (op === 'add') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberAdd(String(lastValue), String(tStep));\n    } else {\n      newVal = add(Number(lastValue || 0), Number(step));\n    }\n  } else if (op === 'reduce') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberSubtract(String(lastValue), String(tStep));\n    } else {\n      newVal = subtract(Number(lastValue || 0), Number(step));\n    }\n  }\n  if (isUndefined(lastValue)) {\n    newVal = putInRangeNumber(newVal, { max, min, lastValue, largeNumber });\n  }\n  return largeNumber ? newVal : Number(newVal);\n}\n\nexport type InputNumberErrorType =\n  | 'exceed-maximum'\n  | 'below-minimum'\n  | undefined;\n\n/**\n * 最大值和最小值校验\n */\nexport function getMaxOrMinValidateResult(p: {\n  largeNumber: boolean;\n  value: NumberType;\n  max: NumberType;\n  min: NumberType;\n}): InputNumberErrorType {\n  const { largeNumber, value, max, min } = p;\n  if (isUndefined(value) || isUndefined(largeNumber)) return undefined;\n  if (largeNumber && isNumber(value)) {\n    log.warn('InputNumber', 'largeNumber value must be a string.');\n  }\n  let error: InputNumberErrorType;\n  if (compareNumber(value, max, largeNumber) > 0) {\n    error = 'exceed-maximum';\n  } else if (compareNumber(value, min, largeNumber) < 0) {\n    error = 'below-minimum';\n  } else {\n    error = undefined;\n  }\n  return error;\n}\n\nexport const specialCode = ['-', '.', 'e', 'E', '+'];\n\n/**\n * 是否允许输入当前字符，输入字符校验\n * 1.23E+08 就表示 1.23 乘 10 的 8 次方\n * 2e3 表示 2 乘 10 的 3 次方\n */\nexport function canInputNumber(number: string | undefined | null, largeNumber?: boolean) {\n  if (['', null, undefined].includes(number)) return true;\n  // 数字最前方不允许出现连续的两个 0\n  if (number.slice(0, 2) === '00') return false;\n  // 不能出现空格\n  if (number.match(/\\s/g)) return false;\n  // 只能出现一个点（.）\n  if (number.match(/\\./g)?.length > 1) return false;\n  // 只能出现一个e（e）\n  if (number.match(/e/g)?.length > 1) return false;\n  // 只能出现一个负号（-）或 一个正号（+），并且在第一个位置；但允许 3e+10 这种形式\n  const tmpNumber = number.slice(1);\n  const tmpMatched = tmpNumber.match(/(\\+|-)/g);\n  if (tmpMatched && (!/e(\\+|-)/i.test(tmpNumber) || tmpMatched.length > 1)) return false;\n  // 允许输入数字字符\n  const isNumber = (largeNumber && isInputNumber(number)) || !Number.isNaN(Number(number));\n  if (!isNumber && !specialCode.includes(number.slice(-1))) return false;\n  if (/e/i.test(number) && (!/\\de/i.test(number) || /e\\./.test(number))) return false;\n  return true;\n}\n\n/**\n * 是否允许设置组件新值，触发 onChange 事件\n */\nexport function canSetValue(number: string, lastNumber: number) {\n  return parseFloat(number) !== lastNumber && !Number.isNaN(Number(number));\n}\n\n/**\n * 1. 格式化未输入完成的数字，如：如：2e/2+/2.等\n * 2. 处理小数点 decimalPlaces\n * 3. 格式化大数字 formatENumber\n */\nexport function formatUnCompleteNumber(\n  number: string,\n  extra: {\n    decimalPlaces?: InputNumberDecimalPlaces;\n    largeNumber?: boolean;\n    isToFixed?: boolean;\n  } = {}\n): number | string {\n  if (['', null, undefined].includes(number) || !/\\d+/.test(number)) return undefined;\n  const { decimalPlaces, largeNumber, isToFixed } = extra;\n  let newNumber = number.replace(/[.|+|\\-|e]$/, '');\n  if (largeNumber) {\n    newNumber = formatENumber(newNumber);\n  }\n  if (decimalPlaces !== undefined) {\n    newNumber = largeNumberToFixed(newNumber, decimalPlaces, largeNumber);\n  }\n  if (largeNumber) return newNumber;\n  return isToFixed ? newNumber : parseFloat(newNumber);\n}\n\n/**\n * 对千分位进行处理 111,111,222 -> 111111222\n */\nexport function formatThousandths(number: string) {\n  const thousandthsRegExp = /^[-+]?\\d{1,3}(,\\d{3})*(\\.(\\d*))?$/;\n  if (thousandthsRegExp.test(number)) return number.replace(/,/g, '');\n  return number;\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport {\n  canAddNumber,\n  canInputNumber,\n  canReduceNumber,\n  formatUnCompleteNumber,\n  canSetValue,\n  getMaxOrMinValidateResult,\n  getStepValue,\n  formatThousandths,\n  largeNumberToFixed,\n} from '@tdesign/common-js/input-number/number';\nimport useConfig from '../hooks/useConfig';\nimport useControlled from '../hooks/useControlled';\nimport useCommonClassName from '../hooks/useCommonClassName';\nimport { InputNumberValue, TdInputNumberProps } from './type';\n// 计算逻辑，统一到 common 中，方便各框架复用（如超过 16 位的大数处理）\nimport { InputProps } from '../input';\n\nexport const specialCode = ['-', '.', 'e', 'E'];\n\n/**\n * 独立一个组件 Hook 方便用户直接使用相关逻辑 自定义任何样式的数字输入框\n */\nexport default function useInputNumber<T extends InputNumberValue = InputNumberValue>(props: TdInputNumberProps<T>) {\n  const { SIZE, STATUS } = useCommonClassName();\n  const { classPrefix } = useConfig();\n  const [tValue, onChange] = useControlled(props, 'value', props.onChange);\n  const [userInput, setUserInput] = useState('');\n  const [isError, setIsError] = useState<'exceed-maximum' | 'below-minimum'>();\n\n  const inputRef = useRef(null);\n\n  const { max, min, largeNumber, decimalPlaces, allowInputOverLimit, onValidate } = props;\n\n  const disabledReduce = props.disabled || !canReduceNumber(tValue, props.min, props.largeNumber);\n  const disabledAdd = props.disabled || !canAddNumber(tValue, props.max, props.largeNumber);\n\n  const wrapClasses = classNames(`${classPrefix}-input-number`, SIZE[props.size], {\n    [STATUS.disabled]: props.disabled,\n    [`${classPrefix}-is-controls-right`]: props.theme === 'column',\n    [`${classPrefix}-input-number--${props.theme}`]: props.theme,\n    [`${classPrefix}-input-number--auto-width`]: props.autoWidth,\n  });\n\n  const reduceClasses = classNames(`${classPrefix}-input-number__decrease`, { [STATUS.disabled]: disabledReduce });\n  const addClasses = classNames(`${classPrefix}-input-number__increase`, { [STATUS.disabled]: disabledAdd });\n\n  const getUserInput = (value: InputNumberValue) => {\n    if (!value && value !== 0) return '';\n    let inputStr = value || value === 0 ? String(value) : '';\n    if (!inputRef.current.currentElement.contains?.(document.activeElement)) {\n      const num = formatUnCompleteNumber(inputStr, {\n        decimalPlaces,\n        largeNumber,\n        isToFixed: true,\n      });\n      inputStr = num || num === 0 ? String(num) : '';\n      if (props.format) {\n        inputStr = String(props.format(value, { fixedNumber: inputStr }));\n      }\n    }\n    return inputStr;\n  };\n\n  useEffect(() => {\n    const inputValue = [undefined, null].includes(tValue) ? '' : String(tValue);\n    // userInput.value 为非合法数字，则表示用户正在输入，此时无需处理\n    if (!largeNumber && !Number.isNaN(userInput)) {\n      if (parseFloat(userInput) !== tValue) {\n        setUserInput(getUserInput(inputValue));\n      }\n      const fixedNumber = Number(largeNumberToFixed(inputValue, decimalPlaces, largeNumber));\n      if (\n        decimalPlaces !== undefined &&\n        ![undefined, null].includes(tValue) &&\n        Number(fixedNumber) !== Number(tValue)\n      ) {\n        onChange(fixedNumber as T, { type: 'props', e: undefined });\n      }\n    }\n    if (largeNumber) {\n      const tmpUserInput = getUserInput(inputValue);\n      setUserInput(tmpUserInput);\n      if (decimalPlaces !== undefined && largeNumberToFixed(inputValue, decimalPlaces, largeNumber) !== tValue) {\n        onChange(tmpUserInput as T, { type: 'props', e: undefined });\n      }\n    }\n    // eslint-disable-next-line\n  }, [tValue]);\n\n  useEffect(() => {\n    // @ts-ignore\n    if ([undefined, '', null].includes(tValue)) return;\n    const error = getMaxOrMinValidateResult({\n      value: tValue as InputNumberValue,\n      max,\n      min,\n      largeNumber,\n    });\n    setIsError(error);\n    onValidate?.({ error });\n  }, [tValue, max, min, largeNumber, onValidate]);\n\n  const handleStepValue = (op: 'add' | 'reduce') => {\n    const newValue = getStepValue({\n      op,\n      step: props.step,\n      max: props.max,\n      min: props.min,\n      lastValue: tValue,\n      largeNumber: props.largeNumber,\n    });\n    const { largeNumber, max, min } = props;\n    const overLimit = getMaxOrMinValidateResult({\n      value: newValue,\n      largeNumber,\n      max,\n      min,\n    });\n    return {\n      overLimit,\n      newValue,\n    };\n  };\n\n  const handleReduce = (e: any) => {\n    if (disabledReduce || props.readonly) return;\n    const r = handleStepValue('reduce');\n    if (r.overLimit && !allowInputOverLimit) return;\n    onChange(r.newValue, { type: 'reduce', e });\n  };\n\n  const handleAdd = (e: any) => {\n    if (disabledAdd || props.readonly) return;\n    const r = handleStepValue('add');\n    if (r.overLimit && !allowInputOverLimit) return;\n    onChange(r.newValue, { type: 'add', e });\n  };\n\n  // 1.2 -> 1. -> 1\n  const onInnerInputChange: InputProps['onChange'] = (inputValue, { e }) => {\n    // 处理千分位\n    const val = formatThousandths(inputValue);\n    if (!canInputNumber(val, largeNumber)) return;\n\n    setUserInput(val);\n\n    if (largeNumber) {\n      onChange(val as T, { type: 'input', e });\n      return;\n    }\n\n    if (canSetValue(String(val), Number(tValue))) {\n      const newVal = val === '' ? undefined : Number(val);\n      onChange(newVal as T, { type: 'input', e });\n    }\n  };\n\n  const handleBlur = (value: string, ctx: { e: React.FocusEvent<HTMLDivElement, Element> }) => {\n    if (!props.allowInputOverLimit && value !== undefined) {\n      const r = getMaxOrMinValidateResult({\n        value: tValue,\n        largeNumber,\n        max,\n        min,\n      });\n      if (r === 'below-minimum') {\n        onChange(min as T, { type: 'blur', e: ctx.e });\n        return;\n      }\n      if (r === 'exceed-maximum') {\n        onChange(max as T, { type: 'blur', e: ctx.e });\n        return;\n      }\n    }\n    const newValue = formatUnCompleteNumber(value, {\n      decimalPlaces,\n      largeNumber,\n    });\n    setUserInput(getUserInput(newValue));\n    if (newValue !== tValue) {\n      setUserInput(tValue as string);\n      onChange(newValue as T, { type: 'blur', e: ctx.e });\n    }\n    props.onBlur?.(newValue, ctx);\n  };\n\n  const handleFocus = (_: string, ctx: { e: React.FocusEvent<HTMLDivElement, Element> }) => {\n    setUserInput(tValue as string);\n    props.onFocus?.(tValue as string, ctx);\n  };\n\n  const handleKeydown = (value: string, ctx: { e: React.KeyboardEvent<HTMLDivElement> }) => {\n    const { e } = ctx;\n    const keyEvent = {\n      ArrowUp: handleAdd,\n      ArrowDown: handleReduce,\n    };\n\n    if (keyEvent[e.key] !== undefined) {\n      keyEvent[e.key](e);\n    }\n    props.onKeydown?.(value, ctx);\n  };\n\n  const handleKeyup = (value: string, ctx: { e: React.KeyboardEvent<HTMLDivElement> }) => {\n    props.onKeyup?.(value, ctx);\n  };\n\n  const handleKeypress = (value: string, ctx: { e: React.KeyboardEvent<HTMLDivElement> }) => {\n    props.onKeypress?.(value, ctx);\n  };\n\n  const handleEnter = (value: string, ctx: { e: React.KeyboardEvent<HTMLDivElement> }) => {\n    setUserInput(getUserInput(value));\n    const newValue = formatUnCompleteNumber(value, {\n      decimalPlaces: props.decimalPlaces,\n      largeNumber: props.largeNumber,\n    });\n    if (newValue !== value && String(newValue) !== value) {\n      onChange(newValue as T, { type: 'enter', e: ctx.e });\n    }\n    props.onEnter?.(newValue, ctx);\n  };\n\n  const handleClear: InputProps['onClear'] = ({ e }) => {\n    onChange(undefined, { type: 'clear', e });\n    setUserInput('');\n  };\n\n  const focus = () => {\n    inputRef.current.focus();\n  };\n\n  const blur = () => {\n    inputRef.current.blur();\n  };\n\n  const listeners = {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onKeydown: handleKeydown,\n    onKeyup: handleKeyup,\n    onKeypress: handleKeypress,\n    onEnter: handleEnter,\n    onClick: focus,\n    onClear: handleClear,\n  };\n\n  return {\n    classPrefix,\n    wrapClasses,\n    reduceClasses,\n    addClasses,\n    inputRef,\n    listeners,\n    isError,\n    setIsError,\n    userInput,\n    setUserInput,\n    tValue,\n    focus,\n    blur,\n    onChange,\n    handleReduce,\n    handleAdd,\n    onInnerInputChange,\n  };\n}\n"],"names":["canAddNumber","num","max","largeNumber","arguments","length","undefined","isString","compareNumber","canReduceNumber","min","putInRangeNumber","val","params","lastValue","isInputNumber","Infinity","Math","Number","positiveAdd","num1","num2","_num1$toString$split$","_num2$toString$split$","r1","toString","split","r2","newNumber1","newNumber2","diff","abs","digit","pow","cm","replace","positiveSubtract","_num1$toString$split$2","_num2$toString$split$2","n","toFixed","add","subtract","getStepValue","p","op","step","log","error","tStep","isNumber","String","newVal","largeNumberAdd","largeNumberSubtract","isUndefined","getMaxOrMinValidateResult","value","warn","specialCode","canInputNumber","number","_number$match","_number$match2","includes","slice","match","tmpNumber","tmpMatched","test","isNaN","canSetValue","lastNumber","parseFloat","formatUnCompleteNumber","extra","decimalPlaces","isToFixed","newNumber","formatENumber","largeNumberToFixed","formatThousandths","thousandthsRegExp","useInputNumber","props","_useCommonClassName","useCommonClassName","SIZE","STATUS","_useConfig","useConfig","classPrefix","_useControlled","useControlled","onChange","_useControlled2","_slicedToArray","tValue","_useState","useState","_useState2","userInput","setUserInput","_useState3","_useState4","isError","setIsError","inputRef","useRef","allowInputOverLimit","onValidate","disabledReduce","disabled","disabledAdd","wrapClasses","classNames","concat","size","_defineProperty","theme","autoWidth","reduceClasses","addClasses","getUserInput","_inputRef$current$cur","_inputRef$current$cur2","inputStr","current","currentElement","contains","call","document","activeElement","format","fixedNumber","useEffect","inputValue","type","e","tmpUserInput","handleStepValue","newValue","overLimit","handleReduce","readonly","r","handleAdd","onInnerInputChange","_ref","handleBlur","ctx","_props$onBlur","onBlur","handleFocus","_","_props$onFocus","onFocus","handleKeydown","_props$onKeydown","keyEvent","ArrowUp","ArrowDown","key","onKeydown","handleKeyup","_props$onKeyup","onKeyup","handleKeypress","_props$onKeypress","onKeypress","handleEnter","_props$onEnter","onEnter","handleClear","_ref2","focus","blur","listeners","onClick","onClear"],"mappings":"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"}