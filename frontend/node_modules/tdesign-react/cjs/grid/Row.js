/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-0006fcfa.js');
var slicedToArray = require('../_chunks/dep-8e4d656d.js');
var objectWithoutProperties = require('../_chunks/dep-8fa3a4c2.js');
var React = require('react');
var classNames = require('classnames');
var hooks_useConfig = require('../hooks/useConfig.js');
var _util_style = require('../_chunks/dep-381fa848.js');
var grid_defaultProps = require('./defaultProps.js');
var hooks_useDefaultProps = require('../hooks/useDefaultProps.js');
var isObject = require('../_chunks/dep-fc596d16.js');
require('../_chunks/dep-667ac7af.js');
require('../_chunks/dep-00b49251.js');
require('../config-provider/ConfigContext.js');
require('../_chunks/dep-1df1dad8.js');
require('../_chunks/dep-5b5ab11b.js');
require('dayjs');
require('../_chunks/dep-f32c03f1.js');
require('../_chunks/dep-31c4bc3d.js');
require('../_chunks/dep-eea2872a.js');
require('../_chunks/dep-25585736.js');
require('../_chunks/dep-62e73936.js');
require('../_chunks/dep-64577888.js');
require('../_chunks/dep-71455db7.js');
require('../_chunks/dep-9e5a468d.js');
require('../_chunks/dep-ec8d2dca.js');
require('../_chunks/dep-f26edb7b.js');
require('../_chunks/dep-f33c1939.js');
require('../_chunks/dep-21ece627.js');
require('../_chunks/dep-25e4aa84.js');
require('../_chunks/dep-e1fbe1c3.js');
require('../_chunks/dep-df2b541f.js');
require('../_chunks/dep-edd366db.js');
require('../_chunks/dep-a56c4939.js');
require('../_chunks/dep-6c297e20.js');
require('../_chunks/dep-b7ad4d54.js');
require('../_chunks/dep-a2cb9299.js');
require('../_chunks/dep-f981815b.js');
require('../_chunks/dep-4ed9eda4.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["align", "gutter", "justify", "tag", "style", "className", "children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { defineProperty._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var calcSize = function calcSize(width) {
  var smWidth = parseFloat(_util_style.getCssVarsValue("--td-screen-sm") || "768");
  var mdWidth = parseFloat(_util_style.getCssVarsValue("--td-screen-md") || "992");
  var lgWidth = parseFloat(_util_style.getCssVarsValue("--td-screen-lg") || "1200");
  var xlWidth = parseFloat(_util_style.getCssVarsValue("--td-screen-xl") || "1400");
  var xxlWidth = parseFloat(_util_style.getCssVarsValue("--td-screen-xxl") || "1880");
  var size = "xs";
  if (width >= xxlWidth) {
    size = "xxl";
  } else if (width >= xlWidth) {
    size = "xl";
  } else if (width >= lgWidth) {
    size = "lg";
  } else if (width >= mdWidth) {
    size = "md";
  } else if (width >= smWidth) {
    size = "sm";
  } else {
    size = "xs";
  }
  return size;
};
var calcRowStyle = function calcRowStyle(gutter, currentSize) {
  var rowStyle = {};
  if (typeof gutter === "number") {
    Object.assign(rowStyle, {
      marginLeft: "".concat(gutter / -2, "px"),
      marginRight: "".concat(gutter / -2, "px")
    });
  } else if (Array.isArray(gutter) && gutter.length) {
    if (typeof gutter[0] === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0] / -2, "px"),
        marginRight: "".concat(gutter[0] / -2, "px")
      });
    }
    if (typeof gutter[1] === "number") {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1], "px")
      });
    }
    if (isObject.isObject(gutter[0]) && gutter[0][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
        marginRight: "".concat(gutter[0][currentSize] / -2, "px")
      });
    }
    if (isObject.isObject(gutter[1]) && gutter[1][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1][currentSize], "px")
      });
    }
  } else if (isObject.isObject(gutter) && gutter[currentSize]) {
    if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
        marginRight: "".concat(gutter[currentSize][0] / -2, "px")
      });
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[currentSize][1], "px")
      });
    } else {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize] / -2, "px"),
        marginRight: "".concat(gutter[currentSize] / -2, "px")
      });
    }
  }
  return rowStyle;
};
var RowContext = /*#__PURE__*/React.createContext({
  gutter: void 0,
  size: void 0
});
var Row = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useDefaultProps = hooks_useDefaultProps["default"](props, grid_defaultProps.rowDefaultProps),
    align = _useDefaultProps.align,
    gutter = _useDefaultProps.gutter,
    justify = _useDefaultProps.justify,
    tag = _useDefaultProps.tag,
    propStyle = _useDefaultProps.style,
    className = _useDefaultProps.className,
    children = _useDefaultProps.children,
    otherRowProps = objectWithoutProperties._objectWithoutProperties(_useDefaultProps, _excluded);
  var _useState = React.useState(function () {
      return _util_style.canUseDocument ? calcSize(window.innerWidth) : "md";
    }),
    _useState2 = slicedToArray._slicedToArray(_useState, 2),
    size = _useState2[0],
    setSize = _useState2[1];
  var updateSize = function updateSize() {
    var currentSize = calcSize(window.innerWidth);
    if (currentSize !== size) {
      setSize(size);
    }
  };
  var _useConfig = hooks_useConfig["default"](),
    classPrefix = _useConfig.classPrefix;
  var rowClassNames = classNames__default["default"]("".concat(classPrefix, "-row"), className, defineProperty._defineProperty(defineProperty._defineProperty({}, "".concat(classPrefix, "-row--").concat(justify), true), "".concat(classPrefix, "-row--").concat(align), true));
  var rowStyle = _objectSpread(_objectSpread({}, calcRowStyle(gutter, size)), propStyle);
  React.useEffect(function () {
    window.addEventListener("resize", updateSize);
    return function () {
      window.removeEventListener("resize", updateSize);
    };
  });
  return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread({
    ref: ref,
    className: rowClassNames,
    style: rowStyle
  }, otherRowProps), /* @__PURE__ */React__default["default"].createElement(RowContext.Provider, {
    value: {
      gutter: gutter,
      size: size
    }
  }, children));
});
Row.displayName = "Row";

exports.RowContext = RowContext;
exports["default"] = Row;
//# sourceMappingURL=Row.js.map
