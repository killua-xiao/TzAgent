/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.React, global.ReactDOM));
})(this, (function (exports, React, ReactDOM) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

  function _typeof$3(o) {
    "@babel/helpers - typeof";

    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$3(o);
  }

  function toPrimitive(t, r) {
    if ("object" != _typeof$3(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != _typeof$3(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof$3(i) ? i : i + "";
  }

  function _defineProperty$2(e, r, t) {
    return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }

  function _objectWithoutPropertiesLoose$2(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }

  function _objectWithoutProperties$2(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = _objectWithoutPropertiesLoose$2(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var classnames$1 = {exports: {}};

  (function (module) {
    /* global define */

    (function () {

      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = '';
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === 'string' || typeof arg === 'number') {
          return arg;
        }
        if (_typeof$3(arg) !== 'object') {
          return '';
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
          return arg.toString();
        }
        var classes = '';
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + ' ' + newClass;
        }
        return value + newClass;
      }
      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames$1);
  var classNames$1 = classnames$1.exports;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof$3(global)) == 'object' && global && global.Object === Object && global;
  var freeGlobal$1 = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$3(self)) == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$1 = freeGlobal$1 || freeSelf || Function('return this')();
  var root$2 = root$1;

  /** Built-in value references. */
  var _Symbol = root$2.Symbol;
  var _Symbol$1 = _Symbol;

  /** Used for built-in method references. */
  var objectProto$i = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$h = objectProto$i.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$i.toString;

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol$1 ? _Symbol$1.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$h.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$h.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = _Symbol$1 ? _Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && _typeof$3(value) == 'object';
  }

  /** `Object#toString` result references. */
  var symbolTag$3 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return _typeof$3(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag$3;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  var isArray$1 = isArray;

  /** Used as references for various `Number` constants. */
  var INFINITY$4 = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol$1 ? _Symbol$1.prototype : undefined,
    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray$1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$4 ? '-0' : result;
  }

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = _typeof$3(value);
    return value != null && (type == 'object' || type == 'function');
  }

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber$1(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$3 = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber$1(value);
    if (value === INFINITY$3 || value === -INFINITY$3) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
      remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$1(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root$2['__core-js_shared__'];
  var coreJsData$1 = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}
      try {
        return func + '';
      } catch (e) {}
    }
    return '';
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
    objectProto$g = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$g = objectProto$g.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$g).replace(reRegExpChar$1, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = getNative(root$2, 'WeakMap');
  var WeakMap$2 = WeakMap$1;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = function () {
    function object() {}
    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();
  var baseCreate$1 = baseCreate;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop$2() {
    // No operation performed.
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
      length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
    HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
      lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function () {
      return value;
    };
  }

  var defineProperty$1 = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();
  var defineProperty$2 = defineProperty$1;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty$2 ? identity : function (func, string) {
    return defineProperty$2(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  var baseSetToString$1 = baseSetToString;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString$1);
  var setToString$1 = setToString;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
      length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = _typeof$3(value);
    length = length == null ? MAX_SAFE_INTEGER$2 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty$2) {
      defineProperty$2(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$f.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$f.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
      length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$3 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
        index = -1,
        length = nativeMax$3(args.length - start, 0),
        array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString$1(overRest(func, start, identity), func + '');
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction$1(value);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = _typeof$3(index);
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function (object, sources) {
      var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$e;
    return value === proto;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
      result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag$3;
  }

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$d.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$d.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty$e.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments$1 = isArguments;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  /** Detect free variable `exports`. */
  var freeExports$2 = (typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$2 = freeExports$2 && (typeof module === "undefined" ? "undefined" : _typeof$3(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

  /** Built-in value references. */
  var Buffer$1 = moduleExports$2 ? root$2.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;
  var isBuffer$1 = isBuffer;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$4 = '[object Boolean]',
    dateTag$4 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$6 = '[object Map]',
    numberTag$4 = '[object Number]',
    objectTag$4 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$4 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$4] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  /** Detect free variable `exports`. */
  var freeExports$1 = (typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && (typeof module === "undefined" ? "undefined" : _typeof$3(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal$1.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = function () {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;
      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();
  var nodeUtil$1 = nodeUtil;

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray$1 = isTypedArray;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$c.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray$1(value),
      isArg = !isArr && isArguments$1(value),
      isBuff = !isArr && !isArg && isBuffer$1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty$d.call(value, key)) && !(skipIndexes && (
      // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' ||
      // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') ||
      // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
      // Skip index properties.
      isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);
  var nativeKeys$1 = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$b.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys$1(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$c.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$a.hasOwnProperty;

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assign({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3 }
   */
  var assign$1 = createAssigner(function (object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty$b.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });
  var assign$2 = assign$1;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
      result = [];
    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$a.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray$1(value)) {
      return false;
    }
    var type = _typeof$3(value);
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');
  var nativeCreate$1 = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$8.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate$1) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }
    return hasOwnProperty$9.call(data, key) ? data[key] : undefined;
  }

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$7.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$8.call(data, key);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate$1 && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /* Built-in method references that are verified to be native. */
  var Map$1 = getNative(root$2, 'Map');
  var Map$2 = Map$1;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map$2 || ListCache)(),
      'string': new Hash()
    };
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = _typeof$3(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
      size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$2 = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    var _memoized = function memoized() {
      var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = _memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      _memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    _memoized.cache = new (memoize.Cache || MapCache)();
    return _memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = MapCache;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoizeCapped(function (string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var stringToPath$1 = stringToPath;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray$1(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath$1(toString(value));
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
      length = path.length;
    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index == length ? object : undefined;
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
      length = values.length,
      offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /** Built-in value references. */
  var spreadableSymbol = _Symbol$1 ? _Symbol$1.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray$1(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
      length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return setToString$1(overRest(func, undefined, flatten), func + '');
  }

  /** Built-in value references. */
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  var getPrototype$1 = getPrototype;

  /** `Object#toString` result references. */
  var objectTag$3 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
    objectProto$6 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$6.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
      return false;
    }
    var proto = getPrototype$1(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$7.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
      length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = "\\ud800-\\udfff",
    rsComboMarksRange$4 = "\\u0300-\\u036f",
    reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
    rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
    rsVarRange$3 = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsZWJ$3 = "\\u200d";

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3 + rsComboRange$4 + rsVarRange$3 + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
    rsComboMarksRange$3 = "\\u0300-\\u036f",
    reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsVarRange$2 = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
    rsCombo$3 = '[' + rsComboRange$3 + ']',
    rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
    rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
    rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
    rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ$2 = "\\u200d";

  /** Used to compose unicode regexes. */
  var reOptMod$2 = rsModifier$2 + '?',
    rsOptVar$2 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
    rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
    rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode$1) || [];
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */
  function createCaseFirst(methodName) {
    return function (string) {
      string = toString(string);
      var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */
  var upperFirst = createCaseFirst('toUpperCase');
  var upperFirst$1 = upperFirst;

  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */
  function capitalize(string) {
    return upperFirst$1(toString(string).toLowerCase());
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
      length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);
  var deburrLetter$1 = deburrLetter;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to compose unicode character classes. */
  var rsComboMarksRange$2 = "\\u0300-\\u036f",
    reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

  /** Used to compose unicode capture groups. */
  var rsCombo$2 = '[' + rsComboRange$2 + ']';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo$2, 'g');

  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter$1).replace(reComboMark, '');
  }

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
    rsComboMarksRange$1 = "\\u0300-\\u036f",
    reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsDingbatRange = "\\u2700-\\u27bf",
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = "\\u2000-\\u206f",
    rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange$1 = "\\ufe0e\\ufe0f",
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$1 = '[' + rsComboRange$1 + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
    rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
    rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$1 = "\\u200d";

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
  }

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]";

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder(callback) {
    return function (string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */
  var camelCase = createCompounder(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var camelCase$1 = camelCase;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$2 = Math.ceil,
    nativeMax$2 = Math.max;

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$2(toInteger(size), 0);
    }
    var length = array == null ? 0 : array.length;
    if (!length || size < 1) {
      return [];
    }
    var index = 0,
      resIndex = 0,
      result = Array(nativeCeil$2(length / size));
    while (index < length) {
      result[resIndex++] = baseSlice(array, index, index += size);
    }
    return result;
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
      result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$2 = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  /** Detect free variable `exports`. */
  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof$3(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root$2.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols$1 ? stubArray : function (object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var getSymbols$1 = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols$1(source), object);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols$1(object));
      object = getPrototype$1(object);
    }
    return result;
  };
  var getSymbolsIn$1 = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn$1(source), object);
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols$1);
  }

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
  }

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root$2, 'DataView');
  var DataView$1 = DataView;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = getNative(root$2, 'Promise');
  var Promise$2 = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set$1 = getNative(root$2, 'Set');
  var Set$2 = Set$1;

  /** `Object#toString` result references. */
  var mapTag$5 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$5 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView$1),
    mapCtorString = toSource(Map$2),
    promiseCtorString = toSource(Promise$2),
    setCtorString = toSource(Set$2),
    weakMapCtorString = toSource(WeakMap$2);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$2 && getTag(new Map$2()) != mapTag$5 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$5 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
    getTag = function getTag(value) {
      var result = baseGetTag(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;
          case mapCtorString:
            return mapTag$5;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$5;
          case weakMapCtorString:
            return weakMapTag$1;
        }
      }
      return result;
    };
  }
  var getTag$1 = getTag;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$4.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
      result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$6.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  /** Built-in value references. */
  var Uint8Array = root$2.Uint8Array;
  var Uint8Array$1 = Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol$1 ? _Symbol$1.prototype : undefined,
    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    mapTag$4 = '[object Map]',
    numberTag$3 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);
      case boolTag$3:
      case dateTag$3:
        return new Ctor(+object);
      case dataViewTag$2:
        return cloneDataView(object, isDeep);
      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);
      case mapTag$4:
        return new Ctor();
      case numberTag$3:
      case stringTag$3:
        return new Ctor(object);
      case regexpTag$2:
        return cloneRegExp(object);
      case setTag$4:
        return new Ctor();
      case symbolTag$2:
        return cloneSymbol(object);
    }
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};
  }

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike(value) && getTag$1(value) == mapTag$3;
  }

  /* Node.js helper references. */
  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  var isMap$1 = isMap;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike(value) && getTag$1(value) == setTag$3;
  }

  /* Node.js helper references. */
  var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  var isSet$1 = isSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$2 = 4;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$2 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$2] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$2,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray$1(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;
      if (isBuffer$1(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet$1(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap$1(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
    CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];
    while (++index < length) {
      var value = array[index];
      if (value) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
      length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      arrLength = array.length,
      othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
        othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
      result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
      result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1,
    COMPARE_UNORDERED_FLAG = 2;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag = '[object Error]',
    mapTag$1 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol$1 ? _Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
          return false;
        }
        return true;
      case boolTag$1:
      case dateTag$1:
      case numberTag$1:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag$1:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';
      case mapTag$1:
        var convert = mapToArray;
      case setTag$1:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1;

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$3.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
        othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
        othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$2.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$1(object),
      othIsArr = isArray$1(other),
      objTag = objIsArr ? arrayTag : getTag$1(object),
      othTag = othIsArr ? arrayTag : getTag$1(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;
    if (isSameTag && isBuffer$1(object)) {
      if (!isBuffer$1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray$1(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty$4.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$4.call(other, '__wrapped__');
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
      length = path.length,
      result = false;
    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments$1(object));
  }

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();
  var baseFor$1 = baseFor;

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now$1 = function now() {
    return root$2.Date.now();
  };
  var now$2 = now$1;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max,
    nativeMin$1 = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce$1(func, wait, options) {
    var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber$1(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs,
        thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now$2();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }
    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
      return timerId === undefined ? result : trailingEdge(now$2());
    }
    function debounced() {
      var time = now$2(),
        isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }
    if (key == '__proto__') {
      return;
    }
    return object[key];
  }

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
      var isArr = isArray$1(srcValue),
        isBuff = !isArr && isBuffer$1(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray$1(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments$1(srcValue)) {
        newValue = objValue;
        if (isArguments$1(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject(objValue) || isFunction$1(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor$1(source, function (srcValue, key) {
      stack || (stack = new Stack());
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */
  var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });
  var _mergeWith = mergeWith;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$1 = 200;

  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;
    if (!length) {
      return result;
    }
    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE$1) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }
    outer: while (++index < length) {
      var value = array[index],
        computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }
        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */
  var difference = baseRest(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
  });
  var difference$1 = difference;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    reHasRegExpChar = RegExp(reRegExpChar.source);

  /**
   * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
   * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escapeRegExp('[lodash](https://lodash.com/)');
   * // => '\[lodash\]\(https://lodash\.com/\)'
   */
  function escapeRegExp(string) {
    string = toString(string);
    return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Recursively flattens `array`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, [3, [4]], 5]]);
   * // => [1, 2, 3, 4, 5]
   */
  function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, INFINITY$1) : [];
  }

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$1.hasOwnProperty;

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    return object != null && hasOwnProperty$3.call(object, key);
  }

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has$3(object, path) {
    return object != null && hasPath(object, path, baseHas);
  }

  /** `Object#toString` result references. */
  var stringTag = '[object String]';

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' || !isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */
  function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith : arrayIncludes,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];
    while (othIndex--) {
      var array = arrays[othIndex];
      if (othIndex && iteratee) {
        array = arrayMap(array, baseUnary(iteratee));
      }
      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
    }
    array = arrays[0];
    var index = -1,
      seen = caches[0];
    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
        computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */
  function castArrayLikeObject(value) {
    return isArrayLikeObject(value) ? value : [];
  }

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */
  var intersection = baseRest(function (arrays) {
    var mapped = arrayMap(arrays, castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
  });
  var intersection$1 = intersection;

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]';

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
  }

  /** `Object#toString` result references. */
  var dateTag = '[object Date]';

  /**
   * The base implementation of `_.isDate` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   */
  function baseIsDate(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag;
  }

  /* Node.js helper references. */
  var nodeIsDate = nodeUtil$1 && nodeUtil$1.isDate;

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  var isDate$2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
  var isDate$3 = isDate$2;

  /** `Object#toString` result references. */
  var mapTag = '[object Map]',
    setTag = '[object Set]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto.hasOwnProperty;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) && (isArray$1(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {
      return !value.length;
    }
    var tag = getTag$1(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty$2.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /** `Object#toString` result references. */
  var numberTag = '[object Number]';

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN$1(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge$2 = createAssigner(function (object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  var merge$3 = merge$2;

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last$1(path))];
  }

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit$1 = flatRest(function (object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);
    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      baseUnset(result, paths[length]);
    }
    return result;
  });
  var omit$2 = omit$1;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }
    path = castPath(path, object);
    var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;
    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
        newValue = value;
      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, paths, predicate) {
    var index = -1,
      length = paths.length,
      result = {};
    while (++index < length) {
      var path = paths[index],
        value = baseGet(object, path);
      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    return result;
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor;

  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */
  function baseRepeat(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      if (n) {
        string += string;
      }
    } while (n);
    return result;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');
  var asciiSize$1 = asciiSize;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = "\\ud83c[\\udffb-\\udfff]",
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ = "\\u200d";

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize$1(string);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil;

  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */
  function createPadding(length, chars) {
    chars = chars === undefined ? ' ' : baseToString(chars);
    var charsLength = chars.length;
    if (charsLength < 2) {
      return charsLength ? baseRepeat(chars, length) : chars;
    }
    var result = baseRepeat(chars, nativeCeil$1(length / stringSize(chars)));
    return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
  }

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */
  function padStart(string, length, chars) {
    string = toString(string);
    length = toInteger(length);
    var strLength = length ? stringSize(string) : 0;
    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
  }

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick$1 = pick;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
    nativeMax = Math.max;

  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange(start, end, step, fromRight) {
    var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);
    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }
    return result;
  }

  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */
  function createRange(fromRight) {
    return function (start, end, step) {
      if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      // Ensure the sign of `-0` is preserved.
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
      return baseRange(start, end, step, fromRight);
    };
  }

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */
  var range = createRange();
  var range$1 = range;

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */
  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle$1(func, wait, options) {
    var leading = true,
      trailing = true;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce$1(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(Set$2 && 1 / setToArray(new Set$2([, -0]))[1] == INFINITY) ? noop$2 : function (values) {
    return new Set$2(values);
  };
  var createSet$1 = createSet;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet$1(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }
    outer: while (++index < length) {
      var value = array[index],
        computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString(prefix) + id;
  }

  /**
   * Removes the property at `path` of `object`.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 7 } }] };
   * _.unset(object, 'a[0].b.c');
   * // => true
   *
   * console.log(object);
   * // => { 'a': [{ 'b': {} }] };
   *
   * _.unset(object, ['a', '0', 'b', 'c']);
   * // => true
   *
   * console.log(object);
   * // => { 'a': [{ 'b': {} }] };
   */
  function unset(object, path) {
    return object == null ? true : baseUnset(object, path);
  }

  /**
   * The base implementation of methods like `_.xor`, without support for
   * iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of values.
   */
  function baseXor(arrays, iteratee, comparator) {
    var length = arrays.length;
    if (length < 2) {
      return length ? baseUniq(arrays[0]) : [];
    }
    var index = -1,
      result = Array(length);
    while (++index < length) {
      var array = arrays[index],
        othIndex = -1;
      while (++othIndex < length) {
        if (othIndex != index) {
          result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
        }
      }
    }
    return baseUniq(baseFlatten(result, 1), iteratee, comparator);
  }

  /**
   * This method is like `_.xor` except that it accepts `comparator` which is
   * invoked to compare elements of `arrays`. The order of result values is
   * determined by the order they occur in the arrays. The comparator is invoked
   * with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.xorWith(objects, others, _.isEqual);
   * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
   */
  var xorWith = baseRest(function (arrays) {
    var comparator = last$1(arrays);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
  });
  var xorWith$1 = xorWith;

  var defaultConfig = {
    classPrefix: "t",
    animation: {
      include: ["ripple", "expand", "fade"],
      exclude: []
    },
    attach: null,
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      controllerConfig: void 0
    },
    icon: {},
    input: {
      autocomplete: ""
    },
    dialog: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    message: {},
    popconfirm: {
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      expandIcon: void 0,
      sortIcon: void 0,
      filterIcon: void 0,
      treeExpandAndFoldIcon: void 0,
      hideSortTips: false,
      size: "medium"
    },
    select: {
      clearIcon: void 0,
      filterable: false
    },
    drawer: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      size: "small"
    },
    tree: {
      folderIcon: void 0
    },
    datePicker: {
      firstDayOfWeek: 1
    },
    steps: {
      checkIcon: void 0,
      errorIcon: void 0
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: void 0
    },
    empty: {
      titleText: {
        maintenance: void 0,
        success: void 0,
        fail: void 0,
        empty: void 0,
        networkError: void 0
      },
      image: {
        maintenance: void 0,
        success: void 0,
        fail: void 0,
        empty: void 0,
        networkError: void 0
      }
    }
  };

  var zhCn = {exports: {}};

  var dayjs_min = {exports: {}};

  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
        e = 6e4,
        n = 36e5,
        r = "millisecond",
        i = "second",
        s = "minute",
        u = "hour",
        a = "day",
        o = "week",
        c = "month",
        f = "quarter",
        h = "year",
        d = "date",
        l = "Invalid Date",
        $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
        y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
        M = {
          name: "en",
          weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
          months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
          ordinal: function ordinal(t) {
            var e = ["th", "st", "nd", "rd"],
              n = t % 100;
            return "[" + t + (e[(n - 20) % 10] || e[n] || e[0]) + "]";
          }
        },
        m = function m(t, e, n) {
          var r = String(t);
          return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
        },
        v = {
          s: m,
          z: function z(t) {
            var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
            return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
          },
          m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, c),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), c);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
          },
          a: function a(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
          },
          p: function p(t) {
            return {
              M: c,
              y: h,
              w: o,
              d: a,
              D: d,
              h: u,
              m: s,
              s: i,
              ms: r,
              Q: f
            }[t] || String(t || "").toLowerCase().replace(/s$/, "");
          },
          u: function u(t) {
            return void 0 === t;
          }
        },
        g = "en",
        D = {};
      D[g] = M;
      var p = "$isDayjsObject",
        S = function S(t) {
          return t instanceof _ || !(!t || !t[p]);
        },
        w = function t(e, n, r) {
          var i;
          if (!e) return g;
          if ("string" == typeof e) {
            var s = e.toLowerCase();
            D[s] && (i = s), n && (D[s] = n, i = s);
            var u = e.split("-");
            if (!i && u.length > 1) return t(u[0]);
          } else {
            var a = e.name;
            D[a] = e, i = a;
          }
          return !r && i && (g = i), i || !r && g;
        },
        O = function O(t, e) {
          if (S(t)) return t.clone();
          var n = "object" == _typeof$3(e) ? e : {};
          return n.date = t, n.args = arguments, new _(n);
        },
        b = v;
      b.l = w, b.i = S, b.w = function (t, e) {
        return O(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };
      var _ = function () {
          function M(t) {
            this.$L = w(t.locale, null, !0), this.parse(t), this.$x = this.$x || t.x || {}, this[p] = !0;
          }
          var m = M.prototype;
          return m.parse = function (t) {
            this.$d = function (t) {
              var e = t.date,
                n = t.utc;
              if (null === e) return new Date(NaN);
              if (b.u(e)) return new Date();
              if (e instanceof Date) return new Date(e);
              if ("string" == typeof e && !/Z$/i.test(e)) {
                var r = e.match($);
                if (r) {
                  var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                  return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                }
              }
              return new Date(e);
            }(t), this.init();
          }, m.init = function () {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
          }, m.$utils = function () {
            return b;
          }, m.isValid = function () {
            return !(this.$d.toString() === l);
          }, m.isSame = function (t, e) {
            var n = O(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
          }, m.isAfter = function (t, e) {
            return O(t) < this.startOf(e);
          }, m.isBefore = function (t, e) {
            return this.endOf(e) < O(t);
          }, m.$g = function (t, e, n) {
            return b.u(t) ? this[e] : this.set(n, t);
          }, m.unix = function () {
            return Math.floor(this.valueOf() / 1e3);
          }, m.valueOf = function () {
            return this.$d.getTime();
          }, m.startOf = function (t, e) {
            var n = this,
              r = !!b.u(e) || e,
              f = b.p(t),
              l = function l(t, e) {
                var i = b.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                return r ? i : i.endOf(a);
              },
              $ = function $(t, e) {
                return b.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
              },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              v = "set" + (this.$u ? "UTC" : "");
            switch (f) {
              case h:
                return r ? l(1, 0) : l(31, 11);
              case c:
                return r ? l(1, M) : l(0, M + 1);
              case o:
                var g = this.$locale().weekStart || 0,
                  D = (y < g ? y + 7 : y) - g;
                return l(r ? m - D : m + (6 - D), M);
              case a:
              case d:
                return $(v + "Hours", 0);
              case u:
                return $(v + "Minutes", 1);
              case s:
                return $(v + "Seconds", 2);
              case i:
                return $(v + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m.endOf = function (t) {
            return this.startOf(t, !1);
          }, m.$set = function (t, e) {
            var n,
              o = b.p(t),
              f = "set" + (this.$u ? "UTC" : ""),
              l = (n = {}, n[a] = f + "Date", n[d] = f + "Date", n[c] = f + "Month", n[h] = f + "FullYear", n[u] = f + "Hours", n[s] = f + "Minutes", n[i] = f + "Seconds", n[r] = f + "Milliseconds", n)[o],
              $ = o === a ? this.$D + (e - this.$W) : e;
            if (o === c || o === h) {
              var y = this.clone().set(d, 1);
              y.$d[l]($), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
            } else l && this.$d[l]($);
            return this.init(), this;
          }, m.set = function (t, e) {
            return this.clone().$set(t, e);
          }, m.get = function (t) {
            return this[b.p(t)]();
          }, m.add = function (r, f) {
            var d,
              l = this;
            r = Number(r);
            var $ = b.p(f),
              y = function y(t) {
                var e = O(l);
                return b.w(e.date(e.date() + Math.round(t * r)), l);
              };
            if ($ === c) return this.set(c, this.$M + r);
            if ($ === h) return this.set(h, this.$y + r);
            if ($ === a) return y(1);
            if ($ === o) return y(7);
            var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[$] || 1,
              m = this.$d.getTime() + r * M;
            return b.w(m, this);
          }, m.subtract = function (t, e) {
            return this.add(-1 * t, e);
          }, m.format = function (t) {
            var e = this,
              n = this.$locale();
            if (!this.isValid()) return n.invalidDate || l;
            var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = b.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              c = n.months,
              f = n.meridiem,
              h = function h(t, n, i, s) {
                return t && (t[n] || t(e, r)) || i[n].slice(0, s);
              },
              d = function d(t) {
                return b.s(s % 12 || 12, t, "0");
              },
              $ = f || function (t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
              };
            return r.replace(y, function (t, r) {
              return r || function (t) {
                switch (t) {
                  case "YY":
                    return String(e.$y).slice(-2);
                  case "YYYY":
                    return b.s(e.$y, 4, "0");
                  case "M":
                    return a + 1;
                  case "MM":
                    return b.s(a + 1, 2, "0");
                  case "MMM":
                    return h(n.monthsShort, a, c, 3);
                  case "MMMM":
                    return h(c, a);
                  case "D":
                    return e.$D;
                  case "DD":
                    return b.s(e.$D, 2, "0");
                  case "d":
                    return String(e.$W);
                  case "dd":
                    return h(n.weekdaysMin, e.$W, o, 2);
                  case "ddd":
                    return h(n.weekdaysShort, e.$W, o, 3);
                  case "dddd":
                    return o[e.$W];
                  case "H":
                    return String(s);
                  case "HH":
                    return b.s(s, 2, "0");
                  case "h":
                    return d(1);
                  case "hh":
                    return d(2);
                  case "a":
                    return $(s, u, !0);
                  case "A":
                    return $(s, u, !1);
                  case "m":
                    return String(u);
                  case "mm":
                    return b.s(u, 2, "0");
                  case "s":
                    return String(e.$s);
                  case "ss":
                    return b.s(e.$s, 2, "0");
                  case "SSS":
                    return b.s(e.$ms, 3, "0");
                  case "Z":
                    return i;
                }
                return null;
              }(t) || i.replace(":", "");
            });
          }, m.utcOffset = function () {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m.diff = function (r, d, l) {
            var $,
              y = this,
              M = b.p(d),
              m = O(r),
              v = (m.utcOffset() - this.utcOffset()) * e,
              g = this - m,
              D = function D() {
                return b.m(y, m);
              };
            switch (M) {
              case h:
                $ = D() / 12;
                break;
              case c:
                $ = D();
                break;
              case f:
                $ = D() / 3;
                break;
              case o:
                $ = (g - v) / 6048e5;
                break;
              case a:
                $ = (g - v) / 864e5;
                break;
              case u:
                $ = g / n;
                break;
              case s:
                $ = g / e;
                break;
              case i:
                $ = g / t;
                break;
              default:
                $ = g;
            }
            return l ? $ : b.a($);
          }, m.daysInMonth = function () {
            return this.endOf(c).$D;
          }, m.$locale = function () {
            return D[this.$L];
          }, m.locale = function (t, e) {
            if (!t) return this.$L;
            var n = this.clone(),
              r = w(t, e, !0);
            return r && (n.$L = r), n;
          }, m.clone = function () {
            return b.w(this.$d, this);
          }, m.toDate = function () {
            return new Date(this.valueOf());
          }, m.toJSON = function () {
            return this.isValid() ? this.toISOString() : null;
          }, m.toISOString = function () {
            return this.$d.toISOString();
          }, m.toString = function () {
            return this.$d.toUTCString();
          }, M;
        }(),
        k = _.prototype;
      return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function (t) {
        k[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), O.extend = function (t, e) {
        return t.$i || (t(e, _, O), t.$i = !0), O;
      }, O.locale = w, O.isDayjs = S, O.unix = function (t) {
        return O(1e3 * t);
      }, O.en = D[g], O.Ls = D, O.p = {}, O;
    });
  })(dayjs_min);
  var dayjs = dayjs_min.exports;

  (function (module, exports) {
    !function (e, _) {
      module.exports = _(dayjs_min.exports) ;
    }(commonjsGlobal, function (e) {

      function _(e) {
        return e && "object" == _typeof$3(e) && "default" in e ? e : {
          "default": e
        };
      }
      var t = _(e),
        d = {
          name: "zh-cn",
          weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
          weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
          weekdaysMin: "日_一_二_三_四_五_六".split("_"),
          months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
          monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
          ordinal: function ordinal(e, _) {
            return "W" === _ ? e + "周" : e + "日";
          },
          weekStart: 1,
          yearStart: 4,
          formats: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY/MM/DD",
            LL: "YYYY年M月D日",
            LLL: "YYYY年M月D日Ah点mm分",
            LLLL: "YYYY年M月D日ddddAh点mm分",
            l: "YYYY/M/D",
            ll: "YYYY年M月D日",
            lll: "YYYY年M月D日 HH:mm",
            llll: "YYYY年M月D日dddd HH:mm"
          },
          relativeTime: {
            future: "%s内",
            past: "%s前",
            s: "几秒",
            m: "1 分钟",
            mm: "%d 分钟",
            h: "1 小时",
            hh: "%d 小时",
            d: "1 天",
            dd: "%d 天",
            M: "1 个月",
            MM: "%d 个月",
            y: "1 年",
            yy: "%d 年"
          },
          meridiem: function meridiem(e, _) {
            var t = 100 * e + _;
            return t < 600 ? "凌晨" : t < 900 ? "早上" : t < 1100 ? "上午" : t < 1300 ? "中午" : t < 1800 ? "下午" : "晚上";
          }
        };
      return t["default"].locale(d, null, !0), d;
    });
  })(zhCn);

  var zhCN = {
    autoComplete: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {count} \u6761\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "1 \u6708,2 \u6708,3 \u6708,4 \u6708,5 \u6708,6 \u6708,7 \u6708,8 \u6708,9 \u6708,10 \u6708,11 \u6708,12 \u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      dayjsLocale: "zh-cn",
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A"
      },
      cancel: {
        content: "\u53D6\u6D88"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
      filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
      sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
      sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
      sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
      clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
      columnConfigButtonText: "\u5217\u914D\u7F6E",
      columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
      columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
      confirmText: "\u786E\u8BA4",
      cancelText: "\u53D6\u6D88",
      resetText: "\u91CD\u7F6E",
      selectAllText: "\u5168\u9009",
      searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      dayjsLocale: "zh-cn",
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD",
        quarter: "\u8BF7\u9009\u62E9\u5B63\u5EA6",
        week: "\u8BF7\u9009\u62E9\u5468"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      quarters: ["\u4E00\u5B63\u5EA6", "\u4E8C\u5B63\u5EA6", "\u4E09\u5B63\u5EA6", "\u56DB\u5B63\u5EA6"],
      rangeSeparator: " - ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    upload: {
      sizeLimitMessage: "\u6587\u4EF6\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
      triggerUploadText: {
        fileInput: "\u9009\u62E9\u6587\u4EF6",
        image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
        normal: "\u70B9\u51FB\u4E0A\u4F20",
        reupload: "\u91CD\u65B0\u9009\u62E9",
        continueUpload: "\u7EE7\u7EED\u9009\u62E9",
        "delete": "\u5220\u9664",
        uploading: "\u4E0A\u4F20\u4E2D"
      },
      dragger: {
        dragDropText: "\u91CA\u653E\u9F20\u6807",
        draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
        clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
      },
      file: {
        fileNameText: "\u6587\u4EF6\u540D",
        fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
        fileStatusText: "\u72B6\u6001",
        fileOperationText: "\u64CD\u4F5C",
        fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
      },
      progress: {
        uploadingText: "\u4E0A\u4F20\u4E2D",
        waitingText: "\u5F85\u4E0A\u4F20",
        failText: "\u4E0A\u4F20\u5931\u8D25",
        successText: "\u4E0A\u4F20\u6210\u529F"
      }
    },
    form: {
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        whitespace: "${name}\u4E0D\u80FD\u4E3A\u7A7A",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      },
      colonText: "\uFF1A"
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    },
    list: {
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
    },
    alert: {
      expandText: "\u5C55\u5F00\u66F4\u591A",
      collapseText: "\u6536\u8D77"
    },
    anchor: {
      copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
      copyText: "\u590D\u5236\u94FE\u63A5"
    },
    colorPicker: {
      swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
      recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
      clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F",
      singleColor: "\u5355\u8272",
      gradientColor: "\u6E10\u53D8"
    },
    guide: {
      finishButtonProps: {
        content: "\u5B8C\u6210",
        theme: "primary"
      },
      nextButtonProps: {
        content: "\u4E0B\u4E00\u6B65",
        theme: "primary"
      },
      skipButtonProps: {
        content: "\u8DF3\u8FC7",
        theme: "default"
      },
      prevButtonProps: {
        content: "\u4E0A\u4E00\u6B65",
        theme: "default"
      }
    },
    image: {
      errorText: "\u56FE\u7247\u65E0\u6CD5\u663E\u793A",
      loadingText: "\u56FE\u7247\u52A0\u8F7D\u4E2D"
    },
    imageViewer: {
      errorText: "\u56FE\u7247\u52A0\u8F7D\u5931\u8D25\uFF0C\u53EF\u5C1D\u8BD5\u91CD\u65B0\u52A0\u8F7D",
      mirrorTipText: "\u955C\u50CF",
      rotateTipText: "\u65CB\u8F6C",
      originalSizeTipText: "\u539F\u59CB\u5927\u5C0F"
    },
    typography: {
      expandText: "\u5C55\u5F00",
      collapseText: "\u6536\u8D77",
      copiedText: "\u590D\u5236\u6210\u529F"
    },
    rate: {
      rateText: ["\u6781\u5DEE", "\u5931\u671B", "\u4E00\u822C", "\u6EE1\u610F", "\u60CA\u559C"]
    },
    empty: {
      titleText: {
        maintenance: "\u5EFA\u8BBE\u4E2D",
        success: "\u6210\u529F",
        fail: "\u5931\u8D25",
        empty: "\u6682\u65E0\u6570\u636E",
        networkError: "\u7F51\u7EDC\u9519\u8BEF"
      }
    },
    descriptions: {
      colonText: "\uFF1A"
    },
    chat: {
      placeholder: "\u8BF7\u8F93\u5165\u6D88\u606F...",
      stopBtnText: "\u4E2D\u6B62",
      refreshTipText: "\u91CD\u65B0\u751F\u6210",
      copyTipText: "\u590D\u5236",
      likeTipText: "\u70B9\u8D5E",
      dislikeTipText: "\u70B9\u8E29",
      copyCodeBtnText: "\u590D\u5236\u4EE3\u7801",
      copyCodeSuccessText: "\u5DF2\u590D\u5236",
      clearHistoryBtnText: "\u6E05\u7A7A\u5386\u53F2\u8BB0\u5F55",
      copyTextSuccess: "\u5DF2\u6210\u529F\u590D\u5236\u5230\u526A\u8D34\u677F",
      copyTextFail: "\u590D\u5236\u5230\u526A\u8D34\u677F\u5931\u8D25",
      confirmClearHistory: "\u786E\u5B9A\u8981\u6E05\u7A7A\u6240\u6709\u7684\u6D88\u606F\u5417\uFF1F",
      loadingText: "\u601D\u8003\u4E2D...",
      loadingEndText: "\u5DF2\u6DF1\u5EA6\u601D\u8003",
      uploadImageText: "\u4E0A\u4F20\u56FE\u7247",
      uploadAttachmentText: "\u4E0A\u4F20\u9644\u4EF6"
    },
    qrcode: {
      expiredText: "\u4E8C\u7EF4\u7801\u8FC7\u671F",
      refreshText: "\u70B9\u51FB\u5237\u65B0",
      scannedText: "\u5DF2\u626B\u63CF"
    }
  };

  function ownKeys$3S(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3R(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3S(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3S(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var EAnimationType = /* @__PURE__ */function (EAnimationType2) {
    EAnimationType2["ripple"] = "ripple";
    EAnimationType2["expand"] = "expand";
    EAnimationType2["fade"] = "fade";
    return EAnimationType2;
  }(EAnimationType || {});
  var defaultClassPrefix = "t";
  var defaultAnimation = {
    include: ["ripple" /* ripple */, "expand" /* expand */, "fade" /* fade */],
    exclude: []
  };
  var defaultGlobalConfig = _objectSpread$3R({
    animation: defaultAnimation,
    classPrefix: defaultClassPrefix
  }, merge$3({}, zhCN, defaultConfig));
  var defaultContext = {
    globalConfig: defaultGlobalConfig
  };
  var ConfigContext$2 = /*#__PURE__*/React.createContext(defaultContext);

  var useConfig$2 = (function () {
    return React.useContext(ConfigContext$2).globalConfig;
  });

  function useDefaultProps(originalProps, defaultProps) {
    return React.useMemo(function () {
      var props = Object.assign({}, originalProps);
      Object.keys(defaultProps).forEach(function (key) {
        if (props[key] === void 0) {
          props[key] = defaultProps[key];
        }
      });
      return props;
    }, [originalProps, defaultProps]);
  }

  var _excluded$R = ["width", "className", "style", "children"];
  function ownKeys$3R(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3Q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3R(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3R(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Aside = function Aside(props) {
    var _useDefaultProps = useDefaultProps(props, {
        width: 232
      }),
      width = _useDefaultProps.width,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      children = _useDefaultProps.children,
      otherAsideProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$R);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var asideClassNames = classNames$1("".concat(classPrefix, "-layout__sider"), className);
    var asideWidth = isNaN(Number(width)) ? width : "".concat(width, "px");
    var asideStyle = _objectSpread$3Q({
      width: asideWidth,
      maxWidth: asideWidth,
      minWidth: asideWidth,
      flex: "0 0 ".concat(asideWidth)
    }, style);
    return /* @__PURE__ */React__default["default"].createElement("aside", _objectSpread$3Q({
      className: asideClassNames,
      style: asideStyle
    }, otherAsideProps), children);
  };
  Aside.displayName = "Aside";

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  function ownKeys$3Q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3P(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3Q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3Q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function parseTNode(renderNode, renderParams, defaultNode) {
    var node = null;
    if (typeof renderNode === "function") {
      node = renderNode(renderParams);
    } else if (renderNode === true) {
      node = defaultNode;
    } else if (renderNode !== null) {
      node = renderNode !== null && renderNode !== void 0 ? renderNode : defaultNode;
    }
    return node;
  }
  function parseContentTNode(tnode, props) {
    if (isFunction$1(tnode)) return tnode(props);
    if (!tnode || ["string", "number", "boolean"].includes(_typeof$3(tnode))) return tnode;
    try {
      return /*#__PURE__*/React__default["default"].cloneElement(tnode, _objectSpread$3P({}, props));
    } catch (e) {
      log.warn("parseContentTNode", "".concat(tnode, " is not a valid ReactNode"));
      return null;
    }
  }

  var _excluded$Q = ["className", "style", "children", "height"],
    _excluded2$6 = ["className", "style", "children", "height"],
    _excluded3 = ["className", "style", "children", "content"],
    _excluded4 = ["direction", "className", "style", "children"];
  function ownKeys$3P(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3O(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3P(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3P(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Header$1 = function Header(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var className = props.className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      children = props.children,
      height = props.height,
      others = _objectWithoutProperties$2(props, _excluded$Q);
    var renderHeight = isNaN(Number(height)) ? height : "".concat(height, "px");
    var headerClassNames = classNames$1("".concat(classPrefix, "-layout__header"), className);
    return /* @__PURE__ */React__default["default"].createElement("header", _objectSpread$3O({
      className: headerClassNames,
      style: _objectSpread$3O({
        height: renderHeight
      }, style)
    }, others), parseTNode(children));
  };
  var Footer = function Footer(props) {
    var _useConfig2 = useConfig$2(),
      classPrefix = _useConfig2.classPrefix;
    var className = props.className,
      _props$style2 = props.style,
      style = _props$style2 === void 0 ? {} : _props$style2,
      children = props.children,
      height = props.height,
      others = _objectWithoutProperties$2(props, _excluded2$6);
    var renderHeight = isNaN(Number(height)) ? height : "".concat(height, "px");
    var footerClassNames = classNames$1("".concat(classPrefix, "-layout__footer"), className);
    return /* @__PURE__ */React__default["default"].createElement("footer", _objectSpread$3O({
      className: footerClassNames,
      style: _objectSpread$3O({
        height: renderHeight
      }, style)
    }, others), parseTNode(children));
  };
  var Content = function Content(props) {
    var _useConfig3 = useConfig$2(),
      classPrefix = _useConfig3.classPrefix;
    var className = props.className,
      style = props.style,
      children = props.children,
      content = props.content,
      others = _objectWithoutProperties$2(props, _excluded3);
    var contentClassNames = classNames$1("".concat(classPrefix, "-layout__content"), className);
    return /* @__PURE__ */React__default["default"].createElement("main", _objectSpread$3O({
      className: contentClassNames,
      style: style
    }, others), parseTNode(content) || parseTNode(children));
  };
  var Layout$1 = function Layout(props) {
    var direction = props.direction,
      className = props.className,
      style = props.style,
      children = props.children,
      otherLayoutProps = _objectWithoutProperties$2(props, _excluded4);
    var shouldAsides = React.useMemo(function () {
      var asides = [];
      React__default["default"].Children.forEach(children, function (child) {
        if (!child || _typeof$3(child) !== "object") {
          return;
        }
        if (child.type === Aside) {
          asides.push(child);
        }
      });
      return !!asides.length;
    }, [children]);
    var _useConfig4 = useConfig$2(),
      classPrefix = _useConfig4.classPrefix;
    var layoutClassNames = classNames$1("".concat(classPrefix, "-layout"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-layout--with-sider"), shouldAsides), "".concat(classPrefix, "-layout__direction-").concat(direction), direction), className);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$3O({
      className: layoutClassNames,
      style: style
    }, otherLayoutProps), parseTNode(children));
  };
  Layout$1.Header = Header$1;
  Layout$1.Content = Content;
  Layout$1.Footer = Footer;
  Layout$1.Aside = Aside;
  Header$1.displayName = "Header";
  Content.displayName = "Content";
  Footer.displayName = "Footer";
  Layout$1.displayName = "Layout";

  var Layout = Layout$1;

  function _arrayWithHoles$1(r) {
    if (Array.isArray(r)) return r;
  }

  function _iterableToArrayLimit$1(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }

  function _arrayLikeToArray$6(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _unsupportedIterableToArray$6(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$6(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$6(r, a) : void 0;
    }
  }

  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray$1(r, e) {
    return _arrayWithHoles$1(r) || _iterableToArrayLimit$1(r, e) || _unsupportedIterableToArray$6(r, e) || _nonIterableRest$1();
  }

  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };
  function hasClass$1(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");
    if (el.classList) {
      return el.classList.contains(cls);
    }
    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  var addClass$1 = function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;
      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass$1(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }
    if (!el.classList) {
      el.className = curClass;
    }
  };
  var removeClass$2 = function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;
      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass$1(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }
    if (!el.classList) {
      el.className = trim(curClass);
    }
  };
  var getCssVarsValue = function getCssVarsValue(name, element) {
    if (!canUseDocument) return;
    var el = element || document.documentElement;
    return getComputedStyle(el).getPropertyValue(name);
  };

  var canUseDocument = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var isWindow = function isWindow(val) {
    return val === window;
  };
  var getAttach$1 = function getAttach(node) {
    var attachNode = typeof node === "function" ? node() : node;
    if (!attachNode) {
      return document.body;
    }
    if (isString(attachNode)) {
      return document.querySelector(attachNode);
    }
    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }
    return document.body;
  };
  function elementInViewport(elm, parent) {
    var rect = elm.getBoundingClientRect();
    if (parent) {
      var parentRect = parent.getBoundingClientRect();
      return rect.top >= parentRect.top && rect.left >= parentRect.left && rect.bottom <= parentRect.bottom && rect.right <= parentRect.right;
    }
    return rect.top >= 0 && rect.left >= 0 && rect.bottom + 80 <= window.innerHeight && rect.right <= window.innerWidth;
  }
  function isFixed(element) {
    var p = element.parentNode;
    if (!p || p.nodeName === "HTML") {
      return false;
    }
    if (getCssVarsValue("position", element) === "fixed") {
      return true;
    }
    return isFixed(p);
  }
  function getWindowSize() {
    if (canUseDocument) {
      return {
        width: window.innerWidth,
        height: window.innerHeight
      };
    }
    return {
      width: 0,
      height: 0
    };
  }

  var rowDefaultProps = {
    align: "top",
    gutter: 0,
    justify: "start",
    tag: "div"
  };
  var colDefaultProps = {
    offset: 0,
    order: 0,
    pull: 0,
    push: 0,
    tag: "div"
  };

  var _excluded$P = ["align", "gutter", "justify", "tag", "style", "className", "children"];
  function ownKeys$3O(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3N(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3O(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3O(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var calcSize = function calcSize(width) {
    var smWidth = parseFloat(getCssVarsValue("--td-screen-sm") || "768");
    var mdWidth = parseFloat(getCssVarsValue("--td-screen-md") || "992");
    var lgWidth = parseFloat(getCssVarsValue("--td-screen-lg") || "1200");
    var xlWidth = parseFloat(getCssVarsValue("--td-screen-xl") || "1400");
    var xxlWidth = parseFloat(getCssVarsValue("--td-screen-xxl") || "1880");
    var size = "xs";
    if (width >= xxlWidth) {
      size = "xxl";
    } else if (width >= xlWidth) {
      size = "xl";
    } else if (width >= lgWidth) {
      size = "lg";
    } else if (width >= mdWidth) {
      size = "md";
    } else if (width >= smWidth) {
      size = "sm";
    } else {
      size = "xs";
    }
    return size;
  };
  var calcRowStyle = function calcRowStyle(gutter, currentSize) {
    var rowStyle = {};
    if (typeof gutter === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter / -2, "px"),
        marginRight: "".concat(gutter / -2, "px")
      });
    } else if (Array.isArray(gutter) && gutter.length) {
      if (typeof gutter[0] === "number") {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[0] / -2, "px"),
          marginRight: "".concat(gutter[0] / -2, "px")
        });
      }
      if (typeof gutter[1] === "number") {
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[1], "px")
        });
      }
      if (isObject(gutter[0]) && gutter[0][currentSize] !== void 0) {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
          marginRight: "".concat(gutter[0][currentSize] / -2, "px")
        });
      }
      if (isObject(gutter[1]) && gutter[1][currentSize] !== void 0) {
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[1][currentSize], "px")
        });
      }
    } else if (isObject(gutter) && gutter[currentSize]) {
      if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
          marginRight: "".concat(gutter[currentSize][0] / -2, "px")
        });
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[currentSize][1], "px")
        });
      } else {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[currentSize] / -2, "px"),
          marginRight: "".concat(gutter[currentSize] / -2, "px")
        });
      }
    }
    return rowStyle;
  };
  var RowContext = /*#__PURE__*/React.createContext({
    gutter: void 0,
    size: void 0
  });
  var Row$2 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, rowDefaultProps),
      align = _useDefaultProps.align,
      gutter = _useDefaultProps.gutter,
      justify = _useDefaultProps.justify,
      tag = _useDefaultProps.tag,
      propStyle = _useDefaultProps.style,
      className = _useDefaultProps.className,
      children = _useDefaultProps.children,
      otherRowProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$P);
    var _useState = React.useState(function () {
        return canUseDocument ? calcSize(window.innerWidth) : "md";
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];
    var updateSize = function updateSize() {
      var currentSize = calcSize(window.innerWidth);
      if (currentSize !== size) {
        setSize(size);
      }
    };
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var rowClassNames = classNames$1("".concat(classPrefix, "-row"), className, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-row--").concat(justify), true), "".concat(classPrefix, "-row--").concat(align), true));
    var rowStyle = _objectSpread$3N(_objectSpread$3N({}, calcRowStyle(gutter, size)), propStyle);
    React.useEffect(function () {
      window.addEventListener("resize", updateSize);
      return function () {
        window.removeEventListener("resize", updateSize);
      };
    });
    return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread$3N({
      ref: ref,
      className: rowClassNames,
      style: rowStyle
    }, otherRowProps), /* @__PURE__ */React__default["default"].createElement(RowContext.Provider, {
      value: {
        gutter: gutter,
        size: size
      }
    }, children));
  });
  Row$2.displayName = "Row";

  var _excluded$O = ["flex", "offset", "order", "pull", "push", "span", "tag", "className", "children", "style"];
  function ownKeys$3N(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3M(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3N(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3N(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var calcColPadding = function calcColPadding(gutter, currentSize) {
    var paddingObj = {};
    if (typeof gutter === "number") {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter / 2, "px"),
        paddingRight: "".concat(gutter / 2, "px")
      });
    } else if (Array.isArray(gutter) && gutter.length) {
      if (typeof gutter[0] === "number") {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[0] / 2, "px"),
          paddingRight: "".concat(gutter[0] / 2, "px")
        });
      }
      if (isObject(gutter[0]) && gutter[0][currentSize]) {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
          paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
        });
      }
    } else if (isObject(gutter) && gutter[currentSize]) {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
        paddingRight: "".concat(gutter[currentSize] / 2, "px")
      });
    }
    return paddingObj;
  };
  var parseFlex = function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " auto");
    }
    if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }
    return flex;
  };
  var Col$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, colDefaultProps),
      flex = _useDefaultProps.flex,
      offset = _useDefaultProps.offset,
      order = _useDefaultProps.order,
      pull = _useDefaultProps.pull,
      push = _useDefaultProps.push,
      span = _useDefaultProps.span,
      tag = _useDefaultProps.tag,
      className = _useDefaultProps.className,
      children = _useDefaultProps.children,
      propStyle = _useDefaultProps.style,
      otherColProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$O);
    var _useContext = React.useContext(RowContext),
      rowGutter = _useContext.gutter,
      rowSize = _useContext.size;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
    var sizeClasses = allSizes.reduce(function (acc, currSize) {
      var sizeProp = props[currSize];
      var sizeObj = {};
      if (typeof sizeProp === "number") {
        sizeObj.span = sizeProp;
      } else if (isObject(sizeProp)) {
        sizeObj = sizeProp || {};
      }
      return _objectSpread$3M(_objectSpread$3M({}, acc), {}, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-col-").concat(currSize, "-").concat(sizeObj.span), sizeObj.span !== void 0), "".concat(classPrefix, "-col-").concat(currSize, "-order-").concat(sizeObj.order), parseInt(sizeObj.order, 10) >= 0), "".concat(classPrefix, "-col-").concat(currSize, "-offset-").concat(sizeObj.offset), parseInt(sizeObj.offset, 10) >= 0), "".concat(classPrefix, "-col-").concat(currSize, "-push-").concat(sizeObj.push), parseInt(sizeObj.push, 10) >= 0), "".concat(classPrefix, "-col-").concat(currSize, "-pull-").concat(sizeObj.pull), parseInt(sizeObj.pull, 10) >= 0));
    }, {});
    var colClassNames = classNames$1("".concat(classPrefix, "-col"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-col-").concat(span), span !== void 0), "".concat(classPrefix, "-col-offset-").concat(offset), parseInt(offset, 10) >= 0), "".concat(classPrefix, "-col-pull-").concat(pull), parseInt(pull, 10) >= 0), "".concat(classPrefix, "-col-push-").concat(push), parseInt(push, 10) >= 0), "".concat(classPrefix, "-col-order-").concat(order), parseInt(order, 10) >= 0), sizeClasses);
    var colStyle = _objectSpread$3M(_objectSpread$3M({}, calcColPadding(rowGutter, rowSize)), propStyle);
    flex && (colStyle.flex = parseFlex(flex));
    return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread$3M({
      ref: ref,
      className: colClassNames,
      style: colStyle
    }, otherColProps), children);
  });
  Col$1.displayName = "Col";

  var Row$1 = Row$2;
  var Col = Col$1;

  var useIsomorphicLayoutEffect = canUseDocument ? React.useLayoutEffect : React.useEffect;

  function getAttach(attach, triggerNode) {
    if (!canUseDocument) return null;
    var el;
    if (typeof attach === "string") {
      el = document.querySelector(attach);
    }
    if (typeof attach === "function") {
      el = attach(triggerNode);
    }
    if (_typeof$3(attach) === "object" && attach instanceof window.HTMLElement) {
      el = attach;
    }
    if (el && el.nodeType === 1) return el;
    return document.body;
  }
  var Portal = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var attach = props.attach,
      children = props.children,
      triggerNode = props.triggerNode;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var container = React.useMemo(function () {
      if (!canUseDocument) return null;
      var el = document.createElement("div");
      el.className = "".concat(classPrefix, "-portal-wrapper");
      return el;
    }, [classPrefix]);
    useIsomorphicLayoutEffect(function () {
      var _parentElement$append;
      var parentElement = getAttach(attach, triggerNode);
      parentElement === null || parentElement === void 0 || (_parentElement$append = parentElement.appendChild) === null || _parentElement$append === void 0 || _parentElement$append.call(parentElement, container);
      return function () {
        var _parentElement$remove;
        parentElement === null || parentElement === void 0 || (_parentElement$remove = parentElement.removeChild) === null || _parentElement$remove === void 0 || _parentElement$remove.call(parentElement, container);
      };
    }, [container, attach, triggerNode]);
    React.useImperativeHandle(ref, function () {
      return container;
    });
    return canUseDocument ? /*#__PURE__*/ReactDOM.createPortal(children, container) : null;
  });
  Portal.displayName = "Portal";

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$6(r);
  }

  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$6(r) || _nonIterableSpread();
  }

  function getIEVersion() {
    if (typeof navigator === "undefined" || !navigator) return Number.MAX_SAFE_INTEGER;
    var _navigator = navigator,
      userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;
    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }
    if (isIE11) {
      return 11;
    }
    return Number.MAX_SAFE_INTEGER;
  }
  function getFlexGapPolyFill() {
    var _chromeMatch$, _safariMatch$, _fireFoxMatch$;
    if (typeof navigator === "undefined" || !navigator) return false;
    var ua = navigator.userAgent;
    var chromeMatch = ua.match(/AppleWebKit.+Chrome\/(.+) Safari\/.+/i);
    if (Number(chromeMatch === null || chromeMatch === void 0 || (_chromeMatch$ = chromeMatch[1]) === null || _chromeMatch$ === void 0 ? void 0 : _chromeMatch$.split(".")[0]) < 100) return true;
    var safariMatch = ua.match(/AppleWebKit.+Version\/(.+) Safari\/.+/i);
    if (Number(safariMatch === null || safariMatch === void 0 || (_safariMatch$ = safariMatch[1]) === null || _safariMatch$ === void 0 ? void 0 : _safariMatch$.split(".")[0]) < 12) return true;
    var ieVersion = getIEVersion();
    if (ieVersion <= 11) return true;
    var fireFoxMatch = ua.match(/Firefox\/(.+)/i);
    if (Number(fireFoxMatch === null || fireFoxMatch === void 0 || (_fireFoxMatch$ = fireFoxMatch[1]) === null || _fireFoxMatch$ === void 0 ? void 0 : _fireFoxMatch$.split(".")[0]) < 100) return true;
    return false;
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = isNumber(maxCharacter);
    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }
      return 0;
    }
    var len = 0;
    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;
      if (str.charCodeAt(i) > 127) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }
      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }
      len += currentStringLength;
    }
    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }
    return len;
  }
  function getUnicodeLength(str) {
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").length;
  }
  function limitUnicodeMaxLength(str, maxLength, oldStr) {
    if (_toConsumableArray(oldStr !== null && oldStr !== void 0 ? oldStr : "").slice().length === maxLength) return oldStr || "";
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").slice(0, maxLength).join("");
  }
  var DOM_STYLE_PROPS = ["padding-top", "padding-bottom", "padding-left", "padding-right", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "border-width", "box-sizing", "line-height", "letter-spacing"];
  function calculateNodeSize(targetElement) {
    if (typeof window === "undefined") {
      return {
        paddingSize: 0,
        borderSize: 0,
        boxSizing: 0,
        sizingStyle: ""
      };
    }
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = DOM_STYLE_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing,
      sizingStyle: sizingStyle
    };
  }

  function ownKeys$3M(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3L(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3M(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3M(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2;
    var basicStyle = {};
    if (!circleElem || typeof window === "undefined") {
      return;
    }
    var _window$getComputedSt = (_window = window) === null || _window === void 0 || (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
      color = _window$getComputedSt.color,
      fontSize = _window$getComputedSt.fontSize;
    var ua = (_window2 = window) === null || _window2 === void 0 || (_window2 = _window2.navigator) === null || _window2 === void 0 ? void 0 : _window2.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
    var isIosWechat = /(?=.*iPhone)[?=.*MicroMessenger]/.test(ua) && !/Chrome/.test(ua);
    var isIpadWechat = /(?=.*iPad)[?=.*MicroMessenger]/.test(ua) && !/Chrome/.test(ua);
    if (isSafari || isIosWechat || isIpadWechat) {
      basicStyle = {
        transformOrigin: "0px 0px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 12, ")")
      };
    }
    if (color && getIEVersion() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle(circleElem, _objectSpread$3L(_objectSpread$3L({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle(circleElem, _objectSpread$3L(_objectSpread$3L({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  function useDomRefCallback() {
    var _useState = React.useState(),
      _useState2 = _slicedToArray$1(_useState, 2),
      refCurrent = _useState2[0],
      setRefCurrent = _useState2[1];
    React.useCallback(function (dom) {
      if (dom) setRefCurrent(dom);
    }, []);
    return [refCurrent, setRefCurrent];
  }

  var GradientLoading = function GradientLoading() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      conicRef = _useDomRefCallback2[0],
      setConicRef = _useDomRefCallback2[1];
    var gradientClass = "".concat(classPrefix, "-loading__gradient");
    React.useEffect(function () {
      var el = conicRef;
      circleAdapter(el);
    }, [conicRef]);
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      className: classNames$1(gradientClass, "".concat(classPrefix, "-icon-loading")),
      viewBox: "0 0 12 12",
      version: "1.1",
      width: "1em",
      height: "1em",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("foreignObject", {
      x: "0",
      y: "0",
      width: "12",
      height: "12"
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(gradientClass, "-conic"),
      ref: setConicRef
    })));
  };

  var loadingDefaultProps = {
    delay: 0,
    fullscreen: false,
    indicator: true,
    inheritColor: false,
    loading: true,
    preventScrollThrough: true,
    showOverlay: true,
    size: "medium"
  };

  function ownKeys$3L(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3K(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3L(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3L(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Loading$1 = function Loading(props) {
    var _useDefaultProps = useDefaultProps(props, loadingDefaultProps),
      attach = _useDefaultProps.attach,
      indicator = _useDefaultProps.indicator,
      text = _useDefaultProps.text,
      loading = _useDefaultProps.loading,
      size = _useDefaultProps.size,
      delay = _useDefaultProps.delay,
      fullscreen = _useDefaultProps.fullscreen,
      preventScrollThrough = _useDefaultProps.preventScrollThrough,
      showOverlay = _useDefaultProps.showOverlay,
      content = _useDefaultProps.content,
      children = _useDefaultProps.children,
      inheritColor = _useDefaultProps.inheritColor,
      zIndex = _useDefaultProps.zIndex,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style;
    var _useState = React.useState(function () {
        return delay ? false : loading;
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      showLoading = _useState2[0],
      setShowLoading = _useState2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var name = "".concat(classPrefix, "-loading");
    var centerClass = "".concat(classPrefix, "-loading--center");
    var inheritColorClass = "".concat(classPrefix, "-loading--inherit-color");
    var fullClass = "".concat(classPrefix, "-loading--full");
    var fullscreenClass = "".concat(classPrefix, "-loading__fullscreen");
    var lockClass = "".concat(classPrefix, "-loading--lock");
    var overlayClass = "".concat(classPrefix, "-loading__overlay");
    var relativeClass = "".concat(classPrefix, "-loading__parent");
    var textClass = "".concat(classPrefix, "-loading__text");
    React.useEffect(function () {
      var timer;
      if (delay && loading) {
        timer = setTimeout(function () {
          setShowLoading(loading);
        }, delay);
      } else {
        setShowLoading(loading);
      }
      return function () {
        clearTimeout(timer);
      };
    }, [delay, loading]);
    var calcStyles = React.useMemo(function () {
      var styles = {};
      if (zIndex !== void 0) {
        styles.zIndex = zIndex;
      }
      if (!["small", "medium", "large"].includes(size)) {
        styles.fontSize = size;
      }
      return styles;
    }, [size, zIndex]);
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s"),
      medium: "".concat(classPrefix, "-size-m")
    };
    var baseClasses = classNames$1(centerClass, sizeMap[size], _defineProperty$2({}, inheritColorClass, inheritColor), className);
    React.useEffect(function () {
      if (preventScrollThrough && fullscreen && canUseDocument && loading) {
        addClass$1(document.body, lockClass);
      }
      return function () {
        removeClass$2(document.body, lockClass);
      };
    }, [loading, preventScrollThrough, fullscreen, lockClass]);
    var commonContent = function commonContent() {
      var renderIndicator = /* @__PURE__ */React__default["default"].createElement(GradientLoading, null);
      if (indicator && typeof indicator !== "boolean") {
        renderIndicator = indicator;
      }
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, indicator ? renderIndicator : null, text ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: textClass
      }, text) : null);
    };
    if (fullscreen) {
      return loading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, fullscreenClass, centerClass, overlayClass),
        style: _objectSpread$3K(_objectSpread$3K({}, calcStyles), style)
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: baseClasses
      }, commonContent())) : null;
    }
    if (content || children) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: relativeClass,
        style: style
      }, content || children, showLoading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, baseClasses, fullClass, _defineProperty$2({}, overlayClass, showOverlay)),
        style: calcStyles
      }, commonContent()) : null);
    }
    if (attach) {
      return /* @__PURE__ */React__default["default"].createElement(Portal, {
        attach: attach
      }, loading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, baseClasses, fullClass, _defineProperty$2({}, overlayClass, showOverlay)),
        style: _objectSpread$3K(_objectSpread$3K({}, calcStyles), style)
      }, commonContent()) : null);
    }
    return loading ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, baseClasses),
      style: _objectSpread$3K(_objectSpread$3K({}, calcStyles), style)
    }, commonContent()) : null;
  };
  Loading$1.displayName = "Loading";

  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }

  var regeneratorRuntime$1 = {exports: {}};

  var _typeof$2 = {exports: {}};

  (function (module) {
    function _typeof(o) {
      "@babel/helpers - typeof";

      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof$2);

  (function (module) {
    var _typeof = _typeof$2.exports["default"];
    function _regeneratorRuntime() {

      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
      module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return e;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t,
        e = {},
        r = Object.prototype,
        n = r.hasOwnProperty,
        o = Object.defineProperty || function (t, e, r) {
          t[e] = r.value;
        },
        i = "function" == typeof Symbol ? Symbol : {},
        a = i.iterator || "@@iterator",
        c = i.asyncIterator || "@@asyncIterator",
        u = i.toStringTag || "@@toStringTag";
      function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), t[e];
      }
      try {
        define({}, "");
      } catch (t) {
        define = function define(t, e, r) {
          return t[e] = r;
        };
      }
      function wrap(t, e, r, n) {
        var i = e && e.prototype instanceof Generator ? e : Generator,
          a = Object.create(i.prototype),
          c = new Context(n || []);
        return o(a, "_invoke", {
          value: makeInvokeMethod(t, r, c)
        }), a;
      }
      function tryCatch(t, e, r) {
        try {
          return {
            type: "normal",
            arg: t.call(e, r)
          };
        } catch (t) {
          return {
            type: "throw",
            arg: t
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart",
        l = "suspendedYield",
        f = "executing",
        s = "completed",
        y = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      var p = {};
      define(p, a, function () {
        return this;
      });
      var d = Object.getPrototypeOf,
        v = d && d(d(values([])));
      v && v !== r && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t) {
        ["next", "throw", "return"].forEach(function (e) {
          define(t, e, function (t) {
            return this._invoke(e, t);
          });
        });
      }
      function AsyncIterator(t, e) {
        function invoke(r, o, i, a) {
          var c = tryCatch(t[r], t, o);
          if ("throw" !== c.type) {
            var u = c.arg,
              h = u.value;
            return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
              invoke("next", t, i, a);
            }, function (t) {
              invoke("throw", t, i, a);
            }) : e.resolve(h).then(function (t) {
              u.value = t, i(u);
            }, function (t) {
              return invoke("throw", t, i, a);
            });
          }
          a(c.arg);
        }
        var r;
        o(this, "_invoke", {
          value: function value(t, n) {
            function callInvokeWithMethodAndArg() {
              return new e(function (e, r) {
                invoke(t, n, e, r);
              });
            }
            return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e, r, n) {
        var o = h;
        return function (i, a) {
          if (o === f) throw Error("Generator is already running");
          if (o === s) {
            if ("throw" === i) throw a;
            return {
              value: t,
              done: !0
            };
          }
          for (n.method = i, n.arg = a;;) {
            var c = n.delegate;
            if (c) {
              var u = maybeInvokeDelegate(c, n);
              if (u) {
                if (u === y) continue;
                return u;
              }
            }
            if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
              if (o === h) throw o = s, n.arg;
              n.dispatchException(n.arg);
            } else "return" === n.method && n.abrupt("return", n.arg);
            o = f;
            var p = tryCatch(e, r, n);
            if ("normal" === p.type) {
              if (o = n.done ? s : l, p.arg === y) continue;
              return {
                value: p.arg,
                done: n.done
              };
            }
            "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
          }
        };
      }
      function maybeInvokeDelegate(e, r) {
        var n = r.method,
          o = e.iterator[n];
        if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
        var i = tryCatch(o, e.iterator, r.arg);
        if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
        var a = i.arg;
        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
      }
      function pushTryEntry(t) {
        var e = {
          tryLoc: t[0]
        };
        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
      }
      function resetTryEntry(t) {
        var e = t.completion || {};
        e.type = "normal", delete e.arg, t.completion = e;
      }
      function Context(t) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t.forEach(pushTryEntry, this), this.reset(!0);
      }
      function values(e) {
        if (e || "" === e) {
          var r = e[a];
          if (r) return r.call(e);
          if ("function" == typeof e.next) return e;
          if (!isNaN(e.length)) {
            var o = -1,
              i = function next() {
                for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
                return next.value = t, next.done = !0, next;
              };
            return i.next = i;
          }
        }
        throw new TypeError(_typeof(e) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: !0
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: !0
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
        var e = "function" == typeof t && t.constructor;
        return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
      }, e.mark = function (t) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
      }, e.awrap = function (t) {
        return {
          __await: t
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
        return this;
      }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
        void 0 === i && (i = Promise);
        var a = new AsyncIterator(wrap(t, r, n, o), i);
        return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
          return t.done ? t.value : a.next();
        });
      }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
        return this;
      }), define(g, "toString", function () {
        return "[object Generator]";
      }), e.keys = function (t) {
        var e = Object(t),
          r = [];
        for (var n in e) r.push(n);
        return r.reverse(), function next() {
          for (; r.length;) {
            var t = r.pop();
            if (t in e) return next.value = t, next.done = !1, next;
          }
          return next.done = !0, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
        },
        stop: function stop() {
          this.done = !0;
          var t = this.tryEntries[0].completion;
          if ("throw" === t.type) throw t.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e) {
          if (this.done) throw e;
          var r = this;
          function handle(n, o) {
            return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
          }
          for (var o = this.tryEntries.length - 1; o >= 0; --o) {
            var i = this.tryEntries[o],
              a = i.completion;
            if ("root" === i.tryLoc) return handle("end");
            if (i.tryLoc <= this.prev) {
              var c = n.call(i, "catchLoc"),
                u = n.call(i, "finallyLoc");
              if (c && u) {
                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
              } else if (c) {
                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              } else {
                if (!u) throw Error("try statement without catch or finally");
                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t, e) {
          for (var r = this.tryEntries.length - 1; r >= 0; --r) {
            var o = this.tryEntries[r];
            if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
              var i = o;
              break;
            }
          }
          i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
          var a = i ? i.completion : {};
          return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
        },
        complete: function complete(t, e) {
          if ("throw" === t.type) throw t.arg;
          return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
        },
        finish: function finish(t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
          }
        },
        "catch": function _catch(t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.tryLoc === t) {
              var n = r.completion;
              if ("throw" === n.type) {
                var o = n.arg;
                resetTryEntry(r);
              }
              return o;
            }
          }
          throw Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e, r, n) {
          return this.delegate = {
            iterator: values(e),
            resultName: r,
            nextLoc: n
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorRuntime$1);

  // TODO(Babel 8): Remove this file.

  var runtime = regeneratorRuntime$1.exports();
  var regenerator = runtime;

  // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if ((typeof globalThis === "undefined" ? "undefined" : _typeof$3(globalThis)) === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }

  function ownKeys$3K(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3K(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3K(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var fullClone = _objectSpread$3J({}, ReactDOM__namespace);
  var version$1 = fullClone.version,
    reactRender = fullClone.render,
    unmountComponentAtNode = fullClone.unmountComponentAtNode;
  var legacyCreateRoot;
  var mainVersion = Number((version$1 || "").split(".")[0]);
  try {
    if (mainVersion >= 18 && mainVersion < 19) {
      legacyCreateRoot = fullClone.createRoot;
    }
  } catch (e) {}
  function toggleWarning(skip) {
    var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && _typeof$3(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === "object") {
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
    }
  }
  function react19AdapterWarn() {
    if (mainVersion >= 19 && !legacyCreateRoot) {
      console.warn("TDesign warning: Please import react-19-adapter in React 19, See link: https://github.com/Tencent/tdesign-react/blob/develop/packages/tdesign-react/site/docs/getting-started.md#\u5982\u4F55\u5728-react-19-\u4E2D\u4F7F\u7528");
    }
  }
  var MARK = "__td_react_root__";
  function modernRender(node, container) {
    toggleWarning(true);
    var root = container[MARK] || legacyCreateRoot(container);
    toggleWarning(false);
    root.render(node);
    container[MARK] = root;
  }
  function legacyRender(node, container) {
    reactRender(node, container);
  }
  function render$1(node, container) {
    react19AdapterWarn();
    if (legacyCreateRoot) {
      modernRender(node, container);
      return;
    }
    legacyRender === null || legacyRender === void 0 || legacyRender(node, container);
  }
  function modernUnmount(_x) {
    return _modernUnmount.apply(this, arguments);
  }
  function _modernUnmount() {
    _modernUnmount = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(container) {
      return regenerator.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", Promise.resolve().then(function () {
              var _container$MARK;
              (_container$MARK = container[MARK]) === null || _container$MARK === void 0 || _container$MARK.unmount();
              delete container[MARK];
            }));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _modernUnmount.apply(this, arguments);
  }
  function legacyUnmount(container) {
    unmountComponentAtNode(container);
  }
  function unmount(_x2) {
    return _unmount.apply(this, arguments);
  }
  function _unmount() {
    _unmount = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee2(container) {
      return regenerator.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(legacyCreateRoot !== void 0)) {
              _context2.next = 1;
              break;
            }
            return _context2.abrupt("return", modernUnmount(container));
          case 1:
            legacyUnmount(container);
          case 2:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _unmount.apply(this, arguments);
  }

  function ownKeys$3J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3J(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var merge$1 = function merge(src, config) {
    return _mergeWith(src, config, function (objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    });
  };
  var globalConfig$1 = defaultGlobalConfig;
  var getGlobalConfig = function getGlobalConfig(configInfo) {
    return merge$1(_objectSpread$3I({}, globalConfig$1), configInfo);
  };
  var setGlobalConfig$2 = function setGlobalConfig(configInfo) {
    globalConfig$1 = configInfo;
  };
  function ConfigProvider(_ref) {
    var children = _ref.children,
      globalConfig2 = _ref.globalConfig,
      notSet = _ref.notSet;
    var defaultData = cloneDeep(defaultGlobalConfig);
    var mergedGlobalConfig = merge$1(defaultData, globalConfig2);
    React.useEffect(function () {
      if (!notSet) {
        setGlobalConfig$2(mergedGlobalConfig);
      }
    }, [mergedGlobalConfig, notSet]);
    return /* @__PURE__ */React__default["default"].createElement(ConfigContext$2.Provider, {
      value: {
        globalConfig: mergedGlobalConfig
      }
    }, children);
  }
  ConfigProvider.getGlobalConfig = getGlobalConfig;
  ConfigProvider.setGlobalConfig = setGlobalConfig$2;
  ConfigProvider.displayName = "ConfigProvider";

  function ownKeys$3I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3I(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var PluginContainer = function PluginContainer(props) {
    var _props$globalConfig;
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props !== null && props !== void 0 && (_props$globalConfig = props.globalConfig) !== null && _props$globalConfig !== void 0 && _props$globalConfig.isContextEffectPlugin ? /* @__PURE__ */React__default["default"].createElement(ConfigProvider, _objectSpread$3H({
      notSet: true
    }, props), props === null || props === void 0 ? void 0 : props.children) : props === null || props === void 0 ? void 0 : props.children);
  };

  function ownKeys$3H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3H(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function createContainer$1(attach) {
    if (typeof attach === "string") return document.querySelector(attach);
    if (typeof attach === "function") return attach();
    return document.body;
  }
  var LoadingPlugin$1 = function LoadingPlugin(options) {
    if (options === false) return {
      hide: function hide() {
        return null;
      }
    };
    var props = typeof options === "boolean" ? {} : options;
    var attach = props.attach;
    var container = createContainer$1(attach);
    var div = document.createElement("div");
    div.setAttribute("style", "width: 100%; height: 100%; position: absolute; top: 0;");
    var defaultProps = {
      loading: true,
      attach: null,
      fullscreen: !attach,
      showOverlay: !!attach
    };
    var dGlobalConfig = ConfigProvider.getGlobalConfig();
    render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
      globalConfig: dGlobalConfig
    }, /* @__PURE__ */React__default["default"].createElement(Loading$1, _objectSpread$3G(_objectSpread$3G(_objectSpread$3G({}, defaultProps), props), {}, {
      attach: null
    }))), div);
    container.appendChild(div);
    return {
      hide: function hide() {
        unmount(div);
        div.remove();
      }
    };
  };

  var Loading = Loading$1;
  var loading = LoadingPlugin$1;
  var LoadingPlugin = LoadingPlugin$1;

  function _extends$1() {
    return _extends$1 = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends$1.apply(null, arguments);
  }

  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }

  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  var propTypes = {exports: {}};

  var reactIs$2 = {exports: {}};

  var reactIs_development$1 = {};

  {
    (function () {

      // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
      // nor polyfill, then a plain number is used for performance.
      var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol["for"]('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol["for"]('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol["for"]('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol["for"]('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol["for"]('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol["for"]('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol["for"]('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol["for"]('react.scope') : 0xead7;
      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' ||
        // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof$3(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (_typeof$3(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return undefined;
      } // AsyncMode is deprecated along with isAsyncMode

      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return _typeof$3(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development$1.AsyncMode = AsyncMode;
      reactIs_development$1.ConcurrentMode = ConcurrentMode;
      reactIs_development$1.ContextConsumer = ContextConsumer;
      reactIs_development$1.ContextProvider = ContextProvider;
      reactIs_development$1.Element = Element;
      reactIs_development$1.ForwardRef = ForwardRef;
      reactIs_development$1.Fragment = Fragment;
      reactIs_development$1.Lazy = Lazy;
      reactIs_development$1.Memo = Memo;
      reactIs_development$1.Portal = Portal;
      reactIs_development$1.Profiler = Profiler;
      reactIs_development$1.StrictMode = StrictMode;
      reactIs_development$1.Suspense = Suspense;
      reactIs_development$1.isAsyncMode = isAsyncMode;
      reactIs_development$1.isConcurrentMode = isConcurrentMode;
      reactIs_development$1.isContextConsumer = isContextConsumer;
      reactIs_development$1.isContextProvider = isContextProvider;
      reactIs_development$1.isElement = isElement;
      reactIs_development$1.isForwardRef = isForwardRef;
      reactIs_development$1.isFragment = isFragment;
      reactIs_development$1.isLazy = isLazy;
      reactIs_development$1.isMemo = isMemo;
      reactIs_development$1.isPortal = isPortal;
      reactIs_development$1.isProfiler = isProfiler;
      reactIs_development$1.isStrictMode = isStrictMode;
      reactIs_development$1.isSuspense = isSuspense;
      reactIs_development$1.isValidElementType = isValidElementType;
      reactIs_development$1.typeOf = typeOf;
    })();
  }

  {
    reactIs$2.exports = reactIs_development$1;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }

      // Detect buggy property enumeration order in older V8 versions.

      // https://bugs.chromium.org/p/v8/issues/detail?id=4118
      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
      test1[5] = 'de';
      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }

      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });
      if (order2.join('') !== '0123456789') {
        return false;
      }

      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }
      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }
  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty$1.call(from, key)) {
          to[key] = from[key];
        }
      }
      if (getOwnPropertySymbols$1) {
        symbols = getOwnPropertySymbols$1(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
    return to;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

  var printWarning$1 = function printWarning() {};
  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$1 = has$2;
    printWarning$1 = function printWarning(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {/**/}
    };
  }

  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$1(typeSpecs, typeSpecName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof$3(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
              err.name = 'Invariant Violation';
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning$1((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + _typeof$3(error) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }

  /**
   * Resets warning cache when testing.
   *
   * @private
   */
  checkPropTypes$1.resetWarningCache = function () {
    {
      loggedTypeFailures = {};
    }
  };
  var checkPropTypes_1 = checkPropTypes$1;

  var ReactIs$1 = reactIs$2.exports;
  var assign = objectAssign;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var has = has$2;
  var checkPropTypes = checkPropTypes_1;
  var printWarning = function printWarning() {};
  {
    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>';

    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bigint: createPrimitiveTypeChecker('bigint'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && _typeof$3(data) === 'object' ? data : {};
      this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;
            if (!manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
            expectedType: expectedType
          });
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs$1.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);
          if (type === 'symbol') {
            return String(value);
          }
          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
        return emptyFunctionThatReturnsNull;
      }
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
          if (checkerResult == null) {
            return null;
          }
          if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }
        var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
      return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        // We need to check all keys in case some are required but missing from props.
        var allKeys = assign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (has(shapeTypes, key) && typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (_typeof$3(propValue)) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      }

      // falsy value can't be a Symbol
      if (!propValue) {
        return false;
      }

      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = _typeof$3(propValue);
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }

    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  {
    var ReactIs = reactIs$2.exports;

    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }
  var PropTypes = propTypes.exports;

  /**
   * Checks if a given element has a CSS class.
   * 
   * @param element the element
   * @param className the CSS class name
   */
  function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  /**
   * Adds a CSS class to a given element.
   * 
   * @param element the element
   * @param className the CSS class name
   */

  function addClass(element, className) {
    if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
  }

  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
  }
  /**
   * Removes a CSS class from a given element.
   * 
   * @param element the element
   * @param className the CSS class name
   */

  function removeClass$1(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === 'string') {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
    }
  }

  var config = {
    disabled: false
  };

  var timeoutsShape = PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number,
    appear: PropTypes.number
  }).isRequired]) ;
  var classNamesShape = PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string,
    active: PropTypes.string
  }), PropTypes.shape({
    enter: PropTypes.string,
    enterDone: PropTypes.string,
    enterActive: PropTypes.string,
    exit: PropTypes.string,
    exitDone: PropTypes.string,
    exitActive: PropTypes.string
  })]) ;

  var TransitionGroupContext = /*#__PURE__*/React__default["default"].createContext(null);

  var forceReflow = function forceReflow(node) {
    return node.scrollTop;
  };

  var UNMOUNTED = 'unmounted';
  var EXITED = 'exited';
  var ENTERING = 'entering';
  var ENTERED = 'entered';
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 1 },
   *   entered:  { opacity: 1 },
   *   exiting:  { opacity: 0 },
   *   exited:  { opacity: 0 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  var Transition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);
    function Transition(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props["in"]) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref["in"];
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    ;
    var _proto = Transition.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props["in"]) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter; // TODO: remove fallback for next major

        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }
      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
            // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
            // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

            if (node) forceReflow(node);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default["default"].findDOMNode(this), appearing],
        maybeNode = _ref2[0],
        maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default["default"].findDOMNode(this); // no exit animation skip right to EXITED

      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function () {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
          maybeNode = _ref3[0],
          maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props,
        children = _this$props.children;
        _this$props["in"];
        _this$props.mountOnEnter;
        _this$props.unmountOnExit;
        _this$props.appear;
        _this$props.enter;
        _this$props.exit;
        _this$props.timeout;
        _this$props.addEndListener;
        _this$props.onEnter;
        _this$props.onEntering;
        _this$props.onEntered;
        _this$props.onExit;
        _this$props.onExiting;
        _this$props.onExited;
        _this$props.nodeRef;
        var childProps = _objectWithoutPropertiesLoose$2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (/*#__PURE__*/
        // allows for nested Transitions
        React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === 'function' ? children(status, childProps) : /*#__PURE__*/React__default["default"].cloneElement(React__default["default"].Children.only(children), childProps))
      );
    };
    return Transition;
  }(React__default["default"].Component);
  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: PropTypes.shape({
      current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    "in": PropTypes.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: PropTypes.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func
  } ; // Name the function so it is clearer in the documentation

  function noop$1() {}
  Transition.defaultProps = {
    "in": false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$1,
    onEntering: noop$1,
    onEntered: noop$1,
    onExit: noop$1,
    onExiting: noop$1,
    onExited: noop$1
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition$1 = Transition;

  var _addClass = function addClass$1(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return addClass(node, c);
    });
  };
  var removeClass = function removeClass(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return removeClass$1(node, c);
    });
  };
  /**
   * A transition component inspired by the excellent
   * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
   * use it if you're using CSS transitions or animations. It's built upon the
   * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
   * component, so it inherits all of its props.
   *
   * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
   * and `exit` states of the transition. The first class is applied and then a
   * second `*-active` class in order to activate the CSS transition. After the
   * transition, matching `*-done` class names are applied to persist the
   * transition state.
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
   *         <div>
   *           {"I'll receive my-node-* classes"}
   *         </div>
   *       </CSSTransition>
   *       <button type="button" onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the `in` prop is set to `true`, the child component will first receive
   * the class `example-enter`, then the `example-enter-active` will be added in
   * the next tick. `CSSTransition` [forces a
   * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
   * between before adding the `example-enter-active`. This is an important trick
   * because it allows us to transition between `example-enter` and
   * `example-enter-active` even though they were added immediately one after
   * another. Most notably, this is what makes it possible for us to animate
   * _appearance_.
   *
   * ```css
   * .my-node-enter {
   *   opacity: 0;
   * }
   * .my-node-enter-active {
   *   opacity: 1;
   *   transition: opacity 200ms;
   * }
   * .my-node-exit {
   *   opacity: 1;
   * }
   * .my-node-exit-active {
   *   opacity: 0;
   *   transition: opacity 200ms;
   * }
   * ```
   *
   * `*-active` classes represent which styles you want to animate **to**, so it's
   * important to add `transition` declaration only to them, otherwise transitions
   * might not behave as intended! This might not be obvious when the transitions
   * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
   * the example above (minus `transition`), but it becomes apparent in more
   * complex transitions.
   *
   * **Note**: If you're using the
   * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
   * prop, make sure to define styles for `.appear-*` classes as well.
   */

  var CSSTransition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(CSSTransition, _React$Component);
    function CSSTransition() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };
      _this.onEnter = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
          node = _this$resolveArgument[0],
          appearing = _this$resolveArgument[1];
        _this.removeClasses(node, 'exit');
        _this.addClass(node, appearing ? 'appear' : 'enter', 'base');
        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };
      _this.onEntering = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
          node = _this$resolveArgument2[0],
          appearing = _this$resolveArgument2[1];
        var type = appearing ? 'appear' : 'enter';
        _this.addClass(node, type, 'active');
        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };
      _this.onEntered = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
          node = _this$resolveArgument3[0],
          appearing = _this$resolveArgument3[1];
        var type = appearing ? 'appear' : 'enter';
        _this.removeClasses(node, type);
        _this.addClass(node, type, 'done');
        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };
      _this.onExit = function (maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
          node = _this$resolveArgument4[0];
        _this.removeClasses(node, 'appear');
        _this.removeClasses(node, 'enter');
        _this.addClass(node, 'exit', 'base');
        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };
      _this.onExiting = function (maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
          node = _this$resolveArgument5[0];
        _this.addClass(node, 'exit', 'active');
        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };
      _this.onExited = function (maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
          node = _this$resolveArgument6[0];
        _this.removeClasses(node, 'exit');
        _this.addClass(node, 'exit', 'done');
        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };
      _this.resolveArguments = function (maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
        : [maybeNode, maybeAppearing];
      };
      _this.getClassNames = function (type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === 'string';
        var prefix = isStringClassNames && classNames ? classNames + "-" : '';
        var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName: baseClassName,
          activeClassName: activeClassName,
          doneClassName: doneClassName
        };
      };
      return _this;
    }
    var _proto = CSSTransition.prototype;
    _proto.addClass = function addClass(node, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];
      var _this$getClassNames = this.getClassNames('enter'),
        doneClassName = _this$getClassNames.doneClassName;
      if (type === 'appear' && phase === 'done' && doneClassName) {
        className += " " + doneClassName;
      } // This is to force a repaint,
      // which is necessary in order to transition styles when adding a class name.

      if (phase === 'active') {
        if (node) forceReflow(node);
      }
      if (className) {
        this.appliedClasses[type][phase] = className;
        _addClass(node, className);
      }
    };
    _proto.removeClasses = function removeClasses(node, type) {
      var _this$appliedClasses$ = this.appliedClasses[type],
        baseClassName = _this$appliedClasses$.base,
        activeClassName = _this$appliedClasses$.active,
        doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};
      if (baseClassName) {
        removeClass(node, baseClassName);
      }
      if (activeClassName) {
        removeClass(node, activeClassName);
      }
      if (doneClassName) {
        removeClass(node, doneClassName);
      }
    };
    _proto.render = function render() {
      var _this$props = this.props;
        _this$props.classNames;
        var props = _objectWithoutPropertiesLoose$2(_this$props, ["classNames"]);
      return /*#__PURE__*/React__default["default"].createElement(Transition$1, _extends$1({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };
    return CSSTransition;
  }(React__default["default"].Component);
  CSSTransition.defaultProps = {
    classNames: ''
  };
  CSSTransition.propTypes = _extends$1({}, Transition$1.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: PropTypes.func
  }) ;
  var CSSTransition$1 = CSSTransition;

  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */

  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && /*#__PURE__*/React.isValidElement(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children) React.Children.map(children, function (c) {
      return c;
    }).forEach(function (child) {
      // run the map function here instead so that the key is the computed one
      result[child.key] = mapper(child);
    });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list

    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`

    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return /*#__PURE__*/React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        "in": true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (! /*#__PURE__*/React.isValidElement(child)) return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = /*#__PURE__*/React.isValidElement(prevChild) && !prevChild.props["in"]; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          "in": false
        });
      } else if (hasNext && hasPrev && /*#__PURE__*/React.isValidElement(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": prevChild.props["in"],
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      }
    });
    return children;
  }

  var values = Object.values || function (obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
      return child;
    }
  };
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

  var TransitionGroup = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);
    function TransitionGroup(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear

      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited: handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    } // node is `undefined` when user provided `nodeRef` prop
    ;
    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;
      if (child.props.onExited) {
        child.props.onExited(node);
      }
      if (this.mounted) {
        this.setState(function (state) {
          var children = _extends$1({}, state.children);
          delete children[child.key];
          return {
            children: children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose$2(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }
      return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /*#__PURE__*/React__default["default"].createElement(Component, props, children));
    };
    return TransitionGroup;
  }(React__default["default"].Component);
  TransitionGroup.propTypes = {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: PropTypes.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: PropTypes.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: PropTypes.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: PropTypes.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: PropTypes.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: PropTypes.func
  } ;
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup$1 = TransitionGroup;

  var reactIs$1 = {exports: {}};

  var reactIs_development = {};

  {
    (function () {

      // ATTENTION
      // When adding new symbols to this file,
      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
      // The Symbol used to tag the ReactElement-like types.
      var REACT_ELEMENT_TYPE = Symbol["for"]('react.element');
      var REACT_PORTAL_TYPE = Symbol["for"]('react.portal');
      var REACT_FRAGMENT_TYPE = Symbol["for"]('react.fragment');
      var REACT_STRICT_MODE_TYPE = Symbol["for"]('react.strict_mode');
      var REACT_PROFILER_TYPE = Symbol["for"]('react.profiler');
      var REACT_PROVIDER_TYPE = Symbol["for"]('react.provider');
      var REACT_CONTEXT_TYPE = Symbol["for"]('react.context');
      var REACT_SERVER_CONTEXT_TYPE = Symbol["for"]('react.server_context');
      var REACT_FORWARD_REF_TYPE = Symbol["for"]('react.forward_ref');
      var REACT_SUSPENSE_TYPE = Symbol["for"]('react.suspense');
      var REACT_SUSPENSE_LIST_TYPE = Symbol["for"]('react.suspense_list');
      var REACT_MEMO_TYPE = Symbol["for"]('react.memo');
      var REACT_LAZY_TYPE = Symbol["for"]('react.lazy');
      var REACT_OFFSCREEN_TYPE = Symbol["for"]('react.offscreen');

      // -----------------------------------------------------------------------------

      var enableScopeAPI = false; // Experimental Create Event Handle API.
      var enableCacheElement = false;
      var enableTransitionTracing = false; // No known bugs, but needs performance testing

      var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
      // stuff. Intended to enable React core members to more easily debug scheduling
      // issues in DEV builds.

      var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol["for"]('react.module.reference');
      }
      function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') {
          return true;
        } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (_typeof$3(type) === 'object' && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
          // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function typeOf(object) {
        if (_typeof$3(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_SERVER_CONTEXT_TYPE:
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return undefined;
      }
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
          }
        }
        return false;
      }
      function isConcurrentMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
          }
        }
        return false;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return _typeof$3(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      function isSuspenseList(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
      }
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.SuspenseList = SuspenseList;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isSuspenseList = isSuspenseList;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }

  {
    reactIs$1.exports = reactIs_development;
  }

  var REACT_ELEMENT_TYPE_18 = Symbol["for"]("react.element");
  var REACT_ELEMENT_TYPE_19 = Symbol["for"]("react.transitional.element");
  var REACT_FRAGMENT_TYPE = Symbol["for"]("react.fragment");
  function isFragment(object) {
    return object && _typeof$3(object) === "object" && (object.$$typeof === REACT_ELEMENT_TYPE_18 || object.$$typeof === REACT_ELEMENT_TYPE_19) && object.type === REACT_FRAGMENT_TYPE;
  }

  var supportRef = function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    if (!nodeOrComponent) {
      return false;
    }
    if (isReactElement(nodeOrComponent) && nodeOrComponent.props.propertyIsEnumerable("ref")) {
      return true;
    }
    var type = reactIs$1.exports.isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;
    if (typeof type === "function" && !((_type$prototype = type.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render) && type.$$typeof !== reactIs$1.exports.ForwardRef) {
      return false;
    }
    if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render) && nodeOrComponent.$$typeof !== reactIs$1.exports.ForwardRef) {
      return false;
    }
    return true;
  };
  function getRefDom(domRef) {
    if (domRef.current && _typeof$3(domRef.current) === "object" && "currentElement" in domRef.current) {
      return domRef.current.currentElement;
    }
    return domRef.current;
  }
  function isReactElement(node) {
    return /*#__PURE__*/React.isValidElement(node) && !isFragment(node);
  }
  var getNodeRef = function getNodeRef(node) {
    if (node && isReactElement(node)) {
      var ele = node;
      return ele.props.propertyIsEnumerable("ref") ? ele.props.ref : ele.ref;
    }
    return null;
  };

  function useAnimation() {
    var _useConfig = useConfig$2(),
      animation = _useConfig.animation;
    var expand = EAnimationType.expand,
      ripple = EAnimationType.ripple,
      fade = EAnimationType.fade;
    var keepAnimation = React.useCallback(function (type) {
      var _animation$exclude, _animation$include;
      return animation && !((_animation$exclude = animation.exclude) !== null && _animation$exclude !== void 0 && _animation$exclude.includes(type)) && ((_animation$include = animation.include) === null || _animation$include === void 0 ? void 0 : _animation$include.includes(type));
    }, [animation]);
    return {
      keepExpand: keepAnimation(expand),
      keepRipple: keepAnimation(ripple),
      keepFade: keepAnimation(fade)
    };
  }

  var defaultAttach = "body";
  var useAttach = function useAttach(name, attach) {
    var globalConfig = useConfig$2();
    var attachVal = React.useMemo(function () {
      var _globalConfig$attach;
      return attach || (globalConfig === null || globalConfig === void 0 || (_globalConfig$attach = globalConfig.attach) === null || _globalConfig$attach === void 0 ? void 0 : _globalConfig$attach[name]) || (globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.attach) || defaultAttach;
    }, [name, attach, globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.attach]);
    return attachVal;
  };

  var noop = function noop() {};

  var useControlled = function useControlled() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var valueKey = arguments.length > 1 ? arguments[1] : undefined;
    var onChange = arguments.length > 2 ? arguments[2] : undefined;
    var defaultOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var controlled = Reflect.has(props, valueKey);
    var value = props[valueKey];
    var defaultValue = defaultOptions["default".concat(upperFirst$1(valueKey))] || props["default".concat(upperFirst$1(valueKey))];
    var _useState = React.useState(defaultValue),
      _useState2 = _slicedToArray$1(_useState, 2),
      internalValue = _useState2[0],
      setInternalValue = _useState2[1];
    if (controlled) return [value, onChange || noop];
    return [internalValue, function (newValue) {
      setInternalValue(newValue);
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
    }];
  };

  var useLatest = function useLatest(value) {
    var ref = React.useRef(value);
    ref.current = value;
    return ref;
  };

  var DEFAULT_OPTIONS$2 = {
    debounceTime: 0,
    config: {
      attributes: true,
      childList: true,
      characterData: true,
      subtree: true
    }
  };
  function useMutationObservable(targetEl, cb) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS$2;
    var optionsRef = React.useRef(null);
    var signalRef = React.useRef(0);
    var callbackRef = useLatest(cb);
    if (!isEqual(options, optionsRef.current)) {
      signalRef.current += 1;
    }
    optionsRef.current = options;
    React.useEffect(function () {
      if (!targetEl || !(targetEl !== null && targetEl !== void 0 && targetEl.nodeType)) return;
      var observer = null;
      try {
        var _optionsRef$current = optionsRef.current,
          debounceTime = _optionsRef$current.debounceTime,
          config = _optionsRef$current.config;
        var mutationCallback = function mutationCallback() {
          callbackRef.current.apply(callbackRef, arguments);
        };
        observer = new MutationObserver(debounceTime > 0 ? debounce$1(mutationCallback, debounceTime) : mutationCallback);
        observer.observe(targetEl, config);
      } catch (e) {
        console.error(e);
      }
      return function () {
        if (observer) {
          observer.disconnect();
          observer = null;
        }
      };
    }, [targetEl, signalRef.current]);
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];
        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }
  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules

  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }
    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...

        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false

    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument :
    // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot ||
      // step into the shadow DOM of the parent of a slotted node
      element.parentNode || (
      // DOM Element detected
      isShadowRoot(element) ? element.host : null) ||
      // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback
    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) ||
    // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }
    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block

  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);
      if (elementCss.position === 'fixed') {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.

  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }
    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }
  function effect$1(_ref2) {
    var state = _ref2.state,
      options = _ref2.options;
    var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) {
      return;
    } // CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules

  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
      y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';
      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);
        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state,
      options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };
  function effect(_ref) {
    var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
    var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }
    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }
      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules

  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll$1(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll$1(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll$1(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent$1(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent$1(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent$1(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList :
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`

  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents

  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }
    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip$1(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);
          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules

  var flip$2 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip$1,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state,
      name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules

  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
      skidding = _ref[0],
      distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
    var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
      name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === 'x' ? top : left;
      var _altSide = mainAxis === 'x' ? bottom : right;
      var _offset = popperOffsets[altAxis];
      var _len = altAxis === 'y' ? 'height' : 'width';
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll$1(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' ||
      // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS$1 = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers

          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;
            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference, popper)) {
        return instance;
      }
      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            effect = _ref.effect;
          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });
            var noopFn = function noopFn() {};
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$2, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var hasElementType = typeof Element !== 'undefined';
  var hasMap = typeof Map === 'function';
  var hasSet = typeof Set === 'function';
  var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

  // Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

  function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.3
    if (a === b) return true;
    if (a && b && _typeof$3(a) == 'object' && _typeof$3(b) == 'object') {
      if (a.constructor !== b.constructor) return false;
      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length) return false;
        for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;
        return true;
      }

      // START: Modifications:
      // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
      //    to co-exist with es5.
      // 2. Replace `for of` with es5 compliant iteration using `for`.
      //    Basically, take:
      //
      //    ```js
      //    for (i of a.entries())
      //      if (!b.has(i[0])) return false;
      //    ```
      //
      //    ... and convert to:
      //
      //    ```js
      //    it = a.entries();
      //    while (!(i = it.next()).done)
      //      if (!b.has(i.value[0])) return false;
      //    ```
      //
      //    **Note**: `i` access switches to `i.value`.
      var it;
      if (hasMap && a instanceof Map && b instanceof Map) {
        if (a.size !== b.size) return false;
        it = a.entries();
        while (!(i = it.next()).done) if (!b.has(i.value[0])) return false;
        it = a.entries();
        while (!(i = it.next()).done) if (!equal(i.value[1], b.get(i.value[0]))) return false;
        return true;
      }
      if (hasSet && a instanceof Set && b instanceof Set) {
        if (a.size !== b.size) return false;
        it = a.entries();
        while (!(i = it.next()).done) if (!b.has(i.value[0])) return false;
        return true;
      }
      // END: Modifications

      if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
        length = a.length;
        if (length != b.length) return false;
        for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;
        return true;
      }
      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
      // START: Modifications:
      // Apply guards for `Object.create(null)` handling. See:
      // - https://github.com/FormidableLabs/react-fast-compare/issues/64
      // - https://github.com/epoberezkin/fast-deep-equal/issues/49
      if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();
      // END: Modifications

      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;
      for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
      // END: fast-deep-equal

      // START: react-fast-compare
      // custom handling for DOM elements
      if (hasElementType && a instanceof Element) return false;

      // custom handling for React/Preact
      for (i = length; i-- !== 0;) {
        if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
          // React-specific: avoid traversing React elements' _owner
          // Preact-specific: avoid traversing Preact elements' __v and __o
          //    __v = $_original / $_vnode
          //    __o = $_owner
          // These properties contain circular references and are not needed when
          // comparing the actual elements (and not their owners)
          // .$$typeof and ._store on just reasonable markers of elements

          continue;
        }

        // all other properties should be traversed as usual
        if (!equal(a[keys[i]], b[keys[i]])) return false;
      }
      // END: react-fast-compare

      // START: fast-deep-equal
      return true;
    }
    return a !== a && b !== b;
  }
  // end fast-deep-equal

  var reactFastCompare = function isEqual(a, b) {
    try {
      return equal(a, b);
    } catch (error) {
      if ((error.message || '').match(/stack|recursion/i)) {
        // warn on circular references, don't crash
        // browsers give this different errors name and messages:
        // chrome/safari: "RangeError", "Maximum call stack size exceeded"
        // firefox: "InternalError", too much recursion"
        // edge: "Error", "Out of stack space"
        console.warn('react-fast-compare cannot handle circular refs');
        return false;
      }
      // some other error. we should definitely know about these
      throw error;
    }
  };

  var EMPTY_MODIFIERS = [];
  var fromEntries = function fromEntries(entries) {
    return entries.reduce(function (acc, _ref) {
      var _ref2 = _slicedToArray$1(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      acc[key] = value;
      return acc;
    }, {});
  };
  var usePopper = function usePopper(referenceElement, popperElement) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var prevOptions = React.useRef(null);
    var optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || "bottom",
      strategy: options.strategy || "absolute",
      modifiers: options.modifiers || EMPTY_MODIFIERS
    };
    var _useState = React.useState({
        styles: {
          popper: {
            position: optionsWithDefaults.strategy,
            left: "0",
            top: "0"
          },
          arrow: {
            position: "absolute"
          }
        },
        attributes: {}
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    var updateStateModifier = React.useMemo(function () {
      return {
        name: "updateState",
        enabled: true,
        phase: "write",
        fn: function fn(_ref3) {
          var state2 = _ref3.state;
          var elements = Object.keys(state2.elements);
          ReactDOM.flushSync(function () {
            setState({
              styles: fromEntries(elements.map(function (element) {
                return [element, state2.styles[element] || {}];
              })),
              attributes: fromEntries(elements.map(function (element) {
                return [element, state2.attributes[element]];
              }))
            });
          });
        },
        requires: ["computeStyles"]
      };
    }, []);
    var popperOptions = React.useMemo(function () {
      var newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [].concat(_toConsumableArray(optionsWithDefaults.modifiers), [updateStateModifier, {
          name: "applyStyles",
          enabled: false
        }])
      };
      if (reactFastCompare(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      }
      prevOptions.current = newOptions;
      return newOptions;
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React.useRef(null);
    useIsomorphicLayoutEffect(function () {
      if (popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect(function () {
      if (referenceElement == null || popperElement == null) {
        return;
      }
      var createPopper$1 = options.createPopper || createPopper;
      var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return function () {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  };

  function useWindowSize() {
    var _useState = React.useState(getWindowSize),
      _useState2 = _slicedToArray$1(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];
    React.useEffect(function () {
      function handleResize() {
        setSize(getWindowSize());
      }
      var debounceResize = debounce$1(handleResize, 400);
      window.addEventListener("resize", debounceResize);
      return function () {
        window.removeEventListener("resize", debounceResize);
        debounceResize.cancel();
      };
    }, []);
    return size;
  }

  var popupDefaultProps = {
    destroyOnClose: false,
    hideEmptyPopup: false,
    placement: "top",
    showArrow: false,
    trigger: "hover"
  };

  function composeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    return function (instance) {
      for (var _i = 0, _refs = refs; _i < _refs.length; _i++) {
        var ref = _refs[_i];
        if (typeof ref === "function") {
          ref(instance);
        } else if (ref) {
          ref.current = instance;
        }
      }
    };
  }

  var on$1 = function () {
    if (canUseDocument && document.addEventListener) {
      return function (element, event, handler) {
        if (element && event && handler) {
          element.addEventListener(event, handler, false);
        }
      };
    }
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
      }
    };
  }();
  var off$1 = function () {
    if (canUseDocument && document.removeEventListener) {
      return function (element, event, handler) {
        if (element && event) {
          element.removeEventListener(event, handler, false);
        }
      };
    }
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();

  var ESC_KEY = "Escape";
  function useTrigger(_ref) {
    var content = _ref.content,
      disabled = _ref.disabled,
      trigger = _ref.trigger,
      visible = _ref.visible,
      onVisibleChange = _ref.onVisibleChange,
      triggerRef = _ref.triggerRef,
      delay = _ref.delay;
    var hasPopupMouseDown = React.useRef(false);
    var mouseDownTimer = React.useRef(0);
    var visibleTimer = React.useRef(null);
    var triggerDataKey = React.useRef("t-popup--".concat(Math.random().toFixed(10)));
    var leaveFlag = React.useRef(false);
    var shouldToggle = React.useMemo(function () {
      if (disabled) return false;
      return !disabled && content === 0 ? true : content;
    }, [disabled, content]);
    var _useMemo = React.useMemo(function () {
        if (Array.isArray(delay)) return delay;
        return [delay, delay];
      }, [delay]),
      _useMemo2 = _slicedToArray$1(_useMemo, 2),
      _useMemo2$ = _useMemo2[0],
      appearDelay = _useMemo2$ === void 0 ? 0 : _useMemo2$,
      _useMemo2$2 = _useMemo2[1],
      exitDelay = _useMemo2$2 === void 0 ? 0 : _useMemo2$2;
    function callFuncWithDelay(_ref2) {
      var delay2 = _ref2.delay,
        callback = _ref2.callback;
      clearTimeout(visibleTimer.current);
      if (delay2) {
        visibleTimer.current = setTimeout(callback, delay2);
      } else {
        callback();
      }
    }
    React.useEffect(function () {
      if (!shouldToggle) return;
      var handleDocumentClick = function handleDocumentClick(e) {
        var _getRefDom, _getRefDom$contains;
        if ((_getRefDom = getRefDom(triggerRef)) !== null && _getRefDom !== void 0 && (_getRefDom$contains = _getRefDom.contains) !== null && _getRefDom$contains !== void 0 && _getRefDom$contains.call(_getRefDom, e.target) || hasPopupMouseDown.current) {
          return;
        }
        visible && onVisibleChange(false, {
          e: e,
          trigger: "document"
        });
      };
      on$1(document, "mousedown", handleDocumentClick);
      on$1(document, "touchend", handleDocumentClick);
      return function () {
        off$1(document, "mousedown", handleDocumentClick);
        off$1(document, "touchend", handleDocumentClick);
      };
    }, [shouldToggle, visible, onVisibleChange, triggerRef]);
    function getPopupProps() {
      if (!shouldToggle) return {};
      return {
        onMouseEnter: function onMouseEnter(e) {
          if (trigger === "hover" && !leaveFlag.current) {
            clearTimeout(visibleTimer.current);
            onVisibleChange(true, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }
        },
        onMouseLeave: function onMouseLeave(e) {
          if (trigger === "hover") {
            leaveFlag.current = true;
            clearTimeout(visibleTimer.current);
            onVisibleChange(false, {
              e: e,
              trigger: "trigger-element-hover"
            });
          }
        },
        onMouseDown: function onMouseDown() {
          clearTimeout(mouseDownTimer.current);
          hasPopupMouseDown.current = true;
          mouseDownTimer.current = window.setTimeout(function () {
            hasPopupMouseDown.current = false;
          });
        },
        onTouchEnd: function onTouchEnd() {
          clearTimeout(mouseDownTimer.current);
          hasPopupMouseDown.current = true;
          mouseDownTimer.current = window.setTimeout(function () {
            hasPopupMouseDown.current = false;
          });
        }
      };
    }
    function getTriggerProps(triggerNode) {
      if (!shouldToggle) return {};
      var triggerProps = {
        className: visible ? classNames$1(triggerNode.props.className, "t-popup-open") : triggerNode.props.className,
        onMouseDown: function onMouseDown(e) {
          var _triggerNode$props$on, _triggerNode$props;
          if (trigger === "mousedown") {
            callFuncWithDelay({
              delay: visible ? appearDelay : exitDelay,
              callback: function callback() {
                return onVisibleChange(!visible, {
                  e: e,
                  trigger: "trigger-element-mousedown"
                });
              }
            });
          }
          (_triggerNode$props$on = (_triggerNode$props = triggerNode.props).onMouseDown) === null || _triggerNode$props$on === void 0 || _triggerNode$props$on.call(_triggerNode$props, e);
        },
        onClick: function onClick(e) {
          var _triggerNode$props$on2, _triggerNode$props2;
          if (trigger === "click") {
            callFuncWithDelay({
              delay: visible ? appearDelay : exitDelay,
              callback: function callback() {
                return onVisibleChange(!visible, {
                  e: e,
                  trigger: "trigger-element-click"
                });
              }
            });
          }
          (_triggerNode$props$on2 = (_triggerNode$props2 = triggerNode.props).onClick) === null || _triggerNode$props$on2 === void 0 || _triggerNode$props$on2.call(_triggerNode$props2, e);
        },
        onTouchStart: function onTouchStart(e) {
          var _triggerNode$props$on3, _triggerNode$props3;
          if (trigger === "hover" || trigger === "mousedown") {
            leaveFlag.current = false;
            callFuncWithDelay({
              delay: appearDelay,
              callback: function callback() {
                return onVisibleChange(true, {
                  e: e,
                  trigger: "trigger-element-hover"
                });
              }
            });
          }
          (_triggerNode$props$on3 = (_triggerNode$props3 = triggerNode.props).onTouchStart) === null || _triggerNode$props$on3 === void 0 || _triggerNode$props$on3.call(_triggerNode$props3, e);
        },
        onMouseEnter: function onMouseEnter(e) {
          var _triggerNode$props$on4, _triggerNode$props4;
          if (trigger === "hover") {
            leaveFlag.current = false;
            callFuncWithDelay({
              delay: appearDelay,
              callback: function callback() {
                return onVisibleChange(true, {
                  e: e,
                  trigger: "trigger-element-hover"
                });
              }
            });
          }
          (_triggerNode$props$on4 = (_triggerNode$props4 = triggerNode.props).onMouseEnter) === null || _triggerNode$props$on4 === void 0 || _triggerNode$props$on4.call(_triggerNode$props4, e);
        },
        onMouseLeave: function onMouseLeave(e) {
          var _triggerNode$props$on5, _triggerNode$props5;
          if (trigger === "hover") {
            leaveFlag.current = false;
            callFuncWithDelay({
              delay: exitDelay,
              callback: function callback() {
                return onVisibleChange(false, {
                  e: e,
                  trigger: "trigger-element-hover"
                });
              }
            });
          }
          (_triggerNode$props$on5 = (_triggerNode$props5 = triggerNode.props).onMouseLeave) === null || _triggerNode$props$on5 === void 0 || _triggerNode$props$on5.call(_triggerNode$props5, e);
        },
        onFocus: function onFocus() {
          var _triggerNode$props$on6, _triggerNode$props6;
          if (trigger === "focus") {
            callFuncWithDelay({
              delay: appearDelay,
              callback: function callback() {
                return onVisibleChange(true, {
                  trigger: "trigger-element-focus"
                });
              }
            });
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          (_triggerNode$props$on6 = (_triggerNode$props6 = triggerNode.props).onFocus) === null || _triggerNode$props$on6 === void 0 || _triggerNode$props$on6.call.apply(_triggerNode$props$on6, [_triggerNode$props6].concat(args));
        },
        onBlur: function onBlur() {
          var _triggerNode$props$on7, _triggerNode$props7;
          if (trigger === "focus") {
            callFuncWithDelay({
              delay: appearDelay,
              callback: function callback() {
                return onVisibleChange(false, {
                  trigger: "trigger-element-blur"
                });
              }
            });
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (_triggerNode$props$on7 = (_triggerNode$props7 = triggerNode.props).onBlur) === null || _triggerNode$props$on7 === void 0 || _triggerNode$props$on7.call.apply(_triggerNode$props$on7, [_triggerNode$props7].concat(args));
        },
        onContextMenu: function onContextMenu(e) {
          var _triggerNode$props$on8, _triggerNode$props8;
          if (trigger === "context-menu") {
            e.preventDefault();
            callFuncWithDelay({
              delay: appearDelay,
              callback: function callback() {
                return onVisibleChange(true, {
                  e: e,
                  trigger: "context-menu"
                });
              }
            });
          }
          (_triggerNode$props$on8 = (_triggerNode$props8 = triggerNode.props).onContextMenu) === null || _triggerNode$props$on8 === void 0 || _triggerNode$props$on8.call(_triggerNode$props8, e);
        },
        onKeyDown: function onKeyDown(e) {
          var _triggerNode$props$on9, _triggerNode$props9;
          if ((e === null || e === void 0 ? void 0 : e.key) === ESC_KEY) {
            callFuncWithDelay({
              delay: exitDelay,
              callback: function callback() {
                return onVisibleChange(false, {
                  e: e,
                  trigger: "keydown-esc"
                });
              }
            });
          }
          (_triggerNode$props$on9 = (_triggerNode$props9 = triggerNode.props).onKeyDown) === null || _triggerNode$props$on9 === void 0 || _triggerNode$props$on9.call(_triggerNode$props9, e);
        }
      };
      if (supportRef(triggerNode)) {
        triggerProps.ref = composeRefs(triggerRef, getNodeRef(triggerNode));
      } else {
        triggerProps["data-popup"] = triggerDataKey.current;
      }
      return triggerProps;
    }
    function getTriggerNode(children) {
      var triggerNode = /*#__PURE__*/React.isValidElement(children) && !reactIs$1.exports.isFragment(children) ? children : /* @__PURE__ */React__default["default"].createElement("span", {
        className: "t-trigger"
      }, children);
      return /*#__PURE__*/React__default["default"].cloneElement(triggerNode, getTriggerProps(triggerNode));
    }
    var getTriggerDom = React.useCallback(function () {
      if (typeof document === "undefined") return {};
      return document.querySelector("[data-popup=\"".concat(triggerDataKey.current, "\"]"));
    }, []);
    return {
      getTriggerNode: getTriggerNode,
      getPopupProps: getPopupProps,
      getTriggerDom: getTriggerDom
    };
  }

  var getTransitionParams = function getTransitionParams(_ref) {
    var classPrefix = _ref.classPrefix,
      expandAnimation = _ref.expandAnimation,
      fadeAnimation = _ref.fadeAnimation;
    if (!fadeAnimation) return {};
    var popupAnimationClassPrefix = expandAnimation ? "".concat(classPrefix, "-popup--animation-expand") : "".concat(classPrefix, "-popup--animation");
    return {
      classNames: {
        appear: "".concat(popupAnimationClassPrefix, "-enter ").concat(popupAnimationClassPrefix, "-enter-active"),
        appearActive: "".concat(popupAnimationClassPrefix, "-enter-active"),
        appearDone: "".concat(popupAnimationClassPrefix, "-enter-active ").concat(popupAnimationClassPrefix, "-enter-to"),
        enter: "".concat(popupAnimationClassPrefix, "-enter ").concat(popupAnimationClassPrefix, "-enter-active"),
        enterActive: "".concat(popupAnimationClassPrefix, "-enter-active"),
        enterDone: "".concat(popupAnimationClassPrefix, "-enter-active ").concat(popupAnimationClassPrefix, "-enter-to"),
        exit: "".concat(popupAnimationClassPrefix, "-leave ").concat(popupAnimationClassPrefix, "-leave-active"),
        exitActive: "".concat(popupAnimationClassPrefix, "-leave-active"),
        exitDone: "".concat(popupAnimationClassPrefix, "-leave-active ").concat(popupAnimationClassPrefix, "-leave-to")
      }
    };
  };

  function ownKeys$3G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3G(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Popup$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _popperOptions$modifi;
    var props = useDefaultProps(originalProps, popupDefaultProps);
    var trigger = props.trigger,
      content = props.content,
      placement = props.placement,
      attach = props.attach,
      showArrow = props.showArrow,
      destroyOnClose = props.destroyOnClose,
      overlayClassName = props.overlayClassName,
      overlayInnerClassName = props.overlayInnerClassName,
      overlayStyle = props.overlayStyle,
      overlayInnerStyle = props.overlayInnerStyle,
      triggerElement = props.triggerElement,
      _props$children = props.children,
      children = _props$children === void 0 ? triggerElement : _props$children,
      disabled = props.disabled,
      zIndex = props.zIndex,
      onScroll = props.onScroll,
      onScrollToBottom = props.onScrollToBottom,
      expandAnimation = props.expandAnimation,
      delay = props.delay,
      hideEmptyPopup = props.hideEmptyPopup,
      updateScrollTop = props.updateScrollTop;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var popupAttach = useAttach("popup", attach);
    var _useAnimation = useAnimation(),
      keepExpand = _useAnimation.keepExpand,
      keepFade = _useAnimation.keepFade;
    var _useWindowSize = useWindowSize(),
      windowHeight = _useWindowSize.height,
      windowWidth = _useWindowSize.width;
    var _useControlled = useControlled(props, "visible", props.onVisibleChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      visible = _useControlled2[0],
      onVisibleChange = _useControlled2[1];
    var _useState = React.useState(null),
      _useState2 = _slicedToArray$1(_useState, 2),
      popupElement = _useState2[0],
      setPopupElement = _useState2[1];
    var triggerRef = React.useRef(null);
    var popupRef = React.useRef(null);
    var portalRef = React.useRef(null);
    var contentRef = React.useRef(null);
    var popperRef = React.useRef(null);
    var DEFAULT_TRANSITION_TIMEOUT = 180;
    React.useEffect(function () {
      if (!content && hideEmptyPopup) {
        requestAnimationFrame(function () {
          return setPopupElement(null);
        });
      }
    }, [content, hideEmptyPopup]);
    var showOverlay = React.useMemo(function () {
      if (hideEmptyPopup && !content) return false;
      return visible || popupElement;
    }, [hideEmptyPopup, content, visible, popupElement]);
    var popperPlacement = React.useMemo(function () {
      return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
    }, [placement]);
    var _useTrigger = useTrigger({
        triggerRef: triggerRef,
        content: content,
        disabled: disabled,
        trigger: trigger,
        visible: visible,
        delay: delay,
        onVisibleChange: onVisibleChange
      }),
      getTriggerNode = _useTrigger.getTriggerNode,
      getPopupProps = _useTrigger.getPopupProps,
      getTriggerDom = _useTrigger.getTriggerDom;
    var popperOptions = props.popperOptions;
    popperRef.current = usePopper(getRefDom(triggerRef), popupElement, _objectSpread$3F({
      placement: popperPlacement
    }, popperOptions));
    var hasArrowModifier = popperOptions === null || popperOptions === void 0 || (_popperOptions$modifi = popperOptions.modifiers) === null || _popperOptions$modifi === void 0 ? void 0 : _popperOptions$modifi.some(function (modifier) {
      return modifier.name === "arrow";
    });
    var _popperRef$current = popperRef.current,
      styles = _popperRef$current.styles,
      attributes = _popperRef$current.attributes;
    var triggerNode = isFunction$1(children) ? getTriggerNode(children({
      visible: visible
    })) : getTriggerNode(children);
    var updateTimeRef = React.useRef(null);
    useMutationObservable(getRefDom(triggerRef), function () {
      var isDisplayNone = getCssVarsValue("display", getRefDom(triggerRef)) === "none";
      if (visible && !isDisplayNone) {
        clearTimeout(updateTimeRef.current);
        updateTimeRef.current = setTimeout(function () {
          var _popperRef$current2, _popperRef$current2$u;
          return (_popperRef$current2 = popperRef.current) === null || _popperRef$current2 === void 0 || (_popperRef$current2$u = _popperRef$current2.update) === null || _popperRef$current2$u === void 0 ? void 0 : _popperRef$current2$u.call(_popperRef$current2);
        }, 0);
      }
    });
    React.useEffect(function () {
      return function () {
        return clearTimeout(updateTimeRef.current);
      };
    }, []);
    React.useEffect(function () {
      if (visible) {
        requestAnimationFrame(function () {
          var _popperRef$current3, _popperRef$current3$u;
          return (_popperRef$current3 = popperRef.current) === null || _popperRef$current3 === void 0 || (_popperRef$current3$u = _popperRef$current3.update) === null || _popperRef$current3$u === void 0 ? void 0 : _popperRef$current3$u.call(_popperRef$current3);
        });
      }
    }, [visible, content, windowHeight, windowWidth]);
    React.useEffect(function () {
      if (!triggerRef.current) triggerRef.current = getTriggerDom();
      if (visible) {
        updateScrollTop === null || updateScrollTop === void 0 || updateScrollTop(contentRef.current);
      }
    }, [visible, updateScrollTop, getTriggerDom]);
    function handleExited() {
      !destroyOnClose && popupElement && (popupElement.style.display = "none");
    }
    function handleEnter() {
      !destroyOnClose && popupElement && (popupElement.style.display = "block");
    }
    function handleScroll(e) {
      onScroll === null || onScroll === void 0 || onScroll({
        e: e
      });
      var debounceOnScrollBottom = debounce$1(function (e2) {
        return onScrollToBottom === null || onScrollToBottom === void 0 ? void 0 : onScrollToBottom({
          e: e2
        });
      }, 100);
      var _e$target = e.target,
        scrollTop = _e$target.scrollTop,
        clientHeight = _e$target.clientHeight,
        scrollHeight = _e$target.scrollHeight;
      if (clientHeight + Math.floor(scrollTop) === scrollHeight) {
        debounceOnScrollBottom(e);
      }
    }
    function getOverlayStyle(overlayStyle2) {
      if (getRefDom(triggerRef) && popupRef.current && typeof overlayStyle2 === "function") {
        return _objectSpread$3F({}, overlayStyle2(getRefDom(triggerRef), popupRef.current));
      }
      return _objectSpread$3F({}, overlayStyle2);
    }
    var overlay = showOverlay && /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      appear: true,
      "in": visible,
      timeout: DEFAULT_TRANSITION_TIMEOUT,
      nodeRef: portalRef,
      unmountOnExit: destroyOnClose,
      onEnter: handleEnter,
      onExited: handleExited
    }, /* @__PURE__ */React__default["default"].createElement(Portal, {
      triggerNode: getRefDom(triggerRef),
      attach: popupAttach,
      ref: portalRef
    }, /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$3F({
      appear: true,
      timeout: 0,
      "in": visible,
      nodeRef: popupRef
    }, getTransitionParams({
      classPrefix: classPrefix,
      fadeAnimation: keepFade,
      expandAnimation: expandAnimation && keepExpand
    })), /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$3F(_objectSpread$3F({
      ref: function ref(node) {
        if (node) {
          popupRef.current = node;
          setPopupElement(node);
        }
      },
      style: _objectSpread$3F(_objectSpread$3F({}, styles.popper), {}, {
        zIndex: zIndex
      }, getOverlayStyle(overlayStyle)),
      className: classNames$1("".concat(classPrefix, "-popup"), overlayClassName)
    }, attributes.popper), getPopupProps()), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: contentRef,
      className: classNames$1("".concat(classPrefix, "-popup__content"), _defineProperty$2({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow), overlayInnerClassName),
      style: getOverlayStyle(overlayInnerStyle),
      onScroll: handleScroll
    }, content, showArrow && /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$3F({
      style: styles.arrow,
      className: "".concat(classPrefix, "-popup__arrow")
    }, hasArrowModifier && {
      "data-popper-arrow": ""
    })))))));
    React.useImperativeHandle(ref, function () {
      return {
        getPopper: function getPopper() {
          return popperRef.current;
        },
        getPopupElement: function getPopupElement() {
          return popupRef.current;
        },
        getPortalElement: function getPortalElement() {
          return portalRef.current;
        },
        getPopupContentElement: function getPopupContentElement() {
          return contentRef.current;
        },
        setVisible: function setVisible(visible2) {
          return onVisibleChange(visible2, {
            trigger: "document"
          });
        }
      };
    });
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, triggerNode, overlay);
  });
  Popup$1.displayName = "Popup";

  function ownKeys$3F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3F(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var triggers = ["click", "hover", "focus", "context-menu"];
  var popperInstance;
  var overlayInstance;
  var timeout;
  var triggerEl;
  var componentName = "t-popup";
  var triggerType = function triggerType(triggerProps) {
    return triggers.reduce(function (map, trigger) {
      return _objectSpread$3E(_objectSpread$3E({}, map), {}, _defineProperty$2({}, trigger, triggerProps.includes(trigger)));
    }, {});
  };
  function getPopperPlacement(placement) {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }
  var Overlay = function Overlay(originalProps) {
    var _props$popperOptions;
    var props = useDefaultProps(originalProps, popupDefaultProps);
    var trigger = props.trigger,
      content = props.content,
      showArrow = props.showArrow,
      disabled = props.disabled,
      overlayInnerClassName = props.overlayInnerClassName,
      hideEmptyPopup = props.hideEmptyPopup,
      overlayClassName = props.overlayClassName,
      overlayStyle = props.overlayStyle,
      zIndex = props.zIndex,
      overlayInnerStyle = props.overlayInnerStyle,
      renderCallback = props.renderCallback;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      visibleState = _useState2[0],
      setVisibleState = _useState2[1];
    var popperRef = React.useRef(null);
    var overlayRef = React.useRef(null);
    var hidePopup = hideEmptyPopup && isString(content) && ["", void 0, null].includes(content);
    var stylePopper = function stylePopper() {
      var style = {};
      if (hidePopup) {
        style = {
          visibility: "hidden",
          pointerEvents: "none"
        };
      }
      return _objectSpread$3E(_objectSpread$3E({}, style), {}, {
        zIndex: zIndex
      }, overlayStyle);
    };
    var hasTrigger = React.useMemo(function () {
      return triggerType(trigger);
    }, [trigger]);
    var overlayClasses = React.useMemo(function () {
      return ["".concat(componentName, "__content"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(componentName, "__content--text"), content === "string"), "".concat(componentName, "__content--arrow"), showArrow), "".concat(componentName, "-is-disabled"), disabled), overlayInnerClassName];
    }, [content, overlayInnerClassName, showArrow, disabled]);
    var handleMouseLeave = function handleMouseLeave() {
      var _popperInstance;
      setVisibleState(false);
      removeOverlayInstance();
      (_popperInstance = popperInstance) === null || _popperInstance === void 0 || _popperInstance.destroy();
      popperInstance = null;
    };
    var handleMouseEnter = function handleMouseEnter() {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
    var overlayInnerStyleMerge = function overlayInnerStyleMerge() {
      if (!overlayInnerStyle || !triggerEl || !popperRef.current) {
        return {};
      }
      if (_typeof$3(overlayInnerStyle) === "object") {
        return overlayInnerStyle;
      }
      return overlayInnerStyle(triggerEl, popperRef.current);
    };
    React.useLayoutEffect(function () {
      setVisibleState(true);
    }, []);
    var eventProps = hasTrigger.hover && {
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onMouseMove: handleMouseEnter
    };
    var hasArrowModifier = (_props$popperOptions = props.popperOptions) === null || _props$popperOptions === void 0 || (_props$popperOptions = _props$popperOptions.modifiers) === null || _props$popperOptions === void 0 ? void 0 : _props$popperOptions.some(function (modifier) {
      return modifier.name === "arrow";
    });
    var renderNode = /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$3E({
      ref: function ref(_ref2) {
        popperRef.current = _ref2;
        renderCallback(_ref2);
      },
      className: classNames$1([componentName, overlayClassName]),
      style: stylePopper()
    }, eventProps), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: overlayRef,
      className: classNames$1(overlayClasses),
      style: overlayInnerStyleMerge()
    }, content, showArrow && /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$3E({
      className: "".concat(componentName, "__arrow")
    }, hasArrowModifier && {
      "data-popper-arrow": ""
    }))));
    return visibleState ? /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      appear: true,
      timeout: 0,
      "in": visibleState,
      nodeRef: popperRef
    }, renderNode) : null;
  };
  function removeOverlayInstance() {
    if (overlayInstance) {
      unmount(overlayInstance);
      overlayInstance.remove();
      overlayInstance = null;
    }
    if (popperInstance) {
      popperInstance.destroy();
      popperInstance = null;
    }
  }
  var renderInstance = function renderInstance(props, attach) {
    return new Promise(function (resolve) {
      var pGlobalConfig = ConfigProvider.getGlobalConfig();
      render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
        globalConfig: pGlobalConfig
      }, /* @__PURE__ */React__default["default"].createElement(Overlay, _objectSpread$3E(_objectSpread$3E({}, props), {}, {
        renderCallback: function renderCallback(instance) {
          return resolve(instance);
        }
      }))), attach);
    });
  };
  var createPopupInstance = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(trigger, content, popupProps) {
      var _popupProps$delay, _delay$;
      var hasTrigger, currentTriggerEl, attach, delay, closeDelay, popupDom, instance, _mouseoutEvent, _focusoutEvent;
      return regenerator.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            hasTrigger = triggerType((popupProps === null || popupProps === void 0 ? void 0 : popupProps.trigger) || "hover");
            currentTriggerEl = getAttach$1(trigger);
            if (!(triggerEl && hasTrigger.click)) {
              _context.next = 1;
              break;
            }
            return _context.abrupt("return");
          case 1:
            triggerEl = currentTriggerEl;
            removeOverlayInstance();
            attach = getAttach$1((popupProps === null || popupProps === void 0 ? void 0 : popupProps.attach) || "body");
            delay = [].concat((_popupProps$delay = popupProps === null || popupProps === void 0 ? void 0 : popupProps.delay) !== null && _popupProps$delay !== void 0 ? _popupProps$delay : [250, 150]);
            closeDelay = (_delay$ = delay[1]) !== null && _delay$ !== void 0 ? _delay$ : delay[0];
            if (attach === document.body) {
              popupDom = document.createElement("div");
              document.body.appendChild(popupDom);
              attach = popupDom;
              overlayInstance = attach;
            }
            _context.next = 2;
            return renderInstance(_objectSpread$3E({}, _objectSpread$3E(_objectSpread$3E({}, popupProps), {}, {
              content: content,
              triggerEl: triggerEl
            })), attach);
          case 2:
            instance = _context.sent;
            if (hasTrigger.hover) {
              _mouseoutEvent = function mouseoutEvent() {
                timeout = setTimeout(removeOverlayInstance, closeDelay);
                off$1(triggerEl, "mouseleave", _mouseoutEvent);
              };
              on$1(triggerEl, "mouseleave", _mouseoutEvent);
            } else if (hasTrigger.focus) {
              _focusoutEvent = function focusoutEvent() {
                timeout = setTimeout(removeOverlayInstance, closeDelay);
                off$1(triggerEl, "focusout", _focusoutEvent);
              };
              on$1(triggerEl, "focusout", _focusoutEvent);
            }
            popperInstance = createPopper(triggerEl, instance, _objectSpread$3E({
              placement: getPopperPlacement((popupProps === null || popupProps === void 0 ? void 0 : popupProps.placement) || "top")
            }, popupProps === null || popupProps === void 0 ? void 0 : popupProps.popperOptions));
            return _context.abrupt("return", popperInstance);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function createPopupInstance(_x, _x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var PopupPlugin$1 = function PopupPlugin(trigger, content, popupProps) {
    return createPopupInstance(trigger, content, popupProps);
  };

  var Popup = Popup$1;
  var PopupPlugin = PopupPlugin$1;

  var period = 200;
  var noneRippleBg = "rgba(0, 0, 0, 0)";
  var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
  var getRippleColor = function getRippleColor(el, fixedRippleColor) {
    var _el$dataset;
    if (fixedRippleColor) {
      return fixedRippleColor;
    }
    if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
      var rippleColor = el.dataset.ripple;
      return rippleColor;
    }
    var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
    if (cssVariable) {
      return cssVariable;
    }
    return defaultRippleColor;
  };
  function useRipple(el, fixedRippleColor) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useAnimation = useAnimation(),
      keepRipple = _useAnimation.keepRipple;
    var rippleContainer = React.useMemo(function () {
      if (!canUseDocument) return null;
      var container = document.createElement("div");
      container.className = "".concat(classPrefix, "-ripple");
      return container;
    }, [classPrefix]);
    var handleAddRipple = React.useCallback(function (e) {
      var rippleColor = getRippleColor(el, fixedRippleColor);
      if (e.button !== 0 || !el || !keepRipple) return;
      if (el.classList.contains("".concat(classPrefix, "-is-active")) || el.classList.contains("".concat(classPrefix, "-is-disabled")) || el.classList.contains("".concat(classPrefix, "-is-checked")) || el.classList.contains("".concat(classPrefix, "-is-loading"))) return;
      var elStyle = getComputedStyle(el);
      var elBorder = parseInt(elStyle.borderWidth, 10);
      var border = elBorder > 0 ? elBorder : 0;
      var width = el.offsetWidth;
      var height = el.offsetHeight;
      if (rippleContainer.parentNode === null) {
        setStyle(rippleContainer, {
          position: "absolute",
          left: "".concat(0 - border, "px"),
          top: "".concat(0 - border, "px"),
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          borderRadius: elStyle.borderRadius,
          pointerEvents: "none",
          overflow: "hidden"
        });
        el.appendChild(rippleContainer);
      }
      var ripple = document.createElement("div");
      ripple.className = "".concat(classPrefix, "-ripple__inner");
      setStyle(ripple, {
        marginTop: "0",
        marginLeft: "0",
        right: "".concat(width, "px"),
        width: "".concat(width + 20, "px"),
        height: "100%",
        transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
        transform: "skewX(-8deg)",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        backgroundColor: rippleColor,
        opacity: "0.9"
      });
      var elMap = /* @__PURE__ */new WeakMap();
      for (var n = el.children.length, i = 0; i < n; ++i) {
        var child = el.children[i];
        if (child.style.zIndex === "" && child !== rippleContainer) {
          child.style.zIndex = "1";
          elMap.set(child, true);
        }
      }
      var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;
      if (initPosition === "" || initPosition === "static") {
        el.style.position = "relative";
      }
      rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
      setTimeout(function () {
        ripple.style.transform = "translateX(".concat(width, "px)");
      }, 0);
      var _handleClearRipple = function handleClearRipple() {
        ripple.style.backgroundColor = noneRippleBg;
        if (!el) return;
        el.removeEventListener("pointerup", _handleClearRipple, false);
        el.removeEventListener("pointerleave", _handleClearRipple, false);
        setTimeout(function () {
          ripple.remove();
          if (rippleContainer.children.length === 0) rippleContainer.remove();
        }, period * 2 + 100);
      };
      el.addEventListener("pointerup", _handleClearRipple, false);
      el.addEventListener("pointerleave", _handleClearRipple, false);
    }, [classPrefix, el, fixedRippleColor, rippleContainer, keepRipple]);
    React.useEffect(function () {
      if (!el) return;
      el.addEventListener("pointerdown", handleAddRipple, false);
      return function () {
        el.removeEventListener("pointerdown", handleAddRipple, false);
      };
    }, [handleAddRipple, fixedRippleColor, el]);
  }

  var buttonDefaultProps = {
    block: false,
    disabled: false,
    form: void 0,
    ghost: false,
    loading: false,
    shape: "rectangle",
    size: "medium",
    type: "button",
    variant: "base"
  };

  var _excluded$N = ["type", "theme", "variant", "icon", "disabled", "loading", "size", "block", "ghost", "shape", "children", "content", "className", "suffix", "href", "tag", "onClick"];
  function ownKeys$3E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3E(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Button$1 = /*#__PURE__*/React.forwardRef(function (originProps, ref) {
    var props = useDefaultProps(originProps, buttonDefaultProps);
    var type = props.type,
      theme = props.theme,
      variant = props.variant,
      icon = props.icon,
      disabled = props.disabled,
      loading = props.loading,
      size = props.size,
      block = props.block,
      ghost = props.ghost,
      shape = props.shape,
      children = props.children,
      content = props.content,
      className = props.className,
      suffix = props.suffix,
      href = props.href,
      tag = props.tag,
      onClick = props.onClick,
      buttonProps = _objectWithoutProperties$2(props, _excluded$N);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      btnDom = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    useRipple((ref === null || ref === void 0 ? void 0 : ref.current) || btnDom);
    var renderChildren = content !== null && content !== void 0 ? content : children;
    var iconNode = icon;
    if (loading) iconNode = /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: loading,
      inheritColor: true
    });
    var renderTheme = React.useMemo(function () {
      if (!theme) {
        if (variant === "base") return "primary";
        return "default";
      }
      return theme;
    }, [theme, variant]);
    var renderTag = React.useMemo(function () {
      if (!tag && href && !disabled) return "a";
      if (!tag && disabled) return "div";
      return tag || "button";
    }, [tag, href, disabled]);
    return /*#__PURE__*/React__default["default"].createElement(renderTag, _objectSpread$3D(_objectSpread$3D({}, buttonProps), {}, {
      href: href,
      type: type,
      ref: ref || setRefCurrent,
      disabled: disabled || loading,
      className: classNames$1(className, ["".concat(classPrefix, "-button"), "".concat(classPrefix, "-button--theme-").concat(renderTheme), "".concat(classPrefix, "-button--variant-").concat(variant)], _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-button--shape-").concat(shape), shape !== "rectangle"), "".concat(classPrefix, "-button--ghost"), ghost), "".concat(classPrefix, "-is-loading"), loading), "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-l"), size === "large"), "".concat(classPrefix, "-size-full-width"), block)),
      onClick: !disabled && !loading ? onClick : void 0
    }), /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, iconNode, renderChildren && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-button__text")
    }, renderChildren), suffix && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-button__suffix")
    }, parseTNode(suffix))));
  });
  Button$1.displayName = "Button";

  var Button = Button$1;

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var classnames = {
    exports: {}
  };

  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */

  (function (module) {
    /* global define */

    (function () {

      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;
          var argType = _typeof$3(arg);
          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg) && arg.length) {
            var inner = classNames.apply(null, arg);
            if (inner) {
              classes.push(inner);
            }
          } else if (argType === 'object') {
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
        return classes.join(' ');
      }
      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames);
  var classNames = classnames.exports;

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = /*#__PURE__*/React.createContext({
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  });
  var ConfigContext$1 = ConfigContext;

  var useConfig = function useConfig() {
    return React.useContext(ConfigContext$1);
  };
  var useConfig$1 = useConfig;

  function useCommonClassName$1() {
    var _useConfig = useConfig$1(),
      classPrefix = _useConfig.classPrefix;
    return React.useMemo(function () {
      return {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          medium: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
    }, [classPrefix]);
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName$1().SIZE;
    if (typeof size === "undefined") {
      return {};
    }
    if (!(size in COMMON_SIZE_CLASS_NAMES)) {
      return {
        className: "",
        style: {
          fontSize: size
        }
      };
    }
    return {
      className: COMMON_SIZE_CLASS_NAMES[size],
      style: {}
    };
  }

  function loadStylesheet() {
    var styleSheetId = "__TDESIGN_ICON_STYLE__";
    var iconStyleString = "@keyframes t-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  .t-icon {\n    display: inline-block;\n    vertical-align: middle;\n    width: 1em;\n    height: 1em;\n  }\n  .t-icon::before {\n    font-family: unset;\n  }\n  .t-icon-loading {\n    animation: t-spin 1s linear infinite;\n  }\n  .t-icon.t-size-s,\n  i.t-size-s {\n    font-size: 14px;\n  }\n  .t-icon.t-size-m,\n  i.t-size-m {\n    font-size: 16px;\n  }\n  .t-icon.t-size-l,\n  i.t-size-l {\n    font-size: 18px;\n  }\n  ";
    if (!document || document.getElementById(styleSheetId)) return;
    var styleSheet = document.createElement("style");
    styleSheet.setAttribute("id", styleSheetId);
    styleSheet.innerHTML = iconStyleString;
    document.head.appendChild(styleSheet);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayLikeToArray$5(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _unsupportedIterableToArray$5(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$5(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen);
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$5(arr, i) || _nonIterableRest();
  }
  var _excluded$M = ["strokeColor", "strokeWidth", "fillColor"],
    _excluded2$5 = ["icon", "id", "className", "size", "style"];
  function ownKeys$3D(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3C(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3D(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3D(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function render(node, id, rootProps) {
    var _strokeColor$, _fillColor$;
    var _rootProps$strokeColo = rootProps.strokeColor,
      strokeColor = _rootProps$strokeColo === void 0 ? "currentColor" : _rootProps$strokeColo,
      _rootProps$strokeWidt = rootProps.strokeWidth,
      strokeWidth = _rootProps$strokeWidt === void 0 ? 2 : _rootProps$strokeWidt,
      _rootProps$fillColor = rootProps.fillColor,
      fillColor = _rootProps$fillColor === void 0 ? "transparent" : _rootProps$fillColor,
      resetRootProps = _objectWithoutProperties$1(rootProps, _excluded$M);
    var filledColor;
    if (!rootProps.fillColor) filledColor = "currentColor";else filledColor = Array.isArray(fillColor) ? fillColor[0] : fillColor;
    var childProps = {
      strokeWidth: strokeWidth,
      strokeColor1: Array.isArray(strokeColor) ? strokeColor[0] : strokeColor,
      strokeColor2: Array.isArray(strokeColor) ? (_strokeColor$ = strokeColor[1]) !== null && _strokeColor$ !== void 0 ? _strokeColor$ : strokeColor[0] : strokeColor,
      fillColor1: Array.isArray(fillColor) ? fillColor[0] : fillColor,
      fillColor2: Array.isArray(fillColor) ? (_fillColor$ = fillColor[1]) !== null && _fillColor$ !== void 0 ? _fillColor$ : fillColor[0] : fillColor,
      filledColor: filledColor
    };
    return /*#__PURE__*/React.createElement(node.tag, _objectSpread$3C(_objectSpread$3C({
      key: id
    }, node.attrs), resetRootProps), (node.children || []).map(function (child, index) {
      return childRender(child, childProps, index);
    }));
  }
  function childRender(node, childProps, index) {
    var processedAttrs = {};
    if (node.attrs) {
      for (var _i = 0, _Object$entries = Object.entries(node.attrs); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        if (typeof value === "string" && value.startsWith("props.")) {
          var propName = value.split(".")[1];
          processedAttrs[key] = childProps[propName];
        } else {
          processedAttrs[key] = value;
        }
      }
    }
    return /*#__PURE__*/React.createElement(node.tag, _objectSpread$3C({
      key: index
    }, processedAttrs), (node.children || []).map(function (child, index2) {
      return childRender(child, childProps, index2);
    }));
  }
  var IconBase = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var icon = props.icon,
      id = props.id,
      className = props.className,
      size = props.size,
      style = props.style,
      restProps = _objectWithoutProperties$1(props, _excluded2$5);
    var _useSizeProps = useSizeProps(size),
      sizeClassName = _useSizeProps.className,
      sizeStyle = _useSizeProps.style;
    var cls = classNames("t-icon", "t-icon-".concat(id), className, sizeClassName);
    React.useEffect(function () {
      loadStylesheet();
    }, []);
    return render(icon, "".concat(id), _objectSpread$3C({
      ref: ref,
      className: cls,
      style: _objectSpread$3C(_objectSpread$3C({
        fill: "none"
      }, style), sizeStyle)
    }, restProps));
  });

  function ownKeys$3C(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3B(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3C(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3C(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$S = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "add-rectangle"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M21 3H3V21L21 21V3Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M21 3H3V21L21 21V3Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M12 7.5V12M12 12V16.5M12 12H16.5M12 12L7.5 12",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var AddRectangleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3B(_objectSpread$3B({}, props), {}, {
      id: "add-rectangle",
      ref: ref,
      icon: element$S
    }));
  });
  AddRectangleIcon.displayName = "AddRectangleIcon";
  var TdAddRectangleIcon = AddRectangleIcon;

  function ownKeys$3B(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3A(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3B(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3B(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$R = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "add"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M12 5L12 19M19 12L5 12",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var AddIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3A(_objectSpread$3A({}, props), {}, {
      id: "add",
      ref: ref,
      icon: element$R
    }));
  });
  AddIcon.displayName = "AddIcon";
  var TdAddIcon = AddIcon;

  function ownKeys$3A(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3A(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3A(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$Q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M15 12H19.5L12 22L4.5 12H9V2H15V12Z"
      }
    }]
  };
  var ArrowTriangleDownFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3z(_objectSpread$3z({}, props), {}, {
      id: "arrow-triangle-down-filled",
      ref: ref,
      icon: element$Q
    }));
  });
  ArrowTriangleDownFilledIcon.displayName = "ArrowTriangleDownFilledIcon";
  var TDArrowTriangleDownFilledIcon = ArrowTriangleDownFilledIcon;

  function ownKeys$3z(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$P = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M15 12H19.5L12 2L4.5 12H9V22H15V12Z"
      }
    }]
  };
  var ArrowTriangleUpFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3y(_objectSpread$3y({}, props), {}, {
      id: "arrow-triangle-up-filled",
      ref: ref,
      icon: element$P
    }));
  });
  ArrowTriangleUpFilledIcon.displayName = "ArrowTriangleUpFilledIcon";
  var TDArrowTriangleUpFilledIcon = ArrowTriangleUpFilledIcon;

  function ownKeys$3y(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3x(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$O = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "backtop"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M17.5 14.5L12 9L6.5 14.5M5 5H19M12 10.25V20",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var BacktopIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3x(_objectSpread$3x({}, props), {}, {
      id: "backtop",
      ref: ref,
      icon: element$O
    }));
  });
  BacktopIcon.displayName = "BacktopIcon";
  var BacktopIcon$1 = BacktopIcon;

  function ownKeys$3x(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3w(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3x(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3x(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$N = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "browse-off"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M13.1758 8.17578C14.4396 8.56376 15.4368 9.56096 15.8247 10.8247M21.2858 15.2856C22.0085 14.2983 22.5776 13.1913 22.9578 12C21.4771 7.36017 17.131 4 12.0001 4C11.3698 4 10.7513 4.05072 10.1484 4.1483M5.80747 5.80786C3.57225 7.23888 1.86478 9.42193 1.04199 12.0001C2.52275 16.6399 6.86881 20.0001 11.9997 20.0001C14.2796 20.0001 16.4045 19.3367 18.1919 18.1923L5.80747 5.80786ZM8 12.0003C8 10.8957 8.44771 9.89573 9.17157 9.17188L14.8284 14.8287C14.1046 15.5526 13.1046 16.0003 12 16.0003C9.79086 16.0003 8 14.2094 8 12.0003Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M20.9996 21L3 3",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var BrowseOffIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3w(_objectSpread$3w({}, props), {}, {
      id: "browse-off",
      ref: ref,
      icon: element$N
    }));
  });
  BrowseOffIcon.displayName = "BrowseOffIcon";
  var TdBrowseOffIcon = BrowseOffIcon;

  function ownKeys$3w(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3v(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3w(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3w(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$M = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "browse",
        "clipPath": "url(#clip0_543_7945)"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M11.9997 4C6.86881 4 2.52275 7.36017 1.04199 12C2.52275 16.6398 6.86881 20 11.9997 20C17.1306 20 21.4766 16.6398 22.9574 12C21.4766 7.36017 17.1306 4 11.9997 4Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "fill2",
          "fill": "props.fillColor2",
          "d": "M16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M11.9997 4C6.86881 4 2.52275 7.36017 1.04199 12C2.52275 16.6398 6.86881 20 11.9997 20C17.1306 20 21.4766 16.6398 22.9574 12C21.4766 7.36017 17.1306 4 11.9997 4Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var BrowseIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3v(_objectSpread$3v({}, props), {}, {
      id: "browse",
      ref: ref,
      icon: element$M
    }));
  });
  BrowseIcon.displayName = "BrowseIcon";
  var TdBrowseIcon = BrowseIcon;

  function ownKeys$3v(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3u(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3v(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3v(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$L = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "calendar"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M21 10H3V21H21V10Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "fill2",
          "fill": "props.fillColor2",
          "d": "M21 10H3V5H21V10Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M3 10H21M3 10V5H21V10M3 10V21H21V10M7 5V1.5M17 5V1.5",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var CalendarIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3u(_objectSpread$3u({}, props), {}, {
      id: "calendar",
      ref: ref,
      icon: element$L
    }));
  });
  CalendarIcon.displayName = "CalendarIcon";
  var TdCalendarIcon = CalendarIcon;

  function ownKeys$3u(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3t(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3u(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3u(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$K = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "id": "caret-right-small",
        "fill": "props.strokeColor1",
        "d": "M14.9999 12L9.49988 6.5L9.49988 17.5L14.9999 12Z"
      }
    }]
  };
  var CaretRightSmallIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3t(_objectSpread$3t({}, props), {}, {
      id: "caret-right-small",
      ref: ref,
      icon: element$K
    }));
  });
  CaretRightSmallIcon.displayName = "CaretRightSmallIcon";
  var TdCaretRightSmallIcon = CaretRightSmallIcon;

  function ownKeys$3t(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3s(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3t(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3t(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$J = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM7.49985 10.5858L10.4999 13.5858L16.4999 7.58578L17.9141 8.99999L10.4999 16.4142L6.08564 12L7.49985 10.5858Z"
      }
    }]
  };
  var CheckCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3s(_objectSpread$3s({}, props), {}, {
      id: "check-circle-filled",
      ref: ref,
      icon: element$J
    }));
  });
  CheckCircleFilledIcon.displayName = "CheckCircleFilledIcon";
  var CheckCircleFilledIcon$1 = CheckCircleFilledIcon;

  function ownKeys$3s(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3r(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3s(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3s(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "check"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M19.5708 7.37842L10.3785 16.5708L5.42871 11.6211",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var CheckIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3r(_objectSpread$3r({}, props), {}, {
      id: "check",
      ref: ref,
      icon: element$I
    }));
  });
  CheckIcon.displayName = "CheckIcon";
  var CheckIcon$1 = CheckIcon;

  function ownKeys$3r(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3r(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3r(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-down"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M17.5 9.5L12 15L6.5 9.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronDownIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3q(_objectSpread$3q({}, props), {}, {
      id: "chevron-down",
      ref: ref,
      icon: element$H
    }));
  });
  ChevronDownIcon.displayName = "ChevronDownIcon";
  var TdChevronDownIcon = ChevronDownIcon;

  function ownKeys$3q(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3p(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-left.double"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M10.5 7.5L6 12L10.5 16.5M17 7.5L12.5 12L17 16.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronLeftDoubleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3p(_objectSpread$3p({}, props), {}, {
      id: "chevron-left-double",
      ref: ref,
      icon: element$G
    }));
  });
  ChevronLeftDoubleIcon.displayName = "ChevronLeftDoubleIcon";
  var TdChevronLeftDoubleIcon = ChevronLeftDoubleIcon;

  function ownKeys$3p(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-left"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M14.5 17.5L9 12L14.5 6.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronLeftIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3o(_objectSpread$3o({}, props), {}, {
      id: "chevron-left",
      ref: ref,
      icon: element$F
    }));
  });
  ChevronLeftIcon.displayName = "ChevronLeftIcon";
  var TdChevronLeftIcon = ChevronLeftIcon;

  function ownKeys$3o(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3n(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3o(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3o(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-right-circle"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M10.5 16L14.5 12L10.5 8",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronRightCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3n(_objectSpread$3n({}, props), {}, {
      id: "chevron-right-circle",
      ref: ref,
      icon: element$E
    }));
  });
  ChevronRightCircleIcon.displayName = "ChevronRightCircleIcon";
  var TdChevronRightCircleIcon = ChevronRightCircleIcon;

  function ownKeys$3n(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3m(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3n(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3n(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-right.double"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M13.5 16.5L18 12L13.5 7.5M7 16.5L11.5 12L7 7.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronRightDoubleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3m(_objectSpread$3m({}, props), {}, {
      id: "chevron-right-double",
      ref: ref,
      icon: element$D
    }));
  });
  ChevronRightDoubleIcon.displayName = "ChevronRightDoubleIcon";
  var TdChevronRightDoubleIcon = ChevronRightDoubleIcon;

  function ownKeys$3m(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3l(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3m(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3m(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-right"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M9.5 17.5L15 12L9.5 6.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronRightIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3l(_objectSpread$3l({}, props), {}, {
      id: "chevron-right",
      ref: ref,
      icon: element$C
    }));
  });
  ChevronRightIcon.displayName = "ChevronRightIcon";
  var TdChevronRightIcon = ChevronRightIcon;

  function ownKeys$3l(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3k(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3l(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3l(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "chevron-up"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M17.5 14.5L12 9L6.5 14.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ChevronUpIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3k(_objectSpread$3k({}, props), {}, {
      id: "chevron-up",
      ref: ref,
      icon: element$B
    }));
  });
  ChevronUpIcon.displayName = "ChevronUpIcon";
  var TdChevronUpIcon = ChevronUpIcon;

  function ownKeys$3k(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3j(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3k(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3k(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM8.81753 7.40346L11.9999 10.5858L15.1815 7.40414L16.5957 8.81835L13.4141 12L16.5957 15.1816L15.1815 16.5958L11.9999 13.4142L8.81753 16.5965L7.40332 15.1823L10.5856 12L7.40332 8.81767L8.81753 7.40346Z"
      }
    }]
  };
  var CloseCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3j(_objectSpread$3j({}, props), {}, {
      id: "close-circle-filled",
      ref: ref,
      icon: element$A
    }));
  });
  CloseCircleFilledIcon.displayName = "CloseCircleFilledIcon";
  var TdCloseCircleFilledIcon = CloseCircleFilledIcon;

  function ownKeys$3j(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3i(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3j(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3j(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "close"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M16.9503 7.05029L12.0005 12M12.0005 12L7.05078 16.9498M12.0005 12L16.9503 16.9498M12.0005 12L7.05078 7.05029",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var CloseIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3i(_objectSpread$3i({}, props), {}, {
      id: "close",
      ref: ref,
      icon: element$z
    }));
  });
  CloseIcon.displayName = "CloseIcon";
  var TdCloseIcon = CloseIcon;

  function ownKeys$3i(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3h(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3i(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3i(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "copy"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M10 10H21V21H10z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M10 10H21V21H10V10Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M14 6.5V3L3 3L3 14H6.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var CopyIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3h(_objectSpread$3h({}, props), {}, {
      id: "copy",
      ref: ref,
      icon: element$y
    }));
  });
  CopyIcon.displayName = "CopyIcon";
  var CopyIcon$1 = CopyIcon;

  function ownKeys$3h(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3g(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3h(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3h(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "delete"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M5 5H19L18.5 22H5.5L5 5Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M21 5H3M5 5H19L18.5 22H5.5L5 5ZM8.5 2H15.5V5H8.5V2Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M12 9V18",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var DeleteIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3g(_objectSpread$3g({}, props), {}, {
      id: "delete",
      ref: ref,
      icon: element$x
    }));
  });
  DeleteIcon.displayName = "DeleteIcon";
  var TdDeleteIcon = DeleteIcon;

  function ownKeys$3g(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3f(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3g(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3g(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "download"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M16.5 10.5L12 15L7.5 10.5M12 13.75V4",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M20.5 15V20H3.5V15",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var DownloadIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3f(_objectSpread$3f({}, props), {}, {
      id: "download",
      ref: ref,
      icon: element$w
    }));
  });
  DownloadIcon.displayName = "DownloadIcon";
  var TdDownloadIcon = DownloadIcon;

  function ownKeys$3f(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3e(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3f(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3f(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "edit-1"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M3.0001 20.9999L7.5 20.9999L17.5 11L13 6.5L3.0001 16.5L3.0001 20.9999Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "fill2",
          "fill": "props.fillColor2",
          "d": "M21.5 7L17 2.5L13 6.5L17.5 11L21.5 7Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M12.9999 6.5L3 16.5L3 20.9999L7.4999 20.9999L17.4999 11M12.9999 6.5L17.4999 11M12.9999 6.5L16.9999 2.5L21.4999 7L17.4999 11",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var Edit1Icon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3e(_objectSpread$3e({}, props), {}, {
      id: "edit-1",
      ref: ref,
      icon: element$v
    }));
  });
  Edit1Icon.displayName = "Edit1Icon";
  var TdEdit1Icon = Edit1Icon;

  function ownKeys$3e(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3d(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3e(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3e(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "ellipsis"
      },
      "children": [{
        "tag": "g",
        "attrs": {
          "id": "stroke1"
        },
        "children": [{
          "tag": "path",
          "attrs": {
            "stroke": "props.strokeColor1",
            "d": "M4 11.5H5V12.5H4V11.5Z",
            "strokeLinecap": "square",
            "strokeWidth": "props.strokeWidth"
          }
        }, {
          "tag": "path",
          "attrs": {
            "stroke": "props.strokeColor1",
            "d": "M11.5 11.5H12.5V12.5H11.5V11.5Z",
            "strokeLinecap": "square",
            "strokeWidth": "props.strokeWidth"
          }
        }, {
          "tag": "path",
          "attrs": {
            "stroke": "props.strokeColor1",
            "d": "M19 11.5H20V12.5H19V11.5Z",
            "strokeLinecap": "square",
            "strokeWidth": "props.strokeWidth"
          }
        }]
      }]
    }]
  };
  var EllipsisIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3d(_objectSpread$3d({}, props), {}, {
      id: "ellipsis",
      ref: ref,
      icon: element$u
    }));
  });
  EllipsisIcon.displayName = "EllipsisIcon";
  var EllipsisIcon$1 = EllipsisIcon;

  function ownKeys$3d(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3c(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3d(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3d(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1ZM11.0001 14H13.0001V6.49998H11.0001V14ZM13.004 15.5H11.0001V17.5039H13.004V15.5Z"
      }
    }]
  };
  var ErrorCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3c(_objectSpread$3c({}, props), {}, {
      id: "error-circle-filled",
      ref: ref,
      icon: element$t
    }));
  });
  ErrorCircleFilledIcon.displayName = "ErrorCircleFilledIcon";
  var TdErrorCircleFilledIcon = ErrorCircleFilledIcon;

  function ownKeys$3c(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3b(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3c(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3c(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "error"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M12 3L12 15.5M12 20H12.0039V20.0039H12V20Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ErrorIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3b(_objectSpread$3b({}, props), {}, {
      id: "error",
      ref: ref,
      icon: element$s
    }));
  });
  ErrorIcon.displayName = "ErrorIcon";
  var TdErrorIcon = ErrorIcon;

  function ownKeys$3b(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3a(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3b(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3b(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "file-copy"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M7 18V2H14V8H20V18H7Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M14 2V8H20M14 2H15L20 7V8M14 2H7V18H20V8",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M3 6L3 22H14",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var FileCopyIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$3a(_objectSpread$3a({}, props), {}, {
      id: "file-copy",
      ref: ref,
      icon: element$r
    }));
  });
  FileCopyIcon.displayName = "FileCopyIcon";
  var TdFileCopyIcon = FileCopyIcon;

  function ownKeys$3a(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$39(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3a(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3a(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "file-excel"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M4 22H20V8H14V2H4V22Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M14 2V8H20M14 2H15L20 7V8M14 2H4V22H20V8",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M14 11L14 11.6465C14 11.918 13.8896 12.1779 13.6941 12.3664L12 14M10 11L10 11.6465C10 11.918 10.1104 12.1779 10.3059 12.3664L12 14M12 14L10.3059 15.6336C10.1104 15.8221 10 16.082 10 16.3535L10 17M12 14L13.6941 15.6336C13.8896 15.8221 14 16.082 14 16.3535V17",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var FileExcelIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$39(_objectSpread$39({}, props), {}, {
      id: "file-excel",
      ref: ref,
      icon: element$q
    }));
  });
  FileExcelIcon.displayName = "FileExcelIcon";
  var TdFileExcelIcon = FileExcelIcon;

  function ownKeys$39(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$38(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$39(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$39(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "file-pdf"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M20 10V7L15 2H4V22H20M14 2V8H20",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M7 16V13H9.71428C9.87208 13 10 13.1279 10 13.2857V15.7143C10 15.8721 9.87208 16 9.71428 16H7ZM7 16V19M20.6667 13H18.2857C18.1279 13 18 13.1279 18 13.2857V16M18 16H20.6667M18 16V19M12.5 13V19H15.2143C15.3721 19 15.5 18.8721 15.5 18.7143V13.2857C15.5 13.1279 15.3721 13 15.2143 13H12.5Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var FilePdfIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$38(_objectSpread$38({}, props), {}, {
      id: "file-pdf",
      ref: ref,
      icon: element$p
    }));
  });
  FilePdfIcon.displayName = "FilePdfIcon";
  var TdFilePdfIcon = FilePdfIcon;

  function ownKeys$38(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$37(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$38(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$38(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "file-powerpoint"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M4 22H20V8H14V2H4V22Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M14 2V8H20M14 2H15L20 7V8M14 2H4V22H20V8",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M10 14.6V11H13C13.5523 11 14 11.4477 14 12V13.6C14 14.1523 13.5523 14.6 13 14.6H10ZM10 14.6V17",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var FilePowerpointIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$37(_objectSpread$37({}, props), {}, {
      id: "file-powerpoint",
      ref: ref,
      icon: element$o
    }));
  });
  FilePowerpointIcon.displayName = "FilePowerpointIcon";
  var TdFilePowerpointIcon = FilePowerpointIcon;

  function ownKeys$37(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$36(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$37(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$37(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "file-word"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M4 22H20V8H14V2H4V22Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M14 2V8H20M14 2H15L20 7V8M14 2H4V22H20V8",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M9 12L9 16C9 16.5523 9.44772 17 10 17H12M12 17L12 12M12 17H14C14.5523 17 15 16.5523 15 16V12",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var FileWordIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$36(_objectSpread$36({}, props), {}, {
      id: "file-word",
      ref: ref,
      icon: element$n
    }));
  });
  FileWordIcon.displayName = "FileWordIcon";
  var TdFileWordIcon = FileWordIcon;

  function ownKeys$36(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$35(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$36(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$36(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "file"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M4 22H20V8H14V2H4V22Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M14 2V8H20M14 2H15L20 7V8M14 2H4V22H20V8",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var FileIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$35(_objectSpread$35({}, props), {}, {
      id: "file",
      ref: ref,
      icon: element$m
    }));
  });
  FileIcon.displayName = "FileIcon";
  var TdFileIcon = FileIcon;

  function ownKeys$35(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$34(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$35(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$35(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "filter"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M19.5 4H4.5L10.5 12.5V20H13.5V12.5L19.5 4Z",
          "fillRule": "evenodd",
          "clipRule": "evenodd"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M19.5 4H4.5L10.5 12.5V20H13.5V12.5L19.5 4Z",
          "fillRule": "evenodd",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth",
          "clipRule": "evenodd"
        }
      }]
    }]
  };
  var FilterIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$34(_objectSpread$34({}, props), {}, {
      id: "filter",
      ref: ref,
      icon: element$l
    }));
  });
  FilterIcon.displayName = "FilterIcon";
  var TdFilterIcon = FilterIcon;

  function ownKeys$34(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$33(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$34(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$34(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM11.8265 11.8902C12.2582 11.3593 12.8004 10.9159 13.2365 10.5723C13.7034 10.2045 14.0002 9.63718 14.0002 9C14.0002 7.89543 13.1048 7 12.0002 7C11.131 7 10.3888 7.5551 10.1138 8.33325L9.78055 9.27609L7.89487 8.6096L8.22811 7.66676C8.77675 6.11451 10.2571 5 12.0002 5C14.2094 5 16.0002 6.79086 16.0002 9C16.0002 10.2759 15.4018 11.4125 14.4742 12.1433C14.0426 12.4834 13.6573 12.8088 13.3783 13.1519C13.1038 13.4896 13.0002 13.762 13.0002 14V15.25H11.0002V14C11.0002 13.1334 11.3905 12.4265 11.8265 11.8902ZM11.0001 18.2539V16.25H13.004V18.2539H11.0001Z"
      }
    }]
  };
  var HelpCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$33(_objectSpread$33({}, props), {}, {
      id: "help-circle-filled",
      ref: ref,
      icon: element$k
    }));
  });
  HelpCircleFilledIcon.displayName = "HelpCircleFilledIcon";
  var TdHelpCircleFilledIcon = HelpCircleFilledIcon;

  function ownKeys$33(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$32(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$33(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$33(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "image-error"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M21 11V3H3V21H11M13 14L9 10L3.5 15.5M17.75 8.25C17.75 9.35457 16.8546 10.25 15.75 10.25C14.6454 10.25 13.75 9.35457 13.75 8.25C13.75 7.14543 14.6454 6.25 15.75 6.25C16.8546 6.25 17.75 7.14543 17.75 8.25Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M21.8287 16.1719L19.0003 19.0003M19.0003 19.0003L16.1719 21.8287M19.0003 19.0003L16.1719 16.1719M19.0003 19.0003L21.8287 21.8287",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ImageErrorIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$32(_objectSpread$32({}, props), {}, {
      id: "image-error",
      ref: ref,
      icon: element$j
    }));
  });
  ImageErrorIcon.displayName = "ImageErrorIcon";
  var TdImageErrorIcon = ImageErrorIcon;

  function ownKeys$32(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$31(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$32(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$32(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "image"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M3 21H20L9 10L3 16V21Z"
        }
      }, {
        "tag": "circle",
        "attrs": {
          "id": "fill2",
          "cx": 15.75,
          "cy": 8.25,
          "r": 2,
          "fill": "props.fillColor2"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M3 16V3H21V21H20M3 16V21H20M3 16L9 10L20 21",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "circle",
        "attrs": {
          "id": "stroke2",
          "cx": 15.75,
          "cy": 8.25,
          "r": 2,
          "stroke": "props.strokeColor2",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ImageIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$31(_objectSpread$31({}, props), {}, {
      id: "image",
      ref: ref,
      icon: element$i
    }));
  });
  ImageIcon.displayName = "ImageIcon";
  var TdImageIcon = ImageIcon;

  function ownKeys$31(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$30(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$31(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$31(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM10.996 8.50002V6.49611H12.9999V8.50002H10.996ZM12.9999 10L12.9999 17.5H10.9999V10L12.9999 10Z"
      }
    }]
  };
  var InfoCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$30(_objectSpread$30({}, props), {}, {
      id: "info-circle-filled",
      ref: ref,
      icon: element$h
    }));
  });
  InfoCircleFilledIcon.displayName = "InfoCircleFilledIcon";
  var TdInfoCircleFilledIcon = InfoCircleFilledIcon;

  function ownKeys$30(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2$(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$30(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$30(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "minus-rectangle"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M21 3H3V21L21 21V3Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M21 3H3V21L21 21V3Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M16.5 12L7.5 12",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var MinusRectangleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2$(_objectSpread$2$({}, props), {}, {
      id: "minus-rectangle",
      ref: ref,
      icon: element$g
    }));
  });
  MinusRectangleIcon.displayName = "MinusRectangleIcon";
  var TdMinusRectangleIcon = MinusRectangleIcon;

  function ownKeys$2$(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2$(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "mirror"
      },
      "children": [{
        "tag": "g",
        "attrs": {
          "id": "fill1"
        },
        "children": [{
          "tag": "path",
          "attrs": {
            "fill": "props.fillColor1",
            "d": "M8 8.5V17.5H3L8 8.5Z"
          }
        }, {
          "tag": "path",
          "attrs": {
            "fill": "props.fillColor1",
            "d": "M16 8.5V17.5H21L16 8.5Z"
          }
        }]
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M12 3L12 21",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "g",
        "attrs": {
          "id": "stroke1"
        },
        "children": [{
          "tag": "path",
          "attrs": {
            "stroke": "props.strokeColor1",
            "d": "M8 8.5V17.5H3L8 8.5Z",
            "strokeLinecap": "square",
            "strokeWidth": "props.strokeWidth"
          }
        }, {
          "tag": "path",
          "attrs": {
            "stroke": "props.strokeColor1",
            "d": "M16 8.5V17.5H21L16 8.5Z",
            "strokeLinecap": "square",
            "strokeWidth": "props.strokeWidth"
          }
        }]
      }]
    }]
  };
  var MirrorIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2_(_objectSpread$2_({}, props), {}, {
      id: "mirror",
      ref: ref,
      icon: element$f
    }));
  });
  MirrorIcon.displayName = "MirrorIcon";
  var TdMirrorIcon = MirrorIcon;

  function ownKeys$2_(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2_(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "page-first"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M7.5 18V6M16.25 17.25L11 12L16.25 6.75",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var PageFirstIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2Z(_objectSpread$2Z({}, props), {}, {
      id: "page-first",
      ref: ref,
      icon: element$e
    }));
  });
  PageFirstIcon.displayName = "PageFirstIcon";
  var TdPageFirstIcon = PageFirstIcon;

  function ownKeys$2Z(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "page-last"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M16.5 18V6M7.75 17.25L13 12L7.75 6.75",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var PageLastIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2Y(_objectSpread$2Y({}, props), {}, {
      id: "page-last",
      ref: ref,
      icon: element$d
    }));
  });
  PageLastIcon.displayName = "PageLastIcon";
  var TdPageLastIcon = PageLastIcon;

  function ownKeys$2Y(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "refresh"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M21.448 13C20.9483 17.7767 16.909 21.5 12 21.5C8.18227 21.5 4.89052 19.248 3.38065 16M2.5 20.5V15.5H5.5M2.55176 11C3.05145 6.22334 7.09079 2.5 11.9998 2.5C15.8175 2.5 19.1092 4.75197 20.6191 8M21.4998 3.5V8.5H18.4998",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var RefreshIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2X(_objectSpread$2X({}, props), {}, {
      id: "refresh",
      ref: ref,
      icon: element$c
    }));
  });
  RefreshIcon.displayName = "RefreshIcon";
  var RefreshIcon$1 = RefreshIcon;

  function ownKeys$2X(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2X(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "remove"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M19 12L5 12",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var RemoveIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2W(_objectSpread$2W({}, props), {}, {
      id: "remove",
      ref: ref,
      icon: element$b
    }));
  });
  RemoveIcon.displayName = "RemoveIcon";
  var TdRemoveIcon = RemoveIcon;

  function ownKeys$2W(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2W(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "rotation"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M12 20C12 15.5818 8.41828 12 4 12M3 3V21H21",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var RotationIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2V(_objectSpread$2V({}, props), {}, {
      id: "rotation",
      ref: ref,
      icon: element$a
    }));
  });
  RotationIcon.displayName = "RotationIcon";
  var TdRotationIcon = RotationIcon;

  function ownKeys$2V(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2V(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "round"
      },
      "children": [{
        "tag": "circle",
        "attrs": {
          "id": "fill1",
          "cx": 12,
          "cy": 12,
          "r": 7,
          "fill": "props.fillColor1"
        }
      }, {
        "tag": "circle",
        "attrs": {
          "id": "stroke1",
          "cx": 12,
          "cy": 12,
          "r": 7,
          "stroke": "props.strokeColor1",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var RoundIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2U(_objectSpread$2U({}, props), {}, {
      id: "round",
      ref: ref,
      icon: element$9
    }));
  });
  RoundIcon.displayName = "RoundIcon";
  var TdRoundIcon = RoundIcon;

  function ownKeys$2U(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2U(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "search"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M15.8033 15.8033C12.8744 18.7322 8.12563 18.7322 5.1967 15.8033C2.26777 12.8744 2.26777 8.12563 5.1967 5.1967C8.12563 2.26777 12.8744 2.26777 15.8033 5.1967C18.7322 8.12563 18.7322 12.8744 15.8033 15.8033Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M15.8027 15.8037L21.106 21.107",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M15.8033 15.8033C12.8744 18.7322 8.12563 18.7322 5.1967 15.8033C2.26777 12.8744 2.26777 8.12563 5.1967 5.1967C8.12563 2.26777 12.8744 2.26777 15.8033 5.1967C18.7322 8.12563 18.7322 12.8744 15.8033 15.8033Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var SearchIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2T(_objectSpread$2T({}, props), {}, {
      id: "search",
      ref: ref,
      icon: element$8
    }));
  });
  SearchIcon.displayName = "SearchIcon";
  var TdSearchIcon = SearchIcon;

  function ownKeys$2T(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2T(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "setting"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M20.6604 7L12.0001 2L3.33984 7V17L12.0001 22L20.6604 17V7ZM12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z",
          "fillRule": "evenodd",
          "clipRule": "evenodd"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "fill2",
          "fill": "props.fillColor2",
          "d": "M16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M12.0001 2L20.6604 7V17L12.0001 22L3.33984 17V7L12.0001 2Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var SettingIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2S(_objectSpread$2S({}, props), {}, {
      id: "setting",
      ref: ref,
      icon: element$7
    }));
  });
  SettingIcon.displayName = "SettingIcon";
  var TdSettingIcon = SettingIcon;

  function ownKeys$2S(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2S(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12.0012 0.63031L14.9039 8.98087L23.7427 9.16099L16.6978 14.502L19.2579 22.9639L12.0012 17.9143L4.74461 22.9639L7.30465 14.502L0.259766 9.16099L9.09859 8.98087L12.0012 0.63031Z"
      }
    }]
  };
  var StarFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2R(_objectSpread$2R({}, props), {}, {
      id: "star-filled",
      ref: ref,
      icon: element$6
    }));
  });
  StarFilledIcon.displayName = "StarFilledIcon";
  var TdStarFilledIcon = StarFilledIcon;

  function ownKeys$2R(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2R(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "props.filledColor",
        "d": "M12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23ZM12.9999 5.49999H10.9999L10.9998 12.4142L14.9999 16.4142L16.4141 15L12.9999 11.5858V5.49999Z"
      }
    }]
  };
  var TimeFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2Q(_objectSpread$2Q({}, props), {}, {
      id: "time-filled",
      ref: ref,
      icon: element$5
    }));
  });
  TimeFilledIcon.displayName = "TimeFilledIcon";
  var TdTimeFilledIcon = TimeFilledIcon;

  function ownKeys$2Q(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "time"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12Z",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M12 6.5L12 12L15 15",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var TimeIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2P(_objectSpread$2P({}, props), {}, {
      id: "time",
      ref: ref,
      icon: element$4
    }));
  });
  TimeIcon.displayName = "TimeIcon";
  var TdTimeIcon = TimeIcon;

  function ownKeys$2P(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2P(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "upload"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M16.5 8.5L12 4L7.5 8.5M12 5.25V15",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M20.5 15V20H3.5V15",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var UploadIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2O(_objectSpread$2O({}, props), {}, {
      id: "upload",
      ref: ref,
      icon: element$3
    }));
  });
  UploadIcon.displayName = "UploadIcon";
  var TdUploadIcon = UploadIcon;

  function ownKeys$2O(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2O(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "video"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M3 3H21V21H3V3Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "fill2",
          "fill": "props.fillColor2",
          "d": "M15.75 11.9997L9 15.8968L9 8.10254L15.75 11.9997Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M3 3H21V21H3V3Z",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M15.75 11.9997L9 15.8968L9 8.10254L15.75 11.9997Z",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var VideoIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2N(_objectSpread$2N({}, props), {}, {
      id: "video",
      ref: ref,
      icon: element$2
    }));
  });
  VideoIcon.displayName = "VideoIcon";
  var TdVideoIcon = VideoIcon;

  function ownKeys$2N(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2N(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "zoom-in"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M15.8033 15.8033C12.8744 18.7322 8.12563 18.7322 5.1967 15.8033C2.26777 12.8744 2.26777 8.12563 5.1967 5.1967C8.12563 2.26777 12.8744 2.26777 15.8033 5.1967C18.7322 8.12563 18.7322 12.8744 15.8033 15.8033Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M15.8033 15.8033C12.8744 18.7322 8.12563 18.7322 5.1967 15.8033C2.26777 12.8744 2.26777 8.12563 5.1967 5.1967C8.12563 2.26777 12.8744 2.26777 15.8033 5.1967C18.7322 8.12563 18.7322 12.8744 15.8033 15.8033ZM15.8033 15.8033L21.1066 21.1066",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M10.5 13.5V10.5M10.5 10.5L10.5 7.5M10.5 10.5H7.5M10.5 10.5H13.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ZoomInIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2M(_objectSpread$2M({}, props), {}, {
      id: "zoom-in",
      ref: ref,
      icon: element$1
    }));
  });
  ZoomInIcon.displayName = "ZoomInIcon";
  var TdZoomInIcon = ZoomInIcon;

  function ownKeys$2M(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2M(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "id": "zoom-out"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "id": "fill1",
          "fill": "props.fillColor1",
          "d": "M15.8033 15.8033C12.8744 18.7322 8.12563 18.7322 5.1967 15.8033C2.26777 12.8744 2.26777 8.12563 5.1967 5.1967C8.12563 2.26777 12.8744 2.26777 15.8033 5.1967C18.7322 8.12563 18.7322 12.8744 15.8033 15.8033Z"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke1",
          "stroke": "props.strokeColor1",
          "d": "M15.8033 15.8033C12.8744 18.7322 8.12563 18.7322 5.1967 15.8033C2.26777 12.8744 2.26777 8.12563 5.1967 5.1967C8.12563 2.26777 12.8744 2.26777 15.8033 5.1967C18.7322 8.12563 18.7322 12.8744 15.8033 15.8033ZM15.8033 15.8033L21.1066 21.1066",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }, {
        "tag": "path",
        "attrs": {
          "id": "stroke2",
          "stroke": "props.strokeColor2",
          "d": "M7.5 10.5H10.5L13.5 10.5",
          "strokeLinecap": "square",
          "strokeWidth": "props.strokeWidth"
        }
      }]
    }]
  };
  var ZoomOutIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$2L(_objectSpread$2L({}, props), {}, {
      id: "zoom-out",
      ref: ref,
      icon: element
    }));
  });
  ZoomOutIcon.displayName = "ZoomOutIcon";
  var TdZoomOutIcon = ZoomOutIcon;

  var reactIs = reactIs$2.exports;

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above

    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);
        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }
      var keys = getOwnPropertyNames(sourceComponent);
      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }
      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
          try {
            // Avoid failures from read-only properties
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }
    return targetComponent;
  }
  var hoistNonReactStatics_cjs = hoistNonReactStatics;

  function forwardRefWithStatics(component, statics) {
    return hoistNonReactStatics_cjs(/*#__PURE__*/React.forwardRef(component), statics);
  }

  function useGlobalIcon(tdIcon) {
    var _useConfig = useConfig$2(),
      globalIcon = _useConfig.icon;
    var resultIcon = {};
    Object.keys(tdIcon).forEach(function (key) {
      resultIcon[key] = (globalIcon === null || globalIcon === void 0 ? void 0 : globalIcon[key]) || tdIcon[key];
    });
    return resultIcon;
  }

  var _excluded$L = ["separate", "children", "className"];
  function ownKeys$2L(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2K(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2L(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2L(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var InputGroup$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var separate = props.separate,
      children = props.children,
      className = props.className,
      wrapperProps = _objectWithoutProperties$2(props, _excluded$L);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2K({
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-input-group"), className, _defineProperty$2({}, "".concat(classPrefix, "-input-group--separate"), separate))
    }, wrapperProps), children);
  });
  InputGroup$1.displayName = "InputGroup";

  function getPluralIndex(count) {
    if (count === 0) return 0;
    if (count === 1) return 1;
    return 2;
  }
  function t(pattern) {
    if (isString(pattern)) {
      var text = pattern;
      var count;
      var data = {};
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (args.length > 0) {
        var firstArg = args[0],
          secondArg = args[1];
        if (typeof firstArg === "number") {
          count = firstArg;
          if (secondArg && _typeof$3(secondArg) === "object") {
            data = secondArg;
          } else {
            data.count = count;
          }
        } else if (_typeof$3(firstArg) === "object" && firstArg !== null) {
          data = firstArg;
        }
      }
      if (text.includes("|")) {
        var pluralParts = text.split("|").map(function (part) {
          return part.trim();
        });
        if (typeof count === "number") {
          var pluralIndex = getPluralIndex(count);
          if (pluralIndex < pluralParts.length) {
            text = pluralParts[pluralIndex];
          } else {
            text = pluralParts[pluralParts.length - 1];
          }
        } else {
          var _pluralParts = _slicedToArray$1(pluralParts, 1),
            firstPart = _pluralParts[0];
          text = firstPart;
        }
      }
      if (data && Object.keys(data).length > 0) {
        var regular = /\{\s*([\w-]+)\s*\}/g;
        text = text.replace(regular, function (match, key) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            return String(data[key]);
          }
          return match;
        });
      }
      return text;
    }
    return "";
  }

  function ownKeys$2K(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2K(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2K(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useLocaleReceiver(componentName, defaultLocale) {
    var _React$useContext = React__default["default"].useContext(ConfigContext$2),
      globalConfig = _React$useContext.globalConfig;
    function transformLocale(pattern) {
      var REGEXP = /\{\s*([\w-]+)\s*\}/g;
      var placement = arguments.length <= 1 ? undefined : arguments[1];
      if (Array.isArray(pattern)) {
        return pattern.map(function (p, index) {
          var translated = p.replace(REGEXP, function (_, key) {
            if (placement) return String(placement[index][key]);
            return "";
          });
          return translated;
        });
      }
      if (typeof pattern === "function") {
        return pattern(placement);
      }
      var data = arguments.length <= 2 ? undefined : arguments[2];
      if (data) {
        return t(pattern, placement, data);
      }
      return t(pattern, placement);
    }
    var componentLocale = React__default["default"].useMemo(function () {
      var locale = defaultLocale || {};
      var connectLocaleByName = globalConfig[componentName];
      var localeFromContext = componentName && globalConfig ? connectLocaleByName : {};
      return _objectSpread$2J(_objectSpread$2J({}, typeof locale === "function" ? locale() : locale), localeFromContext || {});
    }, [componentName, defaultLocale, globalConfig]);
    return [componentLocale, transformLocale];
  }

  var inputDefaultProps = {
    align: "left",
    allowInputOverMax: false,
    autoWidth: false,
    autocomplete: void 0,
    autofocus: false,
    borderless: false,
    allowInput: true,
    clearable: false,
    placeholder: void 0,
    readonly: false,
    showClearIconOnEmpty: false,
    showLimitNumber: false,
    size: "medium",
    spellCheck: false,
    status: "default",
    type: "text",
    defaultValue: ""
  };

  function useLengthLimit(params) {
    var getValueByLimitNumber = function getValueByLimitNumber(inputValue) {
      var allowInputOverMax = params.allowInputOverMax,
        maxlength = params.maxlength,
        maxcharacter = params.maxcharacter;
      if (!(maxlength || maxcharacter) || allowInputOverMax || !inputValue) return inputValue;
      if (maxlength) {
        return limitUnicodeMaxLength(inputValue, maxlength);
      }
      if (maxcharacter) {
        var r = getCharacterLength(inputValue, maxcharacter);
        if (_typeof$3(r) === "object") {
          return r.characters;
        }
      }
    };
    var limitNumber = React.useMemo(function () {
      var maxlength = params.maxlength,
        maxcharacter = params.maxcharacter,
        value = params.value;
      if (typeof value === "number") return String(value);
      if (maxlength && maxcharacter) {
        log.warn("Input", "Pick one of maxlength and maxcharacter please.");
      }
      if (maxlength) {
        var length = value !== null && value !== void 0 && value.length ? getUnicodeLength(value) : 0;
        return "".concat(length, "/").concat(maxlength);
      }
      if (maxcharacter) {
        return "".concat(getCharacterLength(value || ""), "/").concat(maxcharacter);
      }
      return "";
    }, [params.maxcharacter, params.maxlength, params.value]);
    var innerStatus = React.useMemo(function () {
      if (limitNumber) {
        var _limitNumber$split = limitNumber.split("/"),
          _limitNumber$split2 = _slicedToArray$1(_limitNumber$split, 2),
          current = _limitNumber$split2[0],
          total = _limitNumber$split2[1];
        return Number(current) > Number(total) ? "error" : "";
      }
      return "";
    }, [limitNumber]);
    var tStatus = React.useMemo(function () {
      return params.status || innerStatus;
    }, [params.status, innerStatus]);
    var onValidateChange = function onValidateChange() {
      var _params$onValidate;
      (_params$onValidate = params.onValidate) === null || _params$onValidate === void 0 || _params$onValidate.call(params, {
        error: innerStatus ? "exceed-maximum" : void 0
      });
    };
    React.useEffect(function () {
      onValidateChange();
    }, [innerStatus]);
    return {
      tStatus: tStatus,
      limitNumber: limitNumber,
      getValueByLimitNumber: getValueByLimitNumber
    };
  }

  var _excluded$K = ["type", "autoWidth", "borderless", "placeholder", "disabled", "status", "size", "className", "inputClass", "style", "prefixIcon", "suffixIcon", "clearable", "tips", "align", "maxlength", "maxcharacter", "showClearIconOnEmpty", "autofocus", "autocomplete", "readonly", "label", "suffix", "showInput", "keepWrapperWidth", "showLimitNumber", "allowInput", "allowInputOverMax", "name", "format", "onClick", "onClear", "onEnter", "onKeydown", "onKeyup", "onKeypress", "onFocus", "onBlur", "onPaste", "onMouseenter", "onMouseleave", "onWheel", "onCompositionstart", "onCompositionend", "onValidate", "onChange"];
  function ownKeys$2J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2J(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var renderIcon$1 = function renderIcon(classPrefix, type, icon) {
    var result = parseTNode(icon);
    var iconClassName = icon ? "".concat(classPrefix, "-input__").concat(type, "-icon") : "";
    return result ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-input__").concat(type, " ").concat(iconClassName)
    }, result) : null;
  };
  var Input$1 = forwardRefWithStatics(function (originalProps, ref) {
    var _classNames3;
    var _useLocaleReceiver = useLocaleReceiver("input"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useGlobalIcon = useGlobalIcon({
        BrowseIcon: TdBrowseIcon,
        BrowseOffIcon: TdBrowseOffIcon,
        CloseCircleFilledIcon: TdCloseCircleFilledIcon
      }),
      BrowseIcon = _useGlobalIcon.BrowseIcon,
      BrowseOffIcon = _useGlobalIcon.BrowseOffIcon,
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
    var props = useDefaultProps(originalProps, inputDefaultProps);
    var type = props.type,
      autoWidth = props.autoWidth,
      borderless = props.borderless,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? t(local.placeholder) : _props$placeholder,
      disabled = props.disabled,
      status = props.status,
      size = props.size,
      className = props.className,
      inputClass = props.inputClass,
      style = props.style,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      clearable = props.clearable,
      tips = props.tips,
      align = props.align,
      maxlength = props.maxlength,
      maxcharacter = props.maxcharacter,
      showClearIconOnEmpty = props.showClearIconOnEmpty,
      autofocus = props.autofocus,
      autocomplete = props.autocomplete,
      readonly = props.readonly,
      label = props.label,
      suffix = props.suffix,
      _props$showInput = props.showInput,
      showInput = _props$showInput === void 0 ? true : _props$showInput,
      keepWrapperWidth = props.keepWrapperWidth,
      showLimitNumber = props.showLimitNumber,
      allowInput = props.allowInput,
      allowInputOverMax = props.allowInputOverMax,
      name = props.name,
      format = props.format,
      _onClick = props.onClick,
      onClear = props.onClear,
      onEnter = props.onEnter,
      onKeydown = props.onKeydown,
      onKeyup = props.onKeyup,
      onKeypress = props.onKeypress,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onPaste = props.onPaste,
      onMouseenter = props.onMouseenter,
      onMouseleave = props.onMouseleave,
      _onWheel = props.onWheel,
      onCompositionstart = props.onCompositionstart,
      onCompositionend = props.onCompositionend,
      onValidate = props.onValidate,
      onChangeFromProps = props.onChange,
      restProps = _objectWithoutProperties$2(props, _excluded$K);
    var _useControlled = useControlled(props, "value", onChangeFromProps),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useLengthLimit = useLengthLimit({
        value: value === void 0 ? void 0 : String(value),
        status: status,
        maxlength: maxlength,
        maxcharacter: maxcharacter,
        allowInputOverMax: allowInputOverMax,
        onValidate: onValidate
      }),
      limitNumber = _useLengthLimit.limitNumber,
      getValueByLimitNumber = _useLengthLimit.getValueByLimitNumber,
      tStatus = _useLengthLimit.tStatus;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      inputConfig = _useConfig.input;
    var composingRef = React.useRef(false);
    var inputRef = React.useRef(null);
    var inputPreRef = React.useRef(null);
    var wrapperRef = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isHover = _useState2[0],
      toggleIsHover = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isFocused = _useState4[0],
      toggleIsFocused = _useState4[1];
    var _useState5 = React.useState(type),
      _useState6 = _slicedToArray$1(_useState5, 2),
      renderType = _useState6[0],
      setRenderType = _useState6[1];
    var _useState7 = React.useState(""),
      _useState8 = _slicedToArray$1(_useState7, 2),
      composingValue = _useState8[0],
      setComposingValue = _useState8[1];
    var isInnerInputReadonly = readonly || !allowInput;
    var isValueEnabled = value && !disabled;
    var alwaysShowClearIcon = (inputConfig === null || inputConfig === void 0 ? void 0 : inputConfig.clearTrigger) === "always";
    var isShowClearIcon = (clearable && isValueEnabled || showClearIconOnEmpty) && isHover || isValueEnabled && alwaysShowClearIcon;
    var prefixIconContent = renderIcon$1(classPrefix, "prefix", parseTNode(prefixIcon));
    var suffixIconNew = suffixIcon;
    if (isShowClearIcon) suffixIconNew = /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
      className: "".concat(classPrefix, "-input__suffix-clear"),
      onMouseDown: handleMouseDown,
      onClick: handleClear
    });
    if (type === "password" && typeof suffixIcon === "undefined") {
      if (renderType === "password") {
        suffixIconNew = /* @__PURE__ */React__default["default"].createElement(BrowseOffIcon, {
          className: "".concat(classPrefix, "-input__suffix-clear"),
          onClick: togglePasswordVisible
        });
      } else if (renderType === "text") {
        suffixIconNew = /* @__PURE__ */React__default["default"].createElement(BrowseIcon, {
          className: "".concat(classPrefix, "-input__suffix-clear"),
          onClick: togglePasswordVisible
        });
      }
    }
    var suffixIconContent = renderIcon$1(classPrefix, "suffix", parseTNode(suffixIconNew));
    var labelContent = isFunction$1(label) ? label() : label;
    var suffixContent = isFunction$1(suffix) ? suffix() : suffix;
    var limitNumberNode = limitNumber && showLimitNumber ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-input__limit-number"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled))
    }, limitNumber) : null;
    var updateInputWidth = function updateInputWidth() {
      if (!autoWidth || !inputRef.current) return;
      var offsetWidth = inputPreRef.current.offsetWidth;
      var _inputPreRef$current$ = inputPreRef.current.getBoundingClientRect(),
        width = _inputPreRef$current$.width;
      var calcWidth = width < offsetWidth ? offsetWidth + 1 : width;
      inputRef.current.style.width = "".concat(calcWidth, "px");
    };
    useIsomorphicLayoutEffect(function () {
      requestAnimationFrame(function () {
        updateInputWidth();
      });
    }, [autoWidth, value, placeholder, inputRef, composingValue]);
    React.useEffect(function () {
      var resizeObserver = null;
      if (typeof window.ResizeObserver === "undefined" || !inputRef.current) return;
      resizeObserver = new window.ResizeObserver(function () {
        updateInputWidth();
      });
      resizeObserver.observe(inputRef.current);
      return function () {
        var _resizeObserver$disco, _resizeObserver;
        (_resizeObserver$disco = (_resizeObserver = resizeObserver).disconnect) === null || _resizeObserver$disco === void 0 || _resizeObserver$disco.call(_resizeObserver);
        resizeObserver = null;
      };
    }, [inputRef]);
    React.useEffect(function () {
      setRenderType(type);
    }, [type]);
    React.useEffect(function () {
      if (value) {
        var limitedValue = getValueByLimitNumber(value);
        if (limitedValue.length !== value.length && !allowInputOverMax) {
          onChange === null || onChange === void 0 || onChange(limitedValue, {
            trigger: "initial"
          });
        }
      }
    }, []);
    var innerValue = composingRef.current ? composingValue : value !== null && value !== void 0 ? value : "";
    var formatDisplayValue = format && !isFocused ? format(innerValue) : innerValue;
    var renderInput = /* @__PURE__ */React__default["default"].createElement("input", {
      ref: inputRef,
      placeholder: placeholder,
      type: renderType,
      className: classNames$1("".concat(classPrefix, "-input__inner"), _defineProperty$2({}, "".concat(classPrefix, "-input--soft-hidden"), !showInput)),
      value: formatDisplayValue,
      readOnly: isInnerInputReadonly,
      disabled: disabled,
      autoComplete: autocomplete !== null && autocomplete !== void 0 ? autocomplete : local.autocomplete || void 0,
      autoFocus: autofocus,
      onChange: handleChange,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onKeyPress: handleKeyPress,
      onCompositionStart: handleCompositionStart,
      onCompositionEnd: handleCompositionEnd,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onPaste: handlePaste,
      name: name
    });
    var renderInputNode = /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(inputClass, "".concat(classPrefix, "-input"), (_classNames3 = {}, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_classNames3, "".concat(classPrefix, "-is-readonly"), readonly), "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-focused"), isFocused), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-l"), size === "large"), "".concat(classPrefix, "-align-").concat(align), align), "".concat(classPrefix, "-is-").concat(tStatus), tStatus && tStatus !== "default"), "".concat(classPrefix, "-input--prefix"), prefixIcon || labelContent), "".concat(classPrefix, "-input--suffix"), suffixIconContent || suffixContent), "".concat(classPrefix, "-input--borderless"), borderless), _defineProperty$2(_classNames3, "".concat(classPrefix, "-input--focused"), isFocused))),
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onWheel: function onWheel(e) {
        return _onWheel === null || _onWheel === void 0 ? void 0 : _onWheel({
          e: e
        });
      },
      onClick: function onClick(e) {
        var _inputRef$current;
        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
        _onClick === null || _onClick === void 0 || _onClick({
          e: e
        });
      }
    }, prefixIconContent, labelContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__prefix")
    }, labelContent) : null, renderInput, autoWidth && /* @__PURE__ */React__default["default"].createElement("span", {
      ref: inputPreRef,
      className: "".concat(classPrefix, "-input__input-pre")
    }, innerValue || placeholder), suffixContent || limitNumberNode ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__suffix")
    }, suffixContent, limitNumberNode) : null, suffixIconContent);
    function togglePasswordVisible() {
      var _inputRef$current2;
      if (disabled) return;
      var inputEl = inputRef.current;
      var cursorPosition = ((_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.selectionStart) || 0;
      var toggleType = renderType === "password" ? "text" : "password";
      setRenderType(toggleType);
      requestAnimationFrame(function () {
        inputEl === null || inputEl === void 0 || inputEl.setSelectionRange(cursorPosition, cursorPosition);
      });
    }
    function handleChange(e) {
      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "input";
      var newStr = e.currentTarget.value;
      if (composingRef.current) {
        setComposingValue(newStr);
      } else {
        if (props.type !== "number") {
          newStr = getValueByLimitNumber(newStr);
        }
        setComposingValue(newStr);
        onChange(newStr, {
          e: e,
          trigger: trigger
        });
      }
    }
    function handleMouseDown(e) {
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
    }
    function handleClear(e) {
      onChange === null || onChange === void 0 || onChange("", {
        e: e,
        trigger: "clear"
      });
      onClear === null || onClear === void 0 || onClear({
        e: e
      });
    }
    function handleKeyDown(e) {
      var key = e.key,
        value2 = e.currentTarget.value;
      key === "Enter" && (onEnter === null || onEnter === void 0 ? void 0 : onEnter(value2, {
        e: e
      }));
      onKeydown === null || onKeydown === void 0 || onKeydown(value2, {
        e: e
      });
    }
    function handleKeyUp(e) {
      var value2 = e.currentTarget.value;
      onKeyup === null || onKeyup === void 0 || onKeyup(value2, {
        e: e
      });
    }
    function handleKeyPress(e) {
      var value2 = e.currentTarget.value;
      onKeypress === null || onKeypress === void 0 || onKeypress(value2, {
        e: e
      });
    }
    function handleCompositionStart(e) {
      composingRef.current = true;
      var value2 = e.currentTarget.value;
      onCompositionstart === null || onCompositionstart === void 0 || onCompositionstart(value2, {
        e: e
      });
    }
    function handleCompositionEnd(e) {
      var value2 = e.currentTarget.value;
      if (composingRef.current) {
        composingRef.current = false;
        handleChange(e);
      }
      onCompositionend === null || onCompositionend === void 0 || onCompositionend(value2, {
        e: e
      });
    }
    function handleFocus(e) {
      var value2 = e.currentTarget.value;
      onFocus === null || onFocus === void 0 || onFocus(value2, {
        e: e
      });
      if (isInnerInputReadonly) return;
      toggleIsFocused(true);
    }
    function handleBlur(e) {
      var value2 = e.currentTarget.value;
      onBlur === null || onBlur === void 0 || onBlur(value2, {
        e: e
      });
      if (isInnerInputReadonly) return;
      toggleIsFocused(false);
    }
    function handlePaste(e) {
      var clipData = e.clipboardData;
      var pasteValue = clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain");
      onPaste === null || onPaste === void 0 || onPaste({
        e: e,
        pasteValue: pasteValue
      });
    }
    function handleMouseEnter(e) {
      !readonly && toggleIsHover(true);
      onMouseenter === null || onMouseenter === void 0 || onMouseenter({
        e: e
      });
    }
    function handleMouseLeave(e) {
      !readonly && toggleIsHover(false);
      onMouseleave === null || onMouseleave === void 0 || onMouseleave({
        e: e
      });
    }
    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapperRef.current,
        inputElement: inputRef.current,
        focus: function focus() {
          var _inputRef$current3;
          return (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.focus();
        },
        blur: function blur() {
          var _inputRef$current4;
          return (_inputRef$current4 = inputRef.current) === null || _inputRef$current4 === void 0 ? void 0 : _inputRef$current4.blur();
        },
        select: function select() {
          var _inputRef$current5;
          return (_inputRef$current5 = inputRef.current) === null || _inputRef$current5 === void 0 ? void 0 : _inputRef$current5.select();
        }
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2I({
      ref: wrapperRef,
      style: style,
      className: classNames$1("".concat(classPrefix, "-input__wrap"), className, _defineProperty$2({}, "".concat(classPrefix, "-input--auto-width"), autoWidth && !keepWrapperWidth))
    }, restProps), renderInputNode, tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-input__tips"), "".concat(classPrefix, "-input__tips--").concat(tStatus || "default"))
    }, tips));
  }, {
    Group: InputGroup$1
  });
  Input$1.displayName = "Input";

  var Input = Input$1;
  var InputGroup = InputGroup$1;

  var _excluded$J = ["prepend", "append", "children", "className", "style"];
  function ownKeys$2I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2I(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var InputAdornment$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var prepend = props.prepend,
      append = props.append,
      children = props.children,
      className = props.className,
      style = props.style,
      wrapperProps = _objectWithoutProperties$2(props, _excluded$J);
    var renderAddon = function renderAddon(type, classPrefix2, Content) {
      if (typeof Content === "undefined") return null;
      var addonNode;
      var isContentNode = isString(Content) || isNumber(Content);
      if (typeof Content === "function") {
        addonNode = /* @__PURE__ */React__default["default"].createElement(Content, null);
      } else {
        addonNode = isContentNode ? /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix2, "-input-adornment__text")
        }, Content) : Content;
      }
      return addonNode ? /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix2, "-input-adornment__").concat(type)
      }, addonNode) : addonNode;
    };
    var renderChildren = function renderChildren() {
      return React__default["default"].Children.map(children, function (child) {
        if (!child) return null;
        if (/*#__PURE__*/React__default["default"].isValidElement(child)) {
          var childProps = child.props;
          return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$2H(_objectSpread$2H(_objectSpread$2H({}, wrapperProps), childProps), {}, {
            onChange: function onChange() {
              var _wrapperProps$onChang, _wrapperProps$onChang2, _childProps$onChange, _childProps$onChange$;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              wrapperProps === null || wrapperProps === void 0 || (_wrapperProps$onChang = wrapperProps.onChange) === null || _wrapperProps$onChang === void 0 || (_wrapperProps$onChang2 = _wrapperProps$onChang.call) === null || _wrapperProps$onChang2 === void 0 || _wrapperProps$onChang2.call.apply(_wrapperProps$onChang2, [_wrapperProps$onChang, null].concat(args));
              childProps === null || childProps === void 0 || (_childProps$onChange = childProps.onChange) === null || _childProps$onChange === void 0 || (_childProps$onChange$ = _childProps$onChange.call) === null || _childProps$onChange$ === void 0 || _childProps$onChange$.call.apply(_childProps$onChange$, [_childProps$onChange, null].concat(args));
            }
          }));
        }
        return child;
      });
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-input-adornment"), className)
    }, renderAddon("prepend", classPrefix, prepend), renderChildren(), renderAddon("append", classPrefix, append));
  });
  InputAdornment$1.displayName = "InputAdornment";

  var InputAdornment = InputAdornment$1;

  var alertDefaultProps = {
    close: false,
    closeBtn: false,
    maxLine: 0,
    theme: "info"
  };

  var _excluded$I = ["message", "title", "operation", "theme", "icon", "close", "closeBtn", "maxLine", "onClose", "className", "onClosed"];
  function ownKeys$2H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2H(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var transitionTime = 200;
  var Alert$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("alert"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon,
        InfoCircleFilledIcon: TdInfoCircleFilledIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var _useDefaultProps = useDefaultProps(props, alertDefaultProps),
      message = _useDefaultProps.message,
      title = _useDefaultProps.title,
      operation = _useDefaultProps.operation,
      theme = _useDefaultProps.theme,
      icon = _useDefaultProps.icon,
      close = _useDefaultProps.close,
      closeBtn = _useDefaultProps.closeBtn,
      maxLine = _useDefaultProps.maxLine,
      onClose = _useDefaultProps.onClose,
      className = _useDefaultProps.className,
      _useDefaultProps$onCl = _useDefaultProps.onClosed,
      onClosed = _useDefaultProps$onCl === void 0 ? noop : _useDefaultProps$onCl,
      alertProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$I);
    var _React$useState = React__default["default"].useState(false),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      closed = _React$useState2[0],
      setClosed = _React$useState2[1];
    var _React$useState3 = React__default["default"].useState(true),
      _React$useState4 = _slicedToArray$1(_React$useState3, 2),
      collapsed = _React$useState4[0],
      setCollapsed = _React$useState4[1];
    var nodeRef = React.useRef(null);
    var iconMap = {
      success: CheckCircleFilledIcon,
      info: InfoCircleFilledIcon,
      error: ErrorCircleFilledIcon,
      warning: ErrorCircleFilledIcon
    };
    var handleClose = function handleClose(e) {
      setClosed(true);
      onClose === null || onClose === void 0 || onClose({
        e: e
      });
    };
    var handleCollapse = function handleCollapse() {
      setCollapsed(function (collapsed2) {
        return !collapsed2;
      });
    };
    var renderIconNode = function renderIconNode() {
      if (/*#__PURE__*/React__default["default"].isValidElement(icon)) return icon;
      return /*#__PURE__*/React__default["default"].createElement(iconMap[theme]);
    };
    var renderMessage = function renderMessage() {
      if (+maxLine > 0 && Array.isArray(message)) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-alert__description")
        }, message.map(function (item, index) {
          if (collapsed) {
            if (index < +maxLine) {
              return /* @__PURE__ */React__default["default"].createElement("div", {
                key: index
              }, item);
            }
          } else {
            return /* @__PURE__ */React__default["default"].createElement("div", {
              key: index
            }, item);
          }
          return true;
        }), +maxLine < message.length && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-alert__collapse"),
          onClick: handleCollapse
        }, collapsed ? t(local.expandText) : t(local.collapseText)));
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-alert__description")
      }, message);
    };
    var isUsingClose = Reflect.has(props, "close");
    var closeNode = isUsingClose ? close : closeBtn;
    if (isUsingClose) {
      log.warnOnce("TAlert", "prop `close` is going to be deprecated, please use `closeBtn` instead.");
    }
    var renderClose = function renderClose() {
      if (closeNode === false) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-alert__close"),
        onClick: handleClose
      }, parseTNode(closeNode, void 0, /* @__PURE__ */React__default["default"].createElement(CloseIcon, null)));
    };
    return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      "in": !closed,
      unmountOnExit: true,
      classNames: {
        exitActive: "".concat(classPrefix, "-alert--closing")
      },
      nodeRef: nodeRef,
      timeout: transitionTime,
      onExited: onClosed
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2G({
      ref: composeRefs(ref, nodeRef),
      className: classNames$1("".concat(classPrefix, "-alert"), "".concat(classPrefix, "-alert--").concat(theme), className)
    }, alertProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__icon")
    }, renderIconNode()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__content")
    }, title ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__title")
    }, title) : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__message")
    }, renderMessage(), operation ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__operation")
    }, parseTNode(operation)) : null)), renderClose()));
  });
  Alert$1.displayName = "Alert";

  var Alert = Alert$1;

  var badgeDefaultProps = {
    count: 0,
    dot: false,
    maxCount: 99,
    shape: "circle",
    showZero: false,
    size: "medium"
  };

  var _excluded$H = ["color", "dot", "maxCount", "count", "size", "shape", "showZero", "offset", "className", "content", "children", "style"];
  function ownKeys$2G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2G(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Badge$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, badgeDefaultProps),
      color = _useDefaultProps.color,
      dot = _useDefaultProps.dot,
      maxCount = _useDefaultProps.maxCount,
      count = _useDefaultProps.count,
      size = _useDefaultProps.size,
      shape = _useDefaultProps.shape,
      showZero = _useDefaultProps.showZero,
      offset = _useDefaultProps.offset,
      className = _useDefaultProps.className,
      content = _useDefaultProps.content,
      children = _useDefaultProps.children,
      style = _useDefaultProps.style,
      restProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$H);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var childNode = content || children;
    var badgeClassName = classNames$1(!childNode && "".concat(classPrefix, "-badge--static"), dot ? "".concat(classPrefix, "-badge--dot") : "".concat(classPrefix, "-badge--").concat(shape), size === "small" && "".concat(classPrefix, "-size-s"), !childNode && className);
    var getDisplayCount = function getDisplayCount() {
      if (typeof count === "number" && count > maxCount) {
        return "".concat(maxCount, "+");
      }
      return count;
    };
    var isHidden = !count;
    if (typeof count === "number") {
      isHidden = count < 1 && !showZero;
    }
    var getStyle = function getStyle() {
      var mergedStyle = _objectSpread$2F({}, style);
      if (color) {
        mergedStyle.backgroundColor = color;
      }
      if (offset) {
        if (offset[0]) {
          mergedStyle.right = +offset[0];
        }
        if (offset[1]) {
          mergedStyle.marginTop = +offset[1];
        }
      }
      return mergedStyle;
    };
    var badge = !isHidden ? /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$2F(_objectSpread$2F({}, childNode ? {} : restProps), {}, {
      className: badgeClassName,
      style: getStyle()
    }), !dot ? getDisplayCount() : null) : null;
    if (!childNode) {
      return badge;
    }
    return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$2F(_objectSpread$2F({}, restProps), {}, {
      className: classNames$1("".concat(classPrefix, "-badge"), className),
      ref: ref
    }), childNode, badge);
  });
  Badge$1.displayName = "Badge";

  var Badge = Badge$1;

  function ownKeys$2F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2F(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function omit(obj, fields) {
    var shallowCopy = _objectSpread$2E({}, obj);
    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }
    return shallowCopy;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }
  function getOffsetTopToContainer(element, container) {
    var offsetTop = element.offsetTop;
    var current = element.offsetParent;
    while (current && current !== container) {
      offsetTop += current.offsetTop;
      current = current.offsetParent;
    }
    return offsetTop;
  }

  var _excluded$G = ["allowUncheck", "type", "disabled", "name", "value", "onChange", "indeterminate", "children", "label", "className", "style", "readonly", "onClick"];
  function ownKeys$2E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2E(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CheckContext = /*#__PURE__*/React__default["default"].createContext(null);
  var Check = /*#__PURE__*/React.forwardRef(function (_props, ref) {
    var context = React.useContext(CheckContext);
    var props = context ? context.inject(_props) : _props;
    var _props$allowUncheck = props.allowUncheck,
      allowUncheck = _props$allowUncheck === void 0 ? false : _props$allowUncheck,
      type = props.type,
      disabled = props.disabled,
      name = props.name,
      value = props.value,
      onChange = props.onChange,
      indeterminate = props.indeterminate,
      children = props.children,
      label = props.label,
      className = props.className,
      style = props.style,
      readonly = props.readonly,
      onClick = props.onClick,
      htmlProps = _objectWithoutProperties$2(props, _excluded$G);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var TOnChange = onChange;
    var _useControlled = useControlled(props, "checked", TOnChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      internalChecked = _useControlled2[0],
      setInternalChecked = _useControlled2[1];
    var labelClassName = classNames$1("".concat(classPrefix, "-").concat(type), className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-checked"), internalChecked), "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-indeterminate"), indeterminate));
    var isDisabled = disabled || readonly;
    var input = /* @__PURE__ */React__default["default"].createElement("input", {
      readOnly: readonly,
      type: type === "radio-button" ? "radio" : type,
      className: "".concat(classPrefix, "-").concat(type, "__former"),
      checked: internalChecked,
      disabled: disabled,
      name: name,
      tabIndex: -1,
      value: isBoolean(value) ? Number(value) : value,
      "data-value": typeof value === "string" ? "'".concat(value, "'") : value,
      "data-allow-uncheck": allowUncheck || void 0,
      onClick: function onClick(e) {
        e.stopPropagation();
        if ((type === "radio-button" || type === "radio") && allowUncheck && internalChecked) {
          setInternalChecked(!e.currentTarget.checked, {
            e: e
          });
        }
      },
      onChange: function onChange(e) {
        if (isDisabled) return;
        setInternalChecked(e.currentTarget.checked, {
          e: e
        });
      }
    });
    var showLabel = !!(children || label);
    var handleLabelClick = function handleLabelClick(event) {
      if (props.stopLabelTrigger) {
        event.preventDefault();
      }
    };
    var onInnerClick = function onInnerClick(e) {
      if (isDisabled) return;
      onClick === null || onClick === void 0 || onClick({
        e: e
      });
    };
    return /* @__PURE__ */React__default["default"].createElement("label", _objectSpread$2D(_objectSpread$2D({
      ref: ref,
      tabIndex: disabled ? void 0 : 0,
      className: labelClassName,
      title: props.title,
      style: style
    }, omit(htmlProps, ["checkAll", "stopLabelTrigger"])), {}, {
      onClick: onInnerClick
    }), input, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-").concat(type, "__input")
    }), showLabel && /* @__PURE__ */React__default["default"].createElement("span", {
      key: "label",
      className: "".concat(classPrefix, "-").concat(type, "__label"),
      onClick: handleLabelClick
    }, children || label));
  });
  Check.displayName = "Check";

  function observe(element, root, callback, marginBottom) {
    if (typeof window === "undefined") return null;
    if (!window || !window.IntersectionObserver) {
      callback();
      return null;
    }
    var io = null;
    try {
      io = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];
        if (entry.isIntersecting) {
          callback();
          io.unobserve(element);
        }
      }, {
        rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
        root: root
      });
      io.observe(element);
    } catch (e) {
      console.error(e);
      callback();
    }
    return io;
  }

  function useCommonClassName() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return React.useMemo(function () {
      var names = {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          medium: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
      return {
        SIZE: names.SIZE,
        STATUS: names.STATUS,
        sizeClassNames: names.SIZE,
        statusClassNames: names.STATUS,
        classPrefix: classPrefix
      };
    }, [classPrefix]);
  }

  var radioDefaultProps = {
    allowUncheck: false,
    defaultChecked: false,
    disabled: void 0,
    readonly: void 0,
    value: void 0
  };
  var radioGroupDefaultProps = {
    allowUncheck: false,
    disabled: void 0,
    readonly: void 0,
    size: "medium",
    variant: "outline",
    theme: "radio"
  };

  var SPACE_REG = /^Space$/i;
  var ENTER_REG = /^Enter$/i;
  var CHECKED_CODE_REG = /^(Enter|Space)$/i;
  var THEME_MODE = "theme-mode";

  function useKeyboard(radioGroupRef, setInnerValue) {
    var checkRadioInGroup = function checkRadioInGroup(e) {
      if (CHECKED_CODE_REG.test(e.key) || CHECKED_CODE_REG.test(e.code)) {
        var inputNode = e.target.querySelector("input");
        var data = (inputNode === null || inputNode === void 0 ? void 0 : inputNode.dataset) || {};
        if (inputNode.checked && data.allowUncheck) {
          setInnerValue(void 0, {
            e: e
          });
        } else {
          var value = !isNaN(Number(data.value)) ? Number(data.value) : data.value;
          value = typeof value === "string" && {
            "true": true,
            "false": false
          }[value] || value;
          value = typeof value === "string" && value[0] === "'" ? value.replace(/'/g, "") : value;
          setInnerValue(value, {
            e: e
          });
        }
      }
    };
    React.useEffect(function () {
      on$1(radioGroupRef.current, "keydown", checkRadioInGroup);
      return function () {
        off$1(radioGroupRef.current, "keydown", checkRadioInGroup);
      };
    }, []);
  }

  function ownKeys$2D(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2C(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2D(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2D(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var RadioGroup$2 = function RadioGroup(originalProps) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, radioGroupDefaultProps);
    var disabled = props.disabled,
      readonly = props.readonly,
      children = props.children,
      onChange = props.onChange,
      size = props.size,
      variant = props.variant,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      className = props.className,
      style = props.style,
      theme = props.theme;
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      internalValue = _useControlled2[0],
      setInternalValue = _useControlled2[1];
    var _useState = React.useState(null),
      _useState2 = _slicedToArray$1(_useState, 2),
      barStyle = _useState2[0],
      setBarStyle = _useState2[1];
    var radioGroupRef = React.useRef(null);
    var observerRef = React.useRef(null);
    useKeyboard(radioGroupRef, setInternalValue);
    var checkedRadioCls = ".".concat(classPrefix, "-radio-button.").concat(classPrefix, "-is-checked");
    var _useCommonClassName = useCommonClassName(),
      sizeMap = _useCommonClassName.SIZE;
    var context = {
      inject: function inject(checkProps) {
        if (typeof checkProps.checked !== "undefined") {
          return checkProps;
        }
        var checkValue = checkProps.value;
        return _objectSpread$2C(_objectSpread$2C({}, checkProps), {}, {
          name: props.name,
          allowUncheck: checkProps.allowUncheck || props.allowUncheck,
          checked: internalValue === checkProps.value,
          disabled: checkProps.disabled || disabled,
          readonly: checkProps.readonly || readonly,
          onChange: function onChange(checked, _ref) {
            var e = _ref.e;
            if (typeof checkProps.onChange === "function") {
              checkProps.onChange(checked, {
                e: e
              });
            }
            setInternalValue(checked ? checkValue : void 0, {
              e: e,
              name: props.name
            });
          }
        });
      }
    };
    var calcBarStyle = function calcBarStyle() {
      var _radioGroupRef$curren, _radioGroupRef$curren2;
      if (!variant.includes("filled")) return;
      var checkedRadio = (_radioGroupRef$curren = (_radioGroupRef$curren2 = radioGroupRef.current).querySelector) === null || _radioGroupRef$curren === void 0 ? void 0 : _radioGroupRef$curren.call(_radioGroupRef$curren2, checkedRadioCls);
      if (!checkedRadio) return;
      var offsetWidth = checkedRadio.offsetWidth,
        offsetHeight = checkedRadio.offsetHeight,
        offsetLeft = checkedRadio.offsetLeft,
        offsetTop = checkedRadio.offsetTop;
      setBarStyle({
        width: "".concat(offsetWidth, "px"),
        height: "".concat(offsetHeight, "px"),
        left: "".concat(offsetLeft, "px"),
        top: "".concat(offsetTop, "px")
      });
    };
    React.useEffect(function () {
      calcBarStyle();
      if (!radioGroupRef.current) return;
      var observer = observe(radioGroupRef.current, null, calcBarStyle, 0);
      observerRef.current = observer;
      return function () {
        var _observerRef$current;
        (_observerRef$current = observerRef.current) === null || _observerRef$current === void 0 || _observerRef$current.disconnect();
        observerRef.current = null;
      };
    }, [radioGroupRef.current, internalValue]);
    var renderBlock = function renderBlock() {
      if (!variant.includes("filled")) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: barStyle,
        className: "".concat(classPrefix, "-radio-group__bg-block")
      });
    };
    var renderOptions = function renderOptions() {
      var Comp = theme === "button" ? Radio$1.Button : Radio$1;
      return options.map(function (item, index) {
        var label;
        var value;
        var disabled2;
        if (typeof item === "string" || typeof item === "number") {
          label = item;
          value = item;
        } else {
          label = item.label;
          value = item.value;
          disabled2 = item.disabled;
        }
        return /* @__PURE__ */React__default["default"].createElement(Comp, {
          value: value,
          key: index,
          disabled: disabled2
        }, label);
      });
    };
    return /* @__PURE__ */React__default["default"].createElement(CheckContext.Provider, {
      value: context
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: radioGroupRef,
      style: style,
      className: classNames$1("".concat(classPrefix, "-radio-group"), sizeMap[size], className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-radio-group__outline"), variant === "outline"), "".concat(classPrefix, "-radio-group--filled"), variant.includes("filled")), "".concat(classPrefix, "-radio-group--primary-filled"), variant === "primary-filled"))
    }, children || renderOptions(), renderBlock()));
  };
  RadioGroup$2.displayName = "RadioGroup";

  function ownKeys$2C(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2B(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2C(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2C(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Radio$1 = forwardRefWithStatics(function (props, ref) {
    return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$2B({
      ref: ref,
      type: "radio"
    }, useDefaultProps(props, radioDefaultProps)));
  }, {
    Group: RadioGroup$2,
    Button: /*#__PURE__*/React.forwardRef(function (props, ref) {
      return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$2B({
        ref: ref,
        type: "radio-button"
      }, useDefaultProps(props, radioDefaultProps)));
    })
  });
  Radio$1.displayName = "Radio";

  var Radio = Radio$1;
  var RadioGroup$1 = Radio$1.Group;

  var checkboxDefaultProps = {
    checkAll: false,
    defaultChecked: false,
    disabled: void 0,
    indeterminate: false,
    readonly: false
  };
  var checkboxGroupDefaultProps = {
    max: void 0,
    defaultValue: []
  };

  function ownKeys$2B(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2A(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2B(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2B(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var getCheckboxValue = function getCheckboxValue(v) {
    switch (_typeof$3(v)) {
      case "number":
        return v;
      case "string":
        return v;
      case "object":
        {
          var vs = v;
          return vs.value;
        }
      default:
        return void 0;
    }
  };
  var CheckboxGroup$2 = function CheckboxGroup(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useDefaultProps = useDefaultProps(props, checkboxGroupDefaultProps),
      onChange = _useDefaultProps.onChange,
      disabled = _useDefaultProps.disabled,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      children = _useDefaultProps.children,
      max = _useDefaultProps.max,
      _useDefaultProps$opti = _useDefaultProps.options,
      options = _useDefaultProps$opti === void 0 ? [] : _useDefaultProps$opti;
    var intervalOptions = Array.isArray(options) && options.length > 0 ? options : React__default["default"].Children.map(children, function (child) {
      var _child$type;
      return (child === null || child === void 0 || (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === Checkbox$1.displayName && child.props;
    }) || [];
    var optionsWithoutCheckAll = intervalOptions.filter(function (t) {
      return _typeof$3(t) !== "object" || !t.checkAll;
    });
    var optionsWithoutCheckAllValues = [];
    optionsWithoutCheckAll.forEach(function (v) {
      var vs = getCheckboxValue(v);
      optionsWithoutCheckAllValues.push(vs);
    });
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      internalValue = _useControlled2[0],
      setInternalValue = _useControlled2[1];
    var _useState = React.useState(max),
      _useState2 = _slicedToArray$1(_useState, 2),
      localMax = _useState2[0],
      setLocalMax = _useState2[1];
    var getCheckedSet = React.useCallback(function () {
      if (!Array.isArray(internalValue)) {
        return /* @__PURE__ */new Set([]);
      }
      return new Set([].concat(internalValue));
    }, [internalValue]);
    var checkedSet = React.useMemo(function () {
      return getCheckedSet();
    }, [getCheckedSet]);
    var indeterminate = React.useMemo(function () {
      var list = Array.from(checkedSet);
      return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;
    }, [checkedSet, optionsWithoutCheckAll]);
    var checkAllChecked = React.useMemo(function () {
      var list = Array.from(checkedSet);
      return list.length === optionsWithoutCheckAll.length;
    }, [checkedSet, optionsWithoutCheckAll]);
    React.useEffect(function () {
      if (!isNumber(max)) {
        return;
      }
      if (max < checkedSet.size) {
        console.warn("[TDesign] max should be less than the length of value, change is invalid");
      } else {
        setLocalMax(max);
      }
    }, [max, checkedSet]);
    var context = {
      inject: function inject(checkProps) {
        if (typeof checkProps.checked !== "undefined") {
          return checkProps;
        }
        var checkValue = checkProps.value;
        return _objectSpread$2A(_objectSpread$2A({}, checkProps), {}, {
          checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),
          indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,
          disabled: checkProps.disabled || disabled || checkedSet.size >= localMax && !checkedSet.has(checkValue),
          onChange: function onChange(checked, _ref) {
            var e = _ref.e;
            if (typeof checkProps.onChange === "function") {
              checkProps.onChange(checked, {
                e: e
              });
            }
            var checkedSet2 = getCheckedSet();
            if (checkProps.checkAll) {
              checkedSet2.clear();
              if (checked) {
                optionsWithoutCheckAllValues.forEach(function (v) {
                  checkedSet2.add(v);
                });
              }
            } else if (checked) {
              if (checkedSet2.size >= localMax && isNumber(max)) return;
              checkedSet2.add(checkValue);
            } else {
              checkedSet2["delete"](checkValue);
            }
            var currentOptionChecked = optionsWithoutCheckAll.find(function (item) {
              return item.value === checkValue;
            });
            setInternalValue(Array.from(checkedSet2), {
              e: e,
              current: checkProps.checkAll ? void 0 : checkValue,
              type: checked ? "check" : "uncheck",
              option: checkProps.checkAll ? void 0 : currentOptionChecked
            });
          }
        });
      }
    };
    var useOptions = Array.isArray(options) && options.length !== 0;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-checkbox-group"), className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(CheckContext.Provider, {
      value: context
    }, useOptions ? options.map(function (v, index) {
      switch (_typeof$3(v)) {
        case "string":
          return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, {
            key: index,
            label: v,
            value: v
          }, v);
        case "number":
          {
            return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, {
              key: index,
              label: v,
              value: v
            }, String(v));
          }
        case "object":
          {
            var vs = v;
            return vs.checkAll ? /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$2A(_objectSpread$2A({}, vs), {}, {
              key: "checkAll_".concat(index),
              indeterminate: indeterminate
            })) : /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$2A(_objectSpread$2A({}, vs), {}, {
              key: index,
              disabled: vs.disabled || disabled
            }));
          }
        default:
          return null;
      }
    }) : children));
  };
  CheckboxGroup$2.displayName = "CheckboxGroup";

  function ownKeys$2A(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2A(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2A(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Checkbox$1 = forwardRefWithStatics(function (props, ref) {
    return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$2z({
      ref: ref,
      type: "checkbox"
    }, useDefaultProps(props, checkboxDefaultProps)));
  }, {
    Group: CheckboxGroup$2
  });
  Checkbox$1.displayName = "Checkbox";

  var Checkbox = Checkbox$1;

  function fillZero(length) {
    return new Array(length).fill(0).join("");
  }
  function isInputNumber(num) {
    if (!num) return true;
    if (isNumber(num)) return !Number.isNaN(num);
    var r = /^[0-9|e|E|-]+\.*[0-9|e|E|-]*$/.test(num);
    if (!r) return false;
    var eCount = 0;
    var negativeCount = 0;
    var dotCount = 0;
    for (var i = 0, len = num.length; i < len; i++) {
      if (num[i] === ".") {
        dotCount += 1;
        if (dotCount > 1) return false;
      }
      if (/(e|E)+/.test(num[i])) {
        eCount += 1;
        if (eCount > 1) return false;
      }
      if (num[i] === "-") {
        negativeCount += 1;
        if (negativeCount > 2) return false;
      }
    }
    return true;
  }
  function removeInvalidZero(num) {
    var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (num.indexOf(".") !== -1) {
      log.error("InputNumber", "num is not a integer number.");
      return num;
    }
    if (!num || num === "0" && decimal) return "";
    if (num === "0") return num;
    return (decimal ? num.replace(/0+$/, "") : num.replace(/^0+/, "")) || "0";
  }
  function largeIntNumberAdd(num1, num2) {
    var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var number1 = removeInvalidZero(num1, decimal);
    var number2 = removeInvalidZero(num2, decimal);
    var isFirstLarger = number1.length > number2.length;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;
    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);
      if (count >= 10) {
        step[i - 1] = 1;
      }
      newNumber.unshift(String(count % 10));
    }
    if (step[-1]) {
      newNumber.unshift("1");
    }
    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }
    return newNumber.join("");
  }
  function largePositiveNumberAdd(num1, num2) {
    var _num1$split = num1.split("."),
      _num1$split2 = _slicedToArray$1(_num1$split, 2),
      _num1$split2$ = _num1$split2[0],
      intNumber1 = _num1$split2$ === void 0 ? "0" : _num1$split2$,
      _num1$split2$2 = _num1$split2[1],
      decimalNumber1 = _num1$split2$2 === void 0 ? "0" : _num1$split2$2;
    var _num2$split = num2.split("."),
      _num2$split2 = _slicedToArray$1(_num2$split, 2),
      _num2$split2$ = _num2$split2[0],
      intNumber2 = _num2$split2$ === void 0 ? "0" : _num2$split2$,
      _num2$split2$2 = _num2$split2[1],
      decimalNumber2 = _num2$split2$2 === void 0 ? "0" : _num2$split2$2;
    var integerSum = largeIntNumberAdd(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") return integerSum;
    var newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);
    var newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);
    var decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);
    var decimalLength = decimalNumberSum.length;
    if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {
      return [removeInvalidZero(largeIntNumberAdd(integerSum, "1")), removeInvalidZero(decimalNumberSum.slice(1), true)].filter(function (v) {
        return v;
      }).join(".");
    }
    return [removeInvalidZero(integerSum), removeInvalidZero(decimalNumberSum, true)].filter(function (v) {
      return v;
    }).join(".");
  }
  function compareLargeIntegerNumber(num1, num2) {
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    if (number1.length === number2.length) {
      for (var i = 0, len = number1.length; i < len; i++) {
        if (number1[i] > number2[i]) return 1;
        if (number1[i] < number2[i]) return -1;
      }
      return 0;
    }
    return number1.length > number2.length ? 1 : -1;
  }
  function compareLargeDecimalNumber(num1, num2) {
    var number1 = num1 && num1 !== "0" ? num1.replace(/0+$/, "") : "0";
    var number2 = num2 && num2 !== "0" ? num2.replace(/0+$/, "") : "0";
    var maxLength = Math.max(number1.length, number2.length);
    for (var i = 0, len = maxLength; i < len; i++) {
      if ((number1[i] || 0) > (number2[i] || 0)) return 1;
      if ((number1[i] || 0) < (number2[i] || 0)) return -1;
    }
    return 0;
  }
  function formatENumber(num) {
    var _num$split = num.split("e"),
      _num$split2 = _slicedToArray$1(_num$split, 2),
      num1 = _num$split2[0],
      num2 = _num$split2[1];
    if (!num2) return num;
    var _num$split3 = num.split("."),
      _num$split4 = _slicedToArray$1(_num$split3, 2),
      integer = _num$split4[0],
      _num$split4$ = _num$split4[1],
      initDecimal = _num$split4$ === void 0 ? "" : _num$split4$;
    var zeroCount = Number(num2);
    var _initDecimal$split = initDecimal.split("e"),
      _initDecimal$split2 = _slicedToArray$1(_initDecimal$split, 1),
      decimal = _initDecimal$split2[0];
    if (zeroCount > decimal.length) {
      var multipleZero = fillZero(zeroCount - decimal.length);
      return num1.replace(/(^0+|\.)/g, "") + multipleZero;
    }
    var n1 = integer.replace(/^0+/, "") + decimal.slice(0, zeroCount);
    var d2 = decimal.slice(zeroCount);
    return d2 ? [n1, d2].join(".") : n1;
  }
  function compareLargeNumber(num1, num2) {
    var _formatENumber$split = formatENumber(num1).split("."),
      _formatENumber$split2 = _slicedToArray$1(_formatENumber$split, 2),
      integer1 = _formatENumber$split2[0],
      decimal1 = _formatENumber$split2[1];
    var _formatENumber$split3 = formatENumber(num2).split("."),
      _formatENumber$split4 = _slicedToArray$1(_formatENumber$split3, 2),
      integer2 = _formatENumber$split4[0],
      decimal2 = _formatENumber$split4[1];
    var result = compareLargeIntegerNumber(integer1.replace("-", ""), integer2.replace("-", ""));
    var integer1IsNegative = integer1.includes("-");
    var integer2IsNegative = integer2.includes("-");
    if (integer1IsNegative && !integer2IsNegative) return -1;
    if (!integer1IsNegative && integer2IsNegative) return 1;
    if (integer1IsNegative && integer2IsNegative) {
      if (result === 0) return 0;
      return result > 0 ? -1 : 1;
    }
    if (result === 0) {
      return compareLargeDecimalNumber(decimal1, decimal2);
    }
    return result;
  }
  function isInfinity(num) {
    return [-Infinity, Infinity].includes(Number(num));
  }
  function isSafeNumber(num) {
    return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;
  }
  function compareNumber(num1, num2, largeNumber) {
    var isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;
    var isInfinityCompare = isInfinity(num1) || isInfinity(num2);
    if (isSafeNumberCompare || isInfinityCompare) {
      if (Number(num1) === Number(num2)) return 0;
      return Number(num1) > Number(num2) ? 1 : -1;
    }
    return compareLargeNumber(String(num1), String(num2));
  }
  function largeIntegerNumberSubtract(num1, num2, p) {
    if (num1 === num2) return "0";
    var _ref = p || {},
      decimal = _ref.decimal,
      stayZero = _ref.stayZero;
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    var isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;
    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);
      if (count < 0) {
        step[i - 1] = 1;
        count += 10;
      }
      newNumber.unshift(String(count));
    }
    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }
    var finalNumber = newNumber.join("");
    if (!stayZero) {
      finalNumber = finalNumber.replace(/^0+/, "");
    }
    return removeInvalidZero(isFirstLarger ? finalNumber : "-".concat(finalNumber));
  }
  function largePositiveNumberSubtract(num1, num2) {
    if (num1 === num2) return "0";
    var isFirstLarger = compareNumber(num1, num2, true) > 0;
    var maxNumber = isFirstLarger ? num1 : num2;
    var minNumber = isFirstLarger ? num2 : num1;
    var _maxNumber$split = maxNumber.split("."),
      _maxNumber$split2 = _slicedToArray$1(_maxNumber$split, 2),
      intNumber1 = _maxNumber$split2[0],
      _maxNumber$split2$ = _maxNumber$split2[1],
      decimalNumber1 = _maxNumber$split2$ === void 0 ? "0" : _maxNumber$split2$;
    var _minNumber$split = minNumber.split("."),
      _minNumber$split2 = _slicedToArray$1(_minNumber$split, 2),
      intNumber2 = _minNumber$split2[0],
      _minNumber$split2$ = _minNumber$split2[1],
      decimalNumber2 = _minNumber$split2$ === void 0 ? "0" : _minNumber$split2$;
    var integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") {
      return isFirstLarger ? integerNumber : "-".concat(integerNumber);
    }
    var decimalNumber = "";
    var addOneNumber = decimalNumber1;
    if (decimalNumber1.length < decimalNumber2.length) {
      addOneNumber = "".concat(decimalNumber1).concat(fillZero(decimalNumber2.length - decimalNumber1.length));
    }
    if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {
      decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, {
        decimal: true
      });
    } else {
      if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === "0") {
        decimalNumber = largeIntegerNumberSubtract("1".concat(addOneNumber), decimalNumber2, {
          stayZero: true
        });
        decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;
      } else {
        decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, {
          decimal: true
        });
      }
      integerNumber = largeIntegerNumberSubtract(integerNumber, "1");
    }
    var finalNumber = decimalNumber ? [integerNumber, decimalNumber].join(".") : integerNumber;
    return isFirstLarger ? finalNumber : "-".concat(finalNumber);
  }
  function largeNumberSubtract(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";
    if (isFirstNegative && !isSecondNegative) {
      var r = largePositiveNumberAdd(num1.slice(1), num2);
      return "-".concat(r);
    }
    if (isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));
    }
    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberAdd(num1, num2.slice(1));
    }
    return largePositiveNumberSubtract(num1, num2);
  }
  function largeNumberAdd(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";
    if (isFirstNegative && !isSecondNegative) {
      return largePositiveNumberSubtract(num2, num1.slice(1));
    }
    if (isFirstNegative && isSecondNegative) {
      var r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));
      return "-".concat(r);
    }
    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num1, num2.slice(1));
    }
    return largePositiveNumberAdd(num1, num2);
  }
  function formatDecimal(num, places) {
    var enableRound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (enableRound) {
      return num.toFixed(places);
    }
    var _num$toString$split = num.toString().split("."),
      _num$toString$split2 = _slicedToArray$1(_num$toString$split, 2),
      integer = _num$toString$split2[0],
      decimal = _num$toString$split2[1];
    if (places === 0) {
      return integer;
    }
    if (decimal) {
      var decimalNumber = decimal.slice(0, places);
      if (decimal.length < places) {
        decimalNumber += fillZero(places - decimal.length);
      }
      return [integer, decimalNumber].join(".");
    }
    return [integer, fillZero(places)].join(".");
  }
  function decimalPlacesToFixedNum(num, decimalPlaces) {
    if (isObject(decimalPlaces)) {
      var _decimalPlaces$enable;
      return formatDecimal(num, decimalPlaces.places, (_decimalPlaces$enable = decimalPlaces.enableRound) !== null && _decimalPlaces$enable !== void 0 ? _decimalPlaces$enable : true);
    }
    return formatDecimal(num, decimalPlaces, true);
  }
  function largeNumberToFixed(number) {
    var _decimalPlaces$enable2;
    var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (Number.isNaN(Number(number))) return "";
    if (!largeNumber) {
      return decimalPlacesToFixedNum(Number(number), decimalPlaces);
    }
    var places = isObject(decimalPlaces) ? decimalPlaces.places : decimalPlaces;
    var enableRound = isObject(decimalPlaces) ? (_decimalPlaces$enable2 = decimalPlaces.enableRound) !== null && _decimalPlaces$enable2 !== void 0 ? _decimalPlaces$enable2 : true : true;
    if (!isString(number)) return String(number);
    var _number$split = number.split("."),
      _number$split2 = _slicedToArray$1(_number$split, 2),
      num1 = _number$split2[0],
      num2 = _number$split2[1];
    if (!num2) {
      return places > 0 && enableRound ? [number, fillZero(places)].join(".") : number;
    }
    if (places === 0) {
      return enableRound && Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, "1") : num1;
    }
    var decimalNumber = num2.slice(0, places);
    if (num2.length < places) {
      decimalNumber += fillZero(places - num2.length);
    } else if (enableRound) {
      var _decimalNumber$match;
      var leadZeroNum = (_decimalNumber$match = decimalNumber.match(/^0+/)) === null || _decimalNumber$match === void 0 ? void 0 : _decimalNumber$match[0].length;
      var leadNineNum = decimalNumber.match(/^9+/);
      var needAdded = Number(num2[places]) >= 5;
      decimalNumber = needAdded ? largePositiveNumberAdd(decimalNumber, "1") : decimalNumber;
      if (leadZeroNum && needAdded && leadZeroNum + decimalNumber.length >= places) {
        decimalNumber = "".concat(fillZero(places - decimalNumber.length)).concat(decimalNumber);
      }
      if (leadNineNum && decimalNumber.length > places) {
        num1 = (Number(num1) + 1).toString();
        decimalNumber = fillZero(places);
      }
    }
    return [num1, decimalNumber].join(".");
  }

  function canAddNumber(num, max) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num && num !== 0) return true;
    if (largeNumber && isString(num)) {
      return compareNumber(num, max, largeNumber) < 0;
    }
    return num < max;
  }
  function canReduceNumber(num, min) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num && num !== 0) return true;
    if (largeNumber && isString(num)) {
      return compareNumber(num, min, largeNumber) > 0;
    }
    return num > min;
  }
  function putInRangeNumber(val, params) {
    if (val === "") return void 0;
    var max = params.max,
      min = params.min,
      lastValue = params.lastValue,
      largeNumber = params.largeNumber;
    if (!isInputNumber(val)) return lastValue;
    if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {
      if (compareNumber(max, val, largeNumber) < 0) return max;
      if (compareNumber(min, val, largeNumber) > 0) return min;
      return val;
    }
    return Math.max(Number(min), Math.min(Number(max), Number(val)));
  }
  function positiveAdd(num1, num2) {
    var _num1$toString$split$, _num2$toString$split$;
    if (!num1 || !num2) return (num1 || 0) + (num2 || 0);
    var r1 = ((_num1$toString$split$ = num1.toString().split(".")[1]) === null || _num1$toString$split$ === void 0 ? void 0 : _num1$toString$split$.length) || 0;
    var r2 = ((_num2$toString$split$ = num2.toString().split(".")[1]) === null || _num2$toString$split$ === void 0 ? void 0 : _num2$toString$split$.length) || 0;
    if (!r1 && !r2) return num1 + num2;
    var newNumber1 = num1;
    var newNumber2 = num2;
    var diff = Math.abs(r1 - r2);
    var digit = Math.pow(10, Math.max(r1, r2));
    if (diff > 0) {
      var cm = Math.pow(10, diff);
      if (r1 > r2) {
        newNumber1 = Number(num1.toString().replace(".", ""));
        newNumber2 = Number(num2.toString().replace(".", "")) * cm;
      } else {
        newNumber1 = Number(num1.toString().replace(".", "")) * cm;
        newNumber2 = Number(num2.toString().replace(".", ""));
      }
    } else {
      newNumber1 = Number(num1.toString().replace(".", ""));
      newNumber2 = Number(num2.toString().replace(".", ""));
    }
    return (newNumber1 + newNumber2) / digit;
  }
  function positiveSubtract(num1, num2) {
    var _num1$toString$split$2, _num2$toString$split$2;
    if (!num1 || !num2) return (num1 || 0) - (num2 || 0);
    var r1 = ((_num1$toString$split$2 = num1.toString().split(".")[1]) === null || _num1$toString$split$2 === void 0 ? void 0 : _num1$toString$split$2.length) || 0;
    var r2 = ((_num2$toString$split$2 = num2.toString().split(".")[1]) === null || _num2$toString$split$2 === void 0 ? void 0 : _num2$toString$split$2.length) || 0;
    var digit = Math.pow(10, Math.max(r1, r2));
    var n = r1 >= r2 ? r1 : r2;
    return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));
  }
  function add(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));
    if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;
    if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));
    return positiveAdd(num1, num2);
  }
  function subtract(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;
    if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));
    if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));
    return positiveSubtract(num1, num2);
  }
  function getStepValue(p) {
    var op = p.op,
      step = p.step,
      lastValue = p.lastValue,
      max = p.max,
      min = p.min,
      largeNumber = p.largeNumber;
    if (Number(step) <= 0) {
      log.error("InputNumber", "step must be larger than 0.");
      return lastValue;
    }
    var tStep = isNumber(step) ? String(step) : step;
    var newVal;
    if (op === "add") {
      if (largeNumber && isString(lastValue)) {
        newVal = largeNumberAdd(String(lastValue), String(tStep));
      } else {
        newVal = add(Number(lastValue || 0), Number(step));
      }
    } else if (op === "reduce") {
      if (largeNumber && isString(lastValue)) {
        newVal = largeNumberSubtract(String(lastValue), String(tStep));
      } else {
        newVal = subtract(Number(lastValue || 0), Number(step));
      }
    }
    if (isUndefined(lastValue)) {
      newVal = putInRangeNumber(newVal, {
        max: max,
        min: min,
        lastValue: lastValue,
        largeNumber: largeNumber
      });
    }
    return largeNumber ? newVal : Number(newVal);
  }
  function getMaxOrMinValidateResult(p) {
    var largeNumber = p.largeNumber,
      value = p.value,
      max = p.max,
      min = p.min;
    if (isUndefined(value) || isUndefined(largeNumber)) return void 0;
    if (largeNumber && isNumber(value)) {
      log.warn("InputNumber", "largeNumber value must be a string.");
    }
    var error;
    if (compareNumber(value, max, largeNumber) > 0) {
      error = "exceed-maximum";
    } else if (compareNumber(value, min, largeNumber) < 0) {
      error = "below-minimum";
    } else {
      error = void 0;
    }
    return error;
  }
  var specialCode = ["-", ".", "e", "E", "+"];
  function canInputNumber(number, largeNumber) {
    var _number$match, _number$match2;
    if (["", null, void 0].includes(number)) return true;
    if (number.slice(0, 2) === "00") return false;
    if (number.match(/\s/g)) return false;
    if (((_number$match = number.match(/\./g)) === null || _number$match === void 0 ? void 0 : _number$match.length) > 1) return false;
    if (((_number$match2 = number.match(/e/g)) === null || _number$match2 === void 0 ? void 0 : _number$match2.length) > 1) return false;
    var tmpNumber = number.slice(1);
    var tmpMatched = tmpNumber.match(/(\+|-)/g);
    if (tmpMatched && (!/e(\+|-)/i.test(tmpNumber) || tmpMatched.length > 1)) return false;
    var isNumber2 = largeNumber && isInputNumber(number) || !Number.isNaN(Number(number));
    if (!isNumber2 && !specialCode.includes(number.slice(-1))) return false;
    if (/e/i.test(number) && (!/\de/i.test(number) || /e\./.test(number))) return false;
    return true;
  }
  function canSetValue(number, lastNumber) {
    return parseFloat(number) !== lastNumber && !Number.isNaN(Number(number));
  }
  function formatUnCompleteNumber(number) {
    var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (["", null, void 0].includes(number) || !/\d+/.test(number)) return void 0;
    var decimalPlaces = extra.decimalPlaces,
      largeNumber = extra.largeNumber,
      isToFixed = extra.isToFixed;
    var newNumber = number.replace(/[.|+|\-|e]$/, "");
    if (largeNumber) {
      newNumber = formatENumber(newNumber);
    }
    if (decimalPlaces !== void 0) {
      newNumber = largeNumberToFixed(newNumber, decimalPlaces, largeNumber);
    }
    if (largeNumber) return newNumber;
    return isToFixed ? newNumber : parseFloat(newNumber);
  }
  function formatThousandths(number) {
    var thousandthsRegExp = /^[-+]?\d{1,3}(,\d{3})*(\.(\d*))?$/;
    if (thousandthsRegExp.test(number)) return number.replace(/,/g, "");
    return number;
  }

  function useInputNumber(props) {
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE,
      STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tValue = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useState = React.useState(""),
      _useState2 = _slicedToArray$1(_useState, 2),
      userInput = _useState2[0],
      setUserInput = _useState2[1];
    var _useState3 = React.useState(),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isError = _useState4[0],
      setIsError = _useState4[1];
    var inputRef = React.useRef(null);
    var max = props.max,
      min = props.min,
      largeNumber = props.largeNumber,
      decimalPlaces = props.decimalPlaces,
      allowInputOverLimit = props.allowInputOverLimit,
      onValidate = props.onValidate;
    var disabledReduce = props.disabled || !canReduceNumber(tValue, props.min, props.largeNumber);
    var disabledAdd = props.disabled || !canAddNumber(tValue, props.max, props.largeNumber);
    var wrapClasses = classNames$1("".concat(classPrefix, "-input-number"), SIZE[props.size], _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.disabled, props.disabled), "".concat(classPrefix, "-is-controls-right"), props.theme === "column"), "".concat(classPrefix, "-input-number--").concat(props.theme), props.theme), "".concat(classPrefix, "-input-number--auto-width"), props.autoWidth));
    var reduceClasses = classNames$1("".concat(classPrefix, "-input-number__decrease"), _defineProperty$2({}, STATUS.disabled, disabledReduce));
    var addClasses = classNames$1("".concat(classPrefix, "-input-number__increase"), _defineProperty$2({}, STATUS.disabled, disabledAdd));
    var getUserInput = function getUserInput(value) {
      var _inputRef$current$cur, _inputRef$current$cur2;
      if (!value && value !== 0) return "";
      var inputStr = value || value === 0 ? String(value) : "";
      if (!((_inputRef$current$cur = (_inputRef$current$cur2 = inputRef.current.currentElement).contains) !== null && _inputRef$current$cur !== void 0 && _inputRef$current$cur.call(_inputRef$current$cur2, document.activeElement))) {
        var num = formatUnCompleteNumber(inputStr, {
          decimalPlaces: decimalPlaces,
          largeNumber: largeNumber,
          isToFixed: true
        });
        inputStr = num || num === 0 ? String(num) : "";
        if (props.format) {
          inputStr = String(props.format(value, {
            fixedNumber: inputStr
          }));
        }
      }
      return inputStr;
    };
    React.useEffect(function () {
      var inputValue = [void 0, null].includes(tValue) ? "" : String(tValue);
      if (!largeNumber && !Number.isNaN(userInput)) {
        if (parseFloat(userInput) !== tValue) {
          setUserInput(getUserInput(inputValue));
        }
        var fixedNumber = Number(largeNumberToFixed(inputValue, decimalPlaces, largeNumber));
        if (decimalPlaces !== void 0 && ![void 0, null].includes(tValue) && Number(fixedNumber) !== Number(tValue)) {
          onChange(fixedNumber, {
            type: "props",
            e: void 0
          });
        }
      }
      if (largeNumber) {
        var tmpUserInput = getUserInput(inputValue);
        setUserInput(tmpUserInput);
        if (decimalPlaces !== void 0 && largeNumberToFixed(inputValue, decimalPlaces, largeNumber) !== tValue) {
          onChange(tmpUserInput, {
            type: "props",
            e: void 0
          });
        }
      }
    }, [tValue]);
    React.useEffect(function () {
      if ([void 0, "", null].includes(tValue)) return;
      var error = getMaxOrMinValidateResult({
        value: tValue,
        max: max,
        min: min,
        largeNumber: largeNumber
      });
      setIsError(error);
      onValidate === null || onValidate === void 0 || onValidate({
        error: error
      });
    }, [tValue, max, min, largeNumber, onValidate]);
    var handleStepValue = function handleStepValue(op) {
      var newValue = getStepValue({
        op: op,
        step: props.step,
        max: props.max,
        min: props.min,
        lastValue: tValue,
        largeNumber: props.largeNumber
      });
      var largeNumber2 = props.largeNumber,
        max2 = props.max,
        min2 = props.min;
      var overLimit = getMaxOrMinValidateResult({
        value: newValue,
        largeNumber: largeNumber2,
        max: max2,
        min: min2
      });
      return {
        overLimit: overLimit,
        newValue: newValue
      };
    };
    var handleReduce = function handleReduce(e) {
      if (disabledReduce || props.readonly) return;
      var r = handleStepValue("reduce");
      if (r.overLimit && !allowInputOverLimit) return;
      onChange(r.newValue, {
        type: "reduce",
        e: e
      });
    };
    var handleAdd = function handleAdd(e) {
      if (disabledAdd || props.readonly) return;
      var r = handleStepValue("add");
      if (r.overLimit && !allowInputOverLimit) return;
      onChange(r.newValue, {
        type: "add",
        e: e
      });
    };
    var onInnerInputChange = function onInnerInputChange(inputValue, _ref) {
      var e = _ref.e;
      var val = formatThousandths(inputValue);
      if (!canInputNumber(val, largeNumber)) return;
      setUserInput(val);
      if (largeNumber) {
        onChange(val, {
          type: "input",
          e: e
        });
        return;
      }
      if (canSetValue(String(val), Number(tValue))) {
        var newVal = val === "" ? void 0 : Number(val);
        onChange(newVal, {
          type: "input",
          e: e
        });
      }
    };
    var handleBlur = function handleBlur(value, ctx) {
      var _props$onBlur;
      if (!props.allowInputOverLimit && value !== void 0) {
        var r = getMaxOrMinValidateResult({
          value: tValue,
          largeNumber: largeNumber,
          max: max,
          min: min
        });
        if (r === "below-minimum") {
          onChange(min, {
            type: "blur",
            e: ctx.e
          });
          return;
        }
        if (r === "exceed-maximum") {
          onChange(max, {
            type: "blur",
            e: ctx.e
          });
          return;
        }
      }
      var newValue = formatUnCompleteNumber(value, {
        decimalPlaces: decimalPlaces,
        largeNumber: largeNumber
      });
      setUserInput(getUserInput(newValue));
      if (newValue !== tValue) {
        setUserInput(tValue);
        onChange(newValue, {
          type: "blur",
          e: ctx.e
        });
      }
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, newValue, ctx);
    };
    var handleFocus = function handleFocus(_, ctx) {
      var _props$onFocus;
      setUserInput(tValue);
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, tValue, ctx);
    };
    var handleKeydown = function handleKeydown(value, ctx) {
      var _props$onKeydown;
      var e = ctx.e;
      var keyEvent = {
        ArrowUp: handleAdd,
        ArrowDown: handleReduce
      };
      if (keyEvent[e.key] !== void 0) {
        keyEvent[e.key](e);
      }
      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 || _props$onKeydown.call(props, value, ctx);
    };
    var handleKeyup = function handleKeyup(value, ctx) {
      var _props$onKeyup;
      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 || _props$onKeyup.call(props, value, ctx);
    };
    var handleKeypress = function handleKeypress(value, ctx) {
      var _props$onKeypress;
      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 || _props$onKeypress.call(props, value, ctx);
    };
    var handleEnter = function handleEnter(value, ctx) {
      var _props$onEnter;
      setUserInput(getUserInput(value));
      var newValue = formatUnCompleteNumber(value, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });
      if (newValue !== value && String(newValue) !== value) {
        onChange(newValue, {
          type: "enter",
          e: ctx.e
        });
      }
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, ctx);
    };
    var handleClear = function handleClear(_ref2) {
      var e = _ref2.e;
      onChange(void 0, {
        type: "clear",
        e: e
      });
      setUserInput("");
    };
    var focus = function focus() {
      inputRef.current.focus();
    };
    var blur = function blur() {
      inputRef.current.blur();
    };
    var listeners = {
      onBlur: handleBlur,
      onFocus: handleFocus,
      onKeydown: handleKeydown,
      onKeyup: handleKeyup,
      onKeypress: handleKeypress,
      onEnter: handleEnter,
      onClick: focus,
      onClear: handleClear
    };
    return {
      classPrefix: classPrefix,
      wrapClasses: wrapClasses,
      reduceClasses: reduceClasses,
      addClasses: addClasses,
      inputRef: inputRef,
      listeners: listeners,
      isError: isError,
      setIsError: setIsError,
      userInput: userInput,
      setUserInput: setUserInput,
      tValue: tValue,
      focus: focus,
      blur: blur,
      onChange: onChange,
      handleReduce: handleReduce,
      handleAdd: handleAdd,
      onInnerInputChange: onInnerInputChange
    };
  }

  var inputNumberDefaultProps = {
    allowInputOverLimit: true,
    autoWidth: false,
    decimalPlaces: void 0,
    disabled: void 0,
    largeNumber: false,
    max: Infinity,
    min: -Infinity,
    placeholder: void 0,
    readonly: void 0,
    size: "medium",
    status: "default",
    step: 1,
    theme: "row"
  };

  function ownKeys$2z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function TdInputNumber(originalProps, ref) {
    var _useGlobalIcon = useGlobalIcon({
        ChevronDownIcon: TdChevronDownIcon,
        RemoveIcon: TdRemoveIcon,
        ChevronUpIcon: TdChevronUpIcon,
        AddIcon: TdAddIcon
      }),
      ChevronDownIcon = _useGlobalIcon.ChevronDownIcon,
      RemoveIcon = _useGlobalIcon.RemoveIcon,
      ChevronUpIcon = _useGlobalIcon.ChevronUpIcon,
      AddIcon = _useGlobalIcon.AddIcon;
    var props = useDefaultProps(originalProps, inputNumberDefaultProps);
    var _useInputNumber = useInputNumber(props),
      classPrefix = _useInputNumber.classPrefix,
      wrapClasses = _useInputNumber.wrapClasses,
      addClasses = _useInputNumber.addClasses,
      reduceClasses = _useInputNumber.reduceClasses,
      listeners = _useInputNumber.listeners,
      isError = _useInputNumber.isError,
      inputRef = _useInputNumber.inputRef,
      userInput = _useInputNumber.userInput,
      handleAdd = _useInputNumber.handleAdd,
      handleReduce = _useInputNumber.handleReduce,
      onInnerInputChange = _useInputNumber.onInnerInputChange;
    var wrapRef = React.useRef(null);
    var status = isError ? "error" : props.status;
    var addIcon = props.theme === "column" ? /* @__PURE__ */React__default["default"].createElement(ChevronUpIcon, {
      size: props.size
    }) : /* @__PURE__ */React__default["default"].createElement(AddIcon, {
      size: props.size
    });
    var reduceIcon = props.theme === "column" ? /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon, {
      size: props.size
    }) : /* @__PURE__ */React__default["default"].createElement(RemoveIcon, {
      size: props.size
    });
    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapRef.current,
        inputElement: inputRef.current
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(wrapClasses, props.className),
      style: props.style,
      ref: wrapRef
    }, props.theme !== "normal" && /* @__PURE__ */React__default["default"].createElement(Button, {
      className: reduceClasses,
      disabled: props.disabled,
      onClick: handleReduce,
      variant: "outline",
      shape: "square",
      icon: reduceIcon
    }), /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$2y(_objectSpread$2y({
      ref: inputRef,
      autocomplete: "off",
      disabled: props.disabled,
      readonly: props.readonly,
      placeholder: props.placeholder,
      autoWidth: props.autoWidth,
      align: props.align || (props.theme === "row" ? "center" : void 0),
      status: status,
      label: props.label,
      suffix: props.suffix,
      value: userInput,
      onChange: onInnerInputChange,
      size: props.size
    }, listeners), props.inputProps || {})), props.theme !== "normal" && /* @__PURE__ */React__default["default"].createElement(Button, {
      className: addClasses,
      disabled: props.disabled,
      onClick: handleAdd,
      variant: "outline",
      shape: "square",
      icon: addIcon
    }), props.tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-input__tips"), "".concat(classPrefix, "-input__tips--").concat(status))
    }, props.tips));
  }
  var InputNumber$1 = /*#__PURE__*/React.forwardRef(TdInputNumber);
  InputNumber$1.displayName = "InputNumber";

  var InputNumber = InputNumber$1;

  var StepsContext$1 = /*#__PURE__*/React__default["default"].createContext({
    current: 0,
    theme: "default",
    readonly: false,
    onChange: null
  });

  var stepItemDefaultProps = {
    icon: true,
    status: "default"
  };
  var stepsDefaultProps = {
    layout: "horizontal",
    readonly: false,
    separator: "line",
    sequence: "positive",
    theme: "default"
  };

  var StepItem = function StepItem(originalProps) {
    var props = useDefaultProps(originalProps, stepItemDefaultProps);
    var index = props.index,
      icon = props.icon,
      title = props.title,
      content = props.content,
      value = props.value,
      children = props.children,
      style = props.style,
      status = props.status;
    var _useContext = React.useContext(StepsContext$1),
      current = _useContext.current,
      theme = _useContext.theme,
      onChange = _useContext.onChange,
      readonly = _useContext.readonly;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalStepsConfig = _useConfig.steps;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon,
        CheckIcon: CheckIcon$1
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      CheckIcon = _useGlobalIcon.CheckIcon;
    var canClick = status !== "process" && !readonly;
    var iconNode = React__default["default"].useMemo(function () {
      if (!icon || theme !== "default") {
        return null;
      }
      if (icon !== true) {
        return icon;
      }
      var iconCls = "".concat(classPrefix, "-steps-item__icon--number");
      var getDefaultIconByStatus = function getDefaultIconByStatus() {
        switch (status) {
          case "error":
            return globalStepsConfig.errorIcon || /* @__PURE__ */React__default["default"].createElement(CloseIcon, null);
          case "finish":
            return globalStepsConfig.checkIcon || /* @__PURE__ */React__default["default"].createElement(CheckIcon, null);
          default:
            return Number(index) + 1;
        }
      };
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: iconCls
      }, getDefaultIconByStatus());
    }, [icon, classPrefix, theme, status, globalStepsConfig, index, CloseIcon, CheckIcon]);
    function onStepClick(e) {
      if (!canClick) {
        return;
      }
      var currentValue = value !== null && value !== void 0 ? value : index;
      onChange(currentValue, current, {
        e: e
      });
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: classNames$1(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-steps-item"), true), "".concat(classPrefix, "-steps-item--wait"), status === "default"), "".concat(classPrefix, "-steps-item--error"), status === "error"), "".concat(classPrefix, "-steps-item--finish"), status === "finish"), "".concat(classPrefix, "-steps-item--process"), status === "process"), props.className, !!props.className))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-steps-item__inner"), _defineProperty$2({}, "".concat(classPrefix, "-steps-item--clickable"), canClick)),
      onClick: onStepClick
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-steps-item__icon"), _defineProperty$2({}, "".concat(classPrefix, "-steps-item-").concat(status), status))
    }, iconNode), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__title")
    }, title), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__description")
    }, content), children ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__extra")
    }, children) : null)));
  };
  StepItem.displayName = "StepItem";

  function ownKeys$2y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2x(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Steps$1 = forwardRefWithStatics(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, stepsDefaultProps);
    var style = props.style,
      readonly = props.readonly,
      layout = props.layout,
      theme = props.theme,
      sequence = props.sequence,
      separator = props.separator,
      children = props.children,
      options = props.options;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useControlled = useControlled(props, "current", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      current = _useControlled2[0],
      onChange = _useControlled2[1];
    var indexMap = React.useMemo(function () {
      var map = {};
      if (options) {
        options.forEach(function (item, index) {
          if (item.value !== void 0) {
            map[item.value] = index;
          }
        });
      } else {
        React__default["default"].Children.forEach(children, function (child, index) {
          if (! /*#__PURE__*/React__default["default"].isValidElement(child)) {
            return;
          }
          if (child.props.value !== void 0) {
            map[child.props.value] = index;
          }
        });
      }
      return map;
    }, [options, children]);
    var handleStatus = React.useCallback(function (item, index) {
      var _item$value;
      if (current === "FINISH") {
        return "finish";
      }
      if (item.status && item.status !== "default") {
        return item.status;
      }
      if (item.value === void 0) {
        if (sequence === "positive" && typeof current === "number" && index < current) {
          return "finish";
        }
        if (sequence === "reverse" && typeof current === "number" && index > current) {
          return "finish";
        }
      }
      if (item.value !== void 0) {
        var matchIndex = indexMap[current];
        if (matchIndex === void 0) {
          console.warn("TDesign Steps Warn: The current `value` is not exist.");
          return "default";
        }
        if (sequence === "positive" && index < matchIndex) {
          return "finish";
        }
        if (sequence === "reverse" && index > matchIndex) {
          return "finish";
        }
      }
      var key = (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : index;
      if (key === current) {
        return "process";
      }
      return "default";
    }, [current, sequence, indexMap]);
    var stepItemList = React.useMemo(function () {
      if (options) {
        var optionsDisplayList = sequence === "reverse" ? options.reverse() : options;
        return options.map(function (item, index) {
          var stepIndex = sequence === "reverse" ? optionsDisplayList.length - index - 1 : index;
          return /* @__PURE__ */React__default["default"].createElement(StepItem, _objectSpread$2x(_objectSpread$2x({
            key: index
          }, item), {}, {
            index: stepIndex,
            status: handleStatus(item, index)
          }));
        });
      }
      var childrenList = React__default["default"].Children.toArray(children);
      var childrenDisplayList = sequence === "reverse" ? childrenList.reverse() : childrenList;
      return childrenList.map(function (child, index) {
        var stepIndex = sequence === "reverse" ? childrenDisplayList.length - index - 1 : index;
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$2x(_objectSpread$2x({}, child.props), {}, {
          index: stepIndex,
          status: handleStatus(child.props, index)
        }));
      });
    }, [options, children, sequence, handleStatus]);
    return /* @__PURE__ */React__default["default"].createElement(StepsContext$1.Provider, {
      value: {
        current: current,
        theme: theme,
        readonly: readonly,
        onChange: onChange
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-steps"), true), "".concat(classPrefix, "-steps--").concat(theme, "-anchor"), theme), "".concat(classPrefix, "-steps--").concat(layout), layout), "".concat(classPrefix, "-steps--").concat(sequence), sequence), "".concat(classPrefix, "-steps--").concat(separator, "-separator"), separator), props.className, !!props.className))
    }, stepItemList));
  }, {
    StepItem: StepItem
  });
  Steps$1.displayName = "Steps";

  var Steps = Steps$1;

  function ownKeys$2x(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2x(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2x(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var StickyItem = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var icon = props.icon,
      label = props.label,
      popup = props.popup,
      popupProps = props.popupProps,
      trigger = props.trigger,
      type = props.type,
      shape = props.shape,
      placement = props.placement,
      basePopupProps = props.basePopupProps,
      baseWidth = props.baseWidth,
      onClick = props.onClick,
      onHover = props.onHover,
      style = props.style,
      className = props.className;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var popupPlacement = React.useMemo(function () {
      return placement.includes("right") ? "left" : "right";
    }, [placement]);
    var styles = React.useMemo(function () {
      var styles2 = _objectSpread$2w({}, style);
      if (baseWidth) {
        var selfWidth = type === "normal" ? "56px" : "40px";
        styles2.margin = "calc((".concat(baseWidth, " - ").concat(selfWidth, ")/2)");
      }
      return styles2;
    }, [baseWidth, style, type]);
    var handleClickItem = React.useCallback(function (e) {
      var item = {
        icon: icon,
        label: label,
        popup: popup,
        popupProps: popupProps,
        trigger: trigger
      };
      onClick({
        e: e,
        item: item
      });
    }, [icon, label, popup, popupProps, trigger, onClick]);
    var handleHoverItem = React.useCallback(function (e) {
      var item = {
        icon: icon,
        label: label,
        popup: popup,
        popupProps: popupProps,
        trigger: trigger
      };
      onHover({
        e: e,
        item: item
      });
    }, [icon, label, popup, popupProps, trigger, onHover]);
    var finalPopupProps = _objectSpread$2w(_objectSpread$2w({
      hideEmptyPopup: true
    }, basePopupProps), popupProps);
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$2w({
      overlayInnerClassName: classNames$1("".concat(classPrefix, "-sticky-tool-popup-content")),
      trigger: props.trigger,
      hideEmptyPopup: true,
      placement: popupPlacement,
      content: popup
    }, finalPopupProps), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-sticky-item"), "".concat(classPrefix, "-sticky-item--").concat(shape), "".concat(classPrefix, "-sticky-item--").concat(type), className),
      style: styles,
      onClick: handleClickItem,
      onMouseEnter: handleHoverItem
    }, icon, props.type === "normal" ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-sticky-item__label"))
    }, label) : null));
  });
  StickyItem.displayName = "StickyItem";

  var stickyToolDefaultProps = {
    list: [],
    placement: "right-bottom",
    shape: "square",
    type: "normal"
  };

  function ownKeys$2w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2w(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var StickyTool$1 = forwardRefWithStatics(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, stickyToolDefaultProps),
      style = _useDefaultProps.style,
      className = _useDefaultProps.className,
      children = _useDefaultProps.children,
      width = _useDefaultProps.width,
      type = _useDefaultProps.type,
      shape = _useDefaultProps.shape,
      placement = _useDefaultProps.placement,
      offset = _useDefaultProps.offset,
      popupProps = _useDefaultProps.popupProps,
      list = _useDefaultProps.list,
      onClick = _useDefaultProps.onClick,
      onHover = _useDefaultProps.onHover;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var styles = React.useMemo(function () {
      var position = offset ? [80, 24] : ["80px", "24px"];
      offset === null || offset === void 0 || offset.forEach(function (item, index) {
        position[index] = isNaN(Number(item)) ? "calc( ".concat(position[index], "px + ").concat(item, ")") : "".concat(position[index] + item, "px");
      });
      var styles2 = _objectSpread$2v({}, style);
      placement.split("-").forEach(function (item, index) {
        if (item !== "center") {
          styles2[item] = position[index];
        } else {
          styles2.top = "50%";
          styles2.transform = "translate(0, -50%)";
        }
      });
      if (width) {
        styles2.width = typeof width === "number" ? "".concat(width, "px") : width;
      }
      return styles2;
    }, [offset, placement, width, style]);
    var handleClick = React.useCallback(function (context) {
      onClick === null || onClick === void 0 || onClick(context);
    }, [onClick]);
    var handleHover = React.useCallback(function (context) {
      onHover === null || onHover === void 0 || onHover(context);
    }, [onHover]);
    var stickyItemList = React.useMemo(function () {
      if (list !== null && list !== void 0 && list.length) {
        return list.map(function (item, index) {
          var itemProps = _objectSpread$2v(_objectSpread$2v({}, item), {}, {
            type: type,
            shape: shape,
            placement: placement,
            basePopupProps: popupProps,
            baseWidth: styles.width,
            onClick: handleClick,
            onHover: handleHover
          });
          return /* @__PURE__ */React__default["default"].createElement(StickyItem, _objectSpread$2v({
            key: index
          }, itemProps));
        });
      }
      var childrenList = React__default["default"].Children.toArray(children);
      return childrenList.map(function (child) {
        var itemProps = _objectSpread$2v(_objectSpread$2v({}, child.props), {}, {
          type: type,
          shape: shape,
          placement: placement,
          basePopupProps: popupProps,
          baseWidth: styles.width,
          onClick: handleClick,
          onHover: handleHover
        });
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$2v({}, itemProps));
      });
    }, [list, children, type, shape, placement, popupProps, styles, handleClick, handleHover]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: styles,
      className: classNames$1("".concat(classPrefix, "-sticky-tool"), "".concat(classPrefix, "-sticky-tool--").concat(shape), className)
    }, stickyItemList);
  }, {
    StickyItem: StickyItem
  });
  StickyTool$1.displayName = "StickyTool";

  var StickyTool = StickyTool$1;

  var Distance = "32px";
  var PlacementOffset = {
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: Distance,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: Distance,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: Distance,
      top: "50%",
      transform: "translateY(-50%)"
    },
    top: {
      top: Distance,
      left: "50%",
      transform: "translateX(-50%)"
    },
    "top-left": {
      left: Distance,
      top: Distance
    },
    "top-right": {
      right: Distance,
      top: Distance
    },
    "bottom-left": {
      left: Distance,
      bottom: Distance
    },
    "bottom-right": {
      right: Distance,
      bottom: Distance
    }
  };

  function useMessageClass() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var tdMessagePrefix = "".concat(classPrefix, "-message");
    var tdMessageListClass = "".concat(tdMessagePrefix, "__list");
    var tdClassIsGenerator = function tdClassIsGenerator(append) {
      return "".concat(classPrefix, "-is-").concat(append);
    };
    var tdMessageClassGenerator = function tdMessageClassGenerator(append) {
      return "".concat(tdMessagePrefix, "__").concat(append);
    };
    var tdMessagePlacementClassGenerator = function tdMessagePlacementClassGenerator(placement) {
      return "".concat(tdMessagePrefix, "-placement--").concat(placement);
    };
    return {
      tdMessagePrefix: tdMessagePrefix,
      tdMessageListClass: tdMessageListClass,
      tdClassIsGenerator: tdClassIsGenerator,
      tdMessageClassGenerator: tdMessageClassGenerator,
      tdMessagePlacementClassGenerator: tdMessagePlacementClassGenerator
    };
  }

  function MessageClose(_ref) {
    var closeBtn = _ref.closeBtn,
      onCloseBtnClick = _ref.onCloseBtnClick;
    var _useMessageClass = useMessageClass(),
      tdMessageClassGenerator = _useMessageClass.tdMessageClassGenerator;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon;
    var relCloseBtn = closeBtn;
    if (typeof closeBtn === "function") {
      relCloseBtn = closeBtn();
    }
    if (!relCloseBtn) {
      return null;
    }
    if (typeof relCloseBtn === "string" || typeof relCloseBtn === "number") {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: tdMessageClassGenerator("close"),
        onClick: function onClick(e) {
          return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
            e: e
          });
        }
      }, closeBtn);
    }
    if (/*#__PURE__*/React__default["default"].isValidElement(relCloseBtn)) {
      var _onClick = relCloseBtn.props.onClick;
      return /*#__PURE__*/React__default["default"].cloneElement(relCloseBtn, {
        className: classNames$1(relCloseBtn.props.className, tdMessageClassGenerator("close")),
        onClick: function onClick(e) {
          _onClick === null || _onClick === void 0 || _onClick(e);
          onCloseBtnClick === null || onCloseBtnClick === void 0 || onCloseBtnClick({
            e: e
          });
        }
      });
    }
    return /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      className: tdMessageClassGenerator("close"),
      onClick: function onClick(e) {
        return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
          e: e
        });
      }
    });
  }

  function MessageIcon(_ref) {
    var theme = _ref.theme,
      onCloseBtnClick = _ref.onCloseBtnClick;
    var _useGlobalIcon = useGlobalIcon({
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
        HelpCircleFilledIcon: TdHelpCircleFilledIcon,
        InfoCircleFilledIcon: TdInfoCircleFilledIcon
      }),
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
      HelpCircleFilledIcon = _useGlobalIcon.HelpCircleFilledIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon;
    var iconMap = {
      info: InfoCircleFilledIcon,
      success: CheckCircleFilledIcon,
      warning: ErrorCircleFilledIcon,
      error: ErrorCircleFilledIcon,
      question: HelpCircleFilledIcon,
      loading: Loading
    };
    var Icon = iconMap[theme];
    if (theme === "loading") {
      return /* @__PURE__ */React__default["default"].createElement(Icon, {
        loading: true
      });
    }
    return Icon ? /* @__PURE__ */React__default["default"].createElement(Icon, {
      onClick: function onClick(e) {
        return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
          e: e
        });
      }
    }) : null;
  }

  function usePersistFn(fn) {
    var fnRef = React.useRef(fn);
    fnRef.current = fn;
    var persistFn = React.useRef(null);
    if (!persistFn.current) {
      persistFn.current = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return fnRef.current.apply(this, args);
      };
    }
    return persistFn.current;
  }

  var MessageComponent = function MessageComponent(props) {
    var _useMessageClass = useMessageClass(),
      tdMessagePrefix = _useMessageClass.tdMessagePrefix,
      tdClassIsGenerator = _useMessageClass.tdClassIsGenerator;
    var _props$theme = props.theme,
      theme = _props$theme === void 0 ? "info" : _props$theme,
      className = props.className,
      children = props.children,
      style = props.style,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? true : _props$icon,
      content = props.content,
      closeBtn = props.closeBtn,
      _props$onCloseBtnClic = props.onCloseBtnClick,
      onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
      _props$onDurationEnd = props.onDurationEnd,
      onDurationEnd = _props$onDurationEnd === void 0 ? noop : _props$onDurationEnd,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      duration = props.duration;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isHovering = _useState2[0],
      setIsHovering = _useState2[1];
    var onCloseFn = usePersistFn(onClose);
    var onDurationEndFn = usePersistFn(onDurationEnd);
    var onCloseBtnClickFn = usePersistFn(onCloseBtnClick);
    function handleCloseBtnClick(e) {
      onCloseBtnClickFn(e);
      onCloseFn({
        trigger: "close-click"
      });
    }
    React.useEffect(function () {
      if (!isHovering && duration > 0) {
        var timer = setTimeout(function () {
          onDurationEndFn();
          onCloseFn({
            trigger: "duration-end"
          });
        }, duration);
        return function () {
          clearTimeout(timer);
        };
      }
    }, [duration, isHovering, onCloseFn, onDurationEndFn]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      key: "message",
      style: style,
      className: classNames$1(className, "".concat(tdMessagePrefix), tdClassIsGenerator(theme), closeBtn ? tdClassIsGenerator("closable") : ""),
      onMouseEnter: function onMouseEnter() {
        return setIsHovering(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setIsHovering(false);
      }
    }, icon === true ? /* @__PURE__ */React__default["default"].createElement(MessageIcon, {
      theme: theme
    }) : icon, content ? content : children, /* @__PURE__ */React__default["default"].createElement(MessageClose, {
      closeBtn: closeBtn,
      onCloseBtnClick: handleCloseBtnClick
    }));
  };

  var messageDefaultProps = {
    closeBtn: void 0,
    duration: 3e3,
    icon: true,
    theme: "info"
  };

  function ownKeys$2v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2v(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var globalConfig = {
    top: 32
  };
  var messageDefaultConfig = _objectSpread$2u(_objectSpread$2u({}, messageDefaultProps), {}, {
    duration: 3e3,
    placement: "top",
    zIndex: 5e3
  });
  var getMessageConfig = function getMessageConfig(options) {
    var currentOptions = _objectSpread$2u({}, options);
    for (var i in currentOptions) {
      if (typeof currentOptions[i] === "undefined") {
        delete currentOptions[i];
      }
    }
    if (typeof currentOptions.duration !== "number" || currentOptions.duration < 0) {
      delete currentOptions.duration;
    }
    return _objectSpread$2u(_objectSpread$2u({}, messageDefaultConfig), currentOptions);
  };
  var setGlobalConfig$1 = function setGlobalConfig(options) {
    messageDefaultConfig = _objectSpread$2u({}, getMessageConfig(options));
  };

  function ownKeys$2u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2u(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var MessageList = [];
  var keyIndex = 1;
  var MessageContainer = function MessageContainer(props) {
    var placement = props.placement,
      children = props.children,
      zIndex = props.zIndex,
      id = props.id,
      renderCallback = props.renderCallback;
    var style = {
      zIndex: zIndex
    };
    Object.keys(PlacementOffset[placement]).forEach(function (key) {
      style[key] = PlacementOffset[placement][key];
    });
    if (placement.includes("top")) {
      style.top = "".concat(globalConfig.top, "px");
    }
    React.useEffect(function () {
      renderCallback();
    }, []);
    var _useMessageClass = useMessageClass(),
      tdMessagePlacementClassGenerator = _useMessageClass.tdMessagePlacementClassGenerator,
      tdMessageListClass = _useMessageClass.tdMessageListClass;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdMessageListClass, tdMessagePlacementClassGenerator(placement)),
      style: style,
      id: id
    }, children);
  };
  function createContainer(_ref) {
    var attach = _ref.attach,
      zIndex = _ref.zIndex,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? "top" : _ref$placement;
    return new Promise(function (resolve) {
      var mountedDom = document.body;
      if (typeof attach === "string") {
        var result = document.querySelectorAll(attach);
        if (result.length >= 1) {
          mountedDom = result[0];
        }
      } else if (typeof attach === "function") {
        mountedDom = attach();
      }
      var containerId = "tdesign-message-container--".concat(placement);
      var container = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));
      if (container.length < 1) {
        var div = document.createElement("div");
        var mGlobalConfig = ConfigProvider.getGlobalConfig();
        render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
          globalConfig: mGlobalConfig
        }, /* @__PURE__ */React__default["default"].createElement(MessageContainer, {
          id: containerId,
          placement: placement,
          zIndex: zIndex,
          renderCallback: function renderCallback() {
            mountedDom.appendChild(div);
            var container2 = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));
            resolve(container2[0]);
          }
        })), div);
      } else {
        resolve(container[0]);
      }
    });
  }
  function renderElement(_x, _x2) {
    return _renderElement.apply(this, arguments);
  }
  function _renderElement() {
    _renderElement = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(theme, config) {
      var container, content, offset, _config$onClose, _onClose, div, message, style, _offset, left, top;
      return regenerator.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 1;
            return createContainer(config);
          case 1:
            container = _context.sent;
            content = config.content, offset = config.offset, _config$onClose = config.onClose, _onClose = _config$onClose === void 0 ? noop : _config$onClose;
            div = document.createElement("div");
            keyIndex += 1;
            message = {
              close: function close() {
                unmount(div);
                div.remove();
                message.closed = true;
                var index = MessageList.indexOf(message);
                if (index >= 0) {
                  MessageList.splice(index, 1);
                }
              },
              key: keyIndex,
              closed: false
            };
            style = _objectSpread$2t({}, config.style);
            if (Array.isArray(offset) && offset.length === 2) {
              _offset = _slicedToArray$1(offset, 2), left = _offset[0], top = _offset[1];
              style = _objectSpread$2t(_objectSpread$2t({
                left: left,
                top: top
              }, style), {}, {
                position: "relative"
              });
            }
            return _context.abrupt("return", new Promise(function (resolve) {
              var mGlobalConfig = ConfigProvider.getGlobalConfig();
              render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
                globalConfig: mGlobalConfig
              }, /* @__PURE__ */React__default["default"].createElement(MessageComponent, _objectSpread$2t(_objectSpread$2t({
                key: keyIndex
              }, config), {}, {
                theme: theme,
                style: style,
                onClose: function onClose(ctx) {
                  _onClose(ctx);
                  message.close();
                }
              }), content)), div);
              container.appendChild(div);
              MessageList.push(message);
              resolve(message);
            }));
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _renderElement.apply(this, arguments);
  }
  function isConfig(content) {
    return Object.prototype.toString.call(content) === "[object Object]" && "content" in content;
  }
  var messageMethod = function messageMethod(theme, content, duration) {
    var config = {};
    if (isConfig(content)) {
      config = _objectSpread$2t({
        duration: duration
      }, content);
    } else {
      config = {
        content: content,
        duration: duration
      };
    }
    return renderElement(theme, getMessageConfig(config));
  };
  var MessagePlugin$1 = function MessagePlugin(theme, message, duration) {
    return messageMethod(theme, message, duration);
  };
  MessagePlugin$1.info = function (content, duration) {
    return messageMethod("info", content, duration);
  };
  MessagePlugin$1.error = function (content, duration) {
    return messageMethod("error", content, duration);
  };
  MessagePlugin$1.warning = function (content, duration) {
    return messageMethod("warning", content, duration);
  };
  MessagePlugin$1.success = function (content, duration) {
    return messageMethod("success", content, duration);
  };
  MessagePlugin$1.question = function (content, duration) {
    return messageMethod("question", content, duration);
  };
  MessagePlugin$1.loading = function (content, duration) {
    return messageMethod("loading", content, duration);
  };
  MessagePlugin$1.config = function (options) {
    return setGlobalConfig$1(options);
  };
  MessagePlugin$1.close = function (messageInstance) {
    messageInstance.then(function (instance) {
      return instance.close();
    });
  };
  MessagePlugin$1.closeAll = function () {
    MessageList.forEach(function (message) {
      typeof message.close === "function" && message.close();
    });
    MessageList = [];
    return;
  };

  var Message = MessageComponent;
  var message = MessagePlugin$1;
  var MessagePlugin = MessagePlugin$1;

  var affixDefaultProps = {
    container: function container() {
      return window;
    },
    offsetBottom: 0,
    offsetTop: 0
  };

  var raf$2 = {exports: {}};

  var performanceNow = {exports: {}};

  // Generated by CoffeeScript 1.12.2
  (function () {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      performanceNow.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      performanceNow.exports = function () {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      performanceNow.exports = function () {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      performanceNow.exports = function () {
        return new Date().getTime() - loadTime;
      };
      loadTime = new Date().getTime();
    }
  }).call(commonjsGlobal);

  var now = performanceNow.exports,
    root = typeof window === 'undefined' ? commonjsGlobal : window,
    vendors = ['moz', 'webkit'],
    suffix = 'AnimationFrame',
    raf = root['request' + suffix],
    caf = root['cancel' + suffix] || root['cancelRequest' + suffix];
  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root[vendors[i] + 'Request' + suffix];
    caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];
  }

  // Some versions of FF have rAF but not cAF
  if (!raf || !caf) {
    var last = 0,
      id = 0,
      queue = [],
      frameDuration = 1000 / 60;
    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now(),
          next = Math.max(0, frameDuration - (_now - last));
        last = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0);
          // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue
          queue.length = 0;
          var _loop = function _loop() {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          };
          for (var i = 0; i < cp.length; i++) {
            _loop();
          }
        }, Math.round(next));
      }
      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };
    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }
  raf$2.exports = function (fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root, fn);
  };
  raf$2.exports.cancel = function () {
    caf.apply(root, arguments);
  };
  raf$2.exports.polyfill = function (object) {
    if (!object) {
      object = root;
    }
    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };
  var raf$1 = raf$2.exports;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);
    if (time < 1) {
      return change * time * time * time + start;
    }
    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  function hasBodyScrollbar() {
    return document.body.scrollHeight > document.documentElement.clientHeight;
  }
  var isNodeOverflow = function isNodeOverflow(ele) {
    var _ele$clientWidth = ele.clientWidth,
      clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
      _ele$scrollWidth = ele.scrollWidth,
      scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
    if (scrollWidth > clientWidth) {
      return true;
    }
    return false;
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";
    if (isString(container)) {
      return container ? document.querySelector(container) : window;
    }
    if (typeof container === "function") {
      return container();
    }
    return container || window;
  };
  function getScroll(target, isLeft) {
    if (typeof window === "undefined" || !target) {
      return 0;
    }
    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;
    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }
    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
      container = _opt$container === void 0 ? window : _opt$container,
      _opt$duration = opt.duration,
      duration = _opt$duration === void 0 ? 450 : _opt$duration,
      _opt$easing = opt.easing,
      easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var _fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);
        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (typeof HTMLDocument !== "undefined" && (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument")) {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }
        if (time < duration) {
          raf$1(_fnc);
        } else {
          raf$1(res);
        }
      };
      raf$1(_fnc);
    });
  }
  function getWindowScroll() {
    var _document = document,
      body = _document.body;
    var docElm = document.documentElement;
    var scrollTop = window.pageYOffset || docElm.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docElm.scrollLeft || body.scrollLeft;
    return {
      scrollTop: scrollTop,
      scrollLeft: scrollLeft
    };
  }
  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
      top = _target$getBoundingCl.top;
    if (container === window) {
      return top - document.documentElement.clientTop;
    }
    return top - container.getBoundingClientRect().top;
  }

  var Affix$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, affixDefaultProps),
      children = _useDefaultProps.children,
      content = _useDefaultProps.content,
      zIndex = _useDefaultProps.zIndex,
      container = _useDefaultProps.container,
      offsetBottom = _useDefaultProps.offsetBottom,
      offsetTop = _useDefaultProps.offsetTop,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      onFixedChange = _useDefaultProps.onFixedChange;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var affixRef = React.useRef(null);
    var affixWrapRef = React.useRef(null);
    var placeholderEL = React.useRef(null);
    var scrollContainer = React.useRef(null);
    var ticking = React.useRef(false);
    var handleScroll = React.useCallback(function () {
      if (!ticking.current) {
        window.requestAnimationFrame(function () {
          var _affixWrapRef$current, _affixWrapRef$current2;
          var _ref = (_affixWrapRef$current = (_affixWrapRef$current2 = affixWrapRef.current) === null || _affixWrapRef$current2 === void 0 ? void 0 : _affixWrapRef$current2.getBoundingClientRect()) !== null && _affixWrapRef$current !== void 0 ? _affixWrapRef$current : {
              top: 0
            },
            _ref$top = _ref.top,
            wrapToTop = _ref$top === void 0 ? 0 : _ref$top,
            _ref$width = _ref.width,
            wrapWidth = _ref$width === void 0 ? 0 : _ref$width,
            _ref$height = _ref.height,
            wrapHeight = _ref$height === void 0 ? 0 : _ref$height;
          var containerToTop = 0;
          if (scrollContainer.current instanceof HTMLElement) {
            containerToTop = scrollContainer.current.getBoundingClientRect().top;
          }
          var calcTop = wrapToTop - containerToTop;
          var containerHeight = scrollContainer.current[scrollContainer.current instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
          var calcBottom = containerToTop + containerHeight - (offsetBottom !== null && offsetBottom !== void 0 ? offsetBottom : 0);
          var fixedTop;
          if (calcTop <= offsetTop) {
            fixedTop = containerToTop + offsetTop;
          } else if (wrapToTop >= calcBottom) {
            fixedTop = calcBottom;
          } else {
            fixedTop = false;
          }
          if (affixRef.current) {
            var affixed = fixedTop !== false;
            var placeholderStatus = affixWrapRef.current.contains(placeholderEL.current);
            var prePlaceholderStatus = placeholderStatus;
            if (affixed) {
              affixRef.current.className = "".concat(classPrefix, "-affix");
              affixRef.current.style.top = "".concat(fixedTop, "px");
              affixRef.current.style.width = "".concat(wrapWidth, "px");
              affixRef.current.style.height = "".concat(wrapHeight, "px");
              if (zIndex) {
                affixRef.current.style.zIndex = "".concat(zIndex);
              }
              if (!placeholderStatus) {
                placeholderEL.current.style.width = "".concat(wrapWidth, "px");
                placeholderEL.current.style.height = "".concat(wrapHeight, "px");
                affixWrapRef.current.appendChild(placeholderEL.current);
                placeholderStatus = true;
              }
            } else {
              affixRef.current.removeAttribute("class");
              affixRef.current.removeAttribute("style");
              if (placeholderStatus) {
                placeholderEL.current.remove();
                placeholderStatus = false;
              }
            }
            if (prePlaceholderStatus !== placeholderStatus && isFunction$1(onFixedChange)) {
              onFixedChange(affixed, {
                top: +fixedTop
              });
            }
          }
          ticking.current = false;
        });
      }
      ticking.current = true;
    }, [classPrefix, offsetBottom, offsetTop, onFixedChange, zIndex]);
    React.useImperativeHandle(ref, function () {
      return {
        handleScroll: handleScroll
      };
    });
    React.useEffect(function () {
      placeholderEL.current = document.createElement("div");
    }, []);
    React.useEffect(function () {
      scrollContainer.current = getScrollContainer(container);
      if (scrollContainer.current) {
        handleScroll();
        scrollContainer.current.addEventListener("scroll", handleScroll);
        window.addEventListener("resize", handleScroll);
        return function () {
          scrollContainer.current.removeEventListener("scroll", handleScroll);
          window.removeEventListener("resize", handleScroll);
        };
      }
    }, [container, handleScroll]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixWrapRef,
      className: className,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixRef
    }, children || content));
  });
  Affix$1.displayName = "Affix";

  var Affix = Affix$1;

  function useElementLazyRender(labelRef, lazyLoad) {
    var ioObserver = React.useRef(null);
    var _useState = React.useState(!lazyLoad),
      _useState2 = _slicedToArray$1(_useState, 2),
      showElement = _useState2[0],
      setShowElement = _useState2[1];
    var handleLazyLoad = function handleLazyLoad() {
      if (!lazyLoad || !labelRef.current || ioObserver.current) return;
      setShowElement(false);
      var io = observe(labelRef.current, null, function () {
        setShowElement(true);
      }, 10);
      ioObserver.current = io;
      return function () {
        var _ioObserver$current;
        if (!lazyLoad || !labelRef.current) return;
        (_ioObserver$current = ioObserver.current) === null || _ioObserver$current === void 0 || _ioObserver$current.unobserve(labelRef.current);
        ioObserver.current = null;
      };
    };
    React.useEffect(handleLazyLoad, [lazyLoad, labelRef]);
    return {
      showElement: showElement
    };
  }

  var requestAnimationFrame$1 = (typeof window === "undefined" ? false : window.requestAnimationFrame) || function (cb) {
    return setTimeout(cb, 16.6);
  };
  var useVirtualScroll = function useVirtualScroll(container, params) {
    var data = params.data,
      scroll = params.scroll;
    var dataRef = React.useRef(data);
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      visibleData = _useState2[0],
      setVisibleData = _useState2[1];
    var _useState3 = React.useState(function () {
        return ((data === null || data === void 0 ? void 0 : data.length) || 0) * ((scroll === null || scroll === void 0 ? void 0 : scroll.rowHeight) || 50);
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      translateY = _useState4[0],
      setTranslateY = _useState4[1];
    var _useState5 = React.useState(0),
      _useState6 = _slicedToArray$1(_useState5, 2),
      scrollHeight = _useState6[0],
      setScrollHeight = _useState6[1];
    var trScrollTopHeightList = React.useRef([]);
    var _useState7 = React.useState([]),
      _useState8 = _slicedToArray$1(_useState7, 2),
      trHeightList = _useState8[0],
      setTrHeightList = _useState8[1];
    var containerHeight = React.useRef(0);
    var _useState9 = React.useState(function () {
        return [0, ((scroll === null || scroll === void 0 ? void 0 : scroll.bufferSize) || 10) * 3];
      }),
      _useState0 = _slicedToArray$1(_useState9, 2),
      startAndEndIndex = _useState0[0],
      setStartAndEndIndex = _useState0[1];
    var tScroll = React.useMemo(function () {
      var _scroll$isFixedRowHei, _scroll$fixedRows;
      if (!scroll) return {};
      return {
        bufferSize: scroll.bufferSize || 10,
        isFixedRowHeight: (_scroll$isFixedRowHei = scroll.isFixedRowHeight) !== null && _scroll$isFixedRowHei !== void 0 ? _scroll$isFixedRowHei : false,
        rowHeight: scroll.rowHeight || 47,
        threshold: scroll.threshold || 100,
        type: scroll.type,
        fixedRows: (_scroll$fixedRows = scroll.fixedRows) !== null && _scroll$fixedRows !== void 0 ? _scroll$fixedRows : [0, 0]
      };
    }, [scroll]);
    var isVirtualScroll = React.useMemo(function () {
      return tScroll.type === "virtual" && tScroll.threshold < data.length;
    }, [tScroll, data]);
    var getTrScrollTopHeightList = function getTrScrollTopHeightList(trHeightList2) {
      var list = [];
      for (var i = 0, len = data.length; i < len; i++) {
        list[i] = (list[i - 1] || 0) + (trHeightList2[i] || tScroll.rowHeight);
      }
      return list;
    };
    var updateVisibleData = function updateVisibleData(trScrollTopHeightList2, scrollTop) {
      var currentIndex = -1;
      for (var i = 0, len = trScrollTopHeightList2.length; i < len; i++) {
        if (trScrollTopHeightList2[i] >= scrollTop) {
          currentIndex = i;
          break;
        }
      }
      var lastIndex = trScrollTopHeightList2.length;
      var containerCurrentHeight = containerHeight.current || container.current.getBoundingClientRect().height;
      var scrollBottom = scrollTop + containerCurrentHeight;
      for (var _i = currentIndex, _len = trScrollTopHeightList2.length; _i < _len; _i++) {
        if (trScrollTopHeightList2[_i] >= scrollBottom) {
          lastIndex = _i;
          break;
        }
      }
      if (currentIndex < 0) return;
      var startIndex = Math.max(currentIndex - tScroll.bufferSize, 0);
      var endIndex = Math.min(lastIndex + tScroll.bufferSize, trScrollTopHeightList2.length);
      var fixedRows = tScroll.fixedRows;
      var _fixedRows = _slicedToArray$1(fixedRows, 2),
        fixedStart = _fixedRows[0],
        fixedEnd = _fixedRows[1];
      var fixedStartData = fixedStart ? data.slice(0, fixedStart) : [];
      if (fixedStart && startIndex < fixedStart) {
        fixedStartData = fixedStartData.slice(0, startIndex);
      }
      var fixedEndData = fixedEnd ? data.slice(data.length - fixedEnd) : [];
      var bottomStartIndex = endIndex - data.length + 1 + (fixedEnd !== null && fixedEnd !== void 0 ? fixedEnd : 0);
      if (fixedEnd && bottomStartIndex > 0) {
        fixedEndData = fixedEndData.slice(bottomStartIndex);
      }
      if (startAndEndIndex.join() !== [startIndex, endIndex].join() && startIndex >= 0) {
        var tmpVisibleData = fixedStartData.concat(data.slice(startIndex, endIndex)).concat(fixedEndData);
        setVisibleData(tmpVisibleData);
        var lastScrollTop = trScrollTopHeightList2[startIndex - 1];
        var top = lastScrollTop > 0 ? lastScrollTop : 0;
        var stickyHeight = trScrollTopHeightList2[Math.min(startIndex, fixedStart) - 1] || 0;
        setTranslateY(top - stickyHeight);
        setStartAndEndIndex([startIndex, endIndex]);
      }
    };
    var handleRowMounted = function handleRowMounted(rowData) {
      if (!isVirtualScroll || !rowData || tScroll.isFixedRowHeight || !(container !== null && container !== void 0 && container.current)) return;
      var trHeight = rowData.ref.offsetHeight;
      var rowIndex = rowData.data.__VIRTUAL_SCROLL_INDEX;
      var newTrHeightList = trHeightList;
      if (newTrHeightList[rowIndex] !== trHeight) {
        newTrHeightList[rowIndex] = trHeight;
        setTrHeightList(newTrHeightList);
        var scrollTopHeightList = getTrScrollTopHeightList(newTrHeightList);
        trScrollTopHeightList.current = scrollTopHeightList;
        var lastIndex = scrollTopHeightList.length - 1;
        setScrollHeight(scrollTopHeightList[lastIndex] - containerHeight.current);
        updateVisibleData(scrollTopHeightList, container.current.scrollTop);
      }
    };
    var handleScroll = function handleScroll() {
      if (!isVirtualScroll) return;
      updateVisibleData(trScrollTopHeightList.current, container.current.scrollTop);
    };
    var addIndexToData = function addIndexToData(data2) {
      data2.forEach(function (item, index) {
        Reflect.set(item, "__VIRTUAL_SCROLL_INDEX", index);
      });
    };
    var updateScrollTop = function updateScrollTop(_ref) {
      var _container$current;
      var index = _ref.index,
        _ref$top = _ref.top,
        top = _ref$top === void 0 ? 0 : _ref$top,
        behavior = _ref.behavior;
      var scrollTop = trScrollTopHeightList.current[index] - top;
      (_container$current = container.current) === null || _container$current === void 0 || _container$current.scrollTo({
        top: scrollTop,
        behavior: behavior || "auto"
      });
    };
    var scrollToElement = function scrollToElement(p) {
      updateScrollTop(p);
      if (!tScroll.isFixedRowHeight) {
        requestAnimationFrame$1(function () {
          var _p$time;
          var duration = (_p$time = p.time) !== null && _p$time !== void 0 ? _p$time : 60;
          var timer = setTimeout(function () {
            updateScrollTop(p);
            clearTimeout(timer);
          }, duration);
        });
      }
    };
    React.useEffect(function () {
      if (!isVirtualScroll) {
        trScrollTopHeightList.current = getTrScrollTopHeightList(trHeightList);
        return;
      }
      addIndexToData(data);
      var scrollTopHeightList = trScrollTopHeightList.current;
      var dataChanged = !isEqual(dataRef.current, data);
      if ((scrollTopHeightList === null || scrollTopHeightList === void 0 ? void 0 : scrollTopHeightList.length) === (data === null || data === void 0 ? void 0 : data.length) && !dataChanged) {
        var lastIndex = scrollTopHeightList.length - 1;
        setScrollHeight(scrollTopHeightList[lastIndex]);
        updateVisibleData(scrollTopHeightList, container.current.scrollTop);
      } else {
        var _container$current2;
        dataRef.current = data;
        setScrollHeight(data.length * tScroll.rowHeight);
        var currentScrollTop = ((_container$current2 = container.current) === null || _container$current2 === void 0 ? void 0 : _container$current2.scrollTop) || 0;
        var currentIndex = Math.floor(currentScrollTop / tScroll.rowHeight);
        var prevScrollTopHeightList = trScrollTopHeightList.current;
        for (var i = 0; i < (prevScrollTopHeightList === null || prevScrollTopHeightList === void 0 ? void 0 : prevScrollTopHeightList.length); i++) {
          if (prevScrollTopHeightList[i] >= currentScrollTop) {
            currentIndex = i;
            break;
          }
        }
        var startIndex = Math.max(currentIndex - tScroll.bufferSize, 0);
        var visibleCount = Math.min(tScroll.bufferSize * 3, data.length);
        var endIndex = Math.min(startIndex + visibleCount, data.length);
        var tmpData = data.slice(startIndex, endIndex);
        var translateY2 = startIndex * tScroll.rowHeight;
        if ((prevScrollTopHeightList === null || prevScrollTopHeightList === void 0 ? void 0 : prevScrollTopHeightList.length) > 0 && startIndex > 0) {
          var prevHeight = prevScrollTopHeightList[Math.min(startIndex - 1, prevScrollTopHeightList.length - 1)] || 0;
          translateY2 = Math.max(0, prevHeight);
        }
        setVisibleData(tmpData);
        setTranslateY(translateY2);
      }
      var timer = setTimeout(function () {
        if (container.current) {
          var tmpContainerHeight = container.current.getBoundingClientRect().height;
          containerHeight.current = tmpContainerHeight;
          var scrollTopHeightList2 = getTrScrollTopHeightList(trHeightList);
          trScrollTopHeightList.current = scrollTopHeightList2;
          clearTimeout(timer);
        }
      }, 1);
    }, [container, data, tScroll, isVirtualScroll, startAndEndIndex, trHeightList]);
    return {
      visibleData: visibleData,
      translateY: translateY,
      scrollHeight: scrollHeight,
      isVirtualScroll: isVirtualScroll,
      handleScroll: handleScroll,
      handleRowMounted: handleRowMounted,
      scrollToElement: scrollToElement
    };
  };

  function formatRowAttributes(attributes, params) {
    if (!attributes) return void 0;
    var attrList = attributes instanceof Array ? attributes : [attributes];
    var result = {};
    for (var i = 0; i < attrList.length; i++) {
      var attrItem = attrList[i];
      if (!attrItem) continue;
      var attrProperty = isFunction$1(attrItem) ? attrItem(params) : attrItem;
      result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
    }
    return result;
  }
  function formatRowClassNames(rowClassNames, params, rowKey) {
    var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
    var row = params.row,
      rowIndex = params.rowIndex;
    var customClasses = [];
    for (var i = 0, len = rowClassList.length; i < len; i++) {
      var rName = rowClassList[i];
      var tClass = isFunction$1(rName) ? rName(params) : rName;
      if (isObject(tClass) && !(tClass instanceof Array)) {
        tClass[rowIndex] && (tClass = tClass[rowIndex]);
        var rowId = get(row, rowKey || "id");
        tClass[rowId] && (tClass = tClass[rowId]);
      } else if (tClass instanceof Array) {
        tClass = formatRowClassNames(tClass, params, rowKey);
      }
      customClasses = customClasses.concat(tClass);
    }
    return customClasses;
  }
  function formatClassNames(classNames, params) {
    var classes = classNames instanceof Array ? classNames : [classNames];
    var arr = [];
    for (var i = 0, len = classes.length; i < len; i++) {
      var cls = classes[i];
      if (isFunction$1(cls)) {
        arr.push(cls(params));
      } else {
        arr.push(cls);
      }
    }
    return arr;
  }
  function getCurrentRowByKey(columns, key) {
    if (!columns || !key) return;
    var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
      return t.colKey === key;
    });
    if (col) return col;
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i;
      if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i = _columns$i.children) !== null && _columns$i !== void 0 && _columns$i.length) {
        var _columns$i2;
        return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
      }
    }
  }
  function getAffixProps(mainAffixProps, subAffixProps) {
    if (_typeof$3(mainAffixProps) === "object") return mainAffixProps;
    if (_typeof$3(subAffixProps) === "object") return subAffixProps;
    return {};
  }
  var isLessThanIE11OrNotHaveResizeObserver = function isLessThanIE11OrNotHaveResizeObserver() {
    return typeof window === "undefined" || getIEVersion() < 11 || typeof window.ResizeObserver === "undefined";
  };
  var resizeObserverElement = function resizeObserverElement(tableElement, callback) {
    if (isLessThanIE11OrNotHaveResizeObserver()) return;
    var resizeObserver = new window.ResizeObserver(function () {
      callback === null || callback === void 0 || callback();
    });
    resizeObserver.observe(tableElement);
    return function () {
      var _resizeObserver$unobs, _resizeObserver$disco;
      resizeObserver === null || resizeObserver === void 0 || (_resizeObserver$unobs = resizeObserver.unobserve) === null || _resizeObserver$unobs === void 0 || _resizeObserver$unobs.call(resizeObserver, tableElement);
      resizeObserver === null || resizeObserver === void 0 || (_resizeObserver$disco = resizeObserver.disconnect) === null || _resizeObserver$disco === void 0 || _resizeObserver$disco.call(resizeObserver);
    };
  };

  function getScrollbarWidthWithCSS() {
    var defaultScrollbarWidth = 6;
    if (typeof navigator === "undefined" || !navigator) return defaultScrollbarWidth;
    if (/(Chrome|Safari)/i.test(navigator.userAgent)) return defaultScrollbarWidth;
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    if (/Firefox/.test(navigator.userAgent)) {
      scrollbarWidth -= 4;
    }
    if (getIEVersion() <= 11) {
      scrollbarWidth = 12;
    }
    return scrollbarWidth;
  }
  function getScrollbarWidth() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
    if (container === document.body) {
      return window.innerWidth - document.documentElement.clientWidth;
    }
    return container.offsetWidth - container.clientWidth;
  }

  var useDebounce = function useDebounce(func, delay, options) {
    var callback = usePersistFn(func);
    var debounced = React.useCallback(debounce$1(callback, delay, options), [callback, delay, options]);
    React.useEffect(function () {
      return debounced.cancel;
    }, [debounced]);
    return debounced;
  };

  function usePrevious(state) {
    var ref = React.useRef(null);
    React.useEffect(function () {
      ref.current = state;
    }, [state]);
    return ref.current;
  }

  function ownKeys$2t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2t(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getColumnFixedStyles(col, index, rowAndColFixedPosition, tableColFixedClasses) {
    var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index);
    if (!fixedPos) return {};
    var thClasses = _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableColFixedClasses.left, col.fixed === "left"), tableColFixedClasses.right, col.fixed === "right"), tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol);
    var thStyles = {
      left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
      right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
    };
    return {
      style: thStyles,
      classes: thClasses
    };
  }
  function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
    var virtualTranslateY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
    if (!fixedRows || !fixedRows.length) return {
      style: void 0,
      classes: void 0
    };
    var fixedTop = rowIndex < fixedRows[0];
    var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
    var firstFixedBottomRow = rowLength - fixedRows[1];
    var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
    var rowClasses = _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableRowFixedClasses.top, fixedTop), tableRowFixedClasses.bottom, fixedBottom), tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1);
    var rowStyles = {
      top: fixedTop ? "".concat(fixedPos.top - virtualTranslateY, "px") : void 0,
      bottom: fixedBottom ? "".concat(fixedPos.bottom + virtualTranslateY, "px") : void 0
    };
    return {
      style: rowStyles,
      classes: rowClasses
    };
  }
  function useFixed(props, finalColumns, affixRef) {
    var _props$scroll2;
    var columns = props.columns,
      tableLayout = props.tableLayout,
      tableContentWidth = props.tableContentWidth,
      fixedRows = props.fixedRows,
      firstFullRow = props.firstFullRow,
      lastFullRow = props.lastFullRow,
      maxHeight = props.maxHeight,
      headerAffixedTop = props.headerAffixedTop,
      bordered = props.bordered;
    var preFinalColumns = usePrevious(finalColumns);
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];
    var tableContentRef = React.useRef(null);
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isFixedHeader = _useState4[0],
      setIsFixedHeader = _useState4[1];
    var _useState5 = React.useState(false),
      _useState6 = _slicedToArray$1(_useState5, 2),
      isWidthOverflow = _useState6[0],
      setIsWidthOverflow = _useState6[1];
    var tableElmRef = React.useRef(null);
    var _useState7 = React.useState(6),
      _useState8 = _slicedToArray$1(_useState7, 2),
      scrollbarWidth = _useState8[0],
      setScrollbarWidth = _useState8[1];
    var _useState9 = React.useState(function () {
        return /* @__PURE__ */new Map();
      }),
      _useState0 = _slicedToArray$1(_useState9, 2),
      rowAndColFixedPosition = _useState0[0],
      setRowAndColFixedPosition = _useState0[1];
    var _useState1 = React.useState({
        left: false,
        right: false
      }),
      _useState10 = _slicedToArray$1(_useState1, 2),
      showColumnShadow = _useState10[0],
      setShowColumnShadow = _useState10[1];
    var _useState11 = React.useState({
        left: 0,
        top: 0
      }),
      _useState12 = _slicedToArray$1(_useState11, 2),
      virtualScrollHeaderPos = _useState12[0],
      setVirtualScrollHeaderPos = _useState12[1];
    var tableWidth = React.useRef(0);
    var tableElmWidth = React.useRef(0);
    var thWidthList = React.useRef({});
    var _useState13 = React.useState(false),
      _useState14 = _slicedToArray$1(_useState13, 2),
      isFixedColumn = _useState14[0],
      setIsFixedColumn = _useState14[1];
    var _useState15 = React.useState(false),
      _useState16 = _slicedToArray$1(_useState15, 2),
      isFixedRightColumn = _useState16[0],
      setIsFixedRightColumn = _useState16[1];
    var _useState17 = React.useState(false),
      _useState18 = _slicedToArray$1(_useState17, 2),
      isFixedLeftColumn = _useState18[0],
      setIsFixedLeftColumn = _useState18[1];
    var columnResizable = props.resizable;
    var notNeedThWidthList = React.useMemo(function () {
      var _props$scroll;
      return !(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom || ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
    }, [props.footerAffixedBottom, props.headerAffixedTop, props.horizontalScrollAffixedBottom, (_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.type]);
    function setUseFixedTableElmRef(val) {
      tableElmRef.current = val;
    }
    function getColumnMap(columns2) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Map();
      var levelNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var parent = arguments.length > 4 ? arguments[4] : undefined;
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children;
        var col = columns2[i];
        if (["left", "right"].includes(col.fixed)) {
          setIsFixedColumn(true);
        }
        if (col.fixed === "right") {
          setIsFixedRightColumn(true);
        }
        if (col.fixed === "left") {
          setIsFixedLeftColumn(true);
        }
        var key = col.colKey || i;
        var columnInfo = {
          col: col,
          parent: parent,
          index: i
        };
        map.set(key, columnInfo);
        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
        }
        if (levelNodes[level]) {
          levelNodes[level].push(columnInfo);
        } else {
          levelNodes[level] = [columnInfo];
        }
      }
      return {
        newColumnsMap: map,
        levelNodes: levelNodes
      };
    }
    var _setFixedLeftPos = function setFixedLeftPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children2;
        var col = columns2[i];
        if (col.fixed === "right") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i - 1;
        while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
          lastColIndex -= 1;
        }
        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === 0 ? (parent === null || parent === void 0 ? void 0 : parent.left) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
        colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
        if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          _setFixedLeftPos(col.children, initialColumnMap, colInfo);
        }
      }
    };
    var _setFixedRightPos = function setFixedRightPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      for (var i = columns2.length - 1; i >= 0; i--) {
        var _col$children3;
        var col = columns2[i];
        if (col.fixed === "left") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i + 1;
        while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
          lastColIndex += 1;
        }
        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === columns2.length - 1 ? (parent === null || parent === void 0 ? void 0 : parent.right) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
        colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
        if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
          _setFixedRightPos(col.children, initialColumnMap, colInfo);
        }
      }
    };
    var setFixedColPosition = function setFixedColPosition(trList, initialColumnMap) {
      if (!trList) return;
      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;
        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var _obj$col;
          var th = thList[j];
          var colKey = th.dataset.colkey;
          if (!colKey) {
            log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
          }
          var obj = initialColumnMap.get(colKey || j);
          if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
            var _th$getBoundingClient;
            initialColumnMap.set(colKey, _objectSpread$2s(_objectSpread$2s({}, obj), {}, {
              width: th === null || th === void 0 || (_th$getBoundingClient = th.getBoundingClientRect) === null || _th$getBoundingClient === void 0 ? void 0 : _th$getBoundingClient.call(th).width
            }));
          }
        }
      }
      _setFixedLeftPos(columns, initialColumnMap);
      _setFixedRightPos(columns, initialColumnMap);
    };
    var setFixedRowPosition = function setFixedRowPosition(trList, initialColumnMap, thead, tfoot) {
      var _ref = fixedRows || [],
        _ref2 = _slicedToArray$1(_ref, 2),
        fixedTopRows = _ref2[0],
        fixedBottomRows = _ref2[1];
      var data2 = props.data,
        _props$rowKey = props.rowKey,
        rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;
      for (var i = 0; i < fixedTopRows; i++) {
        var _tr$getBoundingClient;
        var tr = trList[i];
        var rowId = get(data2[i], rowKey);
        var thisRowInfo = initialColumnMap.get(rowId) || {};
        var lastRowId = get(data2[i - 1], rowKey);
        var lastRowInfo = initialColumnMap.get(lastRowId) || {};
        var defaultBottom = 0;
        if (i === 0) {
          var _thead$getBoundingCli;
          defaultBottom = (thead === null || thead === void 0 || (_thead$getBoundingCli = thead.getBoundingClientRect) === null || _thead$getBoundingCli === void 0 ? void 0 : _thead$getBoundingCli.call(thead).height) || 0;
        }
        thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
        initialColumnMap.set(rowId, _objectSpread$2s(_objectSpread$2s({}, thisRowInfo), {}, {
          height: tr === null || tr === void 0 || (_tr$getBoundingClient = tr.getBoundingClientRect) === null || _tr$getBoundingClient === void 0 ? void 0 : _tr$getBoundingClient.call(tr).height
        }));
      }
      for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
        var _tr$getBoundingClient2;
        var _tr = trList[_i];
        var _rowId = get(data2[_i], rowKey);
        var _thisRowInfo = initialColumnMap.get(_rowId) || {};
        var _lastRowId = get(data2[_i + 1], rowKey);
        var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};
        var _defaultBottom = 0;
        if (_i === data2.length - 1) {
          var _tfoot$getBoundingCli;
          _defaultBottom = (tfoot === null || tfoot === void 0 || (_tfoot$getBoundingCli = tfoot.getBoundingClientRect) === null || _tfoot$getBoundingCli === void 0 ? void 0 : _tfoot$getBoundingCli.call(tfoot).height) || 0;
        }
        _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
        initialColumnMap.set(_rowId, _objectSpread$2s(_objectSpread$2s({}, _thisRowInfo), {}, {
          height: _tr === null || _tr === void 0 || (_tr$getBoundingClient2 = _tr.getBoundingClientRect) === null || _tr$getBoundingClient2 === void 0 ? void 0 : _tr$getBoundingClient2.call(_tr).height
        }));
      }
    };
    var updateRowAndColFixedPosition = function updateRowAndColFixedPosition(tableContentElm, initialColumnMap) {
      rowAndColFixedPosition.clear();
      if (!tableContentElm) return;
      var thead = tableContentElm.querySelector("thead");
      thead && setFixedColPosition(thead.children, initialColumnMap);
      var tbody = tableContentElm.querySelector("tbody");
      var tfoot = tableContentElm.querySelector("tfoot");
      tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
      setRowAndColFixedPosition(initialColumnMap);
    };
    var shadowLastScrollLeft;
    var updateColumnFixedShadow = function updateColumnFixedShadow(target, extra) {
      if (!isFixedColumn || !target) return;
      var scrollLeft = target.scrollLeft;
      if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;
      shadowLastScrollLeft = scrollLeft;
      var isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;
      var isShowLeft = scrollLeft > 0;
      if (showColumnShadow.left === isShowLeft && showColumnShadow.right === isShowRight) return;
      setShowColumnShadow({
        left: isShowLeft && isFixedLeftColumn,
        right: isShowRight && isFixedRightColumn
      });
    };
    var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol(levelNodes) {
      for (var t = 0; t < levelNodes.length; t++) {
        var nodes = levelNodes[t];
        for (var i = 0, len = nodes.length; i < len; i++) {
          var colMapInfo = nodes[i];
          var nextColMapInfo = nodes[i + 1];
          var parent = colMapInfo.parent;
          var isParentLastLeftFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.lastLeftFixedCol);
          if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
            colMapInfo.lastLeftFixedCol = true;
          }
          var lastColMapInfo = nodes[i - 1];
          var isParentFirstRightFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.firstRightFixedCol);
          if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
            colMapInfo.firstRightFixedCol = true;
          }
        }
      }
    };
    var updateFixedStatus = function updateFixedStatus() {
      var _getColumnMap = getColumnMap(columns),
        newColumnsMap = _getColumnMap.newColumnsMap,
        levelNodes = _getColumnMap.levelNodes;
      setIsLastOrFirstFixedCol(levelNodes);
      var timer = setTimeout(function () {
        if (isFixedColumn || fixedRows !== null && fixedRows !== void 0 && fixedRows.length) {
          updateRowAndColFixedPosition(tableContentRef.current, newColumnsMap);
        }
        clearTimeout(timer);
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    };
    var updateFixedHeader = React.useCallback(function () {
      var _tRef$getBoundingClie;
      var tRef = tableContentRef === null || tableContentRef === void 0 ? void 0 : tableContentRef.current;
      if (!tRef) return;
      var isHeightOverflow = tRef.scrollHeight > tRef.clientHeight;
      setIsFixedHeader(isHeightOverflow);
      setIsWidthOverflow(tRef.scrollWidth > tRef.clientWidth);
      var pos = tRef === null || tRef === void 0 || (_tRef$getBoundingClie = tRef.getBoundingClientRect) === null || _tRef$getBoundingClie === void 0 ? void 0 : _tRef$getBoundingClie.call(tRef);
      setVirtualScrollHeaderPos({
        top: pos === null || pos === void 0 ? void 0 : pos.top,
        left: pos === null || pos === void 0 ? void 0 : pos.left
      });
    }, []);
    var setTableElmWidth = function setTableElmWidth(width) {
      if (tableElmWidth.current === width) return;
      tableElmWidth.current = width;
    };
    var updateTableWidth = function updateTableWidth() {
      var _tableContentRef$curr, _tableContentRef$curr2, _tableElmRef$current;
      var rect = (_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 || (_tableContentRef$curr2 = _tableContentRef$curr.getBoundingClientRect) === null || _tableContentRef$curr2 === void 0 ? void 0 : _tableContentRef$curr2.call(_tableContentRef$curr);
      if (!rect) return;
      var reduceWidth = isFixedHeader ? scrollbarWidth : 0;
      tableWidth.current = rect.width - reduceWidth - (props.bordered ? 1 : 0);
      var elmRect = tableElmRef === null || tableElmRef === void 0 || (_tableElmRef$current = tableElmRef.current) === null || _tableElmRef$current === void 0 ? void 0 : _tableElmRef$current.getBoundingClientRect();
      if (elmRect !== null && elmRect !== void 0 && elmRect.width) {
        setTableElmWidth(elmRect === null || elmRect === void 0 ? void 0 : elmRect.width);
      }
    };
    var updateAffixPosition = function updateAffixPosition() {
      var _affixRef$paginationA, _affixRef$paginationA2, _affixRef$horizontalS, _affixRef$horizontalS2, _affixRef$headerTopAf, _affixRef$headerTopAf2, _affixRef$footerBotto, _affixRef$footerBotto2;
      (_affixRef$paginationA = affixRef.paginationAffixRef.current) === null || _affixRef$paginationA === void 0 || (_affixRef$paginationA2 = _affixRef$paginationA.handleScroll) === null || _affixRef$paginationA2 === void 0 || _affixRef$paginationA2.call(_affixRef$paginationA);
      (_affixRef$horizontalS = affixRef.horizontalScrollAffixRef.current) === null || _affixRef$horizontalS === void 0 || (_affixRef$horizontalS2 = _affixRef$horizontalS.handleScroll) === null || _affixRef$horizontalS2 === void 0 || _affixRef$horizontalS2.call(_affixRef$horizontalS);
      (_affixRef$headerTopAf = affixRef.headerTopAffixRef.current) === null || _affixRef$headerTopAf === void 0 || (_affixRef$headerTopAf2 = _affixRef$headerTopAf.handleScroll) === null || _affixRef$headerTopAf2 === void 0 || _affixRef$headerTopAf2.call(_affixRef$headerTopAf);
      (_affixRef$footerBotto = affixRef.footerBottomAffixRef.current) === null || _affixRef$footerBotto === void 0 || (_affixRef$footerBotto2 = _affixRef$footerBotto.handleScroll) === null || _affixRef$footerBotto2 === void 0 || _affixRef$footerBotto2.call(_affixRef$footerBotto);
    };
    var calculateThWidthList = function calculateThWidthList(trList) {
      var widthMap = {};
      for (var i = 0, len = trList === null || trList === void 0 ? void 0 : trList.length; i < len; i++) {
        var thList = trList[i].children;
        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var th = thList[j];
          var colKey = th.dataset.colkey;
          widthMap[colKey] = th.getBoundingClientRect().width;
        }
      }
      return widthMap;
    };
    var updateThWidthList = function updateThWidthList(trList) {
      if (trList instanceof HTMLCollection) {
        if (columnResizable) return;
        thWidthList.current = calculateThWidthList(trList);
      } else {
        thWidthList.current = thWidthList.current || {};
        Object.entries(trList).forEach(function (_ref3) {
          var _ref4 = _slicedToArray$1(_ref3, 2),
            colKey = _ref4[0],
            width = _ref4[1];
          thWidthList.current[colKey] = width;
        });
      }
      return thWidthList.current;
    };
    var updateThWidthListHandler = function updateThWidthListHandler() {
      var timer = setTimeout(function () {
        var _tableContentRef$curr3;
        updateTableWidth();
        if (notNeedThWidthList) return;
        var thead = (_tableContentRef$curr3 = tableContentRef.current) === null || _tableContentRef$curr3 === void 0 ? void 0 : _tableContentRef$curr3.querySelector("thead");
        if (!thead) return;
        updateThWidthList(thead.children);
        clearTimeout(timer);
      }, 0);
    };
    var emitScrollEvent = function emitScrollEvent(e) {
      var _props$onScrollX, _props$onScrollY, _props$onScroll;
      (_props$onScrollX = props.onScrollX) === null || _props$onScrollX === void 0 || _props$onScrollX.call(props, {
        e: e
      });
      (_props$onScrollY = props.onScrollY) === null || _props$onScrollY === void 0 || _props$onScrollY.call(props, {
        e: e
      });
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 || _props$onScroll.call(props, {
        e: e
      });
    };
    var getThWidthList = function getThWidthList(type) {
      if (type === "calculate") {
        var _tableContentRef$curr4;
        var trList = (_tableContentRef$curr4 = tableContentRef.current) === null || _tableContentRef$curr4 === void 0 || (_tableContentRef$curr4 = _tableContentRef$curr4.querySelector("thead")) === null || _tableContentRef$curr4 === void 0 ? void 0 : _tableContentRef$curr4.children;
        return calculateThWidthList(trList);
      }
      return thWidthList.current || {};
    };
    var updateTableElmWidthOnColumnChange = function updateTableElmWidthOnColumnChange() {
      var finalColumns2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var preFinalColumns2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var finalColKeys = finalColumns2.map(function (t) {
        return t.colKey;
      });
      var preColKeys = (preFinalColumns2 !== null && preFinalColumns2 !== void 0 ? preFinalColumns2 : []).map(function (t) {
        return t.colKey;
      });
      if (finalColKeys.length < preColKeys.length) {
        var reduceKeys = xorWith$1(preColKeys, finalColKeys);
        var thWidthList2 = getThWidthList("calculate");
        var reduceWidth = 0;
        reduceKeys.forEach(function (key) {
          reduceWidth += thWidthList2[key];
        });
        var rootThWidthList = pick$1(thWidthList2, preColKeys);
        if (!Object.values(rootThWidthList).length) return;
        var oldTotalWidth = Object.values(rootThWidthList).reduce(function () {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var n = arguments.length > 1 ? arguments[1] : undefined;
          return r + n;
        });
        var contentWidth = tableContentRef.current.clientWidth;
        var widthToReserve = oldTotalWidth - reduceWidth;
        setTableElmWidth(Math.max(contentWidth, widthToReserve));
      }
    };
    React.useEffect(updateFixedStatus, [data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow, tableContentRef]);
    React.useEffect(function () {
      var timer = setTimeout(function () {
        if (isFixedColumn) {
          updateColumnFixedShadow(tableContentRef.current);
        }
        clearTimeout(timer);
      }, 0);
    }, [isFixedColumn, columns, tableContentRef]);
    var updateFixedHeaderByUseDebounce = useDebounce(function () {
      updateFixedHeader();
    }, 30);
    React.useEffect(function () {
      if (tableContentRef.current) {
        return resizeObserverElement(tableContentRef.current, updateFixedHeaderByUseDebounce);
      }
    }, [updateFixedHeaderByUseDebounce]);
    React.useEffect(updateFixedHeaderByUseDebounce, [maxHeight, data, columns, bordered, tableContentRef]);
    React.useEffect(function () {
      updateTableElmWidthOnColumnChange(finalColumns, preFinalColumns);
    }, [finalColumns]);
    React.useEffect(function () {
      var timer = setTimeout(function () {
        updateThWidthListHandler();
        updateAffixPosition();
        clearTimeout(timer);
      }, 10);
    }, [bordered, columns, tableLayout, fixedRows, headerAffixedTop, tableContentWidth, notNeedThWidthList, tableContentRef]);
    var refreshTable = function refreshTable() {
      updateThWidthListHandler();
      updateFixedHeader();
      updateAffixPosition();
      if (isFixedColumn || isFixedHeader) {
        updateFixedStatus();
        updateColumnFixedShadow(tableContentRef.current, {
          skipScrollLimit: true
        });
      }
    };
    var onResize = useDebounce(function () {
      refreshTable();
    }, 30);
    function addTableResizeObserver(tableElement) {
      if (isLessThanIE11OrNotHaveResizeObserver()) return;
      off$1(window, "resize", onResize);
      if (!tableElmWidth.current) return;
      return resizeObserverElement(tableElement, function () {
        var timer = setTimeout(function () {
          refreshTable();
          clearTimeout(timer);
        }, 60);
      });
    }
    React.useEffect(function () {
      var scrollWidth = getScrollbarWidthWithCSS();
      setScrollbarWidth(scrollWidth);
      var isWatchResize = isFixedColumn || isFixedHeader || !notNeedThWidthList || !data.length;
      var hasWindow = typeof window !== "undefined";
      var hasResizeObserver = hasWindow && typeof window.ResizeObserver !== "undefined";
      updateTableWidth();
      updateThWidthListHandler();
      if (isWatchResize && getIEVersion() < 11 || !hasResizeObserver) {
        on$1(window, "resize", onResize);
      }
      return function () {
        if (isWatchResize && getIEVersion() < 11 || !hasResizeObserver) {
          if (typeof window !== "undefined") {
            off$1(window, "resize", onResize);
          }
        }
      };
    }, [isFixedColumn]);
    var updateTableAfterColumnResize = function updateTableAfterColumnResize() {
      updateFixedStatus();
      updateFixedHeader();
    };
    return {
      tableWidth: tableWidth,
      tableElmWidth: tableElmWidth,
      thWidthList: thWidthList,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      isFixedColumn: isFixedColumn,
      showColumnShadow: showColumnShadow,
      rowAndColFixedPosition: rowAndColFixedPosition,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      scrollbarWidth: scrollbarWidth,
      setData: setData,
      refreshTable: refreshTable,
      setTableElmWidth: setTableElmWidth,
      emitScrollEvent: emitScrollEvent,
      updateThWidthListHandler: updateThWidthListHandler,
      updateColumnFixedShadow: updateColumnFixedShadow,
      setUseFixedTableElmRef: setUseFixedTableElmRef,
      getThWidthList: getThWidthList,
      updateThWidthList: updateThWidthList,
      addTableResizeObserver: addTableResizeObserver,
      updateTableAfterColumnResize: updateTableAfterColumnResize
    };
  }

  function useClassName() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var classNames = React.useMemo(function () {
      return {
        classPrefix: classPrefix,
        tableBaseClass: {
          table: "".concat(classPrefix, "-table"),
          columnResizableTable: "".concat(classPrefix, "-table--column-resizable"),
          body: "".concat(classPrefix, "-table__body"),
          overflowVisible: "".concat(classPrefix, "-table--overflow-visible"),
          content: "".concat(classPrefix, "-table__content"),
          topContent: "".concat(classPrefix, "-table__top-content"),
          bottomContent: "".concat(classPrefix, "-table__bottom-content"),
          paginationWrap: "".concat(classPrefix, "-table__pagination-wrap"),
          tdLastRow: "".concat(classPrefix, "-table__td-last-row"),
          tdFirstCol: "".concat(classPrefix, "-table__td-first-col"),
          thCellInner: "".concat(classPrefix, "-table__th-cell-inner"),
          tableRowEdit: "".concat(classPrefix, "-table--row-edit"),
          cellEditable: "".concat(classPrefix, "-table__cell--editable"),
          cellEditWrap: "".concat(classPrefix, "-table__cell-wrap"),
          bordered: "".concat(classPrefix, "-table--bordered"),
          striped: "".concat(classPrefix, "-table--striped"),
          hover: "".concat(classPrefix, "-table--hoverable"),
          loading: "".concat(classPrefix, "-table--loading"),
          rowspanAndColspan: "".concat(classPrefix, "-table--rowspan-colspan"),
          empty: "".concat(classPrefix, "-table__empty"),
          emptyRow: "".concat(classPrefix, "-table__empty-row"),
          headerFixed: "".concat(classPrefix, "-table--header-fixed"),
          columnFixed: "".concat(classPrefix, "-table--column-fixed"),
          widthOverflow: "".concat(classPrefix, "-table--width-overflow"),
          multipleHeader: "".concat(classPrefix, "-table--multiple-header"),
          footerAffixed: "".concat(classPrefix, "-table--footer-affixed"),
          horizontalBarAffixed: "".concat(classPrefix, "-table--horizontal-bar-affixed"),
          affixedHeader: "".concat(classPrefix, "-table--affixed-header"),
          affixedHeaderElm: "".concat(classPrefix, "-table__affixed-header-elm"),
          affixedFooterElm: "".concat(classPrefix, "-table__affixed-footer-elm"),
          affixedFooterWrap: "".concat(classPrefix, "-table__affixed-footer-wrap"),
          scrollbarDivider: "".concat(classPrefix, "-table__scroll-bar-divider"),
          fullHeight: "".concat(classPrefix, "-table--full-height"),
          resizeLine: "".concat(classPrefix, "-table__resize-line"),
          obviousScrollbar: "".concat(classPrefix, "-table__scrollbar--obvious"),
          affixedHeaderWrap: "".concat(classPrefix, "-table__affixed-header-elm-wrap")
        },
        tdAlignClasses: {
          left: "".concat(classPrefix, "-align-left"),
          right: "".concat(classPrefix, "-align-right"),
          center: "".concat(classPrefix, "-align-center")
        },
        tableHeaderClasses: {
          header: "".concat(classPrefix, "-table__header"),
          thBordered: "".concat(classPrefix, "-table__header-th--bordered"),
          fixed: "".concat(classPrefix, "-table__header--fixed"),
          multipleHeader: "".concat(classPrefix, "-table__header--multiple")
        },
        tableFooterClasses: {
          footer: "".concat(classPrefix, "-table__footer"),
          fixed: "".concat(classPrefix, "-table__footer--fixed")
        },
        tableAlignClasses: {
          top: "".concat(classPrefix, "-vertical-align-top"),
          middle: "".concat(classPrefix, "-vertical-align-middle"),
          bottom: "".concat(classPrefix, "-vertical-align-bottom")
        },
        tableRowFixedClasses: {
          top: "".concat(classPrefix, "-table__row--fixed-top"),
          bottom: "".concat(classPrefix, "-table__row--fixed-bottom"),
          firstBottom: "".concat(classPrefix, "-table__row--fixed-bottom-first"),
          withoutBorderBottom: "".concat(classPrefix, "-table__row--without-border-bottom")
        },
        tableColFixedClasses: {
          left: "".concat(classPrefix, "-table__cell--fixed-left"),
          right: "".concat(classPrefix, "-table__cell--fixed-right"),
          lastLeft: "".concat(classPrefix, "-table__cell--fixed-left-last"),
          firstRight: "".concat(classPrefix, "-table__cell--fixed-right-first"),
          leftShadow: "".concat(classPrefix, "-table__content--scrollable-to-left"),
          rightShadow: "".concat(classPrefix, "-table__content--scrollable-to-right")
        },
        tableLayoutClasses: {
          auto: "".concat(classPrefix, "-table--layout-auto"),
          fixed: "".concat(classPrefix, "-table--layout-fixed")
        },
        tdEllipsisClass: "".concat(classPrefix, "-table-td--ellipsis"),
        tableFullRowClasses: {
          base: "".concat(classPrefix, "-table__row--full"),
          innerFullRow: "".concat(classPrefix, "-table__row-full-inner"),
          innerFullElement: "".concat(classPrefix, "-table__row-full-element"),
          firstFullRow: "".concat(classPrefix, "-table__first-full-row"),
          lastFullRow: "".concat(classPrefix, "-table__last-full-row")
        },
        tableExpandClasses: {
          iconBox: "".concat(classPrefix, "-table__expand-box"),
          iconCell: "".concat(classPrefix, "-table__expandable-icon-cell"),
          rowExpanded: "".concat(classPrefix, "-table__row--expanded"),
          rowFolded: "".concat(classPrefix, "-table__row--folded"),
          row: "".concat(classPrefix, "-table__expanded-row"),
          rowInner: "".concat(classPrefix, "-table__expanded-row-inner"),
          expanded: "".concat(classPrefix, "-table__row--expanded"),
          collapsed: "".concat(classPrefix, "-table__row--collapsed")
        },
        tableSortClasses: {
          sortable: "".concat(classPrefix, "-table__cell--sortable"),
          sortColumn: "".concat(classPrefix, "-table__sort-column"),
          title: "".concat(classPrefix, "-table__cell--title"),
          trigger: "".concat(classPrefix, "-table__cell--sort-trigger"),
          doubleIcon: "".concat(classPrefix, "-table__double-icons"),
          sortIcon: "".concat(classPrefix, "-table__sort-icon"),
          iconDirection: {
            asc: "".concat(classPrefix, "-table-sort-asc"),
            desc: "".concat(classPrefix, "-table-sort-desc")
          },
          iconActive: "".concat(classPrefix, "-table__sort-icon--active"),
          iconDefault: "".concat(classPrefix, "-icon-sort--default")
        },
        tableSelectedClasses: {
          selected: "".concat(classPrefix, "-table__row--selected"),
          disabled: "".concat(classPrefix, "-table__row--disabled"),
          checkCell: "".concat(classPrefix, "-table__cell-check")
        },
        tableFilterClasses: {
          filterable: "".concat(classPrefix, "-table__cell--filterable"),
          popup: "".concat(classPrefix, "-table__filter-pop"),
          icon: "".concat(classPrefix, "-table__filter-icon"),
          popupContent: "".concat(classPrefix, "-table__filter-pop-content"),
          result: "".concat(classPrefix, "-table__filter-result"),
          inner: "".concat(classPrefix, "-table__row-filter-inner"),
          bottomButtons: "".concat(classPrefix, "-table__filter--bottom-buttons"),
          contentInner: "".concat(classPrefix, "-table__filter-pop-content-inner"),
          iconWrap: "".concat(classPrefix, "-table__filter-icon-wrap")
        },
        asyncLoadingClass: "".concat(classPrefix, "-table__async-loading"),
        isFocusClass: "".concat(classPrefix, "-is-focus"),
        isLoadingClass: "".concat(classPrefix, "-is-loading"),
        isLoadMoreClass: "".concat(classPrefix, "-is-load-more"),
        tableTreeClasses: {
          col: "".concat(classPrefix, "-table__tree-col"),
          inlineCol: "".concat(classPrefix, "-table__tree-col--inline"),
          icon: "".concat(classPrefix, "-table__tree-op-icon"),
          leafNode: "".concat(classPrefix, "-table__tree-leaf-node")
        },
        tableDraggableClasses: {
          rowDraggable: "".concat(classPrefix, "-table--row-draggable"),
          rowHandlerDraggable: "".concat(classPrefix, "-table--row-handler-draggable"),
          colDraggable: "".concat(classPrefix, "-table--col-draggable"),
          handle: "".concat(classPrefix, "-table__handle-draggable"),
          ghost: "".concat(classPrefix, "-table__ele--draggable-ghost"),
          chosen: "".concat(classPrefix, "-table__ele--draggable-chosen"),
          dragging: "".concat(classPrefix, "-table__ele--draggable-dragging"),
          dragSortTh: "".concat(classPrefix, "-table__th--drag-sort")
        },
        virtualScrollClasses: {
          cursor: "".concat(classPrefix, "-table__virtual-scroll-cursor"),
          header: "".concat(classPrefix, "-table__virtual-scroll-header")
        },
        positiveRotate90: "".concat(classPrefix, "-positive-rotate-90"),
        negativeRotate180: "".concat(classPrefix, "-negative-rotate-180")
      };
    }, [classPrefix]);
    return classNames;
  }

  function useLazyLoad(containerRef, childRef, params) {
    var tRowHeight = React.useMemo(function () {
      return Math.max(params.rowHeight || 48, 48);
    }, [params.rowHeight]);
    var _useState = React.useState(function () {
        return params.rowIndex === -1;
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      isInit = _useState2[0],
      setIsInit = _useState2[1];
    var hasLazyLoadHolder = React.useMemo(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit;
    }, [isInit, params === null || params === void 0 ? void 0 : params.type]);
    var requestAnimationFrame = (typeof window === "undefined" ? false : window.requestAnimationFrame) || function (cb) {
      return setTimeout(cb, 16.6);
    };
    var init = function init() {
      if (!isInit) {
        requestAnimationFrame(function () {
          setIsInit(true);
        });
      }
    };
    React.useEffect(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      var timer = setTimeout(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight * bufferSize;
        childRef && observe(childRef.current, containerRef, init, height);
        clearTimeout(timer);
      });
      return function () {
        clearTimeout(timer);
      };
    }, [childRef, containerRef, params.bufferSize, params === null || params === void 0 ? void 0 : params.type, tRowHeight]);
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function getCellKey(row, rowKey, colKey, colIndex) {
    var rowValue = get(row, rowKey);
    if (rowValue === void 0) {
      log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
    }
    return [rowValue, colKey || colIndex].join("_");
  }
  function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
    var _useState = React.useState(function () {
        return /* @__PURE__ */new Map();
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      skipSpansMap = _useState2[0],
      setKipSnapsMap = _useState2[1];
    var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue, map) {
      var rowIndex = params.rowIndex,
        colIndex = params.colIndex;
      if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
      var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
      var maxColIndex = colIndex + (skipSpansValue.colspan || 1);
      for (var i = rowIndex; i < maxRowIndex; i++) {
        for (var j = colIndex; j < maxColIndex; j++) {
          if (i !== rowIndex || j !== colIndex) {
            if (!data[i] || !columns[j]) return;
            var cellKey = getCellKey(data[i], rowKey, columns[j].colKey, j);
            var state = map.get(cellKey) || {};
            state.skipped = true;
            map.set(cellKey, state);
          }
        }
      }
    };
    var getSkipSpansMap = function getSkipSpansMap(data2, columns2, rowspanAndColspan2) {
      if (!data2 || !rowspanAndColspan2) return;
      var map = /* @__PURE__ */new Map();
      for (var i = 0, len = data2.length; i < len; i++) {
        var row = data2[i];
        for (var j = 0, colLen = columns2.length; j < colLen; j++) {
          var col = columns2[j];
          var params = {
            row: row,
            col: col,
            rowIndex: i,
            colIndex: j
          };
          var cellKey = getCellKey(row, rowKey, col.colKey, j);
          var state = map.get(cellKey) || {};
          var o = rowspanAndColspan2(params) || {};
          if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
            o.rowspan && (state.rowspan = o.rowspan);
            o.colspan && (state.colspan = o.colspan);
            map.set(cellKey, state);
          }
          onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 || onTrRowspanOrColspan(params, state, map);
        }
      }
      return map;
    };
    React.useEffect(function () {
      if (!rowspanAndColspan) return;
      skipSpansMap.clear();
      var result = getSkipSpansMap(data, columns, rowspanAndColspan);
      setKipSnapsMap(result);
    }, [data, columns, rowspanAndColspan]);
    return {
      skipSpansMap: skipSpansMap,
      getSkipSpansMap: getSkipSpansMap
    };
  }

  var tooltipDefaultProps = {
    destroyOnClose: true,
    placement: "top",
    showArrow: true,
    theme: "default",
    duration: 0
  };
  var tooltipLiteDefaultProps = {
    placement: "top",
    showArrow: true,
    showShadow: true,
    theme: "default"
  };

  var _excluded$F = ["theme", "showArrow", "destroyOnClose", "overlayClassName", "children", "duration", "placement", "onVisibleChange"];
  function ownKeys$2s(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2s(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2s(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Tooltip$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, tooltipDefaultProps);
    var theme = props.theme,
      showArrow = props.showArrow,
      destroyOnClose = props.destroyOnClose,
      overlayClassName = props.overlayClassName,
      children = props.children,
      duration = props.duration,
      placement = props.placement,
      onVisibleChange = props.onVisibleChange,
      restProps = _objectWithoutProperties$2(props, _excluded$F);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      timeUp = _useState2[0],
      setTimeUp = _useState2[1];
    var popupRef = React.useRef(null);
    var timerRef = React.useRef(null);
    var toolTipClass = classNames$1("".concat(classPrefix, "-tooltip"), _defineProperty$2({}, "".concat(classPrefix, "-tooltip--").concat(theme), theme), overlayClassName);
    function handleVisibleChange(visible, _ref) {
      var e = _ref.e,
        trigger = _ref.trigger;
      setTimeUp(false);
      onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(visible, {
        e: e,
        trigger: trigger
      });
    }
    React.useEffect(function () {
      if (duration !== 0 && !timeUp) {
        var _popupRef$current, _popupRef$current$set;
        (_popupRef$current = popupRef.current) === null || _popupRef$current === void 0 || (_popupRef$current$set = _popupRef$current.setVisible) === null || _popupRef$current$set === void 0 || _popupRef$current$set.call(_popupRef$current, true);
        timerRef.current = window.setTimeout(function () {
          var _popupRef$current2, _popupRef$current2$se;
          (_popupRef$current2 = popupRef.current) === null || _popupRef$current2 === void 0 || (_popupRef$current2$se = _popupRef$current2.setVisible) === null || _popupRef$current2$se === void 0 || _popupRef$current2$se.call(_popupRef$current2, false);
          setTimeUp(true);
        }, duration);
      }
      return function () {
        window.clearTimeout(timerRef.current);
      };
    }, [duration, timeUp]);
    React.useImperativeHandle(ref, function () {
      return _objectSpread$2r({}, popupRef.current || {});
    });
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$2r({
      ref: popupRef,
      destroyOnClose: destroyOnClose,
      showArrow: showArrow,
      overlayClassName: toolTipClass,
      onVisibleChange: handleVisibleChange,
      placement: placement
    }, restProps), children);
  });
  Tooltip$1.displayName = "Tooltip";

  var getPosition = function getPosition(targetEle, contentEle, placement, clientX, clientY) {
    var targetRect = targetEle.getBoundingClientRect();
    var contentRect = contentEle.getBoundingClientRect();
    var position = {
      top: document.documentElement.scrollTop,
      left: document.documentElement.scrollLeft
    };
    if (targetRect && contentRect) {
      var dWidth = targetRect.width - contentRect.width;
      switch (placement) {
        case "top":
          position.left += targetRect.left + dWidth / 2;
          position.top += targetRect.top - contentRect.height - 16;
          break;
        case "bottom":
          position.left += targetRect.left + dWidth / 2;
          position.top += targetRect.top + targetRect.height;
          break;
        case "mouse":
          position.left += Number(clientX);
          position.top += typeof clientY !== "undefined" ? Number(clientY) + 16 : targetRect.top + targetRect.height + 8;
          break;
      }
      if (placement === "mouse") {
        var edges = {
          top: document.documentElement.scrollTop,
          left: document.documentElement.scrollLeft,
          right: document.documentElement.scrollLeft + document.documentElement.clientWidth,
          bottom: document.documentElement.scrollTop + document.documentElement.clientHeight
        };
        if (position.top > edges.bottom - contentRect.height) {
          position.top = document.documentElement.scrollTop + targetRect.top - contentRect.height - 8;
        }
        if (position.left > edges.right - contentRect.width) {
          position.left = edges.right - contentRect.width;
        }
      }
    }
    return position;
  };

  var useSwitch = function useSwitch() {
    var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var _useState = React.useState(initialState),
      _useState2 = _slicedToArray$1(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    return [state, {
      on: usePersistFn(function () {
        return setState(true);
      }),
      off: usePersistFn(function () {
        return setState(false);
      }),
      set: setState
    }];
  };

  function ownKeys$2r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2r(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_TRANSITION_TIMEOUT = 180;
  var TooltipLite$1 = function TooltipLite(originalProps) {
    var props = useDefaultProps(originalProps, tooltipLiteDefaultProps);
    var style = props.style,
      className = props.className,
      placement = props.placement,
      showArrow = props.showArrow,
      theme = props.theme,
      children = props.children,
      triggerElement = props.triggerElement,
      content = props.content,
      showShadow = props.showShadow;
    var triggerRef = React.useRef(null);
    var contentRef = React.useRef(null);
    var popupRef = React.useRef(null);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useSwitch = useSwitch(),
      _useSwitch2 = _slicedToArray$1(_useSwitch, 2),
      hover = _useSwitch2[0],
      hoverAction = _useSwitch2[1];
    var _useState = React.useState(0),
      _useState2 = _slicedToArray$1(_useState, 2),
      clientX = _useState2[0],
      setHoverClientX = _useState2[1];
    var _useState3 = React.useState(0),
      _useState4 = _slicedToArray$1(_useState3, 2),
      clientY = _useState4[0],
      setHoverClientY = _useState4[1];
    var _useState5 = React.useState(null),
      _useState6 = _slicedToArray$1(_useState5, 2),
      position = _useState6[0],
      setPosition = _useState6[1];
    var _useAnimation = useAnimation(),
      keepFade = _useAnimation.keepFade;
    React.useEffect(function () {
      if (triggerRef.current && contentRef.current) {
        setPosition(getPosition(triggerRef.current, contentRef.current, placement, clientX, clientY));
      }
    }, [triggerRef.current, contentRef.current, placement, hover, clientX, clientY]);
    var updatePosition = function updatePosition(position2) {
      var clientX2 = position2.clientX,
        clientY2 = position2.clientY;
      setHoverClientX(clientX2);
      setHoverClientY(clientY2);
    };
    var onSwitchHover = function onSwitchHover(action, e) {
      var clientX2 = e.clientX,
        clientY2 = e.clientY;
      updatePosition({
        clientX: clientX2,
        clientY: clientY2
      });
      hoverAction.set(action === "on");
    };
    var showTipArrow = showArrow && placement !== "mouse";
    var onSwitchMove = React.useCallback(throttle$1(function (e) {
      return updatePosition(e);
    }, 16.7, {
      trailing: true
    }), []);
    var getTriggerChildren = function getTriggerChildren(children2) {
      var appendProps = {
        ref: triggerRef,
        onMouseMove: function onMouseMove(e) {
          var clientX2 = e.clientX,
            clientY2 = e.clientY;
          return onSwitchMove({
            clientX: clientX2,
            clientY: clientY2
          });
        },
        onMouseEnter: function onMouseEnter(e) {
          return onSwitchHover("on", e);
        },
        onMouseLeave: function onMouseLeave(e) {
          return onSwitchHover("off", e);
        }
      };
      if (! /*#__PURE__*/React__default["default"].isValidElement(children2)) {
        return /*#__PURE__*/React__default["default"].cloneElement(/* @__PURE__ */React__default["default"].createElement("div", null, children2), _objectSpread$2q({}, appendProps));
      }
      return /*#__PURE__*/React__default["default"].cloneElement(children2, _objectSpread$2q({}, appendProps));
    };
    return /* @__PURE__ */React__default["default"].createElement("div", null, getTriggerChildren(children || triggerElement), hover && /* @__PURE__ */React__default["default"].createElement(Portal, null, /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$2q({
      appear: true,
      timeout: {
        appear: DEFAULT_TRANSITION_TIMEOUT
      },
      "in": hover,
      nodeRef: popupRef
    }, getTransitionParams({
      classPrefix: classPrefix,
      fadeAnimation: keepFade
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-popup"), "".concat(classPrefix, "-tooltip"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-tooltip--").concat(theme), theme), "".concat(classPrefix, "-tooltip--noshadow"), !showShadow), className),
      style: {
        position: "absolute",
        left: position === null || position === void 0 ? void 0 : position.left,
        top: position === null || position === void 0 ? void 0 : position.top,
        zIndex: props.zIndex
      },
      "data-popper-placement": placement,
      ref: popupRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-popup__content"), _defineProperty$2({}, "".concat(classPrefix, "-popup__content--arrow"), showTipArrow)),
      ref: contentRef,
      style: style
    }, content, showTipArrow && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popup__arrow")
    }))))));
  };
  TooltipLite$1.displayName = "Tooltiplite";
  var _TooltipLite = /*#__PURE__*/React__default["default"].memo(TooltipLite$1);

  var Tooltip = Tooltip$1;
  var TooltipLite = _TooltipLite;

  function ownKeys$2q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function Ellipsis$1(props) {
    var classPrefix = props.classPrefix;
    var root = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isOverflow = _useState2[0],
      setIsOverflow = _useState2[1];
    var ellipsisClasses = classNames$1(["".concat(classPrefix, "-table__ellipsis"), "".concat(classPrefix, "-text-ellipsis")]);
    var innerEllipsisClassName = ["".concat(classPrefix, "-table__ellipsis-content"), props.overlayClassName];
    var onTriggerMouseenter = function onTriggerMouseenter() {
      if (!root.current) return;
      setIsOverflow(isNodeOverflow(root.current));
    };
    var onTriggerMouseleave = function onTriggerMouseleave() {
      setIsOverflow(isNodeOverflow(root.current));
    };
    var onMouseAround = useDebounce(function (e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    var cellNode = props.content || props.children;
    var ellipsisContent = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: root,
      className: ellipsisClasses,
      onMouseEnter: onMouseAround,
      onMouseLeave: onMouseAround
    }, cellNode);
    var content = null;
    var tooltipProps = props.tooltipProps;
    if (isOverflow) {
      var rProps = _objectSpread$2p({
        content: props.popupContent || cellNode,
        destroyOnClose: true,
        zIndex: props.zIndex,
        attach: props.attach,
        placement: props.placement,
        overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? innerEllipsisClassName.concat(tooltipProps.overlayClassName) : innerEllipsisClassName
      }, props.tooltipProps || {});
      content = /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$2p({}, rProps), ellipsisContent);
    } else {
      content = ellipsisContent;
    }
    return content;
  }
  Ellipsis$1.displayName = "Ellipsis";

  function ownKeys$2p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2p(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function renderCell(params, extra) {
    var col = params.col,
      row = params.row,
      rowIndex = params.rowIndex;
    if (col.colKey === "serial-number") {
      var _ref = (extra === null || extra === void 0 ? void 0 : extra.pagination) || {},
        current = _ref.current,
        pageSize = _ref.pageSize,
        defaultCurrent = _ref.defaultCurrent,
        defaultPageSize = _ref.defaultPageSize;
      var tCurrent = current || defaultCurrent;
      var tPageSize = pageSize || defaultPageSize;
      if (tPageSize && tCurrent) {
        return tPageSize * (tCurrent - 1) + rowIndex + 1;
      }
      return rowIndex + 1;
    }
    if (isFunction$1(col.cell)) {
      return col.cell(params);
    }
    if (isFunction$1(col.render)) {
      return col.render(_objectSpread$2o(_objectSpread$2o({}, params), {}, {
        type: "cell"
      }));
    }
    var r = col.cell || col.render || get(row, col.colKey);
    if (![void 0, "", null].includes(r)) return r;
    if (extra !== null && extra !== void 0 && extra.cellEmptyContent) return extra.cellEmptyContent;
    return r;
  }
  function renderEllipsisCell(cellParams, params) {
    var cellNode = params.cellNode,
      tableElm = params.tableElm,
      columnLength = params.columnLength,
      classPrefix = params.classPrefix,
      overlayClassName = params.overlayClassName;
    var col = cellParams.col,
      colIndex = cellParams.colIndex;
    var content = isFunction$1(col.ellipsis) ? col.ellipsis(cellParams) : void 0;
    if (_typeof$3(col.ellipsis) === "object" && "content" in col.ellipsis && isFunction$1(col.ellipsis.content)) {
      content = col.ellipsis.content(cellParams);
    }
    var tooltipProps = {};
    if (_typeof$3(col.ellipsis) === "object") {
      tooltipProps = "props" in col.ellipsis ? col.ellipsis.props : col.ellipsis || void 0;
    }
    var tableElement = tableElm;
    var placement = colIndex === 0 ? "top-left" : "top";
    placement = colIndex === columnLength - 1 ? "top-right" : placement;
    return /* @__PURE__ */React__default["default"].createElement(Ellipsis$1, {
      placement: placement,
      attach: tableElement ? function () {
        return tableElement;
      } : void 0,
      popupContent: content,
      tooltipProps: tooltipProps,
      overlayClassName: overlayClassName,
      classPrefix: classPrefix
    }, cellNode);
  }
  var Cell = function Cell(props) {
    var cellParams = props.cellParams,
      tableClassNames = props.tableClassNames,
      tableRef = props.tableRef,
      columnLength = props.columnLength,
      classPrefix = props.classPrefix,
      overlayClassName = props.overlayClassName,
      pagination = props.pagination;
    var col = cellParams.col,
      colIndex = cellParams.colIndex,
      rowIndex = cellParams.rowIndex;
    var cellSpans = props.cellSpans,
      dataLength = props.dataLength,
      rowAndColFixedPosition = props.rowAndColFixedPosition,
      cellEmptyContent = props.cellEmptyContent,
      rowspanAndColspan = props.rowspanAndColspan,
      onClick = props.onClick;
    var tableColFixedClasses = tableClassNames.tableColFixedClasses,
      tdEllipsisClass = tableClassNames.tdEllipsisClass,
      tableBaseClass = tableClassNames.tableBaseClass,
      tdAlignClasses = tableClassNames.tdAlignClasses,
      tableDraggableClasses = tableClassNames.tableDraggableClasses;
    var cellNode = renderCell(cellParams, {
      cellEmptyContent: cellEmptyContent,
      pagination: pagination
    });
    var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, tableColFixedClasses);
    var customClasses = formatClassNames(col.className, _objectSpread$2o(_objectSpread$2o({}, cellParams), {}, {
      type: "td"
    }));
    var classes = [tdStyles.classes, customClasses, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tdEllipsisClass, col.ellipsis), tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), tableBaseClass.tdFirstCol, colIndex === 0 && rowspanAndColspan), tdAlignClasses[col.align], col.align && col.align !== "left"), tableDraggableClasses.handle, col.colKey === "drag")];
    var normalAttrs = isFunction$1(col.attrs) ? col.attrs(_objectSpread$2o(_objectSpread$2o({}, cellParams), {}, {
      type: "td"
    })) : col.attrs;
    var attrs = _objectSpread$2o(_objectSpread$2o({}, normalAttrs), {}, {
      rowSpan: cellSpans.rowspan,
      colSpan: cellSpans.colspan
    });
    return /* @__PURE__ */React__default["default"].createElement("td", _objectSpread$2o(_objectSpread$2o({
      key: col.colKey || colIndex,
      className: classNames$1(classes) || void 0,
      style: tdStyles.style
    }, attrs), {}, {
      onClick: onClick
    }), col.ellipsis ? renderEllipsisCell(cellParams, {
      cellNode: cellNode,
      tableElm: tableRef.current,
      columnLength: columnLength,
      classPrefix: classPrefix,
      overlayClassName: overlayClassName
    }) : cellNode);
  };
  Cell.displayName = "Cell";

  function ownKeys$2o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2o(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
  function TR(props) {
    var _props$columns;
    var row = props.row,
      rowKey = props.rowKey,
      rowIndex = props.rowIndex,
      rowClassName = props.rowClassName,
      rowAttributes = props.rowAttributes,
      dataLength = props.dataLength,
      fixedRows = props.fixedRows,
      scroll = props.scroll,
      tableContentRef = props.tableContentRef,
      rowAndColFixedPosition = props.rowAndColFixedPosition,
      virtualConfig = props.virtualConfig,
      onRowMounted = props.onRowMounted;
    var trRef = React.useRef(null);
    var classNames = useClassName();
    var trStyles = getRowFixedStyles(get(row, rowKey || "id"), rowIndex, dataLength, fixedRows, rowAndColFixedPosition, classNames.tableRowFixedClasses, virtualConfig.isVirtualScroll ? virtualConfig.translateY : 0);
    var trAttributes = React.useMemo(function () {
      return formatRowAttributes(rowAttributes, {
        row: row,
        rowIndex: rowIndex,
        type: "body"
      }) || {};
    }, [row, rowAttributes, rowIndex]);
    var classes = React.useMemo(function () {
      var customClasses = formatRowClassNames(rowClassName, {
        row: row,
        rowIndex: rowIndex,
        rowKey: rowKey,
        type: "body"
      }, rowKey || "id");
      return [trStyles === null || trStyles === void 0 ? void 0 : trStyles.classes, customClasses];
    }, [row, rowClassName, rowIndex, rowKey, trStyles === null || trStyles === void 0 ? void 0 : trStyles.classes]);
    var useLazyLoadParams = React.useMemo(function () {
      return _objectSpread$2n(_objectSpread$2n({}, scroll), {}, {
        rowIndex: rowIndex
      });
    }, [scroll, rowIndex]);
    var _useLazyLoad = useLazyLoad(tableContentRef.current, trRef, useLazyLoadParams),
      hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
      tRowHeight = _useLazyLoad.tRowHeight;
    React.useEffect(function () {
      if (virtualConfig.isVirtualScroll && trRef.current) {
        onRowMounted === null || onRowMounted === void 0 || onRowMounted({
          ref: trRef.current,
          data: row
        });
      }
    }, [virtualConfig.isVirtualScroll, trRef, row]);
    var columnVNodeList = (_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : _props$columns.map(function (col, colIndex) {
      var _props$skipSpansMap;
      var cellSpans = {};
      var params = {
        row: row,
        col: col,
        rowIndex: rowIndex,
        colIndex: colIndex
      };
      var spanState = null;
      if ((_props$skipSpansMap = props.skipSpansMap) !== null && _props$skipSpansMap !== void 0 && _props$skipSpansMap.size) {
        var _spanState, _spanState2;
        var cellKey = getCellKey(row, props.rowKey, col.colKey, colIndex);
        spanState = props.skipSpansMap.get(cellKey) || {};
        ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
        ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
        if (spanState.skipped) return null;
      }
      var onClick = function onClick(e) {
        var _props$onCellClick;
        var p = _objectSpread$2n(_objectSpread$2n({}, params), {}, {
          e: e
        });
        if (col.stopPropagation) {
          e.stopPropagation();
        }
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, p);
      };
      return /* @__PURE__ */React__default["default"].createElement(Cell, {
        key: params.col.colKey,
        cellParams: params,
        dataLength: dataLength,
        rowAndColFixedPosition: rowAndColFixedPosition,
        columnLength: props.columns.length,
        cellSpans: cellSpans,
        cellEmptyContent: props.cellEmptyContent,
        tableClassNames: classNames,
        rowspanAndColspan: props.rowspanAndColspan,
        onClick: onClick,
        tableRef: props.tableRef,
        classPrefix: props.classPrefix,
        overlayClassName: props.ellipsisOverlayClassName,
        pagination: props.pagination
      });
    });
    var rowParams = {
      row: row,
      index: rowIndex
    };
    return /* @__PURE__ */React__default["default"].createElement("tr", _objectSpread$2n(_objectSpread$2n({
      ref: trRef
    }, trAttributes), {}, {
      style: trStyles === null || trStyles === void 0 ? void 0 : trStyles.style,
      className: classNames$1(classes) || void 0,
      onClick: function onClick(e) {
        var _props$onRowClick;
        return (_props$onRowClick = props.onRowClick) === null || _props$onRowClick === void 0 ? void 0 : _props$onRowClick.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      },
      onDoubleClick: function onDoubleClick(e) {
        var _props$onRowDblclick;
        return (_props$onRowDblclick = props.onRowDblclick) === null || _props$onRowDblclick === void 0 ? void 0 : _props$onRowDblclick.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseDown: function onMouseDown(e) {
        var _props$onRowMousedown;
        return (_props$onRowMousedown = props.onRowMousedown) === null || _props$onRowMousedown === void 0 ? void 0 : _props$onRowMousedown.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseEnter: function onMouseEnter(e) {
        var _props$onRowMouseente;
        return (_props$onRowMouseente = props.onRowMouseenter) === null || _props$onRowMouseente === void 0 ? void 0 : _props$onRowMouseente.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseLeave: function onMouseLeave(e) {
        var _props$onRowMouseleav;
        return (_props$onRowMouseleav = props.onRowMouseleave) === null || _props$onRowMouseleav === void 0 ? void 0 : _props$onRowMouseleav.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseUp: function onMouseUp(e) {
        var _props$onRowMouseup;
        return (_props$onRowMouseup = props.onRowMouseup) === null || _props$onRowMouseup === void 0 ? void 0 : _props$onRowMouseup.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      },
      onMouseOver: function onMouseOver(e) {
        var _props$onRowMouseover;
        return (_props$onRowMouseover = props.onRowMouseover) === null || _props$onRowMouseover === void 0 ? void 0 : _props$onRowMouseover.call(props, _objectSpread$2n(_objectSpread$2n({}, rowParams), {}, {
          e: e
        }));
      }
    }), hasLazyLoadHolder ? [/* @__PURE__ */React__default["default"].createElement("td", {
      key: rowIndex,
      style: {
        height: "".concat(tRowHeight, "px"),
        border: "none"
      }
    })] : columnVNodeList);
  }
  TR.displayName = "TR";

  function ownKeys$2n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2n(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
  function TBody(props) {
    var data = props.data,
      columns = props.columns,
      rowKey = props.rowKey,
      firstFullRow = props.firstFullRow,
      lastFullRow = props.lastFullRow,
      virtualConfig = props.virtualConfig,
      allTableClasses = props.allTableClasses;
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      global = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var tableFullRowClasses = allTableClasses.tableFullRowClasses,
      tableBaseClass = allTableClasses.tableBaseClass;
    var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, props.rowspanAndColspan),
      skipSpansMap = _useRowspanAndColspan.skipSpansMap;
    var columnLength = columns.length;
    var dataLength = data === null || data === void 0 ? void 0 : data.length;
    var tbodyClasses = React.useMemo(function () {
      return [tableBaseClass.body];
    }, [tableBaseClass.body]);
    var hasFullRowConfig = React.useMemo(function () {
      return firstFullRow || lastFullRow;
    }, [firstFullRow, lastFullRow]);
    var renderEmpty = function renderEmpty(columns2) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        className: classNames$1([tableBaseClass.emptyRow, _defineProperty$2({}, tableFullRowClasses.base, props.isWidthOverflow)])
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: columns2.length
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1([tableBaseClass.empty, _defineProperty$2({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)]),
        style: props.isWidthOverflow ? {
          width: "".concat(props.tableWidth.current, "px")
        } : {}
      }, props.empty || t(global.empty))));
    };
    var getFullRow = function getFullRow(columnLength2, type) {
      var tType = camelCase$1(type);
      var fullRowNode = {
        "first-full-row": firstFullRow,
        "last-full-row": lastFullRow
      }[type];
      if (!fullRowNode) return null;
      var isFixedToLeft = props.isWidthOverflow && columns.find(function (col) {
        return col.fixed === "left";
      });
      var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        className: classNames$1(classes)
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: columnLength2
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(_defineProperty$2({}, tableFullRowClasses.innerFullRow, isFixedToLeft)),
        style: isFixedToLeft ? {
          width: "".concat(props.tableWidth.current, "px")
        } : {}
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFullRowClasses.innerFullElement
      }, fullRowNode))));
    };
    var firstFullRowNode = React.useMemo(function () {
      return getFullRow(columnLength, "first-full-row");
    }, [firstFullRow, columnLength, getFullRow]);
    var lastFullRowNode = React.useMemo(function () {
      return getFullRow(columnLength, "last-full-row");
    }, [lastFullRow, columnLength, getFullRow]);
    var isSkipSnapsMapNotFinish = Boolean(props.rowspanAndColspan && !skipSpansMap.size);
    var getTRNodeList = function getTRNodeList() {
      if (isSkipSnapsMapNotFinish) return null;
      var trNodeList = [];
      var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableRef", "tableContentRef", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
      var renderData = virtualConfig.isVirtualScroll ? virtualConfig.visibleData : data;
      renderData === null || renderData === void 0 || renderData.forEach(function (row, rowIndex) {
        var trProps = _objectSpread$2m(_objectSpread$2m(_objectSpread$2m({}, pick$1(props, TABLE_PROPS)), {}, {
          rowKey: props.rowKey || "id",
          row: row,
          columns: columns,
          rowIndex: row.__VIRTUAL_SCROLL_INDEX || rowIndex,
          dataLength: dataLength,
          skipSpansMap: skipSpansMap,
          virtualConfig: virtualConfig,
          classPrefix: props.classPrefix,
          ellipsisOverlayClassName: props.ellipsisOverlayClassName
        }, pick$1(props, properties)), {}, {
          pagination: props.pagination
        });
        if (props.onCellClick) {
          trProps.onCellClick = props.onCellClick;
        }
        var trNode = /* @__PURE__ */React__default["default"].createElement(TR, _objectSpread$2m(_objectSpread$2m({
          key: get(row, props.rowKey || "id") || rowIndex
        }, trProps), {}, {
          onRowMounted: props.handleRowMounted
        }));
        trNodeList.push(trNode);
        if (props.renderExpandedRow) {
          var p = {
            row: row,
            index: rowIndex,
            columns: columns,
            tableWidth: props.tableWidth.current,
            isWidthOverflow: props.isWidthOverflow
          };
          var expandedContent = props.renderExpandedRow(p);
          expandedContent && trNodeList.push(expandedContent);
        }
      });
      return trNodeList;
    };
    var isEmpty = !(data !== null && data !== void 0 && data.length) && !props.loading && !hasFullRowConfig;
    var translate = "translateY(".concat(virtualConfig.translateY, "px)");
    var posStyle = virtualConfig.isVirtualScroll ? {
      transform: translate,
      msTransform: translate,
      MozTransform: translate,
      WebkitTransform: translate
    } : void 0;
    var list = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, firstFullRowNode, getTRNodeList(), lastFullRowNode);
    return /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: classNames$1(tbodyClasses),
      style: _objectSpread$2m({}, posStyle)
    }, isEmpty ? renderEmpty(columns) : list);
  }
  TBody.displayName = "TBody";

  function ownKeys$2m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2m(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function TFoot(props) {
    var footData = props.footData,
      columns = props.columns,
      rowKey = props.rowKey,
      footerSummary = props.footerSummary,
      virtualScroll = props.virtualScroll;
    var tfooterRef = React.useRef(null);
    var classnames = useClassName();
    var _useRowspanAndColspan = useRowspanAndColspan(footData, columns, rowKey, props.rowspanAndColspanInFooter),
      skipSpansMap = _useRowspanAndColspan.skipSpansMap;
    var renderTFootCell = function renderTFootCell(p) {
      var col = p.col,
        row = p.row;
      if (isFunction$1(col.foot)) {
        return col.foot(p);
      }
      return col.foot || get(row, col.colKey);
    };
    var theadClasses = [classnames.tableFooterClasses.footer, _defineProperty$2({}, classnames.tableFooterClasses.fixed, props.isFixedHeader)];
    if (!columns) return null;
    var footerDomList = footData === null || footData === void 0 ? void 0 : footData.map(function (row, rowIndex) {
      var trAttributes = formatRowAttributes(props.rowAttributes, {
        row: row,
        rowIndex: rowIndex,
        type: "foot"
      });
      var customClasses = formatRowClassNames(props.rowClassName, {
        row: row,
        rowIndex: rowIndex,
        type: "foot"
      }, props.rowKey || "id");
      return /* @__PURE__ */React__default["default"].createElement("tr", _objectSpread$2l(_objectSpread$2l({
        key: rowIndex
      }, trAttributes), {}, {
        className: classNames$1(customClasses)
      }), columns.map(function (col, colIndex) {
        var _props$thWidthList;
        var cellSpans = {};
        var spanState = null;
        if (skipSpansMap.size) {
          var _spanState, _spanState2;
          var cellKey = getCellKey(row, rowKey, col.colKey, colIndex);
          spanState = skipSpansMap.get(cellKey) || {};
          ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
          ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
          if (spanState.skipped) return null;
        }
        var tdStyles = getColumnFixedStyles(col, colIndex, props.rowAndColFixedPosition, classnames.tableColFixedClasses);
        var style = _objectSpread$2l({}, tdStyles.style);
        if ((_props$thWidthList = props.thWidthList) !== null && _props$thWidthList !== void 0 && _props$thWidthList[col.colKey]) {
          style.width = "".concat(props.thWidthList[col.colKey] || 0, "px");
        }
        return /* @__PURE__ */React__default["default"].createElement("td", {
          key: col.colKey,
          rowSpan: cellSpans.rowspan,
          colSpan: cellSpans.colspan,
          className: classNames$1(tdStyles.classes),
          style: style
        }, renderTFootCell({
          row: row,
          rowIndex: rowIndex,
          col: col,
          colIndex: colIndex
        }));
      }));
    });
    if (!footerSummary && (!props.footData || !props.footData.length)) return null;
    return /* @__PURE__ */React__default["default"].createElement("tfoot", {
      ref: tfooterRef,
      className: classNames$1(theadClasses),
      style: {
        visibility: virtualScroll ? "hidden" : "visible"
      }
    }, footerSummary && /* @__PURE__ */React__default["default"].createElement("tr", {
      className: classnames.tableFullRowClasses.base
    }, /* @__PURE__ */React__default["default"].createElement("td", {
      colSpan: columns.length
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classnames.tableFullRowClasses.innerFullElement
    }, footerSummary))), footerDomList);
  }

  function getNodeDepth(columns, depthMap) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxDepth = depth;
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      depthMap.set(col, depth);
      if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        var deep = getNodeDepth(col.children, depthMap, depth + 1);
        if (deep > maxDepth) {
          maxDepth = deep;
        }
      }
    }
    return maxDepth;
  }
  function getChildrenNodeWidth(node) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];
    for (var i = 0, len = childrenList.length; i < len; i++) {
      var item = childrenList[i];
      if (item.children) {
        countNew = getChildrenNodeWidth(item, countNew);
      } else {
        countNew += 1;
      }
    }
    return countNew;
  }
  function getThRowspanAndColspan(columns) {
    var depthMap = /* @__PURE__ */new Map();
    var columnsDepth = getNodeDepth(columns, depthMap);
    var rowspanAndColspanMap = /* @__PURE__ */new Map();
    var _loop = function loop(nodes, leafColumns2) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _col$children2;
        var col = nodes[i];
        var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
        var colspan = col.children ? getChildrenNodeWidth(col) : 1;
        var span = {};
        rowspan > 1 && (span.rowspan = rowspan);
        colspan > 1 && (span.colspan = colspan);
        rowspanAndColspanMap.set(col, span);
        if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          _loop(col.children, leafColumns2);
        } else {
          leafColumns2.push(col);
        }
      }
    };
    var leafColumns = [];
    _loop(columns, leafColumns);
    return {
      rowspanAndColspanMap: rowspanAndColspanMap,
      leafColumns: leafColumns
    };
  }
  function getThList(columns) {
    var _loop2 = function loop(nodes, thRows) {
      var _children;
      var thRowData = [];
      var children = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _node$children;
        var node = nodes[i];
        var thList = [node];
        thRowData = thRowData.concat(thList);
        if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
          children = children.concat(node.children);
        }
      }
      if ((_children = children) !== null && _children !== void 0 && _children.length) {
        _loop2(children, thRows);
      }
      thRows.push(thRowData);
      return thRowData;
    };
    var list = [];
    _loop2(columns, list);
    list = list.reverse();
    return list;
  }

  function ownKeys$2l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2l(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function renderTitle(col, index) {
    var params = {
      col: col,
      colIndex: index
    };
    if (isFunction$1(col.title)) {
      return col.title(params);
    }
    if (isFunction$1(col.render)) {
      return col.render(_objectSpread$2k(_objectSpread$2k({}, params), {}, {
        row: {},
        rowIndex: -1,
        type: "title"
      }));
    }
    return col.title;
  }
  function useTableHeader(_ref) {
    var columns = _ref.columns;
    var _useClassName = useClassName(),
      tableSortClasses = _useClassName.tableSortClasses,
      tableFilterClasses = _useClassName.tableFilterClasses;
    var spansAndLeafNodes = React.useMemo(function () {
      return getThRowspanAndColspan(columns);
    }, [columns]);
    var thList = React.useMemo(function () {
      return getThList(columns);
    }, [columns]);
    var isMultipleHeader = React.useMemo(function () {
      return thList.length > 1;
    }, [thList]);
    var renderTitleWidthIcon = function renderTitleWidthIcon(_ref2, col, colIndex, ellipsisTitle, attach, extra) {
      var _ref3 = _slicedToArray$1(_ref2, 3),
        title = _ref3[0],
        sortIcon = _ref3[1],
        filterIcon = _ref3[2];
      var classes = _defineProperty$2(_defineProperty$2({}, tableSortClasses.sortable, !!sortIcon), tableFilterClasses.filterable, !!filterIcon);
      var content = isFunction$1(ellipsisTitle) ? ellipsisTitle({
        col: col,
        colIndex: colIndex
      }) : void 0;
      var isEllipsis = ellipsisTitle !== void 0 ? Boolean(ellipsisTitle) : Boolean(col.ellipsis);
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(classes)
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableSortClasses.title
      }, isEllipsis ? /* @__PURE__ */React__default["default"].createElement(Ellipsis$1, {
        placement: "bottom",
        attach: attach ? function () {
          return attach;
        } : void 0,
        popupContent: content,
        tooltipProps: _typeof$3(ellipsisTitle) === "object" ? ellipsisTitle : void 0,
        classPrefix: extra === null || extra === void 0 ? void 0 : extra.classPrefix,
        overlayClassName: extra === null || extra === void 0 ? void 0 : extra.ellipsisOverlayClassName
      }, title) : /* @__PURE__ */React__default["default"].createElement("div", null, title), Boolean(sortIcon || filterIcon) && /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.iconWrap
      }, sortIcon, filterIcon)));
    };
    return {
      thList: thList,
      isMultipleHeader: isMultipleHeader,
      spansAndLeafNodes: spansAndLeafNodes,
      renderTitleWidthIcon: renderTitleWidthIcon
    };
  }

  function ownKeys$2k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2k(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function THead(props) {
    var columnResizeParams = props.columnResizeParams,
      classPrefix = props.classPrefix,
      showColumnShadow = props.showColumnShadow;
    var theadRef = React.useRef(null);
    var classnames = useClassName();
    var tableHeaderClasses = classnames.tableHeaderClasses,
      tableBaseClass = classnames.tableBaseClass;
    var theadClasses = [tableHeaderClasses.header, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableHeaderClasses.fixed, Boolean(props.maxHeight || props.height)), tableBaseClass.bordered, props.bordered && props.isMultipleHeader), tableHeaderClasses.multipleHeader, props.isMultipleHeader)];
    var colspanSkipMap = React.useMemo(function () {
      var map = {};
      var list = props.thList[0];
      for (var i = 0, len = list.length; i < len; i++) {
        var item = list[i];
        if (item.colspan > 1) {
          for (var j = i + 1; j < i + item.colspan; j++) {
            if (list[j]) {
              map[list[j].colKey] = true;
            }
          }
        }
      }
      return map;
    }, [props.thList]);
    var getTableNode = function getTableNode(thead) {
      var parent = thead;
      while (parent) {
        var _parent;
        parent = parent.parentNode;
        if ((_parent = parent) !== null && _parent !== void 0 && (_parent = _parent.classList) !== null && _parent !== void 0 && _parent.contains("".concat(props.classPrefix, "-table"))) {
          break;
        }
      }
      return parent;
    };
    var renderThNodeList = function renderThNodeList(rowAndColFixedPosition, thWidthList) {
      var thBorderMap = /* @__PURE__ */new Map();
      var thRowspanAndColspan = props.spansAndLeafNodes.rowspanAndColspanMap;
      return props.thList.map(function (row, rowIndex) {
        var thRow = row.map(function (col, index) {
          var _col$children;
          if (colspanSkipMap[col.colKey]) return null;
          var rowspanAndColspan = thRowspanAndColspan.get(col);
          if (index === 0 && rowspanAndColspan.rowspan > 1) {
            for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
              thBorderMap.set(props.thList[j][0], true);
            }
          }
          var thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, classnames.tableColFixedClasses);
          var colParams = {
            col: col,
            colIndex: index,
            row: {},
            rowIndex: -1
          };
          var isLeftFixedActive = showColumnShadow.left && col.fixed === "left";
          var isRightFixedActive = showColumnShadow.right && col.fixed === "right";
          var canDragSort = props.thDraggable && !(isLeftFixedActive || isRightFixedActive);
          var customClasses = formatClassNames(col.className, _objectSpread$2j(_objectSpread$2j({}, colParams), {}, {
            type: "th"
          }));
          var thCustomClasses = formatClassNames(col.thClassName, colParams);
          var thClasses = [thStyles.classes, customClasses, thCustomClasses, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableHeaderClasses.thBordered, thBorderMap.get(col)), "".concat(classPrefix, "-table__th-").concat(col.colKey), col.colKey), classnames.tdAlignClasses[col.align], col.align && col.align !== "left"), classnames.tableDraggableClasses.dragSortTh, canDragSort)];
          var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
          var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;
          var styles = _objectSpread$2j(_objectSpread$2j({}, thStyles.style || {}), {}, {
            width: width
          });
          var innerTh = renderTitle(col, index);
          if (!col.colKey) return null;
          var resizeColumnListener = props.resizable || !canDragSort ? {
            onMouseDown: function onMouseDown(e) {
              if (props.resizable) {
                var _columnResizeParams$o;
                columnResizeParams === null || columnResizeParams === void 0 || (_columnResizeParams$o = columnResizeParams.onColumnMousedown) === null || _columnResizeParams$o === void 0 || _columnResizeParams$o.call(columnResizeParams, e, col, index);
              }
              if (!canDragSort) {
                var timer = setTimeout(function () {
                  var _thList$index;
                  var thList = theadRef.current.querySelectorAll("th");
                  (_thList$index = thList[index]) === null || _thList$index === void 0 || _thList$index.removeAttribute("draggable");
                  clearTimeout(timer);
                }, 10);
              }
            },
            onMouseMove: function onMouseMove(e) {
              var _columnResizeParams$o2;
              props.resizable && (columnResizeParams === null || columnResizeParams === void 0 || (_columnResizeParams$o2 = columnResizeParams.onColumnMouseover) === null || _columnResizeParams$o2 === void 0 ? void 0 : _columnResizeParams$o2.call(columnResizeParams, e, col));
            }
          } : {};
          var content = isFunction$1(col.ellipsisTitle) ? col.ellipsisTitle({
            col: col,
            colIndex: index
          }) : void 0;
          var isEllipsis = col.ellipsisTitle !== void 0 ? Boolean(col.ellipsisTitle) : Boolean(col.ellipsis);
          var attrs = (isFunction$1(col.attrs) ? col.attrs(_objectSpread$2j(_objectSpread$2j({}, colParams), {}, {
            type: "th"
          })) : col.attrs) || {};
          if (col.colspan > 1) {
            attrs.colSpan = col.colspan;
          }
          return /* @__PURE__ */React__default["default"].createElement("th", _objectSpread$2j(_objectSpread$2j(_objectSpread$2j({
            key: col.colKey,
            "data-colkey": col.colKey,
            className: classNames$1(thClasses),
            style: styles
          }, {
            rowSpan: rowspanAndColspan.rowspan,
            colSpan: rowspanAndColspan.colspan
          }), attrs), resizeColumnListener), /* @__PURE__ */React__default["default"].createElement("div", {
            className: tableBaseClass.thCellInner
          }, isEllipsis ? /* @__PURE__ */React__default["default"].createElement(Ellipsis$1, {
            placement: "bottom",
            attach: theadRef.current ? function () {
              return getTableNode(theadRef.current);
            } : void 0,
            popupContent: content,
            tooltipProps: _typeof$3(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0,
            overlayClassName: props.ellipsisOverlayClassName,
            classPrefix: props.classPrefix
          }, innerTh) : innerTh));
        });
        return /* @__PURE__ */React__default["default"].createElement("tr", {
          key: rowIndex
        }, thRow);
      });
    };
    return /* @__PURE__ */React__default["default"].createElement("thead", {
      ref: theadRef,
      className: classNames$1(theadClasses)
    }, renderThNodeList(props.rowAndColFixedPosition, props.thWidthList));
  }

  var baseTableDefaultProps = {
    bordered: false,
    columns: [],
    data: [],
    disableDataPage: false,
    empty: "",
    footData: [],
    footerAffixedBottom: false,
    headerAffixedTop: false,
    hover: false,
    lazyLoad: false,
    loading: void 0,
    resizable: false,
    rowKey: "id",
    showHeader: true,
    size: "medium",
    stripe: false,
    tableLayout: "fixed",
    verticalAlign: "middle"
  };
  var primaryTableDefaultProps = {
    columnControllerVisible: void 0,
    columns: [],
    expandIcon: true,
    defaultExpandedRowKeys: [],
    multipleSort: false,
    reserveSelectedRowOnPaginate: true,
    defaultSelectedRowKeys: [],
    showSortColumnBgColor: false,
    sortOnRowDraggable: false
  };

  function useAffix(props, _ref) {
    var showElement = _ref.showElement;
    var tableContentRef = React.useRef(null);
    var affixHeaderRef = React.useRef(null);
    var affixFooterRef = React.useRef(null);
    var horizontalScrollbarRef = React.useRef(null);
    var paginationRef = React.useRef(null);
    var _useState = React.useState(true),
      _useState2 = _slicedToArray$1(_useState, 2),
      showAffixHeader = _useState2[0],
      setShowAffixHeader = _useState2[1];
    var _useState3 = React.useState(true),
      _useState4 = _slicedToArray$1(_useState3, 2),
      showAffixFooter = _useState4[0],
      setShowAffixFooter = _useState4[1];
    var _useState5 = React.useState(true),
      _useState6 = _slicedToArray$1(_useState5, 2),
      showAffixPagination = _useState6[0],
      setShowAffixPagination = _useState6[1];
    var isVirtualScroll = React.useMemo(function () {
      return props.scroll && props.scroll.type === "virtual" && (props.scroll.threshold || 100) < props.data.length;
    }, [props.data.length, props.scroll]);
    var isAffixed = React.useMemo(function () {
      return !!(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom);
    }, [props.footerAffixedBottom, props.headerAffixedTop, props.horizontalScrollAffixedBottom]);
    var lastScrollLeft = 0;
    var onHorizontalScroll = function onHorizontalScroll(scrollElement) {
      if (!isAffixed && !isVirtualScroll) return;
      var target = scrollElement;
      if (!target && tableContentRef.current) {
        lastScrollLeft = 0;
        target = tableContentRef.current;
      }
      if (!target) return;
      var left = target.scrollLeft;
      if (lastScrollLeft === left) return;
      lastScrollLeft = left;
      var toUpdateScrollElement = [tableContentRef.current, affixHeaderRef.current, affixFooterRef.current, horizontalScrollbarRef.current];
      for (var i = 0, len = toUpdateScrollElement.length; i < len; i++) {
        if (toUpdateScrollElement[i] && scrollElement !== toUpdateScrollElement[i]) {
          toUpdateScrollElement[i].scrollLeft = left;
        }
      }
    };
    var isAffixedBottomElementShow = function isAffixedBottomElementShow(elementRect, tableRect, headerHeight) {
      return tableRect.top + headerHeight < elementRect.top && elementRect.top > elementRect.height;
    };
    var getOffsetTop = function getOffsetTop(props2) {
      if (typeof props2 === "boolean") return 0;
      return props2.offsetTop || 0;
    };
    var updateAffixHeaderOrFooter = function updateAffixHeaderOrFooter() {
      var _tableContentRef$curr, _tableContentRef$curr2, _affixFooterRef$curre;
      if (!isAffixed && !isVirtualScroll) return;
      var pos = (_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect();
      if (!pos) return;
      var headerRect = (_tableContentRef$curr2 = tableContentRef.current) === null || _tableContentRef$curr2 === void 0 || (_tableContentRef$curr2 = _tableContentRef$curr2.querySelector("thead")) === null || _tableContentRef$curr2 === void 0 ? void 0 : _tableContentRef$curr2.getBoundingClientRect();
      var headerHeight = (headerRect === null || headerRect === void 0 ? void 0 : headerRect.height) || 0;
      var footerRect = (_affixFooterRef$curre = affixFooterRef.current) === null || _affixFooterRef$curre === void 0 ? void 0 : _affixFooterRef$curre.getBoundingClientRect();
      if ((props.headerAffixedTop || isVirtualScroll) && affixHeaderRef.current) {
        var offsetTop = getOffsetTop(props.headerAffixProps || props.headerAffixedTop);
        var footerHeight = (footerRect === null || footerRect === void 0 ? void 0 : footerRect.height) || 0;
        var r = Math.abs(pos.top) < pos.height - headerHeight - offsetTop - footerHeight;
        if (isVirtualScroll) {
          r = pos.top > -1 * headerRect.height;
        }
        setShowAffixHeader(r);
      }
      if (props.footerAffixedBottom && affixFooterRef.current) {
        var show = isAffixedBottomElementShow(footerRect, pos, headerHeight);
        setShowAffixFooter(show);
      } else if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.current) {
        var horizontalScrollbarRect = horizontalScrollbarRef.current.getBoundingClientRect();
        var _show = isAffixedBottomElementShow(horizontalScrollbarRect, pos, headerHeight);
        setShowAffixFooter(_show);
      }
      if (props.paginationAffixedBottom && paginationRef.current) {
        var pageRect = paginationRef.current.getBoundingClientRect();
        var _show2 = isAffixedBottomElementShow(pageRect, pos, headerHeight);
        setShowAffixPagination(_show2);
      }
    };
    var onDocumentScroll = function onDocumentScroll() {
      updateAffixHeaderOrFooter();
    };
    var onFootScroll = function onFootScroll() {
      onHorizontalScroll(affixFooterRef.current);
    };
    var onHeaderScroll = function onHeaderScroll() {
      onHorizontalScroll(affixHeaderRef.current);
    };
    var horizontalScrollbarScroll = function horizontalScrollbarScroll() {
      onHorizontalScroll(horizontalScrollbarRef.current);
    };
    var onTableContentScroll = function onTableContentScroll() {
      onHorizontalScroll(tableContentRef.current);
    };
    var onFootMouseEnter = function onFootMouseEnter() {
      on$1(affixFooterRef.current, "scroll", onFootScroll);
    };
    var onFootMouseLeave = function onFootMouseLeave() {
      off$1(affixFooterRef.current, "scroll", onFootScroll);
    };
    var onHeaderMouseEnter = function onHeaderMouseEnter() {
      on$1(affixHeaderRef.current, "scroll", onHeaderScroll);
    };
    var onHeaderMouseLeave = function onHeaderMouseLeave() {
      off$1(affixHeaderRef.current, "scroll", onHeaderScroll);
    };
    var onScrollbarMouseEnter = function onScrollbarMouseEnter() {
      on$1(horizontalScrollbarRef.current, "scroll", horizontalScrollbarScroll);
    };
    var onScrollbarMouseLeave = function onScrollbarMouseLeave() {
      off$1(horizontalScrollbarRef.current, "scroll", horizontalScrollbarScroll);
    };
    var onTableContentMouseEnter = function onTableContentMouseEnter() {
      on$1(tableContentRef.current, "scroll", onTableContentScroll);
    };
    var onTableContentMouseLeave = function onTableContentMouseLeave() {
      off$1(tableContentRef.current, "scroll", onTableContentScroll);
    };
    var addHorizontalScrollListeners = function addHorizontalScrollListeners() {
      if (affixHeaderRef.current) {
        on$1(affixHeaderRef.current, "mouseenter", onHeaderMouseEnter);
        on$1(affixHeaderRef.current, "mouseleave", onHeaderMouseLeave);
      }
      if (props.footerAffixedBottom && affixFooterRef.current) {
        on$1(affixFooterRef.current, "mouseenter", onFootMouseEnter);
        on$1(affixFooterRef.current, "mouseleave", onFootMouseLeave);
      }
      if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.current) {
        on$1(horizontalScrollbarRef.current, "mouseenter", onScrollbarMouseEnter);
        on$1(horizontalScrollbarRef.current, "mouseleave", onScrollbarMouseLeave);
      }
      if ((isAffixed || isVirtualScroll) && tableContentRef.current) {
        on$1(tableContentRef.current, "mouseenter", onTableContentMouseEnter);
        on$1(tableContentRef.current, "mouseleave", onTableContentMouseLeave);
      }
    };
    var removeHorizontalScrollListeners = function removeHorizontalScrollListeners() {
      if (affixHeaderRef.current) {
        off$1(affixHeaderRef.current, "mouseenter", onHeaderMouseEnter);
        off$1(affixHeaderRef.current, "mouseleave", onHeaderMouseLeave);
      }
      if (affixFooterRef.current) {
        off$1(affixFooterRef.current, "mouseenter", onFootMouseEnter);
        off$1(affixFooterRef.current, "mouseleave", onFootMouseLeave);
      }
      if (tableContentRef.current) {
        off$1(tableContentRef.current, "mouseenter", onTableContentMouseEnter);
        off$1(tableContentRef.current, "mouseleave", onTableContentMouseLeave);
      }
      if (horizontalScrollbarRef.current) {
        off$1(horizontalScrollbarRef.current, "mouseenter", onScrollbarMouseEnter);
        off$1(horizontalScrollbarRef.current, "mouseleave", onScrollbarMouseLeave);
      }
    };
    var addVerticalScrollListener = function addVerticalScrollListener() {
      if (typeof document === "undefined") return;
      if (!isAffixed && !props.paginationAffixedBottom) return;
      var timer = setTimeout(function () {
        if (isAffixed || props.paginationAffixedBottom) {
          on$1(document, "scroll", onDocumentScroll);
        } else {
          off$1(document, "scroll", onDocumentScroll);
        }
        clearTimeout(timer);
      });
    };
    React.useEffect(function () {
      var timer = setTimeout(function () {
        addHorizontalScrollListeners();
        onHorizontalScroll();
        updateAffixHeaderOrFooter();
        clearTimeout(timer);
      });
      return removeHorizontalScrollListeners;
    }, [affixHeaderRef, affixFooterRef, horizontalScrollbarRef, tableContentRef, showElement]);
    React.useEffect(function () {
      addVerticalScrollListener();
      return function () {
        off$1(document, "scroll", onDocumentScroll);
      };
    }, [isAffixed]);
    React.useEffect(function () {
      addHorizontalScrollListeners();
      onHorizontalScroll();
    }, [props.data, props.columns, props.headerAffixedTop, props.footerAffixedBottom, props.horizontalScrollAffixedBottom, props.lazyLoad]);
    var setTableContentRef = function setTableContentRef(tableContent) {
      tableContentRef.current = tableContent;
      addVerticalScrollListener();
    };
    return {
      showAffixHeader: showAffixHeader,
      showAffixFooter: showAffixFooter,
      showAffixPagination: showAffixPagination,
      affixHeaderRef: affixHeaderRef,
      affixFooterRef: affixFooterRef,
      horizontalScrollbarRef: horizontalScrollbarRef,
      paginationRef: paginationRef,
      onHorizontalScroll: onHorizontalScroll,
      setTableContentRef: setTableContentRef,
      updateAffixHeaderOrFooter: updateAffixHeaderOrFooter
    };
  }

  function ownKeys$2j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2j(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_MIN_WIDTH = 80;
  var DEFAULT_MAX_WIDTH = 600;
  var distance = 8;
  var CONTEXTMENU = 2;
  var originalSelectStart;
  var originalDragStart;
  function useColumnResize(params) {
    var isWidthOverflow = params.isWidthOverflow,
      tableContentRef = params.tableContentRef,
      showColumnShadow = params.showColumnShadow,
      getThWidthList = params.getThWidthList,
      updateThWidthList = params.updateThWidthList,
      setTableElmWidth = params.setTableElmWidth,
      updateTableAfterColumnResize = params.updateTableAfterColumnResize,
      onColumnResizeChange = params.onColumnResizeChange;
    var resizeLineRef = React.useRef(null);
    var effectColMap = React.useRef({});
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      leafColumns = _useState2[0],
      setLeafColumns = _useState2[1];
    React.useEffect(function () {
      var hasDocument = typeof document !== "undefined";
      originalSelectStart = hasDocument ? document.onselectstart : null;
      originalDragStart = hasDocument ? document.ondragstart : null;
    }, []);
    var getSiblingResizableCol = function getSiblingResizableCol(nodes, index, type) {
      var i = index;
      while (nodes[i] && nodes[i].resizable === false) {
        if (type === "next") {
          i += 1;
        } else {
          i -= 1;
        }
      }
      return nodes[i];
    };
    var _setEffectColMap = function setEffectColMap(nodes, parent) {
      if (!nodes) return;
      setLeafColumns(nodes);
      nodes.forEach(function (n, index) {
        var prevNode = getSiblingResizableCol(nodes, index - 1, "prev");
        var nextNode = getSiblingResizableCol(nodes, index + 1, "next");
        var parentPrevCol = parent ? effectColMap.current[parent.colKey].prev : nextNode;
        var parentNextCol = parent ? effectColMap.current[parent.colKey].next : prevNode;
        var prev = index === 0 ? parentPrevCol : prevNode;
        var next = index === nodes.length - 1 ? parentNextCol : nextNode;
        effectColMap.current[n.colKey] = {
          prev: prev,
          next: next,
          current: {
            prevSibling: getSiblingResizableCol(nodes, index - 1, "prev"),
            nextSibling: getSiblingResizableCol(nodes, index + 1, "next")
          }
        };
        _setEffectColMap(n.children, n);
      });
    };
    var resizeLineParams = {
      isDragging: false,
      draggingCol: null,
      draggingStart: 0,
      effectCol: "next",
      resizeLineStyle: {}
    };
    var _useState3 = React.useState({
        display: "none",
        left: "10px",
        height: "10px",
        bottom: "0"
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      resizeLineStyle = _useState4[0],
      setResizeLineStyle = _useState4[1];
    var isColRightFixActive = function isColRightFixActive(col) {
      return col.fixed === "right" && showColumnShadow.right;
    };
    var onColumnMouseover = function onColumnMouseover(e, col) {
      var _col$resizable;
      var colResizable = (_col$resizable = col.resizable) !== null && _col$resizable !== void 0 ? _col$resizable : true;
      if (!resizeLineRef.current || resizeLineParams.isDragging || !e.target) return;
      var target = e.target.closest("th");
      if (!target) return;
      var colKey = target.getAttribute("data-colkey");
      if (!leafColumns.find(function (t) {
        return t.colKey === colKey;
      })) return;
      var targetBoundRect = target.getBoundingClientRect();
      var thRightCursor = targetBoundRect.right - e.pageX <= distance;
      var thLeftCursor = e.pageX - targetBoundRect.left <= distance;
      var isFixedToRight = isColRightFixActive(col);
      if (thRightCursor || isFixedToRight) {
        if (colResizable) {
          target.style.cursor = thRightCursor || isFixedToRight && thLeftCursor ? "col-resize" : "";
          var isCurrent = thRightCursor && !isFixedToRight || isFixedToRight && thLeftCursor;
          resizeLineParams.draggingCol = isCurrent ? target : target.nextElementSibling;
          resizeLineParams.effectCol = "next";
          return;
        }
      } else if (thLeftCursor) {
        var prevEl = target.previousElementSibling;
        if (prevEl && colResizable) {
          target.style.cursor = "col-resize";
          resizeLineParams.draggingCol = prevEl;
          resizeLineParams.effectCol = "prev";
          return;
        }
      }
      target.style.cursor = "";
      resizeLineParams.draggingCol = null;
      resizeLineParams.effectCol = null;
    };
    var getMinMaxColWidth = function getMinMaxColWidth(targetCol) {
      var _targetCol$resize, _targetCol$resize2;
      var propMinWidth = isNumber(targetCol === null || targetCol === void 0 ? void 0 : targetCol.minWidth) ? targetCol.minWidth : parseInt((targetCol === null || targetCol === void 0 ? void 0 : targetCol.minWidth) || "0", 10);
      return {
        minColWidth: Math.max((targetCol === null || targetCol === void 0 || (_targetCol$resize = targetCol.resize) === null || _targetCol$resize === void 0 ? void 0 : _targetCol$resize.minWidth) || DEFAULT_MIN_WIDTH, propMinWidth),
        maxColWidth: (targetCol === null || targetCol === void 0 || (_targetCol$resize2 = targetCol.resize) === null || _targetCol$resize2 === void 0 ? void 0 : _targetCol$resize2.maxWidth) || DEFAULT_MAX_WIDTH
      };
    };
    var getNormalResizeInfo = function getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) {
      var resizeLinePos = targetBoundRect.right - tableBoundRect.left;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var targetCol = resizeLineParams.effectCol === "next" ? col : effectPrevCol;
      var _getMinMaxColWidth = getMinMaxColWidth(targetCol),
        minColWidth = _getMinMaxColWidth.minColWidth,
        maxColWidth = _getMinMaxColWidth.maxColWidth;
      return {
        resizeLinePos: resizeLinePos,
        minResizeLineLeft: colLeft + minColWidth,
        maxResizeLineLeft: colLeft + maxColWidth
      };
    };
    var getFixedToRightResizeInfo = function getFixedToRightResizeInfo(target, col, effectPrevCol, targetBoundRect, tableBoundRect) {
      var resizeLinePos = targetBoundRect.left - tableBoundRect.left;
      var targetCol = target.dataset.colkey === col.colKey ? col : effectPrevCol;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var _getMinMaxColWidth2 = getMinMaxColWidth(targetCol),
        minColWidth = _getMinMaxColWidth2.minColWidth,
        maxColWidth = _getMinMaxColWidth2.maxColWidth;
      return {
        resizeLinePos: resizeLinePos,
        minResizeLineLeft: colLeft + (targetBoundRect.width - maxColWidth),
        maxResizeLineLeft: colLeft + (targetBoundRect.width - minColWidth)
      };
    };
    var getTotalTableWidth = function getTotalTableWidth(thWidthList) {
      var tableWidth = 0;
      leafColumns.forEach(function (col) {
        tableWidth += thWidthList[col.colKey];
      });
      return tableWidth;
    };
    var getSiblingColCanResizable = function getSiblingColCanResizable(newThWidthList, effectNextCol, distance2, index) {
      var isWidthAbnormal = true;
      if (effectNextCol) {
        var _getMinMaxColWidth3 = getMinMaxColWidth(effectNextCol),
          minColWidth = _getMinMaxColWidth3.minColWidth,
          maxColWidth = _getMinMaxColWidth3.maxColWidth;
        var targetNextColWidth = newThWidthList[effectNextCol.colKey] + distance2;
        isWidthAbnormal = targetNextColWidth < minColWidth || targetNextColWidth > maxColWidth;
      }
      return !(isWidthAbnormal || isWidthOverflow || index === leafColumns.length - 1);
    };
    var onColumnMousedown = function onColumnMousedown(e, col, index) {
      var _tableContentRef$curr, _effectColMap$current, _effectColMap$current2;
      if (e.button === CONTEXTMENU || !resizeLineParams.draggingCol) return;
      var target = resizeLineParams.draggingCol;
      var targetBoundRect = target.getBoundingClientRect();
      var tableBoundRect = (_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect();
      var effectNextCol = (_effectColMap$current = effectColMap.current[col.colKey]) === null || _effectColMap$current === void 0 ? void 0 : _effectColMap$current.next;
      var effectPrevCol = (_effectColMap$current2 = effectColMap.current[col.colKey]) === null || _effectColMap$current2 === void 0 ? void 0 : _effectColMap$current2.prev;
      var _ref = isColRightFixActive(col) ? getFixedToRightResizeInfo(target, col, effectNextCol, targetBoundRect, tableBoundRect) : getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect),
        resizeLinePos = _ref.resizeLinePos,
        minResizeLineLeft = _ref.minResizeLineLeft,
        maxResizeLineLeft = _ref.maxResizeLineLeft;
      resizeLineParams.isDragging = true;
      resizeLineParams.draggingStart = e.pageX || 0;
      if (resizeLineRef !== null && resizeLineRef !== void 0 && resizeLineRef.current) {
        var styles = _objectSpread$2i({}, resizeLineStyle);
        styles.display = "block";
        styles.height = "".concat(tableBoundRect.bottom - targetBoundRect.top, "px");
        styles.left = "".concat(resizeLinePos, "px");
        var parent = tableContentRef.current.parentElement.getBoundingClientRect();
        styles.bottom = "".concat(parent.bottom - tableBoundRect.bottom, "px");
        setResizeLineStyle(styles);
        resizeLineParams.resizeLineStyle = styles;
      }
      var onDragOver = function onDragOver(e2) {
        if (resizeLineParams.isDragging) {
          var left = resizeLinePos + e2.x - resizeLineParams.draggingStart;
          var _styles = _objectSpread$2i(_objectSpread$2i({}, resizeLineParams.resizeLineStyle), {}, {
            left: "".concat(Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft), "px")
          });
          resizeLineParams.resizeLineStyle = _styles;
          setResizeLineStyle(_styles);
        }
      };
      var _onDragEnd = function onDragEnd() {
        var _resizeLineParams$res, _effectColMap$current3;
        if (!resizeLineParams.isDragging) return;
        var moveDistance = resizeLinePos - (parseFloat(String(((_resizeLineParams$res = resizeLineParams.resizeLineStyle) === null || _resizeLineParams$res === void 0 ? void 0 : _resizeLineParams$res.left) || "")) || 0);
        var thWidthList = getThWidthList("calculate");
        var currentCol = (_effectColMap$current3 = effectColMap.current[col.colKey]) === null || _effectColMap$current3 === void 0 ? void 0 : _effectColMap$current3.current;
        var currentSibling = resizeLineParams.effectCol === "next" ? currentCol.prevSibling : currentCol.nextSibling;
        var newThWidthList = _objectSpread$2i({}, thWidthList);
        var initTableElmWidth = getTotalTableWidth(newThWidthList);
        var tmpCurrentCol = col.resizable !== false ? col : currentSibling;
        var rightCol = resizeLineParams.effectCol === "next" ? currentCol.nextSibling : col;
        var canResizeSiblingColWidth = getSiblingColCanResizable(newThWidthList, rightCol, moveDistance, index);
        if (resizeLineParams.effectCol === "next") {
          if (isColRightFixActive(col)) {
            if (target.dataset.colkey !== col.colKey) {
              newThWidthList[effectNextCol.colKey] += moveDistance;
            } else {
              newThWidthList[tmpCurrentCol.colKey] += moveDistance;
            }
          } else {
            newThWidthList[tmpCurrentCol.colKey] -= moveDistance;
            if (canResizeSiblingColWidth) {
              newThWidthList[effectNextCol.colKey] += moveDistance;
            }
          }
        } else if (resizeLineParams.effectCol === "prev") {
          if (canResizeSiblingColWidth) {
            newThWidthList[tmpCurrentCol.colKey] += moveDistance;
          }
          effectPrevCol && (newThWidthList[effectPrevCol.colKey] -= moveDistance);
        }
        updateThWidthList(newThWidthList);
        var tableWidth = getTotalTableWidth(newThWidthList);
        if (!(effectNextCol !== null && effectNextCol !== void 0 && effectNextCol.colKey)) setTableElmWidth(Math.max(initTableElmWidth, Math.round(tableWidth)));else setTableElmWidth(Math.round(tableWidth));
        updateTableAfterColumnResize();
        resizeLineParams.isDragging = false;
        resizeLineParams.draggingCol = null;
        resizeLineParams.effectCol = null;
        resizeLineParams.resizeLineStyle = null;
        target.style.cursor = "";
        setResizeLineStyle(_objectSpread$2i(_objectSpread$2i({}, resizeLineStyle), {}, {
          display: "none",
          left: void 0
        }));
        off$1(document, "mouseup", _onDragEnd);
        off$1(document, "mousemove", onDragOver);
        document.onselectstart = originalSelectStart;
        document.ondragstart = originalDragStart;
        onColumnResizeChange === null || onColumnResizeChange === void 0 || onColumnResizeChange({
          columnsWidth: newThWidthList
        });
      };
      on$1(document, "mouseup", _onDragEnd);
      on$1(document, "mousemove", onDragOver);
      document.onselectstart = function () {
        return false;
      };
      document.ondragstart = function () {
        return false;
      };
    };
    var updateTableWidthOnColumnChange = function updateTableWidthOnColumnChange(colKeys) {
      var thWidthList = getThWidthList("calculate");
      var reduceWidth = 0;
      colKeys.forEach(function (key) {
        reduceWidth += thWidthList[key] || 0;
      });
      var oldTotalWidth = Object.values(thWidthList).reduce(function () {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var n = arguments.length > 1 ? arguments[1] : undefined;
        return r + n;
      });
      setTableElmWidth(oldTotalWidth - reduceWidth);
    };
    return {
      resizeLineRef: resizeLineRef,
      resizeLineStyle: resizeLineStyle,
      onColumnMouseover: onColumnMouseover,
      onColumnMousedown: onColumnMousedown,
      setEffectColMap: _setEffectColMap,
      updateTableWidthOnColumnChange: updateTableWidthOnColumnChange
    };
  }

  function FakeArrow(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      style: props.style,
      className: classNames$1("".concat(classPrefix, "-fake-arrow"), _defineProperty$2({}, "".concat(classPrefix, "-fake-arrow--active"), (props === null || props === void 0 ? void 0 : props.isActive) && !(props !== null && props !== void 0 && props.disabled)), props === null || props === void 0 ? void 0 : props.className),
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
      stroke: "black",
      strokeOpacity: "0.9",
      strokeWidth: "1.3"
    }));
  }

  function ownKeys$2i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2i(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave", "size", "prefixIcon"];
  var DEFAULT_KEYS$1 = {
    label: "label",
    value: "value"
  };
  function getInputValue(value, keys) {
    var iKeys = keys || DEFAULT_KEYS$1;
    return isObject(value) ? value[iKeys.label] : value;
  }
  function useSingle(props) {
    var value = props.value,
      keys = props.keys,
      loading = props.loading;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var inputRef = React.useRef(null);
    var _useControlled = useControlled(props, "inputValue", props.onInputChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      inputValue = _useControlled2[0],
      setInputValue = _useControlled2[1];
    var commonInputProps = _objectSpread$2h(_objectSpread$2h({}, pick$1(props, COMMON_PROPERTIES)), {}, {
      suffixIcon: loading ? /* @__PURE__ */React__default["default"].createElement(Loading, {
        loading: true,
        size: "small"
      }) : props.suffixIcon
    });
    var onInnerClear = function onInnerClear(context) {
      var _context$e, _props$onClear;
      context === null || context === void 0 || (_context$e = context.e) === null || _context$e === void 0 || _context$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, context);
      setInputValue("", {
        trigger: "clear"
      });
    };
    var onInnerInputChange = function onInnerInputChange(value2, context) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$2h(_objectSpread$2h({}, context), {}, {
          trigger: "input"
        }));
      }
    };
    var handleEmptyPanelBlur = function handleEmptyPanelBlur(value2, _ref) {
      var _props$onBlur;
      var e = _ref.e;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, value2, {
        e: e,
        inputValue: value2
      });
    };
    var renderSelectSingle = function renderSelectSingle(popupVisible) {
      var _props$inputProps;
      var singleValueDisplay = !props.multiple ? props.valueDisplay : null;
      var displayedValue = popupVisible && props.allowInput ? inputValue : getInputValue(value, keys);
      return /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$2h(_objectSpread$2h(_objectSpread$2h({
        ref: inputRef
      }, commonInputProps), {}, {
        autoWidth: props.autoWidth,
        allowInput: props.allowInput,
        placeholder: singleValueDisplay ? "" : props.placeholder,
        value: singleValueDisplay ? " " : displayedValue,
        label: (props.label || singleValueDisplay) && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props.label, singleValueDisplay),
        onChange: onInnerInputChange,
        onClear: onInnerClear,
        onFocus: function onFocus(val, context) {
          var _props$onFocus;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, value, _objectSpread$2h(_objectSpread$2h({}, context), {}, {
            inputValue: val
          }));
        },
        onEnter: function onEnter(val, context) {
          var _props$onEnter;
          (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, value, _objectSpread$2h(_objectSpread$2h({}, context), {}, {
            inputValue: val
          }));
        },
        onBlur: !props.panel ? handleEmptyPanelBlur : null
      }, props.inputProps), {}, {
        inputClass: classNames$1((_props$inputProps = props.inputProps) === null || _props$inputProps === void 0 ? void 0 : _props$inputProps.className, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-input--focused"), popupVisible), "".concat(classPrefix, "-is-focused"), popupVisible))
      }));
    };
    return {
      inputRef: inputRef,
      commonInputProps: commonInputProps,
      singleInputValue: inputValue,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  var useInsertionEffect = typeof window !== "undefined" ? React__default["default"].useInsertionEffect || React__default["default"].useLayoutEffect : noop;
  function useEventCallbackShouldNotBeInvokedBeforeMount() {
    throw new Error("INVALID_USEEVENTCALLBACK_INVOCATION: the callback from useEventCallback cannot be invoked before the component has mounted.");
  }
  function useEventCallback(callback) {
    var latestRef = React__default["default"].useRef(useEventCallbackShouldNotBeInvokedBeforeMount);
    useInsertionEffect(function () {
      latestRef.current = callback;
    }, [callback]);
    var stableRef = React__default["default"].useRef(null);
    if (!stableRef.current) {
      stableRef.current = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return latestRef.current.apply(this, args);
      };
    }
    return stableRef.current;
  }

  function useDragSorter(props) {
    var sortOnDraggable = props.sortOnDraggable,
      onDragSort = props.onDragSort,
      onDragOverCheck = props.onDragOverCheck;
    var _useState = React.useState(-1),
      _useState2 = _slicedToArray$1(_useState, 2),
      draggingIndex = _useState2[0],
      setDraggingIndex = _useState2[1];
    var _useState3 = React.useState(null),
      _useState4 = _slicedToArray$1(_useState3, 2),
      dragStartData = _useState4[0],
      setDragStartData = _useState4[1];
    var _useState5 = React.useState(null),
      _useState6 = _slicedToArray$1(_useState5, 2);
      _useState6[0];
      var setIsDropped = _useState6[1];
    var _useState7 = React.useState({
        nodeX: 0,
        nodeWidth: 0,
        mouseX: 0
      }),
      _useState8 = _slicedToArray$1(_useState7, 2),
      startInfo = _useState8[0],
      setStartInfo = _useState8[1];
    var onDragSortEvent = useEventCallback(onDragSort);
    var _onDragOver = React.useCallback(function (e, index, record) {
      var _e$target;
      e.preventDefault();
      if (draggingIndex === index || draggingIndex === -1) return;
      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp && !(onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp.test((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.className))) {
        return;
      }
      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.x) {
        if (!startInfo.nodeWidth) return;
        var _e$target$getBounding = e.target.getBoundingClientRect(),
          x = _e$target$getBounding.x,
          width = _e$target$getBounding.width;
        var targetNodeMiddleX = x + width / 2;
        var clientX = e.clientX || 0;
        var draggingNodeLeft = clientX - (startInfo.mouseX - startInfo.nodeX);
        var draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;
        var overlap = false;
        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {
          overlap = draggingNodeLeft < targetNodeMiddleX;
        } else {
          overlap = draggingNodeRight > targetNodeMiddleX;
        }
        if (!overlap) return;
      }
      onDragSortEvent({
        currentIndex: draggingIndex,
        current: dragStartData,
        target: record,
        targetIndex: index
      });
      setDraggingIndex(index);
    }, [draggingIndex, onDragOverCheck === null || onDragOverCheck === void 0 ? void 0 : onDragOverCheck.targetClassNameRegExp, onDragOverCheck === null || onDragOverCheck === void 0 ? void 0 : onDragOverCheck.x, dragStartData, startInfo.nodeWidth, startInfo.mouseX, startInfo.nodeX, onDragSortEvent]);
    if (!sortOnDraggable) {
      return {};
    }
    function _onDragStart(e, index, record) {
      setDraggingIndex(index);
      setDragStartData(record);
      if (onDragOverCheck) {
        var _e$target$getBounding2 = e.target.getBoundingClientRect(),
          x = _e$target$getBounding2.x,
          width = _e$target$getBounding2.width;
        setStartInfo({
          nodeX: x,
          nodeWidth: width,
          mouseX: e.clientX || 0
        });
      }
    }
    function _onDrop() {
      setIsDropped(true);
    }
    function _onDragEnd() {
      setIsDropped(false);
      setDraggingIndex(-1);
      setDragStartData(null);
    }
    function getDragProps(index, record) {
      if (sortOnDraggable) {
        return {
          draggable: true,
          onDragStart: function onDragStart(e) {
            _onDragStart(e, index, record);
          },
          onDragOver: function onDragOver(e) {
            _onDragOver(e, index, record);
          },
          onDrop: function onDrop() {
            _onDrop();
          },
          onDragEnd: function onDragEnd() {
            _onDragEnd();
          }
        };
      }
      return {};
    }
    return {
      onDragStart: _onDragStart,
      onDragOver: _onDragOver,
      onDrop: _onDrop,
      onDragEnd: _onDragEnd,
      getDragProps: getDragProps,
      dragging: draggingIndex !== -1
    };
  }

  var tagInputDefaultProps = {
    autoWidth: false,
    borderless: false,
    clearable: false,
    dragSort: false,
    excessTagsDisplayType: "break-line",
    defaultInputValue: "",
    minCollapsedNum: 0,
    placeholder: void 0,
    readonly: false,
    size: "medium",
    defaultValue: []
  };

  function useHover(props) {
    var readonly = props.readonly,
      disabled = props.disabled,
      onMouseenter = props.onMouseenter,
      onMouseleave = props.onMouseleave;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isHover = _useState2[0],
      setIsHover = _useState2[1];
    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      setIsHover(true);
      onMouseenter === null || onMouseenter === void 0 || onMouseenter(context);
    };
    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      setIsHover(false);
      onMouseleave === null || onMouseleave === void 0 || onMouseleave(context);
    };
    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  // This file is autogenerated. It's used to publish ESM to npm.
  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
  }

  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License

  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
      return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) this._r = Math.round(this._r);
    if (this._g < 1) this._g = Math.round(this._g);
    if (this._b < 1) this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      //http://www.w3.org/TR/AERT#color-contrast
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function getLuminance() {
      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360),
        s = Math.round(hsv.s * 100),
        v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360),
        s = Math.round(hsl.s * 100),
        l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function clone() {
      return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function lighten() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
      return this._applyCombination(polyad, [3]);
    },
    tetrad: function tetrad() {
      return this._applyCombination(polyad, [4]);
    }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function (color, opts) {
    if (_typeof$1(color) == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (_typeof$1(color) == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a
    };
  }

  // Conversion Functions
  // --------------------

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }

  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      l = (max + min) / 2;
    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      l: l
    };
  }

  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      v: v
    };
  }

  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h),
      f = h - i,
      p = v * (1 - s),
      q = v * (1 - f * s),
      t = v * (1 - (1 - f) * s),
      mod = i % 6,
      r = [v, q, p, p, t, v][mod],
      g = [t, v, v, q, p, p][mod],
      b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }

  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };

  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [tinycolor(color)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
      s = hsv.s,
      v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };

  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };

  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level: level,
      size: size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };

  // Big List of Colors
  // ------------------
  // <https://www.w3.org/TR/css-color-4/#named-colors>
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };

  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);

  // Utilities
  // ---------

  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
    if (isOnePointZero(n)) n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();

  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }

  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        a: convertHexToDecimal(match[4] + "" + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level: level,
      size: size
    };
  }

  var tagDefaultProps = {
    closable: false,
    disabled: false,
    icon: void 0,
    shape: "square",
    size: "medium",
    theme: "default",
    variant: "dark"
  };
  var checkTagDefaultProps = {
    disabled: false,
    size: "medium"
  };
  var checkTagGroupDefaultProps = {
    multiple: false,
    defaultValue: []
  };

  var _excluded$E = ["theme", "size", "shape", "variant", "closable", "maxWidth", "icon", "content", "onClick", "onClose", "className", "style", "disabled", "children", "color", "title"];
  function ownKeys$2h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2h(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TagFunction = function TagFunction(originalProps, ref) {
    var props = useDefaultProps(originalProps, tagDefaultProps);
    var theme = props.theme,
      size = props.size,
      shape = props.shape,
      variant = props.variant,
      closable = props.closable,
      maxWidth = props.maxWidth,
      icon = props.icon,
      content = props.content,
      _props$onClick = props.onClick,
      _onClick = _props$onClick === void 0 ? noop : _props$onClick,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      className = props.className,
      style = props.style,
      disabled = props.disabled,
      children = props.children,
      color = props.color,
      titleAttr = props.title,
      otherTagProps = _objectWithoutProperties$2(props, _excluded$E);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon;
    var tagClassPrefix = "".concat(classPrefix, "-tag");
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s")
    };
    var tagClassNames = classNames$1(tagClassPrefix, "".concat(tagClassPrefix, "--").concat(theme), "".concat(tagClassPrefix, "--").concat(variant), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(tagClassPrefix, "--").concat(shape), shape !== "square"), "".concat(tagClassPrefix, "--ellipsis"), !!maxWidth), "".concat(tagClassPrefix, "--disabled"), disabled), sizeMap[size], className);
    var deleteIcon = /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      onClick: function onClick(e) {
        if (disabled) return;
        onClose({
          e: e
        });
      },
      className: "".concat(tagClassPrefix, "__icon-close")
    });
    var title = React.useMemo(function () {
      if (Reflect.has(props, "title")) return titleAttr;
      if (children && typeof children === "string") return children;
      if (content && typeof content === "string") return content;
    }, [children, content, props, titleAttr]);
    var titleAttribute = title ? {
      title: title
    } : void 0;
    var getTagStyle = React.useMemo(function () {
      if (!color) return style;
      var luminance = tinycolor(color).getLuminance();
      var calculatedStyle = {};
      calculatedStyle.color = luminance > 0.5 ? "black" : "white";
      if (variant === "outline" || variant === "light-outline") {
        calculatedStyle.borderColor = color;
      }
      if (variant !== "outline") {
        var getLightestShade = function getLightestShade() {
          var _tinycolor$toRgb = tinycolor(color).toRgb(),
            r = _tinycolor$toRgb.r,
            g = _tinycolor$toRgb.g,
            b = _tinycolor$toRgb.b;
          return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", 0.1)");
        };
        calculatedStyle.backgroundColor = variant === "dark" ? color : getLightestShade();
      }
      if (variant !== "dark") {
        calculatedStyle.color = color;
      }
      return _objectSpread$2g(_objectSpread$2g({}, calculatedStyle), style);
    }, [color, variant, style]);
    var getTextStyle = React.useMemo(function () {
      if (!maxWidth) return {};
      return {
        maxWidth: isNaN(Number(maxWidth)) ? String(maxWidth) : "".concat(maxWidth, "px")
      };
    }, [maxWidth]);
    var tag = /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$2g({
      ref: ref,
      className: tagClassNames,
      onClick: function onClick(e) {
        if (disabled) return;
        _onClick({
          e: e
        });
      },
      style: getTagStyle
    }, otherTagProps), /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, icon, /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$2g({
      className: maxWidth ? "".concat(tagClassPrefix, "--text") : void 0,
      style: getTextStyle
    }, titleAttribute), children !== null && children !== void 0 ? children : content), closable && !disabled && deleteIcon));
    return tag;
  };
  var Tag$1 = /*#__PURE__*/React.forwardRef(TagFunction);
  Tag$1.displayName = "Tag";

  var _excluded$D = ["value", "content", "onClick", "disabled", "children", "size", "checkedProps", "uncheckedProps", "onChange", "className"];
  function ownKeys$2g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2g(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CheckTag$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, checkTagDefaultProps);
    var value = props.value,
      content = props.content,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? noop : _props$onClick,
      disabled = props.disabled,
      children = props.children,
      size = props.size,
      checkedProps = props.checkedProps,
      uncheckedProps = props.uncheckedProps,
      onChange = props.onChange,
      className = props.className,
      tagOtherProps = _objectWithoutProperties$2(props, _excluded$D);
    var _useControlled = useControlled(props, "checked", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerChecked = _useControlled2[0],
      setInnerChecked = _useControlled2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var tagClassPrefix = "".concat(classPrefix, "-tag");
    var tagClass = React.useMemo(function () {
      return ["".concat(tagClassPrefix), "".concat(tagClassPrefix, "--check"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(tagClassPrefix, "--checked"), innerChecked), "".concat(tagClassPrefix, "--disabled"), disabled), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-l"), size === "large"), className];
    }, [innerChecked, disabled, classPrefix, tagClassPrefix, size, className]);
    var checkTagProps = React.useMemo(function () {
      var tmpCheckedProps = _objectSpread$2f({
        theme: "primary"
      }, checkedProps);
      var tmpUncheckedProps = _objectSpread$2f({}, uncheckedProps);
      return innerChecked ? tmpCheckedProps : tmpUncheckedProps;
    }, [innerChecked, checkedProps, uncheckedProps]);
    var handleClick = function handleClick(_ref2) {
      var e = _ref2.e;
      if (!disabled) {
        onClick === null || onClick === void 0 || onClick({
          e: e
        });
        setInnerChecked(!innerChecked, {
          e: e,
          value: value
        });
      }
    };
    var keyboardEventListener = function keyboardEventListener(e) {
      var _e$key;
      var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());
      var isCheckedCode = SPACE_REG.test(code) || ENTER_REG.test(code);
      if (isCheckedCode) {
        e.preventDefault();
        setInnerChecked(!innerChecked, {
          e: e,
          value: value
        });
      }
    };
    var onCheckboxFocus = function onCheckboxFocus(e) {
      e.currentTarget.addEventListener("keydown", keyboardEventListener);
    };
    var onCheckboxBlur = function onCheckboxBlur(e) {
      e.currentTarget.removeEventListener("keydown", keyboardEventListener);
    };
    return /* @__PURE__ */React__default["default"].createElement(Tag$1, _objectSpread$2f(_objectSpread$2f({
      ref: ref,
      className: classNames$1(tagClass),
      disabled: props.disabled,
      tabIndex: props.disabled ? void 0 : 0,
      onFocus: onCheckboxFocus,
      onBlur: onCheckboxBlur
    }, checkTagProps), {}, {
      onClick: handleClick
    }, tagOtherProps), content || children);
  });
  CheckTag$1.displayName = "CheckTag";

  var CheckTagGroup$1 = function CheckTagGroup(originalProps) {
    var props = useDefaultProps(originalProps, checkTagGroupDefaultProps);
    var options = props.options,
      onChange = props.onChange;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var componentName = "".concat(classPrefix, "-check-tag-group");
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerValue = _useControlled2[0],
      setInnerValue = _useControlled2[1];
    var onCheckTagChange = function onCheckTagChange(checked, ctx) {
      var value = ctx.value;
      if (checked) {
        if (props.multiple) {
          setInnerValue(innerValue.concat(value), {
            e: ctx.e,
            type: "check",
            value: value
          });
        } else {
          setInnerValue([value], {
            e: ctx.e,
            type: "check",
            value: value
          });
        }
      } else {
        var newValue = [];
        if (props.multiple) {
          newValue = innerValue.filter(function (t) {
            return t !== value;
          });
        }
        setInnerValue(newValue, {
          e: ctx.e,
          type: "uncheck",
          value: value
        });
      }
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: componentName
    }, options === null || options === void 0 ? void 0 : options.map(function (option) {
      var _ref, _option$content;
      return /* @__PURE__ */React__default["default"].createElement(CheckTag$1, {
        key: option.value,
        value: option.value,
        "data-value": option.value,
        checkedProps: props.checkedProps,
        uncheckedProps: props.uncheckedProps,
        checked: innerValue.includes(option.value),
        onChange: onCheckTagChange,
        disabled: option.disabled,
        size: option.size
      }, (_ref = (_option$content = option.content) !== null && _option$content !== void 0 ? _option$content : option.children) !== null && _ref !== void 0 ? _ref : option.label);
    }));
  };
  CheckTagGroup$1.displayName = "CheckTagGroup";

  var Tag = forwardRefWithStatics(TagFunction, {
    CheckTag: CheckTag$1,
    CheckTagGroup: CheckTagGroup$1
  });
  Tag.displayName = "Tag";
  var CheckTag = CheckTag$1;
  var CheckTagGroup = CheckTagGroup$1;

  function ownKeys$2f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2f(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTagList(props) {
    var _useConfig = useConfig$2(),
      prefix = _useConfig.classPrefix;
    var onRemove = props.onRemove,
      max = props.max,
      minCollapsedNum = props.minCollapsedNum,
      size = props.size,
      disabled = props.disabled,
      readonly = props.readonly,
      tagProps = props.tagProps,
      tag = props.tag,
      collapsedItems = props.collapsedItems,
      getDragProps = props.getDragProps;
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tagValue = _useControlled2[0],
      setTagValue = _useControlled2[1];
    var _useState = React.useState(),
      _useState2 = _slicedToArray$1(_useState, 2);
      _useState2[0];
      var setOldInputValue = _useState2[1];
    var _onClose = function onClose(p) {
      var arr = _toConsumableArray(tagValue);
      var _arr$splice = arr.splice(p.index, 1),
        _arr$splice2 = _slicedToArray$1(_arr$splice, 1),
        item = _arr$splice2[0];
      setTagValue(arr, _objectSpread$2e(_objectSpread$2e({
        trigger: "tag-remove"
      }, p), {}, {
        item: item
      }));
      onRemove === null || onRemove === void 0 || onRemove(_objectSpread$2e(_objectSpread$2e({}, p), {}, {
        item: item,
        trigger: "tag-remove",
        value: arr
      }));
    };
    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };
    var onInnerEnter = function onInnerEnter(value, context) {
      var _props$onEnter;
      var valueStr = value ? String(value).trim() : "";
      var newValue = tagValue;
      var isLimitExceeded = max && (tagValue === null || tagValue === void 0 ? void 0 : tagValue.length) >= max;
      if (valueStr && !isLimitExceeded) {
        newValue = tagValue instanceof Array ? tagValue.concat(String(valueStr)) : [valueStr];
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }
      props === null || props === void 0 || (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, _objectSpread$2e(_objectSpread$2e({}, context), {}, {
        inputValue: value
      }));
    };
    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value) {
      if (!tagValue || !tagValue.length) return;
      setOldInputValue(value);
    };
    var onInputBackspaceKeyDown = function onInputBackspaceKeyDown(value, context) {
      var e = context.e;
      if (!tagValue || !tagValue.length || readonly) return;
      if (!value && ["Backspace", "NumpadDelete"].includes(e.key)) {
        var index = tagValue.length - 1;
        var item = tagValue[index];
        var trigger = "backspace";
        var newValue = tagValue.slice(0, -1);
        setTagValue(newValue, {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        onRemove === null || onRemove === void 0 || onRemove({
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: newValue
        });
      }
    };
    var renderLabel = function renderLabel(_ref) {
      var displayNode = _ref.displayNode,
        label = _ref.label;
      var newList = minCollapsedNum ? tagValue.slice(0, minCollapsedNum) : tagValue;
      var list = displayNode ? [/* @__PURE__ */React__default["default"].createElement(React.Fragment, {
        key: "display-node"
      }, displayNode)] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var tagContent = isFunction$1(tag) ? tag({
          value: item
        }) : tag;
        return /* @__PURE__ */React__default["default"].createElement(Tag, _objectSpread$2e(_objectSpread$2e({
          key: index,
          size: size,
          disabled: disabled,
          onClose: function onClose(context) {
            return _onClose({
              e: context.e,
              index: index
            });
          },
          closable: !readonly && !disabled
        }, getDragProps === null || getDragProps === void 0 ? void 0 : getDragProps(index, item)), tagProps), tagContent !== null && tagContent !== void 0 ? tagContent : item);
      });
      if (label) {
        list === null || list === void 0 || list.unshift(/* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(prefix, "-tag-input__prefix"),
          key: "label"
        }, label));
      }
      if (newList.length !== tagValue.length) {
        var len = tagValue.length - newList.length;
        var options = Array.isArray(props === null || props === void 0 ? void 0 : props.options) ? props.options : tagValue;
        var params = {
          value: tagValue,
          count: tagValue.length - minCollapsedNum,
          collapsedTags: tagValue.slice(minCollapsedNum, tagValue.length),
          collapsedSelectedItems: options.slice(minCollapsedNum, tagValue.length),
          onClose: _onClose
        };
        var more = isFunction$1(collapsedItems) ? collapsedItems(params) : collapsedItems;
        list.push(/* @__PURE__ */React__default["default"].createElement(React.Fragment, {
          key: "more"
        }, more !== null && more !== void 0 ? more : /* @__PURE__ */React__default["default"].createElement(Tag, _objectSpread$2e({
          size: size
        }, tagProps), "+", len)));
      }
      return list;
    };
    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: _onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyDown: onInputBackspaceKeyDown,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel
    };
  }

  var mouseEnterTimer = null;
  function useTagScroll(props) {
    var tagInputRef = React.useRef(null);
    var _props$excessTagsDisp = props.excessTagsDisplayType,
      excessTagsDisplayType = _props$excessTagsDisp === void 0 ? "scroll" : _props$excessTagsDisp,
      readonly = props.readonly,
      disabled = props.disabled;
    var _useState = React.useState(0),
      _useState2 = _slicedToArray$1(_useState, 2),
      scrollDistance = _useState2[0],
      setScrollDistance = _useState2[1];
    var _useState3 = React.useState(),
      _useState4 = _slicedToArray$1(_useState3, 2),
      scrollElement = _useState4[0],
      setScrollElement = _useState4[1];
    var updateScrollElement = function updateScrollElement(element) {
      var scrollElement2 = element.children[0];
      setScrollElement(scrollElement2);
    };
    var updateScrollDistance = function updateScrollDistance() {
      if (!scrollElement) return;
      setScrollDistance(scrollElement.scrollWidth - scrollElement.clientWidth);
    };
    var scrollTo = function scrollTo(distance) {
      if (isFunction$1(scrollElement === null || scrollElement === void 0 ? void 0 : scrollElement.scroll)) {
        scrollElement.scroll({
          left: distance,
          behavior: "smooth"
        });
      }
    };
    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance);
    };
    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };
    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly || disabled) return;
      if (!scrollElement) return;
      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.scrollLeft + 120, scrollDistance);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.scrollLeft - 120, 0);
        scrollTo(_distance);
      }
    };
    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType !== "scroll") return;
      mouseEnterTimer = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer);
      }, 100);
    };
    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType !== "scroll") return;
      scrollTo(0);
      clearTimeout(mouseEnterTimer);
    };
    var clearScroll = function clearScroll() {
      clearTimeout(mouseEnterTimer);
    };
    var initScroll = function initScroll(element) {
      if (!element) return;
      updateScrollElement(element);
    };
    React.useEffect(function () {
      var _tagInputRef$current;
      initScroll(tagInputRef === null || tagInputRef === void 0 || (_tagInputRef$current = tagInputRef.current) === null || _tagInputRef$current === void 0 ? void 0 : _tagInputRef$current.currentElement);
      return clearScroll;
    }, []);
    return {
      initScroll: initScroll,
      clearScroll: clearScroll,
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave
    };
  }

  function ownKeys$2e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2e(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TagInput$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, tagInputDefaultProps);
    var _useConfig = useConfig$2(),
      prefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        CloseCircleFilledIcon: TdCloseCircleFilledIcon
      }),
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
    var excessTagsDisplayType = props.excessTagsDisplayType,
      autoWidth = props.autoWidth,
      borderless = props.borderless,
      readonly = props.readonly,
      disabled = props.disabled,
      clearable = props.clearable,
      placeholder = props.placeholder,
      valueDisplay = props.valueDisplay,
      label = props.label,
      inputProps = props.inputProps,
      size = props.size,
      tips = props.tips,
      status = props.status,
      suffixIcon = props.suffixIcon,
      suffix = props.suffix,
      prefixIcon = props.prefixIcon,
      maxRows = props.maxRows,
      onClick = props.onClick,
      onPaste = props.onPaste,
      _onFocus = props.onFocus,
      _onBlur = props.onBlur;
    var _useControlled = useControlled(props, "inputValue", props.onInputChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tInputValue = _useControlled2[0],
      setTInputValue = _useControlled2[1];
    var _useHover = useHover(props),
      isHover = _useHover.isHover,
      addHover = _useHover.addHover,
      cancelHover = _useHover.cancelHover;
    var _useDragSorter = useDragSorter(_objectSpread$2d(_objectSpread$2d({}, props), {}, {
        sortOnDraggable: props.dragSort,
        onDragOverCheck: {
          x: true,
          targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
        }
      })),
      getDragProps = _useDragSorter.getDragProps;
    var isCompositionRef = React.useRef(false);
    var _useTagScroll = useTagScroll(props),
      scrollToRight = _useTagScroll.scrollToRight,
      onWheel = _useTagScroll.onWheel,
      scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
      scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
      tagInputRef = _useTagScroll.tagInputRef;
    var _useTagList = useTagList(_objectSpread$2d(_objectSpread$2d({}, props), {}, {
        getDragProps: getDragProps
      })),
      tagValue = _useTagList.tagValue,
      _onClose = _useTagList.onClose,
      onInnerEnter = _useTagList.onInnerEnter,
      onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
      clearAll = _useTagList.clearAll,
      renderLabel = _useTagList.renderLabel,
      onInputBackspaceKeyDown = _useTagList.onInputBackspaceKeyDown;
    var NAME_CLASS = "".concat(prefix, "-tag-input");
    var WITH_SUFFIX_ICON_CLASS = "".concat(prefix, "-tag-input__with-suffix-icon");
    var CLEAR_CLASS = "".concat(prefix, "-tag-input__suffix-clear");
    var BREAK_LINE_CLASS = "".concat(prefix, "-tag-input--break-line");
    var tagInputPlaceholder = !(tagValue !== null && tagValue !== void 0 && tagValue.length) ? placeholder : "";
    var showClearIcon = Boolean(!readonly && !disabled && clearable && isHover && (tagValue === null || tagValue === void 0 ? void 0 : tagValue.length));
    React.useImperativeHandle(ref, function () {
      return _objectSpread$2d({}, tagInputRef.current || {});
    });
    var onInputCompositionstart = function onInputCompositionstart(value, context) {
      var _inputProps$onComposi;
      isCompositionRef.current = true;
      inputProps === null || inputProps === void 0 || (_inputProps$onComposi = inputProps.onCompositionstart) === null || _inputProps$onComposi === void 0 || _inputProps$onComposi.call(inputProps, value, context);
    };
    var onInputCompositionend = function onInputCompositionend(value, context) {
      var _inputProps$onComposi2;
      isCompositionRef.current = false;
      inputProps === null || inputProps === void 0 || (_inputProps$onComposi2 = inputProps.onCompositionend) === null || _inputProps$onComposi2 === void 0 || _inputProps$onComposi2.call(inputProps, value, context);
    };
    var onInputEnter = function onInputEnter(value, context) {
      setTInputValue("", {
        e: context.e,
        trigger: "enter"
      });
      !isCompositionRef.current && onInnerEnter(value, context);
      scrollToRight();
    };
    var onInnerClick = function onInnerClick(context) {
      if (!props.disabled && !props.readonly) {
        var _tagInputRef$current, _tagInputRef$current$;
        (_tagInputRef$current = tagInputRef.current) === null || _tagInputRef$current === void 0 || (_tagInputRef$current = _tagInputRef$current.inputElement) === null || _tagInputRef$current === void 0 || (_tagInputRef$current$ = _tagInputRef$current.focus) === null || _tagInputRef$current$ === void 0 || _tagInputRef$current$.call(_tagInputRef$current);
      }
      onClick === null || onClick === void 0 || onClick(context);
    };
    var onClearClick = function onClearClick(e) {
      var _props$onClear;
      clearAll({
        e: e
      });
      setTInputValue("", {
        e: e,
        trigger: "clear"
      });
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, {
        e: e
      });
    };
    var suffixIconNode = showClearIcon ? /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
      className: CLEAR_CLASS,
      onClick: onClearClick
    }) : suffixIcon;
    var displayNode = React.useMemo(function () {
      return isFunction$1(valueDisplay) ? valueDisplay({
        value: tagValue,
        onClose: function onClose(index) {
          return _onClose({
            index: index
          });
        }
      }) : valueDisplay;
    }, [valueDisplay]);
    var isEmpty = !(Array.isArray(tagValue) && tagValue.length);
    var classes = [NAME_CLASS, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, BREAK_LINE_CLASS, excessTagsDisplayType === "break-line"), WITH_SUFFIX_ICON_CLASS, !!suffixIconNode), "".concat(prefix, "-is-empty"), isEmpty), "".concat(prefix, "-tag-input--with-tag"), !isEmpty), "".concat(prefix, "-tag-input--max-rows"), excessTagsDisplayType === "break-line" && maxRows), "".concat(prefix, "-tag-input--drag-sort"), props.dragSort && !disabled && !readonly), props.className];
    var maxRowsStyle = maxRows ? {
      "--max-rows": maxRows,
      "--tag-input-size": size
    } : {};
    return /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$2d({
      ref: tagInputRef,
      value: tInputValue,
      onChange: function onChange(val, context) {
        setTInputValue(val, _objectSpread$2d(_objectSpread$2d({}, context), {}, {
          trigger: "input"
        }));
      },
      autoWidth: true,
      onWheel: onWheel,
      size: size,
      borderless: borderless,
      readonly: readonly,
      disabled: disabled,
      label: renderLabel({
        displayNode: displayNode,
        label: label
      }),
      className: classNames$1(classes),
      style: _objectSpread$2d(_objectSpread$2d({}, props.style), maxRowsStyle),
      tips: tips,
      status: status,
      placeholder: tagInputPlaceholder,
      suffix: suffix,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIconNode,
      showInput: !(inputProps !== null && inputProps !== void 0 && inputProps.readonly) || !tagValue || !(tagValue !== null && tagValue !== void 0 && tagValue.length),
      keepWrapperWidth: !autoWidth,
      onPaste: onPaste,
      onClick: onInnerClick,
      onEnter: onInputEnter,
      onKeydown: onInputBackspaceKeyDown,
      onKeyup: onInputBackspaceKeyUp,
      onMouseenter: function onMouseenter(context) {
        addHover(context);
        scrollToRightOnEnter();
      },
      onMouseleave: function onMouseleave(context) {
        cancelHover(context);
        scrollToLeftOnLeave();
      },
      onFocus: function onFocus(inputValue, context) {
        _onFocus === null || _onFocus === void 0 || _onFocus(tagValue, {
          e: context.e,
          inputValue: inputValue
        });
      },
      onBlur: function onBlur(inputValue, context) {
        if (tInputValue) {
          setTInputValue("", {
            e: context.e,
            trigger: "blur"
          });
        }
        _onBlur === null || _onBlur === void 0 || _onBlur(tagValue, {
          e: context.e,
          inputValue: ""
        });
      },
      onCompositionstart: onInputCompositionstart,
      onCompositionend: onInputCompositionend
    }, inputProps));
  });
  TagInput$1.displayName = "TagInput";

  var TagInput = TagInput$1;

  function ownKeys$2d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2d(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_KEYS = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props) {
    var value = props.value;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var tagInputRef = React.useRef(null);
    var _useControlled = useControlled(props, "inputValue", props.onInputChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tInputValue = _useControlled2[0],
      setTInputValue = _useControlled2[1];
    var iKeys = _objectSpread$2c(_objectSpread$2c({}, DEFAULT_KEYS), props.keys);
    var getTags = function getTags() {
      if (!(value instanceof Array)) {
        if (["", null, void 0].includes(value)) return [];
        return isObject(value) ? [value[iKeys.label]] : [value];
      }
      return value.map(function (item) {
        return isObject(item) ? item[iKeys.label] : item;
      });
    };
    var tags = getTags();
    var tPlaceholder = !tags || !tags.length ? props.placeholder : "";
    var onTagInputChange = function onTagInputChange(val, context) {
      var _props$onTagChange;
      if (context.trigger === "tag-remove") {
        var _context$e;
        (_context$e = context.e) === null || _context$e === void 0 || _context$e.stopPropagation();
      }
      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 || _props$onTagChange.call(props, val, context);
    };
    var renderSelectMultiple = function renderSelectMultiple(p) {
      var _props$tagInputProps;
      return /* @__PURE__ */React__default["default"].createElement(TagInput, _objectSpread$2c(_objectSpread$2c(_objectSpread$2c({
        ref: tagInputRef
      }, p.commonInputProps), {}, {
        autoWidth: props.autoWidth,
        readonly: props.readonly,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        valueDisplay: props.valueDisplay,
        placeholder: tPlaceholder,
        options: props.options,
        value: tags,
        inputValue: p.popupVisible && p.allowInput ? tInputValue : "",
        onChange: onTagInputChange,
        onInputChange: function onInputChange(val, context) {
          if ((context === null || context === void 0 ? void 0 : context.trigger) === "enter" || (context === null || context === void 0 ? void 0 : context.trigger) === "blur") return;
          setTInputValue(val, {
            trigger: context.trigger,
            e: context.e
          });
        },
        tagProps: props.tagProps,
        onClear: p.onInnerClear,
        onFocus: function onFocus(val, context) {
          var _props$onFocus;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, props.value, _objectSpread$2c(_objectSpread$2c({}, context), {}, {
            tagInputValue: val
          }));
        },
        onBlur: !props.panel ? props.onBlur : null
      }, props.tagInputProps), {}, {
        inputProps: _objectSpread$2c(_objectSpread$2c({}, props.inputProps), {}, {
          readonly: !props.allowInput || props.readonly,
          inputClass: classNames$1((_props$tagInputProps = props.tagInputProps) === null || _props$tagInputProps === void 0 ? void 0 : _props$tagInputProps.className, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-input--focused"), p.popupVisible), "".concat(classPrefix, "-is-focused"), p.popupVisible))
        })
      }));
    };
    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      multipleInputValue: tInputValue,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$2c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2c(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var MAX_POPUP_WIDTH = 1e3;
  function useOverlayInnerStyle(props, extra) {
    var popupProps = props.popupProps,
      autoWidth = props.autoWidth,
      readonly = props.readonly,
      disabled = props.disabled,
      onPopupVisibleChange = props.onPopupVisibleChange,
      allowInput = props.allowInput;
    var _useControlled = useControlled(props, "popupVisible", onPopupVisibleChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerPopupVisible = _useControlled2[0],
      setInnerPopupVisible = _useControlled2[1];
    var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
      if (!triggerElement || !popupElement) return;
      var prevDisplay = popupElement.style.display;
      popupElement.style.display = "";
      var overlayScrollWidth = popupElement.offsetWidth - popupElement.scrollWidth;
      var width = popupElement.offsetWidth - overlayScrollWidth > triggerElement.offsetWidth ? popupElement.scrollWidth : triggerElement.offsetWidth - overlayScrollWidth;
      if (prevDisplay === "none") {
        popupElement.style.display = "none";
      }
      var otherOverlayInnerStyle = {};
      if (popupProps && _typeof$3(popupProps.overlayInnerStyle) === "object" && !popupProps.overlayInnerStyle.width) {
        otherOverlayInnerStyle = popupProps.overlayInnerStyle;
      }
      return _objectSpread$2b({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayInnerStyle);
    };
    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
      if (disabled || readonly) {
        return;
      }
      var newVisible = context.trigger === "trigger-element-click" && allowInput ? true : visible;
      if (props.popupVisible !== newVisible) {
        setInnerPopupVisible(newVisible, context);
        if (!newVisible) {
          var _extra$afterHidePopup;
          extra === null || extra === void 0 || (_extra$afterHidePopup = extra.afterHidePopup) === null || _extra$afterHidePopup === void 0 || _extra$afterHidePopup.call(extra, context);
        }
      }
    };
    var tOverlayInnerStyle = React.useMemo(function () {
      var result = {};
      var overlayInnerStyle = (popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle) || {};
      if (isFunction$1(overlayInnerStyle) || isObject(overlayInnerStyle) && overlayInnerStyle.width) {
        result = overlayInnerStyle;
      } else if (!autoWidth) {
        result = matchWidthFunc;
      }
      return result;
    }, [autoWidth, popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle]);
    return {
      tOverlayInnerStyle: tOverlayInnerStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  var selectInputDefaultProps = {
    allowInput: false,
    autoWidth: false,
    autofocus: false,
    borderless: false,
    clearable: false,
    loading: false,
    minCollapsedNum: 0,
    multiple: false,
    readonly: false,
    reserveKeyword: false,
    status: "default"
  };

  function ownKeys$2b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SelectInput$1 = /*#__PURE__*/React__default["default"].forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, selectInputDefaultProps);
    var selectInputRef = React.useRef(null);
    var selectInputWrapRef = React.useRef(null);
    var _useConfig = useConfig$2(),
      prefix = _useConfig.classPrefix;
    var multiple = props.multiple,
      value = props.value,
      popupVisible = props.popupVisible,
      popupProps = props.popupProps,
      borderless = props.borderless,
      disabled = props.disabled;
    var _useSingle = useSingle(props),
      commonInputProps = _useSingle.commonInputProps,
      inputRef = _useSingle.inputRef,
      singleInputValue = _useSingle.singleInputValue,
      onInnerClear = _useSingle.onInnerClear,
      renderSelectSingle = _useSingle.renderSelectSingle;
    var _useMultiple = useMultiple(props),
      tagInputRef = _useMultiple.tagInputRef,
      multipleInputValue = _useMultiple.multipleInputValue,
      renderSelectMultiple = _useMultiple.renderSelectMultiple;
    var _useOverlayInnerStyle = useOverlayInnerStyle(props, {
        afterHidePopup: onInnerBlur
      }),
      tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
      innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
      onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
    var popupClasses = classNames$1([props.className, "".concat(prefix, "-select-input"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefix, "-select-input--borderless"), borderless), "".concat(prefix, "-select-input--multiple"), multiple), "".concat(prefix, "-select-input--popup-visible"), popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible), "".concat(prefix, "-select-input--empty"), value instanceof Array ? !value.length : !value)]);
    React.useImperativeHandle(ref, function () {
      return _objectSpread$2a(_objectSpread$2a(_objectSpread$2a({}, selectInputRef.current || {}), inputRef.current || {}), tagInputRef.current || {});
    });
    var visibleProps = {
      visible: popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible
    };
    function onInnerBlur(ctx) {
      var _props$onBlur;
      var inputValue = props.multiple ? multipleInputValue : singleInputValue;
      var params = {
        e: ctx.e,
        inputValue: inputValue
      };
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, props.value, params);
    }
    var mainContent = /* @__PURE__ */React__default["default"].createElement("div", {
      className: popupClasses,
      style: props.style
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$2a(_objectSpread$2a(_objectSpread$2a({
      ref: selectInputRef,
      trigger: (popupProps === null || popupProps === void 0 ? void 0 : popupProps.trigger) || "click",
      placement: "bottom-left",
      content: props.panel,
      hideEmptyPopup: true,
      onVisibleChange: onInnerPopupVisibleChange,
      updateScrollTop: props.updateScrollTop
    }, visibleProps), popupProps), {}, {
      disabled: disabled,
      overlayInnerStyle: tOverlayInnerStyle
    }), multiple ? renderSelectMultiple({
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      popupVisible: visibleProps.visible,
      allowInput: props.allowInput
    }) : renderSelectSingle(visibleProps.visible)));
    if (!props.tips) {
      return mainContent;
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: selectInputWrapRef,
      className: "".concat(prefix, "-select-input__wrap")
    }, mainContent, props.tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefix, "-input__tips ").concat(prefix, "-input__tips--").concat(props.status || "normal")
    }, props.tips));
  });
  SelectInput$1.displayName = "SelectInput";

  var SelectInput = SelectInput$1;

  var selectDefaultProps = {
    autoWidth: false,
    autofocus: false,
    borderless: false,
    clearable: false,
    creatable: false,
    loading: false,
    max: 0,
    minCollapsedNum: 0,
    multiple: false,
    placeholder: void 0,
    readonly: false,
    reserveKeyword: false,
    showArrow: true,
    size: "medium",
    status: "default",
    valueType: "value"
  };
  var optionGroupDefaultProps = {
    divider: true
  };

  var OptionGroup = function OptionGroup(props) {
    var _useDefaultProps = useDefaultProps(props, optionGroupDefaultProps),
      children = _useDefaultProps.children,
      label = _useDefaultProps.label,
      divider = _useDefaultProps.divider;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-select-option-group"), _defineProperty$2({}, "".concat(classPrefix, "-select-option-group__divider"), divider))
    }, (label !== null && label !== void 0 ? label : false) && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select-option-group__header")
    }, label), children);
  };

  var componentType = "select";
  var Option$1 = function Option(props) {
    var propDisabled = props.disabled,
      propLabel = props.label,
      propTitle = props.title,
      selectedValue = props.selectedValue,
      checkAll = props.checkAll,
      multiple = props.multiple,
      size = props.size,
      max = props.max,
      keys = props.keys,
      value = props.value,
      onSelect = props.onSelect,
      children = props.children,
      content = props.content,
      restData = props.restData,
      style = props.style,
      className = props.className,
      isVirtual = props.isVirtual;
    var selected;
    var indeterminate;
    var label = propLabel || value;
    var disabled = propDisabled || multiple && Array.isArray(selectedValue) && max && selectedValue.length >= max;
    var titleContent = React.useMemo(function () {
      var controlledTitle = Reflect.has(props, "title");
      if (controlledTitle) return propTitle;
      if (typeof label === "string") return label;
      return null;
    }, [propTitle, label]);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      optionRef = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    React.useEffect(function () {
      if (isVirtual && optionRef) {
        var _props$onRowMounted;
        (_props$onRowMounted = props.onRowMounted) === null || _props$onRowMounted === void 0 || _props$onRowMounted.call(props, {
          ref: optionRef,
          data: props
        });
      }
    }, [isVirtual, optionRef]);
    useRipple(optionRef);
    if (!multiple) {
      selected = isNumber(selectedValue) || isString(selectedValue) ? value === selectedValue : value === get(selectedValue, (keys === null || keys === void 0 ? void 0 : keys.value) || "value");
    }
    if (multiple && Array.isArray(selectedValue)) {
      selected = selectedValue.some(function (item) {
        if (isNumber(item) || isString(item)) {
          return item === value;
        }
        return get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") === value;
      });
      if (props.checkAll) {
        selected = selectedValue.length === props.optionLength;
        indeterminate = selectedValue.length > 0 && !selected;
      }
    }
    var handleSelect = function handleSelect(event) {
      if (!disabled && !checkAll) {
        onSelect(value, {
          label: String(label),
          selected: selected,
          event: event,
          restData: restData
        });
      }
      if (checkAll) {
        var _props$onCheckAllChan;
        (_props$onCheckAllChan = props.onCheckAllChange) === null || _props$onCheckAllChan === void 0 || _props$onCheckAllChan.call(props, selected, event);
      }
    };
    var renderItem = function renderItem(children2) {
      if (multiple) {
        return /* @__PURE__ */React__default["default"].createElement("label", {
          className: classNames$1("".concat(classPrefix, "-checkbox"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-indeterminate"), indeterminate), "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-checked"), selected)),
          title: titleContent
        }, /* @__PURE__ */React__default["default"].createElement("input", {
          type: "checkbox",
          className: classNames$1("".concat(classPrefix, "-checkbox__former")),
          value: "",
          disabled: disabled && !selected,
          onClick: function onClick(e) {
            e.stopPropagation();
            e.nativeEvent.stopImmediatePropagation();
          }
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1("".concat(classPrefix, "-checkbox__input"))
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1("".concat(classPrefix, "-checkbox__label"))
        }, children2 || content || label));
      }
      return /* @__PURE__ */React__default["default"].createElement("span", {
        title: titleContent
      }, children2 || content || label);
    };
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1(className, "".concat(classPrefix, "-").concat(componentType, "-option"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-selected"), selected), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-l"), size === "large")),
      key: value,
      onClick: handleSelect,
      ref: setRefCurrent,
      style: style
    }, renderItem(children));
  };

  function ownKeys$2a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$29(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function setValueToOptionFormOptionDom(dom, valueToOption, keys) {
    var _dom$props = dom.props,
      value = _dom$props.value,
      label = _dom$props.label,
      children = _dom$props.children;
    valueToOption[value] = _objectSpread$29(_objectSpread$29({}, dom.props), {}, _defineProperty$2(_defineProperty$2({}, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", value), (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label || children || value));
  }
  var getValueToOption = function getValueToOption(children, options, keys) {
    var valueToOption = {};
    if (Array.isArray(options)) {
      options.forEach(function (option) {
        if (isSelectOptionGroup(option)) {
          var _option$children;
          (_option$children = option.children) === null || _option$children === void 0 || _option$children.forEach(function (child) {
            valueToOption[get(child, (keys === null || keys === void 0 ? void 0 : keys.value) || "value")] = _objectSpread$29(_objectSpread$29({}, child), {}, {
              value: get(child, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"),
              label: get(child, (keys === null || keys === void 0 ? void 0 : keys.label) || "label")
            });
          });
        } else {
          valueToOption[get(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value")] = _objectSpread$29(_objectSpread$29({}, option), {}, {
            value: get(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"),
            label: get(option, (keys === null || keys === void 0 ? void 0 : keys.label) || "label")
          });
        }
      });
      return valueToOption;
    }
    if (isPlainObject(children)) {
      if (children.type === Option$1) {
        setValueToOptionFormOptionDom(children, valueToOption, keys);
        return valueToOption;
      }
      if (children.type === OptionGroup) {
        var groupChildren = children.props.children;
        if (Array.isArray(groupChildren)) {
          groupChildren.forEach(function (item) {
            setValueToOptionFormOptionDom(item, valueToOption, keys);
          });
          return valueToOption;
        }
      }
    }
    if (Array.isArray(children)) {
      var _handlerElement = function handlerElement(item) {
        if (item.type === Option$1) {
          setValueToOptionFormOptionDom(item, valueToOption, keys);
        }
        if (item.type === OptionGroup) {
          var _groupChildren = item.props.children;
          if (Array.isArray(_groupChildren)) {
            _groupChildren.forEach(function (groupItem) {
              setValueToOptionFormOptionDom(groupItem, valueToOption, keys);
            });
          }
        }
        if (Array.isArray(item)) {
          item.forEach(function (child) {
            _handlerElement(child);
          });
        }
      };
      children.forEach(function (item) {
        return _handlerElement(item);
      });
    }
    return valueToOption;
  };
  var getSelectValueArr = function getSelectValueArr(values, activeValue, selected, valueType, keys, objVal) {
    values = Array.isArray(values) ? values : [];
    if (Array.isArray(values)) {
      var currentValues = _toConsumableArray(values);
      var isValueObj = valueType === "object";
      if (selected) {
        currentValues = currentValues.filter(function (item) {
          if (isValueObj) {
            if (isPlainObject(activeValue)) {
              return get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== get(activeValue, (keys === null || keys === void 0 ? void 0 : keys.value) || "value");
            }
            return get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== activeValue;
          }
          return item !== activeValue;
        });
      } else {
        var item = isValueObj ? objVal : activeValue;
        currentValues.push(item);
      }
      return currentValues;
    }
  };
  var getSelectedOptions = function getSelectedOptions(value, multiple, valueType, keys, valueToOption, selectedValue) {
    var isObjectType = valueType === "object";
    var currentSelectedOptions = [];
    var currentOption;
    var allSelectedValue;
    var tmpPropOptions = Object.values(valueToOption);
    if (multiple) {
      var _tmpPropOptions$filte, _currentSelectedOptio, _currentSelectedOptio2;
      currentSelectedOptions = isObjectType ? value : tmpPropOptions === null || tmpPropOptions === void 0 || (_tmpPropOptions$filte = tmpPropOptions.filter) === null || _tmpPropOptions$filte === void 0 ? void 0 : _tmpPropOptions$filte.call(tmpPropOptions, function (v) {
        var _value$includes;
        return (_value$includes = value.includes) === null || _value$includes === void 0 ? void 0 : _value$includes.call(value, v[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"]);
      });
      allSelectedValue = isObjectType ? currentSelectedOptions : (_currentSelectedOptio = currentSelectedOptions) === null || _currentSelectedOptio === void 0 ? void 0 : _currentSelectedOptio.map(function (v) {
        return v[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
      });
      currentOption = isObjectType ? value.find(function (v) {
        return v[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"] === selectedValue;
      }) : (_currentSelectedOptio2 = currentSelectedOptions) === null || _currentSelectedOptio2 === void 0 ? void 0 : _currentSelectedOptio2.find(function (option) {
        return option[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"] === selectedValue;
      });
    } else {
      var _tmpPropOptions$filte2, _currentSelectedOptio3;
      currentSelectedOptions = isObjectType ? [value] : (tmpPropOptions === null || tmpPropOptions === void 0 || (_tmpPropOptions$filte2 = tmpPropOptions.filter) === null || _tmpPropOptions$filte2 === void 0 ? void 0 : _tmpPropOptions$filte2.call(tmpPropOptions, function (v) {
        return value === v[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
      })) || [];
      allSelectedValue = currentSelectedOptions;
      currentOption = isObjectType ? value : (_currentSelectedOptio3 = currentSelectedOptions) === null || _currentSelectedOptio3 === void 0 ? void 0 : _currentSelectedOptio3.find(function (option) {
        return option[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"] === selectedValue;
      });
    }
    return {
      currentSelectedOptions: currentSelectedOptions,
      currentOption: currentOption,
      allSelectedValue: allSelectedValue
    };
  };

  function ownKeys$29(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$28(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$29(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$29(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function isSelectOptionGroup(option) {
    return !!option && "group" in option && "children" in option;
  }
  function UseOptions(keys, options, children, valueType, value, reserveKeyword) {
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      valueToOption = _useState2[0],
      setValueToOption = _useState2[1];
    var _useState3 = React.useState([]),
      _useState4 = _slicedToArray$1(_useState3, 2),
      currentOptions = _useState4[0],
      setCurrentOptions = _useState4[1];
    var _useState5 = React.useState([]),
      _useState6 = _slicedToArray$1(_useState5, 2),
      tmpPropOptions = _useState6[0],
      setTmpPropOptions = _useState6[1];
    var _useState7 = React.useState([]),
      _useState8 = _slicedToArray$1(_useState7, 2),
      selectedOptions = _useState8[0],
      setSelectedOptions = _useState8[1];
    React.useEffect(function () {
      var transformedOptions = options;
      var arrayChildren = React__default["default"].Children.toArray(children);
      var optionChildren = arrayChildren.filter(function (v) {
        return v.type === Option$1 || v.type === OptionGroup;
      });
      var isChildrenFilterable = arrayChildren.length > 0 && optionChildren.length === arrayChildren.length;
      if (reserveKeyword && currentOptions.length && isChildrenFilterable) return;
      if (isChildrenFilterable) {
        var _handlerOptionElement = function handlerOptionElement(v) {
          if (/*#__PURE__*/React__default["default"].isValidElement(v)) {
            if (v.type === OptionGroup) {
              var _v$props$children;
              return _objectSpread$28(_objectSpread$28({}, v.props), {}, {
                group: v.props.label,
                children: (_v$props$children = v.props.children) === null || _v$props$children === void 0 ? void 0 : _v$props$children.map(function (v2) {
                  return _handlerOptionElement(v2);
                })
              });
            }
            return _objectSpread$28(_objectSpread$28({}, v.props), {}, {
              label: v.props.label || v.props.children
            });
          }
          return {
            label: v
          };
        };
        transformedOptions = arrayChildren === null || arrayChildren === void 0 ? void 0 : arrayChildren.map(function (v) {
          return _handlerOptionElement(v);
        });
      }
      if (keys) {
        var _transformedOptions;
        transformedOptions = (_transformedOptions = transformedOptions) === null || _transformedOptions === void 0 ? void 0 : _transformedOptions.map(function (option) {
          return _objectSpread$28(_objectSpread$28({}, option), {}, {
            value: get(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"),
            label: get(option, (keys === null || keys === void 0 ? void 0 : keys.label) || "label")
          });
        });
      }
      setCurrentOptions(transformedOptions);
      setTmpPropOptions(transformedOptions);
      setValueToOption(getValueToOption(children, options, keys) || {});
    }, [options, keys, children, reserveKeyword]);
    React.useEffect(function () {
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";
      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";
      setSelectedOptions(function (oldSelectedOptions) {
        var createOptionFromValue = function createOptionFromValue(item) {
          if (valueType === "value") {
            return valueToOption[item] || oldSelectedOptions.find(function (option) {
              return get(option, valueKey) === item;
            }) || _defineProperty$2(_defineProperty$2({}, valueKey, item), labelKey, item);
          }
          if (_typeof$3(item) === "object" && item !== null) {
            return item;
          }
          return [];
        };
        if (Array.isArray(value)) {
          return value.map(createOptionFromValue);
        }
        if (value !== void 0 && value !== null) {
          var option = createOptionFromValue(value);
          return option ? [option] : [];
        }
        return [];
      });
    }, [value, keys, valueType, valueToOption, setSelectedOptions]);
    return {
      currentOptions: currentOptions,
      setCurrentOptions: setCurrentOptions,
      tmpPropOptions: tmpPropOptions,
      setTmpPropOptions: setTmpPropOptions,
      valueToOption: valueToOption,
      setValueToOption: setValueToOption,
      selectedOptions: selectedOptions,
      setSelectedOptions: setSelectedOptions
    };
  }

  var usePanelVirtualScroll = function usePanelVirtualScroll(_ref) {
    var popupContentRef = _ref.popupContentRef,
      scroll = _ref.scroll,
      options = _ref.options,
      size = _ref.size;
    var scrollThreshold = (scroll === null || scroll === void 0 ? void 0 : scroll.threshold) || 100;
    var scrollType = scroll === null || scroll === void 0 ? void 0 : scroll.type;
    var isVirtual = React.useMemo(function () {
      return scrollType === "virtual" && (options === null || options === void 0 ? void 0 : options.length) > scrollThreshold;
    }, [scrollType, scrollThreshold, options]);
    var scrollParams = React.useMemo(function () {
      var heightMap = {
        small: 20,
        medium: 28,
        large: 36
      };
      var rowHeight = heightMap[size] || 28;
      return {
        type: "virtual",
        isFixedRowHeight: (scroll === null || scroll === void 0 ? void 0 : scroll.isFixedRowHeight) || false,
        rowHeight: (scroll === null || scroll === void 0 ? void 0 : scroll.rowHeight) || rowHeight,
        bufferSize: (scroll === null || scroll === void 0 ? void 0 : scroll.bufferSize) || 20,
        threshold: scrollThreshold
      };
    }, [scroll, scrollThreshold, size]);
    var _useVirtualScroll = useVirtualScroll(popupContentRef, {
        data: options || [],
        scroll: scrollParams
      }),
      _useVirtualScroll$vis = _useVirtualScroll.visibleData,
      visibleData = _useVirtualScroll$vis === void 0 ? null : _useVirtualScroll$vis,
      _useVirtualScroll$han = _useVirtualScroll.handleScroll,
      handleVirtualScroll = _useVirtualScroll$han === void 0 ? null : _useVirtualScroll$han,
      _useVirtualScroll$scr = _useVirtualScroll.scrollHeight,
      scrollHeight = _useVirtualScroll$scr === void 0 ? null : _useVirtualScroll$scr,
      _useVirtualScroll$tra = _useVirtualScroll.translateY,
      translateY = _useVirtualScroll$tra === void 0 ? null : _useVirtualScroll$tra,
      _useVirtualScroll$han2 = _useVirtualScroll.handleRowMounted,
      handleRowMounted = _useVirtualScroll$han2 === void 0 ? null : _useVirtualScroll$han2;
    var lastScrollY = -1;
    var onInnerVirtualScroll = React.useCallback(function (e) {
      if (!isVirtual) {
        return;
      }
      var target = e.target;
      var top = target.scrollTop;
      if (Math.abs(lastScrollY - top) > 5) {
        handleVirtualScroll();
        lastScrollY = top;
      } else {
        lastScrollY = -1;
      }
    }, []);
    React.useEffect(function () {
      var popupContentDom = popupContentRef === null || popupContentRef === void 0 ? void 0 : popupContentRef.current;
      if (isVirtual) {
        var _popupContentDom$addE;
        popupContentDom === null || popupContentDom === void 0 || (_popupContentDom$addE = popupContentDom.addEventListener) === null || _popupContentDom$addE === void 0 || _popupContentDom$addE.call(popupContentDom, "scroll", onInnerVirtualScroll);
      }
      return function () {
        if (isVirtual) {
          var _popupContentDom$remo;
          popupContentDom === null || popupContentDom === void 0 || (_popupContentDom$remo = popupContentDom.removeEventListener) === null || _popupContentDom$remo === void 0 || _popupContentDom$remo.call(popupContentDom, "scroll", onInnerVirtualScroll);
        }
      };
    }, [isVirtual, onInnerVirtualScroll, popupContentRef.current]);
    var cursorStyle = {
      position: "absolute",
      width: "1px",
      height: "1px",
      transition: "transform 0.2s",
      transform: "translate(0, ".concat(scrollHeight, "px)"),
      MsTransform: "translate(0, ".concat(scrollHeight, "px)"),
      MozTransform: "translate(0, ".concat(scrollHeight, "px)"),
      WebkitTransform: "translate(0, ".concat(scrollHeight, "px)")
    };
    var panelStyle = {
      transform: "translate(0, ".concat(translateY, "px)"),
      MsTransform: "translate(0, ".concat(translateY, "px)"),
      MozTransform: "translate(0, ".concat(translateY, "px)"),
      WebkitTransform: "translate(0, ".concat(translateY, "px)")
    };
    return {
      scrollHeight: scrollHeight,
      translateY: translateY,
      visibleData: visibleData,
      handleRowMounted: handleRowMounted,
      isVirtual: isVirtual,
      cursorStyle: cursorStyle,
      panelStyle: panelStyle
    };
  };

  var _excluded$C = ["group", "divider"],
    _excluded2$4 = ["value", "label", "disabled", "content", "children"];
  function ownKeys$28(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$27(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$28(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$28(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var PopupContent = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var value = props.value,
      size = props.size,
      max = props.max,
      multiple = props.multiple,
      showPopup = props.showPopup,
      setShowPopup = props.setShowPopup,
      empty = props.empty,
      loadingText = props.loadingText,
      loading = props.loading,
      valueType = props.valueType,
      children = props.children,
      keys = props.keys,
      panelTopContent = props.panelTopContent,
      panelBottomContent = props.panelBottomContent,
      onChange = props.onChange,
      onCheckAllChange = props.onCheckAllChange,
      getPopupInstance = props.getPopupInstance,
      propsOptions = props.options,
      propsScroll = props.scroll;
    var _useLocaleReceiver = useLocaleReceiver("select"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var emptyText = t(local.empty);
    var popupContentRef = React.useRef(null);
    popupContentRef.current = getPopupInstance();
    var _usePanelVirtualScrol = usePanelVirtualScroll({
        popupContentRef: popupContentRef,
        scroll: propsScroll,
        options: propsOptions,
        size: size
      }),
      visibleData = _usePanelVirtualScrol.visibleData,
      handleRowMounted = _usePanelVirtualScrol.handleRowMounted,
      isVirtual = _usePanelVirtualScrol.isVirtual,
      panelStyle = _usePanelVirtualScrol.panelStyle,
      cursorStyle = _usePanelVirtualScrol.cursorStyle;
    var selectableOptions = React.useMemo(function () {
      var uniqueOptions = {};
      propsOptions === null || propsOptions === void 0 || propsOptions.forEach(function (option) {
        if (option.group) {
          option.children.forEach(function (item) {
            if (!item.disabled && !item.checkAll) {
              uniqueOptions[item.value] = item;
            }
          });
        } else if (!option.disabled && !option.checkAll) {
          uniqueOptions[option.value] = option;
        }
      });
      return Object.values(uniqueOptions);
    }, [propsOptions]);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    if (!children && !propsOptions) {
      return null;
    }
    var onSelect = function onSelect(selectedValue, _ref) {
      var label = _ref.label,
        selected = _ref.selected,
        event = _ref.event,
        restData = _ref.restData;
      var isValObj = valueType === "object";
      var objVal = {};
      if (isValObj) {
        objVal = _objectSpread$27({}, restData);
        if (!(keys !== null && keys !== void 0 && keys.label)) {
          Object.assign(objVal, {
            label: label
          });
        }
        if (!(keys !== null && keys !== void 0 && keys.value)) {
          Object.assign(objVal, {
            value: selectedValue
          });
        }
      }
      if (!Object.keys(objVal).length) {
        Object.assign(objVal, _defineProperty$2(_defineProperty$2({}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label), (keys === null || keys === void 0 ? void 0 : keys.value) || "value", selectedValue));
      }
      if (multiple) {
        var values = getSelectValueArr(value, selectedValue, selected, valueType, keys, objVal);
        onChange(values, {
          label: label,
          value: selectedValue,
          e: event,
          trigger: selected ? "uncheck" : "check"
        });
      } else {
        var selectVal = valueType === "object" ? objVal : selectedValue;
        if (!isEqual(value, selectVal)) {
          onChange(selectVal, {
            label: label,
            value: selectVal,
            e: event,
            trigger: "check"
          });
        }
        setShowPopup(!showPopup);
      }
    };
    var childrenWithProps = React.Children.map(children, function (child) {
      if (/*#__PURE__*/React.isValidElement(child)) {
        var addedProps = {
          size: size,
          max: max,
          multiple: multiple,
          selectedValue: value,
          onSelect: onSelect
        };
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$27({}, addedProps));
      }
      return child;
    });
    var _renderOptions = function renderOptions(options) {
      if (options) {
        return /* @__PURE__ */React__default["default"].createElement("ul", {
          className: "".concat(classPrefix, "-select__list")
        }, options.map(function (item, index) {
          var group = item.group,
            divider = item.divider,
            rest = _objectWithoutProperties$2(item, _excluded$C);
          if (group) {
            return /* @__PURE__ */React__default["default"].createElement(OptionGroup, {
              label: group,
              divider: divider,
              key: index
            }, _renderOptions(rest.children));
          }
          var optionValue = item.value,
            label = item.label,
            disabled = item.disabled,
            content = item.content,
            children2 = item.children,
            restData = _objectWithoutProperties$2(item, _excluded2$4);
          return /* @__PURE__ */React__default["default"].createElement(Option$1, _objectSpread$27(_objectSpread$27({
            key: index,
            max: max,
            label: label,
            value: optionValue,
            onSelect: onSelect,
            selectedValue: value,
            optionLength: selectableOptions.length,
            multiple: multiple,
            size: size,
            disabled: disabled,
            restData: restData,
            keys: keys,
            content: content,
            onCheckAllChange: onCheckAllChange,
            onRowMounted: handleRowMounted
          }, isVirtual ? {
            isVirtual: isVirtual,
            bufferSize: propsScroll === null || propsScroll === void 0 ? void 0 : propsScroll.bufferSize,
            scrollType: propsScroll === null || propsScroll === void 0 ? void 0 : propsScroll.type
          } : {}), restData), children2);
        }));
      }
      return /* @__PURE__ */React__default["default"].createElement("ul", {
        className: "".concat(classPrefix, "-select__list")
      }, childrenWithProps);
    };
    var isEmpty = Array.isArray(childrenWithProps) && !childrenWithProps.length || propsOptions && propsOptions.length === 0;
    var renderPanel = function renderPanel(renderedOptions, extraStyle) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-select__dropdown-inner"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-select__dropdown-inner--size-s"), size === "small"), "".concat(classPrefix, "-select__dropdown-inner--size-l"), size === "large"), "".concat(classPrefix, "-select__dropdown-inner--size-m"), size === "medium")),
        style: extraStyle
      }, loading && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__loading-tips")
      }, loadingText), !loading && isEmpty && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, empty ? empty : /* @__PURE__ */React__default["default"].createElement("p", null, emptyText)), !loading && !isEmpty && _renderOptions(renderedOptions));
    };
    if (isVirtual) {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, panelTopContent, /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("div", {
        style: cursorStyle
      }), renderPanel(visibleData, panelStyle)), panelBottomContent);
    }
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, panelTopContent, renderPanel(propsOptions), panelBottomContent);
  });

  var _excluded$B = ["overlayClassName", "onScroll", "onScrollToBottom"];
  function ownKeys$27(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$26(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$27(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$27(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Select$1 = forwardRefWithStatics(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, selectDefaultProps);
    var _useLocaleReceiver = useLocaleReceiver("select"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var emptyText = t(local.loadingText);
    var readonly = props.readonly,
      borderless = props.borderless,
      autoWidth = props.autoWidth,
      creatable = props.creatable,
      _props$loadingText = props.loadingText,
      loadingText = _props$loadingText === void 0 ? emptyText : _props$loadingText,
      max = props.max,
      popupProps = props.popupProps,
      reserveKeyword = props.reserveKeyword,
      className = props.className,
      style = props.style,
      disabled = props.disabled,
      size = props.size,
      multiple = props.multiple,
      placeholder = props.placeholder,
      clearable = props.clearable,
      prefixIcon = props.prefixIcon,
      options = props.options,
      filterable = props.filterable,
      loading = props.loading,
      empty = props.empty,
      valueType = props.valueType,
      keys = props.keys,
      children = props.children,
      collapsedItems = props.collapsedItems,
      minCollapsedNum = props.minCollapsedNum,
      valueDisplay = props.valueDisplay,
      showArrow = props.showArrow,
      inputProps = props.inputProps,
      panelBottomContent = props.panelBottomContent,
      panelTopContent = props.panelTopContent,
      selectInputProps = props.selectInputProps,
      tagInputProps = props.tagInputProps,
      tagProps = props.tagProps,
      scroll = props.scroll,
      suffixIcon = props.suffixIcon,
      label = props.label,
      filter = props.filter,
      onFocus = props.onFocus,
      _onBlur = props.onBlur,
      _props$onClear = props.onClear,
      onClear = _props$onClear === void 0 ? noop : _props$onClear,
      onCreate = props.onCreate,
      onRemove = props.onRemove,
      onSearch = props.onSearch,
      onEnter = props.onEnter,
      onPopupVisibleChange = props.onPopupVisibleChange;
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var selectInputRef = React.useRef(null);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _ref = popupProps || {},
      overlayClassName = _ref.overlayClassName,
      onScroll = _ref.onScroll,
      onScrollToBottom = _ref.onScrollToBottom,
      restPopupProps = _objectWithoutProperties$2(_ref, _excluded$B);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isScrolling = _useState2[0],
      toggleIsScrolling = _useState2[1];
    var name = "".concat(classPrefix, "-select");
    var _useControlled3 = useControlled(props, "popupVisible", onPopupVisibleChange),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      showPopup = _useControlled4[0],
      setShowPopup = _useControlled4[1];
    var _useControlled5 = useControlled(props, "inputValue", props.onInputChange),
      _useControlled6 = _slicedToArray$1(_useControlled5, 2),
      inputValue = _useControlled6[0],
      onInputChange = _useControlled6[1];
    var _useOptions = UseOptions(keys, options, children, valueType, value, reserveKeyword),
      currentOptions = _useOptions.currentOptions,
      setCurrentOptions = _useOptions.setCurrentOptions,
      tmpPropOptions = _useOptions.tmpPropOptions,
      valueToOption = _useOptions.valueToOption,
      selectedOptions = _useOptions.selectedOptions;
    var selectedLabel = React.useMemo(function () {
      if (multiple) {
        return selectedOptions.map(function (selectedOption) {
          return get(selectedOption || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || "";
        });
      }
      return get(selectedOptions[0] || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || void 0;
    }, [selectedOptions, keys, multiple]);
    var handleShowPopup = function handleShowPopup(visible, ctx) {
      if (disabled) return;
      visible && toggleIsScrolling(false);
      !visible && onInputChange("", {
        trigger: "blur"
      });
      setShowPopup(visible, ctx);
    };
    var onTagChange = function onTagChange(_currentTags, context) {
      var trigger = context.trigger,
        index = context.index,
        item = context.item,
        e = context.e;
      if (trigger === "backspace") {
        e.stopPropagation();
        var closest = -1;
        var len = index;
        while (len >= 0) {
          var option = selectedOptions[len];
          if (!isSelectOptionGroup(option) && !option.disabled) {
            closest = len;
            break;
          }
          len -= 1;
        }
        if (closest < 0) {
          return;
        }
        var values = getSelectValueArr(value, value[closest], true, valueType, keys);
        var _getSelectedOptions = getSelectedOptions(values, multiple, valueType, keys, valueToOption),
          currentSelectedOptions = _getSelectedOptions.currentSelectedOptions;
        onChange(values, {
          e: e,
          trigger: trigger,
          selectedOptions: currentSelectedOptions
        });
        return;
      }
      if (trigger === "tag-remove") {
        var _e$stopPropagation;
        e === null || e === void 0 || (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);
        var _values = getSelectValueArr(value, value[index], true, valueType, keys);
        var _getSelectedOptions2 = getSelectedOptions(_values, multiple, valueType, keys, valueToOption),
          _currentSelectedOptions = _getSelectedOptions2.currentSelectedOptions;
        onChange(_values, {
          e: e,
          trigger: trigger,
          selectedOptions: _currentSelectedOptions
        });
        if (isFunction$1(onRemove)) {
          onRemove({
            value: value[index],
            data: {
              label: item,
              value: value[index]
            },
            e: e
          });
        }
      }
    };
    var onCheckAllChange = function onCheckAllChange(checkAll, e) {
      var _props$value;
      var isDisabledCheckAll = function isDisabledCheckAll(opt) {
        return opt.checkAll && opt.disabled;
      };
      if (!multiple || currentOptions.some(function (opt) {
        return !isSelectOptionGroup(opt) && isDisabledCheckAll(opt);
      })) {
        return;
      }
      var isSelectableOption = function isSelectableOption(opt) {
        return !opt.checkAll && !opt.disabled;
      };
      var getOptionValue = function getOptionValue(option) {
        return valueType === "object" ? option : option[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
      };
      var values = [];
      currentOptions.forEach(function (option) {
        if (isSelectOptionGroup(option)) {
          option.children.forEach(function (item) {
            if (isSelectableOption(item)) {
              values.push(getOptionValue(item));
            }
          });
        } else if (isSelectableOption(option)) {
          values.push(getOptionValue(option));
        }
      });
      var _getSelectedOptions3 = getSelectedOptions(values, multiple, valueType, keys, valueToOption),
        currentSelectedOptions = _getSelectedOptions3.currentSelectedOptions,
        allSelectedValue = _getSelectedOptions3.allSelectedValue;
      var checkAllValue = !checkAll && allSelectedValue.length !== ((_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.length) ? allSelectedValue : [];
      onChange === null || onChange === void 0 || onChange(checkAllValue, {
        e: e,
        trigger: !checkAll ? "check" : "uncheck",
        selectedOptions: currentSelectedOptions
      });
    };
    var handleChange = function handleChange(value2, context) {
      var selectedValue = multiple ? context.value : value2;
      if (multiple) {
        !reserveKeyword && inputValue && onInputChange("", {
          e: context.e,
          trigger: "change"
        });
      }
      if (creatable && isFunction$1(onCreate)) {
        if (options.filter(function (option) {
          return option.value === selectedValue;
        }).length === 0) {
          onCreate(selectedValue);
        }
      }
      var _getSelectedOptions4 = getSelectedOptions(value2, multiple, valueType, keys, valueToOption, selectedValue),
        currentSelectedOptions = _getSelectedOptions4.currentSelectedOptions,
        currentOption = _getSelectedOptions4.currentOption;
      onChange === null || onChange === void 0 || onChange(value2, {
        e: context.e,
        trigger: context.trigger,
        selectedOptions: currentSelectedOptions,
        option: currentOption
      });
      if (multiple && (context === null || context === void 0 ? void 0 : context.trigger) === "uncheck" && isFunction$1(onRemove)) {
        var value3 = context === null || context === void 0 ? void 0 : context.value;
        var option = options.find(function (option2) {
          return option2.value === value3;
        });
        onRemove({
          value: value3,
          data: option,
          e: context.e
        });
      }
    };
    var handleFilter = function handleFilter(value2) {
      var filteredOptions = [];
      if (filterable && isFunction$1(onSearch)) {
        return;
      }
      if (!value2) {
        setCurrentOptions(tmpPropOptions);
        return;
      }
      var filterLabels = [];
      var filterMethods = function filterMethods(option) {
        if (filter && isFunction$1(filter)) {
          return filter(value2, option);
        }
        var upperValue = value2.toUpperCase();
        return ((option === null || option === void 0 ? void 0 : option.label) || "").toUpperCase().includes(upperValue);
      };
      tmpPropOptions === null || tmpPropOptions === void 0 || tmpPropOptions.forEach(function (option) {
        if (isSelectOptionGroup(option)) {
          var _option$children;
          filteredOptions.push(_objectSpread$26(_objectSpread$26({}, option), {}, {
            children: (_option$children = option.children) === null || _option$children === void 0 ? void 0 : _option$children.filter(function (child) {
              if (filterMethods(child)) {
                filterLabels.push(child.label);
                return true;
              }
              return false;
            })
          }));
        } else if (filterMethods(option)) {
          filterLabels.push(option.label);
          filteredOptions.push(option);
        }
      });
      var isSameLabelOptionExist = filterLabels.includes(value2);
      if (creatable && !isSameLabelOptionExist) {
        filteredOptions = filteredOptions.concat([{
          label: value2,
          value: value2
        }]);
      }
      setCurrentOptions(filteredOptions);
    };
    var handleInputChange = function handleInputChange(value2, context) {
      if (context.trigger !== "clear") {
        onInputChange(value2, {
          e: context.e,
          trigger: "input"
        });
      }
      if (value2 === void 0) {
        return;
      }
      if (isFunction$1(onSearch)) {
        onSearch(value2, {
          e: context.e
        });
        return;
      }
    };
    var handleClear = function handleClear(context) {
      context.e.stopPropagation();
      if (Array.isArray(value)) {
        onChange([], _objectSpread$26(_objectSpread$26({}, context), {}, {
          trigger: "clear",
          selectedOptions: []
        }));
      } else {
        onChange(null, _objectSpread$26(_objectSpread$26({}, context), {}, {
          trigger: "clear",
          selectedOptions: []
        }));
      }
      onClear(context);
    };
    React.useEffect(function () {
      if (typeof inputValue !== "undefined") {
        handleFilter(String(inputValue));
      }
    }, [inputValue, tmpPropOptions]);
    var renderSuffixIcon = function renderSuffixIcon() {
      if (suffixIcon) {
        return suffixIcon;
      }
      if (loading) {
        return /* @__PURE__ */React__default["default"].createElement(Loading, {
          className: classNames$1("".concat(name, "__right-icon"), "".concat(name, "__active-icon")),
          loading: true,
          size: "small"
        });
      }
      return showArrow && /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
        className: "".concat(name, "__right-icon"),
        isActive: showPopup,
        disabled: disabled
      });
    };
    var getPopupInstance = React.useCallback(function () {
      var _selectInputRef$curre;
      return (_selectInputRef$curre = selectInputRef.current) === null || _selectInputRef$curre === void 0 ? void 0 : _selectInputRef$curre.getPopupContentElement();
    }, []);
    var childrenWithProps = React.Children.map(children, function (child) {
      if (/*#__PURE__*/React.isValidElement(child)) {
        var addedProps = {
          multiple: multiple
        };
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$26({}, addedProps));
      }
      return child;
    });
    var renderContent = function renderContent() {
      var popupContentProps = {
        onChange: handleChange,
        value: value,
        className: className,
        size: size,
        multiple: multiple,
        showPopup: showPopup,
        setShowPopup: function setShowPopup(show) {
          return handleShowPopup(show, {});
        },
        options: currentOptions,
        empty: empty,
        max: max,
        loadingText: loadingText,
        loading: loading,
        valueType: valueType,
        keys: keys,
        panelBottomContent: panelBottomContent,
        panelTopContent: panelTopContent,
        onCheckAllChange: onCheckAllChange,
        getPopupInstance: getPopupInstance,
        scroll: scroll
      };
      return /* @__PURE__ */React__default["default"].createElement(PopupContent, _objectSpread$26({}, popupContentProps), childrenWithProps);
    };
    var renderValueDisplay = React.useMemo(function () {
      if (!valueDisplay) {
        if (!multiple) {
          if (typeof selectedLabel !== "string") {
            return selectedLabel;
          }
          return "";
        }
        return function (_ref2) {
          var val = _ref2.value;
          return val.slice(0, minCollapsedNum ? minCollapsedNum : val.length).map(function (v, key) {
            var filterOption = options === null || options === void 0 ? void 0 : options.find(function (option) {
              return option.label === v;
            });
            return /* @__PURE__ */React__default["default"].createElement(Tag, _objectSpread$26(_objectSpread$26({
              key: key,
              closable: !(filterOption !== null && filterOption !== void 0 && filterOption.disabled) && !disabled && !readonly,
              size: size
            }, tagProps), {}, {
              onClose: function onClose(_ref3) {
                var _e$nativeEvent, _e$nativeEvent$stopIm, _tagProps$onClose;
                var e = _ref3.e;
                e.stopPropagation();
                e === null || e === void 0 || (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 || (_e$nativeEvent$stopIm = _e$nativeEvent.stopImmediatePropagation) === null || _e$nativeEvent$stopIm === void 0 || _e$nativeEvent$stopIm.call(_e$nativeEvent);
                var values = getSelectValueArr(value, value[key], true, valueType, keys);
                var _getSelectedOptions5 = getSelectedOptions(values, multiple, valueType, keys, valueToOption, value),
                  currentSelectedOptions = _getSelectedOptions5.currentSelectedOptions;
                onChange(values, {
                  e: e,
                  selectedOptions: currentSelectedOptions,
                  trigger: "tag-remove"
                });
                tagProps === null || tagProps === void 0 || (_tagProps$onClose = tagProps.onClose) === null || _tagProps$onClose === void 0 || _tagProps$onClose.call(tagProps, {
                  e: e
                });
                onRemove === null || onRemove === void 0 || onRemove({
                  value: value[key],
                  data: {
                    label: v,
                    value: value[key]
                  },
                  e: e
                });
              }
            }), v);
          });
        };
      }
      if (typeof valueDisplay === "string") {
        return valueDisplay;
      }
      if (multiple) {
        return function (_ref4) {
          var onClose = _ref4.onClose;
          return parseContentTNode(valueDisplay, {
            value: selectedOptions,
            onClose: onClose
          });
        };
      }
      return parseContentTNode(valueDisplay, {
        value: selectedLabel,
        onClose: noop
      });
    }, [valueDisplay, multiple, selectedLabel, minCollapsedNum, options, disabled, readonly, size, tagProps, value, valueType, keys, valueToOption, onRemove, selectedOptions]);
    var updateScrollTop = function updateScrollTop(content) {
      if (!content || isScrolling) {
        return;
      }
      var firstSelectedNode = content.querySelector(".".concat(classPrefix, "-is-selected"));
      if (!multiple && firstSelectedNode) {
        var _getComputedStyle = getComputedStyle(firstSelectedNode),
          paddingBottom = _getComputedStyle.paddingBottom;
        var _getComputedStyle2 = getComputedStyle(content),
          marginBottom = _getComputedStyle2.marginBottom;
        var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
        var updateValue = getOffsetTopToContainer(firstSelectedNode, content) - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
        setTimeout(function () {
          content.scrollTop = updateValue;
        });
      }
    };
    var onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
    var handleEnter = function handleEnter(_, context) {
      onEnter === null || onEnter === void 0 || onEnter(_objectSpread$26(_objectSpread$26({}, context), {}, {
        value: value
      }));
    };
    var handleScroll = function handleScroll(_ref5) {
      var e = _ref5.e;
      toggleIsScrolling(true);
      onScroll === null || onScroll === void 0 || onScroll({
        e: e
      });
      if (onScrollToBottom) {
        var debounceOnScrollBottom = debounce$1(function (e2) {
          return onScrollToBottom({
            e: e2
          });
        }, 100);
        var _e$target = e.target,
          scrollTop = _e$target.scrollTop,
          clientHeight = _e$target.clientHeight,
          scrollHeight = _e$target.scrollHeight;
        if (clientHeight + Math.floor(scrollTop) === scrollHeight) {
          debounceOnScrollBottom(e);
        }
      }
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__wrap"), className),
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, /* @__PURE__ */React__default["default"].createElement(SelectInput, _objectSpread$26({
      autoWidth: !(style !== null && style !== void 0 && style.width) && autoWidth,
      ref: composeRefs(ref, selectInputRef),
      className: name,
      readonly: readonly,
      autofocus: props.autofocus,
      allowInput: (filterable !== null && filterable !== void 0 ? filterable : local.filterable) || isFunction$1(filter),
      multiple: multiple,
      value: selectedLabel,
      options: selectedOptions,
      valueDisplay: renderValueDisplay,
      clearable: clearable,
      disabled: disabled,
      status: props.status,
      tips: props.tips,
      borderless: borderless,
      label: label,
      suffix: props.suffix,
      prefixIcon: prefixIcon,
      suffixIcon: renderSuffixIcon(),
      panel: renderContent(),
      placeholder: !multiple && showPopup && selectedLabel ? selectedLabel : placeholder || t(local.placeholder),
      inputValue: inputValue,
      tagInputProps: _objectSpread$26({
        size: size
      }, tagInputProps),
      tagProps: _objectSpread$26({
        size: size
      }, tagProps),
      inputProps: _objectSpread$26({
        size: size
      }, inputProps),
      minCollapsedNum: minCollapsedNum,
      collapsedItems: collapsedItems,
      updateScrollTop: updateScrollTop,
      popupProps: _objectSpread$26({
        overlayClassName: ["".concat(name, "__dropdown"), overlayClassName],
        onScroll: handleScroll
      }, restPopupProps),
      popupVisible: showPopup,
      onPopupVisibleChange: handleShowPopup,
      onTagChange: onTagChange,
      onInputChange: handleInputChange,
      onFocus: onFocus,
      onEnter: handleEnter,
      onBlur: function onBlur(_, context) {
        _onBlur === null || _onBlur === void 0 || _onBlur({
          value: value,
          e: context.e
        });
      },
      onClear: handleClear
    }, selectInputProps)));
  }, {
    Option: Option$1,
    OptionGroup: OptionGroup
  });
  Select$1.displayName = "Select";

  var Select = Select$1;

  function useBoundaryJumper(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        PageLastIcon: TdPageLastIcon,
        PageFirstIcon: TdPageFirstIcon
      }),
      PageFirstIcon = _useGlobalIcon.PageFirstIcon,
      PageLastIcon = _useGlobalIcon.PageLastIcon;
    var name = "".concat(classPrefix, "-pagination");
    var showFirstAndLastPageBtn = props.showFirstAndLastPageBtn,
      disabled = props.disabled,
      current = props.current,
      pageCount = props.pageCount,
      changeCurrent = props.changeCurrent;
    var firstPageJumper = showFirstAndLastPageBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-first-page"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled || current === 1)),
      onClick: function onClick() {
        return changeCurrent(1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(PageFirstIcon, null));
    var lastPageJumper = showFirstAndLastPageBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-first-page"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled || current === pageCount)),
      onClick: function onClick() {
        return changeCurrent(pageCount);
      }
    }, /* @__PURE__ */React__default["default"].createElement(PageLastIcon, null));
    return {
      firstPageJumper: firstPageJumper,
      lastPageJumper: lastPageJumper
    };
  }

  function usePrevNextJumper(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        ChevronLeftIcon: TdChevronLeftIcon,
        ChevronRightIcon: TdChevronRightIcon
      }),
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var name = "".concat(classPrefix, "-pagination");
    var showPreviousAndNextBtn = props.showPreviousAndNextBtn,
      disabled = props.disabled,
      current = props.current,
      pageCount = props.pageCount,
      changeCurrent = props.changeCurrent;
    var prevJumper = showPreviousAndNextBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-prev"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled || current === 1)),
      onClick: function onClick() {
        if (disabled || current === 1) return;
        changeCurrent(current - 1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null));
    var nextJumper = showPreviousAndNextBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-next"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled || current === pageCount)),
      onClick: function onClick() {
        if (disabled || current === pageCount) return;
        changeCurrent(current + 1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null));
    return {
      prevJumper: prevJumper,
      nextJumper: nextJumper
    };
  }

  function usePageNumber(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        EllipsisIcon: EllipsisIcon$1,
        ChevronLeftDoubleIcon: TdChevronLeftDoubleIcon,
        ChevronRightDoubleIcon: TdChevronRightDoubleIcon
      }),
      EllipsisIcon = _useGlobalIcon.EllipsisIcon,
      ChevronLeftDoubleIcon = _useGlobalIcon.ChevronLeftDoubleIcon,
      ChevronRightDoubleIcon = _useGlobalIcon.ChevronRightDoubleIcon;
    var name = "".concat(classPrefix, "-pagination");
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      hoverPreMore = _useState2[0],
      toggleHoverPreMore = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      hoverNextMore = _useState4[0],
      toggleHoverNextMore = _useState4[1];
    var showPageNumber = props.showPageNumber,
      maxPageBtn = props.maxPageBtn,
      disabled = props.disabled,
      current = props.current,
      pageCount = props.pageCount,
      foldedMaxPageBtn = props.foldedMaxPageBtn,
      changeCurrent = props.changeCurrent,
      pageEllipsisMode = props.pageEllipsisMode;
    var isMidEllipsis = pageEllipsisMode === "mid";
    var pivot = Math.ceil((foldedMaxPageBtn - 1) / 2);
    var pageList = React.useMemo(function () {
      var isPrevMoreShow = 2 + pivot < current;
      var isNextMoreShow = pageCount - 1 - pivot > current;
      var array = [];
      var start;
      var end;
      if (pageCount > maxPageBtn) {
        if (isPrevMoreShow && isNextMoreShow) {
          start = current - pivot;
          end = current + pivot;
        } else {
          var foldedStart = isMidEllipsis ? 2 : 1;
          var foldedEnd = isMidEllipsis ? pageCount - 1 : pageCount;
          start = isPrevMoreShow ? pageCount - foldedMaxPageBtn + 1 : foldedStart;
          end = isPrevMoreShow ? foldedEnd : foldedMaxPageBtn;
        }
      } else {
        start = 1;
        end = pageCount;
      }
      for (var i = start; i <= end; i++) {
        array.push(i);
      }
      return array;
    }, [current, pageCount, foldedMaxPageBtn, isMidEllipsis, maxPageBtn, pivot]);
    var isFolded = pageCount > maxPageBtn;
    var showPrevMore = 2 + pivot < current;
    var showNextMore = pageCount - 1 - pivot > current;
    React.useEffect(function () {
      if (!showPrevMore) toggleHoverPreMore(false);
      if (!showNextMore) toggleHoverNextMore(false);
    }, [showNextMore, showPrevMore]);
    var pageNumberControl = showPageNumber && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(name, "__pager")
    }, isFolded && isMidEllipsis && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("li", {
      key: 1,
      className: classNames$1("".concat(name, "__number"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-current"), current === 1)),
      onClick: function onClick() {
        return changeCurrent(1);
      }
    }, "1"), showPrevMore && /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onMouseEnter: function onMouseEnter() {
        return toggleHoverPreMore(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHoverPreMore(false);
      },
      onClick: function onClick() {
        return changeCurrent(current - foldedMaxPageBtn);
      }
    }, !hoverPreMore ? /* @__PURE__ */React__default["default"].createElement(EllipsisIcon, null) : /* @__PURE__ */React__default["default"].createElement(ChevronLeftDoubleIcon, null))), pageList.map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: item,
        className: classNames$1("".concat(name, "__number"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-current"), current === item)),
        onClick: function onClick() {
          return changeCurrent(item);
        }
      }, item);
    }), isFolded && isMidEllipsis && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, showNextMore && /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onMouseEnter: function onMouseEnter() {
        return toggleHoverNextMore(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHoverNextMore(false);
      },
      onClick: function onClick() {
        return changeCurrent(current + foldedMaxPageBtn);
      }
    }, !hoverNextMore ? /* @__PURE__ */React__default["default"].createElement(EllipsisIcon, null) : /* @__PURE__ */React__default["default"].createElement(ChevronRightDoubleIcon, null)), /* @__PURE__ */React__default["default"].createElement("li", {
      key: pageCount,
      className: classNames$1("".concat(name, "__number"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-current"), current === pageCount)),
      onClick: function onClick() {
        return changeCurrent(pageCount);
      }
    }, pageCount)));
    return {
      pageNumberControl: pageNumberControl
    };
  }

  function useTotal(props) {
    var _useLocaleReceiver = useLocaleReceiver("pagination"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var name = "".concat(classPrefix, "-pagination");
    var totalContent = props.totalContent,
      pageSize = props.pageSize,
      current = props.current,
      total = props.total;
    var totalControl = null;
    if (totalContent === false) return {
      totalControl: totalControl
    };
    var renderTotalContent = function renderTotalContent() {
      if (typeof totalContent === "boolean") {
        return totalContent ? t(locale.total, total) : null;
      }
      if (typeof totalContent === "function") {
        var start = (current - 1) * pageSize;
        var end = Math.min(total, start + pageSize);
        return totalContent(total, [start + 1, end]);
      }
      return totalContent;
    };
    totalControl = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__total")
    }, renderTotalContent());
    return {
      totalControl: totalControl
    };
  }

  var pageSizeValidator = function pageSizeValidator(pageSize) {
    var pageSizeNumber;
    if (typeof pageSize !== "number") {
      pageSizeNumber = pageSize - 0;
    } else {
      pageSizeNumber = pageSize;
    }
    return !Number.isFinite(pageSizeNumber) && pageSizeNumber > 0;
  };

  var paginationDefaultProps = {
    defaultCurrent: 1,
    foldedMaxPageBtn: 5,
    maxPageBtn: 10,
    pageEllipsisMode: "mid",
    defaultPageSize: 10,
    pageSizeOptions: [5, 10, 20, 50],
    showFirstAndLastPageBtn: false,
    showJumper: false,
    showPageNumber: true,
    showPageSize: true,
    showPreviousAndNextBtn: true,
    size: "medium",
    theme: "default",
    total: 0,
    totalContent: true
  };
  var paginationMiniDefaultProps = {
    layout: "horizontal",
    showCurrent: true,
    size: "medium",
    variant: "text"
  };

  var _excluded$A = ["theme", "size", "total", "showPageSize", "showPageNumber", "showPreviousAndNextBtn", "showFirstAndLastPageBtn", "showJumper", "pageEllipsisMode", "disabled", "foldedMaxPageBtn", "maxPageBtn", "totalContent", "pageSizeOptions", "onChange", "onCurrentChange", "onPageSizeChange", "style", "className", "selectProps"];
  function ownKeys$26(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$25(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$26(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$26(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Option = Select.Option;
  var Pagination$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, paginationDefaultProps);
    var theme = props.theme,
      size = props.size,
      total = props.total,
      showPageSize = props.showPageSize,
      showPageNumber = props.showPageNumber,
      showPreviousAndNextBtn = props.showPreviousAndNextBtn,
      showFirstAndLastPageBtn = props.showFirstAndLastPageBtn,
      showJumper = props.showJumper,
      pageEllipsisMode = props.pageEllipsisMode,
      disabled = props.disabled,
      foldedMaxPageBtn = props.foldedMaxPageBtn,
      maxPageBtn = props.maxPageBtn,
      totalContent = props.totalContent,
      pageSizeOptions = props.pageSizeOptions,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      onCurrentChange = props.onCurrentChange,
      onPageSizeChange = props.onPageSizeChange,
      style = props.style,
      className = props.className,
      selectProps = props.selectProps,
      otherProps = _objectWithoutProperties$2(props, _excluded$A);
    var restProps = omit$2(otherProps, ["current", "pageSize", "defaultPageSize", "defaultCurrent"]);
    var _useLocaleReceiver = useLocaleReceiver("pagination"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useControlled = useControlled(props, "pageSize", onPageSizeChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      pageSize = _useControlled2[0],
      setPageSize = _useControlled2[1];
    var _useControlled3 = useControlled(props, "current", onCurrentChange),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      current = _useControlled4[0],
      setCurrent = _useControlled4[1];
    var _useState = React.useState(current),
      _useState2 = _slicedToArray$1(_useState, 2),
      jumpValue = _useState2[0],
      setJumpValue = _useState2[1];
    var min = 1;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      paginationConfig = _useConfig.pagination;
    var name = "".concat(classPrefix, "-pagination");
    var pageCount = React.useMemo(function () {
      var calCount = Math.ceil(total / pageSize);
      return calCount > 0 ? calCount : 1;
    }, [pageSize, total]);
    var changeCurrent = function changeCurrent(_nextCurrent, _nextPageSize) {
      if (disabled || current === _nextCurrent) {
        return;
      }
      var nextCurrent = Math.trunc(_nextCurrent);
      if (isNaN$1(nextCurrent)) return;
      var nextPageSize = _nextPageSize;
      if (!nextPageSize && !pageSizeValidator(nextPageSize)) {
        var _pageSizeOptions$;
        nextPageSize = pageSize !== null && pageSize !== void 0 ? pageSize : typeof pageSizeOptions[0] === "number" ? pageSizeOptions[0] : (_pageSizeOptions$ = pageSizeOptions[0]) === null || _pageSizeOptions$ === void 0 ? void 0 : _pageSizeOptions$.value;
      }
      if (nextCurrent < min) nextCurrent = min;
      if (nextCurrent > pageCount) nextCurrent = pageCount;
      setCurrent(nextCurrent, {
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      });
      onChange({
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      });
    };
    var changePageSize = function changePageSize(nextPageSize) {
      var nextCurrent = Math.min(current, Math.max(1, Math.ceil(total / nextPageSize)));
      var pageInfo = {
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      };
      setPageSize(nextPageSize, pageInfo);
      if (current !== nextCurrent) {
        changeCurrent(nextCurrent, nextPageSize);
      } else {
        onChange(pageInfo);
      }
    };
    var _useTotal = useTotal({
        totalContent: totalContent,
        pageSize: pageSize,
        current: current,
        total: total
      }),
      totalControl = _useTotal.totalControl;
    var _useBoundaryJumper = useBoundaryJumper({
        disabled: disabled,
        current: current,
        pageCount: pageCount,
        showFirstAndLastPageBtn: showFirstAndLastPageBtn,
        changeCurrent: changeCurrent
      }),
      firstPageJumper = _useBoundaryJumper.firstPageJumper,
      lastPageJumper = _useBoundaryJumper.lastPageJumper;
    var _usePrevNextJumper = usePrevNextJumper({
        disabled: disabled,
        current: current,
        pageCount: pageCount,
        showPreviousAndNextBtn: showPreviousAndNextBtn,
        changeCurrent: changeCurrent
      }),
      prevJumper = _usePrevNextJumper.prevJumper,
      nextJumper = _usePrevNextJumper.nextJumper;
    var _usePageNumber = usePageNumber({
        showPageNumber: showPageNumber,
        maxPageBtn: maxPageBtn,
        disabled: disabled,
        current: current,
        pageCount: pageCount,
        foldedMaxPageBtn: foldedMaxPageBtn,
        changeCurrent: changeCurrent,
        pageEllipsisMode: pageEllipsisMode
      }),
      pageNumberControl = _usePageNumber.pageNumberControl;
    React.useEffect(function () {
      setJumpValue(current);
    }, [current]);
    var pageSizeControl = showPageSize && pageSizeOptions.length ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__select")
    }, /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$25({
      autoWidth: true,
      size: size,
      value: pageSize,
      disabled: disabled,
      onChange: changePageSize
    }, selectProps), pageSizeOptions.map(function (item) {
      return typeof item === "number" ? /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item,
        label: t(locale.itemsPerPage, {
          size: item
        }),
        value: item
      }) : /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item.value,
        label: item.label,
        value: item.value
      });
    }))) : null;
    var DefaultJumper = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__jump")
    }, t(locale.jumpTo), /* @__PURE__ */React__default["default"].createElement(InputAdornment$1, {
      append: "/ ".concat(pageCount, " ").concat(t(locale.page))
    }, /* @__PURE__ */React__default["default"].createElement(InputNumber, {
      className: "".concat(classPrefix, "-pagination__input"),
      min: min,
      size: size,
      theme: "normal",
      max: pageCount,
      disabled: disabled,
      value: jumpValue,
      onChange: function onChange(val) {
        return setJumpValue(val);
      },
      onBlur: function onBlur(val) {
        return changeCurrent(val);
      },
      onEnter: function onEnter(val) {
        return changeCurrent(val);
      },
      placeholder: ""
    })));
    var globalJumper = paginationConfig.jumper;
    var Jumper = globalJumper ? globalJumper({
      current: current,
      pageCount: pageCount,
      onChange: changeCurrent
    }) : DefaultJumper;
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$25({
      className: classNames$1(name, className, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-is-disabled"), disabled)),
      style: style,
      ref: ref
    }, restProps), totalControl, pageSizeControl, firstPageJumper, prevJumper, theme === "default" && pageNumberControl, theme === "simple" && Jumper, nextJumper, lastPageJumper, theme === "default" && showJumper && Jumper);
  });
  Pagination$1.displayName = "Pagination";

  var PaginationMini$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        RoundIcon: TdRoundIcon,
        ChevronUpIcon: TdChevronUpIcon,
        ChevronDownIcon: TdChevronDownIcon,
        ChevronLeftIcon: TdChevronLeftIcon,
        ChevronRightIcon: TdChevronRightIcon
      }),
      RoundIcon = _useGlobalIcon.RoundIcon,
      ChevronUpIcon = _useGlobalIcon.ChevronUpIcon,
      ChevronDownIcon = _useGlobalIcon.ChevronDownIcon,
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var _useDefaultProps = useDefaultProps(props, paginationMiniDefaultProps),
      variant = _useDefaultProps.variant,
      tips = _useDefaultProps.tips,
      showCurrent = _useDefaultProps.showCurrent,
      disabled = _useDefaultProps.disabled,
      layout = _useDefaultProps.layout,
      size = _useDefaultProps.size,
      _useDefaultProps$onCh = _useDefaultProps.onChange,
      onChange = _useDefaultProps$onCh === void 0 ? noop : _useDefaultProps$onCh,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style;
    var titleConfig = React.useMemo(function () {
      if (isObject(tips)) {
        return tips;
      }
      if (tips === true) {
        return {
          prev: "\u4E0A\u4E00\u9875",
          current: "\u5F53\u524D",
          next: "\u4E0B\u4E00\u9875"
        };
      }
      return {};
    }, [tips]);
    var disabledConfig = React.useMemo(function () {
      if (isObject(disabled)) {
        return disabled;
      }
      if (disabled === true) {
        return {
          prev: true,
          current: true,
          next: true
        };
      }
      return {
        prev: false,
        current: false,
        next: false
      };
    }, [disabled]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-pagination-mini"), className, _defineProperty$2({}, "".concat(classPrefix, "-pagination-mini--outline"), variant === "outline")),
      ref: ref,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      title: titleConfig.prev,
      variant: variant,
      size: size,
      shape: "square",
      onClick: function onClick(e) {
        return onChange({
          e: e,
          trigger: "prev"
        });
      },
      icon: layout === "horizontal" ? /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null) : /* @__PURE__ */React__default["default"].createElement(ChevronUpIcon, null),
      className: "".concat(classPrefix, "-pagination-mini__prev"),
      disabled: disabledConfig.prev
    }), showCurrent && /* @__PURE__ */React__default["default"].createElement(Button, {
      title: titleConfig.current,
      variant: variant,
      size: size,
      shape: "square",
      onClick: function onClick(e) {
        return onChange({
          e: e,
          trigger: "current"
        });
      },
      icon: /* @__PURE__ */React__default["default"].createElement(RoundIcon, null),
      className: "".concat(classPrefix, "-pagination-mini__current"),
      disabled: disabledConfig.current
    }), /* @__PURE__ */React__default["default"].createElement(Button, {
      title: titleConfig.next,
      variant: variant,
      size: size,
      shape: "square",
      onClick: function onClick(e) {
        return onChange({
          e: e,
          trigger: "next"
        });
      },
      icon: layout === "horizontal" ? /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null) : /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon, null),
      className: "".concat(classPrefix, "-pagination-mini__next"),
      disabled: disabledConfig.next
    }));
  });
  PaginationMini$1.displayName = "PaginationMini";

  var Pagination = Pagination$1;
  var PaginationMini = PaginationMini$1;

  function ownKeys$25(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$24(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$25(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$25(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function usePagination(props, tableContentRef) {
    var pagination = props.pagination,
      data = props.data,
      disableDataPage = props.disableDataPage;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(props.pagination),
      _useState2 = _slicedToArray$1(_useState, 2),
      innerPagination = _useState2[0],
      setInnerPagination = _useState2[1];
    var _useState3 = React.useState([]),
      _useState4 = _slicedToArray$1(_useState3, 2),
      dataSource = _useState4[0],
      setDataSource = _useState4[1];
    var _useState5 = React.useState(false),
      _useState6 = _slicedToArray$1(_useState5, 2),
      isPaginateData = _useState6[0],
      setIsPaginateData = _useState6[1];
    var updateDataSourceAndPaginate = React.useCallback(function () {
      var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var isPaginateData2 = Boolean(!disableDataPage && data.length > pageSize);
      setIsPaginateData(isPaginateData2);
      var newData = [];
      if (isPaginateData2) {
        var start = (current - 1) * pageSize;
        var end = current * pageSize;
        newData = _toConsumableArray(data.slice(start, end));
      } else {
        newData = data;
      }
      setDataSource(newData);
      return newData;
    }, [data, disableDataPage]);
    React.useEffect(function () {
      if (!pagination) {
        setIsPaginateData(false);
      }
    }, [pagination]);
    React.useEffect(function () {
      var _pagination$pageSize;
      if (!pagination || !pagination.current) return;
      var current = pagination === null || pagination === void 0 ? void 0 : pagination.current,
        pageSize = (_pagination$pageSize = pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) !== null && _pagination$pageSize !== void 0 ? _pagination$pageSize : 10;
      updateDataSourceAndPaginate(current, pageSize);
      setInnerPagination({
        current: current,
        pageSize: pageSize
      });
    }, [pagination, updateDataSourceAndPaginate]);
    React.useEffect(function () {
      var _innerPagination$curr, _innerPagination$page;
      if (!pagination || !pagination.defaultCurrent) return;
      var isControlled = Boolean(pagination.current);
      if (isControlled) return;
      updateDataSourceAndPaginate((_innerPagination$curr = innerPagination.current) !== null && _innerPagination$curr !== void 0 ? _innerPagination$curr : pagination.defaultCurrent, (_innerPagination$page = innerPagination.pageSize) !== null && _innerPagination$page !== void 0 ? _innerPagination$page : pagination.defaultPageSize);
    }, [updateDataSourceAndPaginate]);
    var renderPagination = function renderPagination() {
      if (!pagination) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__pagination")
      }, /* @__PURE__ */React__default["default"].createElement(Pagination, _objectSpread$24(_objectSpread$24({}, pagination), {}, {
        onChange: function onChange(pageInfo) {
          var _props$pagination, _props$pagination$onC, _props$onPageChange;
          (_props$pagination = props.pagination) === null || _props$pagination === void 0 || (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 || _props$pagination$onC.call(_props$pagination, pageInfo);
          setInnerPagination(pageInfo);
          var newData = updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
          (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 || _props$onPageChange.call(props, pageInfo, newData);
          var ref = tableContentRef.current;
          if (ref.scrollTo) {
            ref.scrollTo({
              top: 0,
              left: 0
            });
          } else {
            ref.scrollTop = 0;
            ref.scrollLeft = 0;
          }
        }
      })));
    };
    return {
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      innerPagination: innerPagination,
      renderPagination: renderPagination
    };
  }

  function formatCSSUnit(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useStyle(props) {
    var className = props.className,
      size = props.size,
      bordered = props.bordered,
      stripe = props.stripe,
      hover = props.hover,
      verticalAlign = props.verticalAlign,
      height = props.height,
      maxHeight = props.maxHeight,
      tableContentWidth = props.tableContentWidth;
    var _useClassName = useClassName(),
      tableBaseClass = _useClassName.tableBaseClass,
      tableAlignClasses = _useClassName.tableAlignClasses;
    var _useCommonClassName = useCommonClassName(),
      sizeClassNames = _useCommonClassName.sizeClassNames;
    var tableClasses = React.useMemo(function () {
      return [tableBaseClass.table, size !== "medium" && sizeClassNames[size], verticalAlign !== "middle" && tableAlignClasses[verticalAlign], _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableBaseClass.bordered, bordered), tableBaseClass.striped, stripe), tableBaseClass.hover, hover), tableBaseClass.loading, props.loading), tableBaseClass.affixedHeader, props.headerAffixedTop), tableBaseClass.rowspanAndColspan, props.rowspanAndColspan), className];
    }, [className, bordered, hover, props.loading, props.headerAffixedTop, props.rowspanAndColspan, size, sizeClassNames, stripe, tableAlignClasses, tableBaseClass, verticalAlign]);
    var tableContentStyles = React.useMemo(function () {
      return {
        height: formatCSSUnit(height),
        maxHeight: formatCSSUnit(maxHeight)
      };
    }, [height, maxHeight]);
    var tableElementStyles = React.useMemo(function () {
      return {
        width: formatCSSUnit(tableContentWidth)
      };
    }, [tableContentWidth]);
    return {
      tableClasses: tableClasses,
      sizeClassNames: sizeClassNames,
      tableElementStyles: tableElementStyles,
      tableContentStyles: tableContentStyles
    };
  }

  function ownKeys$24(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$23(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$24(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$24(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var BaseTable$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _affixHeaderRef$curre;
    var props = useDefaultProps(originalProps, baseTableDefaultProps);
    var _props$showHeader = props.showHeader,
      showHeader = _props$showHeader === void 0 ? true : _props$showHeader,
      tableLayout = props.tableLayout,
      height = props.height,
      data = props.data,
      columns = props.columns,
      style = props.style,
      headerAffixedTop = props.headerAffixedTop,
      bordered = props.bordered,
      resizable = props.resizable,
      lazyLoad = props.lazyLoad,
      pagination = props.pagination;
    var tableRef = React.useRef(null);
    var tableElmRef = React.useRef(null);
    var bottomContentRef = React.useRef(null);
    var _useState = React.useState(0),
      _useState2 = _slicedToArray$1(_useState, 2),
      tableFootHeight = _useState2[0],
      setTableFootHeight = _useState2[1];
    var _useState3 = React.useState(0),
      _useState4 = _slicedToArray$1(_useState3, 2),
      lastTrHeight = _useState4[0],
      setLastTrHeight = _useState4[1];
    var allTableClasses = useClassName();
    var classPrefix = allTableClasses.classPrefix,
      virtualScrollClasses = allTableClasses.virtualScrollClasses,
      tableLayoutClasses = allTableClasses.tableLayoutClasses,
      tableBaseClass = allTableClasses.tableBaseClass,
      tableColFixedClasses = allTableClasses.tableColFixedClasses;
    var _useStyle = useStyle(props),
      tableClasses = _useStyle.tableClasses,
      sizeClassNames = _useStyle.sizeClassNames,
      tableContentStyles = _useStyle.tableContentStyles,
      tableElementStyles = _useStyle.tableElementStyles;
    var _useTableHeader = useTableHeader({
        columns: props.columns
      }),
      isMultipleHeader = _useTableHeader.isMultipleHeader,
      spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
      thList = _useTableHeader.thList;
    var finalColumns = React.useMemo(function () {
      return (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns;
    }, [spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns, columns]);
    var _useElementLazyRender = useElementLazyRender(tableRef, lazyLoad),
      showElement = _useElementLazyRender.showElement;
    var paginationAffixRef = React.useRef(null);
    var horizontalScrollAffixRef = React.useRef(null);
    var headerTopAffixRef = React.useRef(null);
    var footerBottomAffixRef = React.useRef(null);
    var _useAffix = useAffix(props, {
        showElement: showElement
      }),
      affixHeaderRef = _useAffix.affixHeaderRef,
      affixFooterRef = _useAffix.affixFooterRef,
      horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
      paginationRef = _useAffix.paginationRef,
      showAffixHeader = _useAffix.showAffixHeader,
      showAffixFooter = _useAffix.showAffixFooter,
      showAffixPagination = _useAffix.showAffixPagination,
      onHorizontalScroll = _useAffix.onHorizontalScroll,
      setTableContentRef = _useAffix.setTableContentRef,
      updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter;
    var _useFixed = useFixed(props, finalColumns, {
        paginationAffixRef: paginationAffixRef,
        horizontalScrollAffixRef: horizontalScrollAffixRef,
        headerTopAffixRef: headerTopAffixRef,
        footerBottomAffixRef: footerBottomAffixRef
      }),
      scrollbarWidth = _useFixed.scrollbarWidth,
      tableWidth = _useFixed.tableWidth,
      tableElmWidth = _useFixed.tableElmWidth,
      tableContentRef = _useFixed.tableContentRef,
      isFixedHeader = _useFixed.isFixedHeader,
      isWidthOverflow = _useFixed.isWidthOverflow,
      isFixedColumn = _useFixed.isFixedColumn,
      thWidthList = _useFixed.thWidthList,
      showColumnShadow = _useFixed.showColumnShadow,
      rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
      setData = _useFixed.setData,
      refreshTable = _useFixed.refreshTable,
      setTableElmWidth = _useFixed.setTableElmWidth,
      emitScrollEvent = _useFixed.emitScrollEvent,
      setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
      updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
      getThWidthList = _useFixed.getThWidthList,
      updateThWidthList = _useFixed.updateThWidthList,
      addTableResizeObserver = _useFixed.addTableResizeObserver,
      updateTableAfterColumnResize = _useFixed.updateTableAfterColumnResize;
    var _usePagination = usePagination(props, tableContentRef),
      dataSource = _usePagination.dataSource,
      innerPagination = _usePagination.innerPagination,
      isPaginateData = _usePagination.isPaginateData,
      renderPagination = _usePagination.renderPagination;
    var columnResizeParams = useColumnResize({
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      showColumnShadow: showColumnShadow,
      getThWidthList: getThWidthList,
      updateThWidthList: updateThWidthList,
      setTableElmWidth: setTableElmWidth,
      updateTableAfterColumnResize: updateTableAfterColumnResize,
      onColumnResizeChange: props.onColumnResizeChange
    });
    var resizeLineRef = columnResizeParams.resizeLineRef,
      resizeLineStyle = columnResizeParams.resizeLineStyle,
      setEffectColMap = columnResizeParams.setEffectColMap,
      updateTableWidthOnColumnChange = columnResizeParams.updateTableWidthOnColumnChange;
    var dynamicBaseTableClasses = classNames$1(tableClasses.concat(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableBaseClass.headerFixed, isFixedHeader), tableBaseClass.columnFixed, isFixedColumn), tableBaseClass.widthOverflow, isWidthOverflow), tableBaseClass.multipleHeader, isMultipleHeader), tableColFixedClasses.leftShadow, showColumnShadow.left), tableColFixedClasses.rightShadow, showColumnShadow.right), tableBaseClass.columnResizableTable, props.resizable)));
    var tableElmClasses = classNames$1([[tableLayoutClasses[tableLayout || "fixed"]], _defineProperty$2({}, tableBaseClass.fullHeight, height)]);
    var showRightDivider = React.useMemo(function () {
      return props.bordered && isFixedHeader && (isMultipleHeader && isWidthOverflow || !isMultipleHeader);
    }, [isFixedHeader, isMultipleHeader, isWidthOverflow, props.bordered]);
    var _useState5 = React.useState(0),
      _useState6 = _slicedToArray$1(_useState5, 2),
      dividerBottom = _useState6[0],
      setDividerBottom = _useState6[1];
    React.useEffect(function () {
      var _bottomContentRef$cur, _paginationRef$curren;
      if (!bordered) return;
      var bottomRect = (_bottomContentRef$cur = bottomContentRef.current) === null || _bottomContentRef$cur === void 0 ? void 0 : _bottomContentRef$cur.getBoundingClientRect();
      var paginationRect = (_paginationRef$curren = paginationRef.current) === null || _paginationRef$curren === void 0 ? void 0 : _paginationRef$curren.getBoundingClientRect();
      var bottom2 = ((bottomRect === null || bottomRect === void 0 ? void 0 : bottomRect.height) || 0) + ((paginationRect === null || paginationRect === void 0 ? void 0 : paginationRect.height) || 0);
      setDividerBottom(bottom2);
    }, [bottomContentRef, paginationRef, bordered]);
    React.useEffect(function () {
      setUseFixedTableElmRef(tableElmRef.current);
    }, [tableElmRef]);
    React.useEffect(function () {
      setData(isPaginateData ? dataSource : props.data);
    }, [props.data, dataSource, isPaginateData]);
    var _useState7 = React.useState(props.columns || []),
      _useState8 = _slicedToArray$1(_useState7, 2),
      lastLeafColumns = _useState8[0],
      setLastLeafColumns = _useState8[1];
    React.useEffect(function () {
      if (lastLeafColumns.map(function (t) {
        return t.colKey;
      }).join() !== spansAndLeafNodes.leafColumns.map(function (t) {
        return t.colKey;
      }).join()) {
        var _props$onLeafColumnsC;
        (_props$onLeafColumnsC = props.onLeafColumnsChange) === null || _props$onLeafColumnsC === void 0 || _props$onLeafColumnsC.call(props, spansAndLeafNodes.leafColumns);
        setLastLeafColumns(spansAndLeafNodes.leafColumns);
      }
      setEffectColMap(spansAndLeafNodes.leafColumns, null);
    }, [spansAndLeafNodes.leafColumns]);
    var onFixedChange = function onFixedChange() {
      var timer = setTimeout(function () {
        onHorizontalScroll();
        updateAffixHeaderOrFooter();
        clearTimeout(timer);
      }, 0);
    };
    var virtualScrollParams = React.useMemo(function () {
      return {
        data: data,
        scroll: _objectSpread$23(_objectSpread$23({}, props.scroll), {}, {
          fixedRows: props.fixedRows
        })
      };
    }, [data, props.scroll, props.fixedRows]);
    var virtualConfig = useVirtualScroll(tableContentRef, virtualScrollParams);
    var lastScrollY = -1;
    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      var target = e.target;
      var top = target.scrollTop;
      if (lastScrollY !== top) {
        virtualConfig.isVirtualScroll && virtualConfig.handleScroll();
      } else {
        lastScrollY = -1;
        updateColumnFixedShadow(target);
      }
      lastScrollY = top;
      onHorizontalScroll(target);
      emitScrollEvent(e);
    };
    var scrollColumnIntoView = function scrollColumnIntoView(colKey) {
      if (!tableContentRef.current) return;
      var thDom = tableContentRef.current.querySelector("th[data-colkey=\"".concat(colKey, "\"]"));
      var fixedThDom = tableContentRef.current.querySelectorAll("th.t-table__cell--fixed-left");
      var totalWidth = 0;
      for (var i = 0, len = fixedThDom.length; i < len; i++) {
        totalWidth += fixedThDom[i].getBoundingClientRect().width;
      }
      var domRect = thDom.getBoundingClientRect();
      var contentRect = tableContentRef.current.getBoundingClientRect();
      var distance = domRect.left - contentRect.left - totalWidth;
      tableContentRef.current.scrollTo({
        left: distance,
        behavior: "smooth"
      });
    };
    React.useImperativeHandle(ref, function () {
      return {
        showColumnShadow: showColumnShadow,
        tableElement: tableRef.current,
        tableHtmlElement: tableElmRef.current,
        tableContentElement: tableContentRef.current,
        affixHeaderElement: affixHeaderRef.current,
        refreshTable: refreshTable,
        scrollToElement: virtualConfig.scrollToElement,
        scrollColumnIntoView: scrollColumnIntoView,
        updateTableWidthOnColumnChange: updateTableWidthOnColumnChange
      };
    });
    var getTFootHeight = function getTFootHeight() {
      requestAnimationFrame(function () {
        var _tableElmRef$current$;
        if (!tableElmRef.current) return;
        var height2 = (_tableElmRef$current$ = tableElmRef.current.querySelector("tfoot")) === null || _tableElmRef$current$ === void 0 ? void 0 : _tableElmRef$current$.offsetHeight;
        setTableFootHeight(height2 || 0);
      });
    };
    var getLastTrHeight = function getLastTrHeight() {
      requestAnimationFrame(function () {
        if (!tableElmRef.current || !props.firstFullRow) return;
        var tbody = tableElmRef.current.querySelector("tbody");
        var allTr = tbody === null || tbody === void 0 ? void 0 : tbody.querySelectorAll("tr");
        var lastTr = allTr === null || allTr === void 0 ? void 0 : allTr[allTr.length - 1];
        var height2 = lastTr === null || lastTr === void 0 ? void 0 : lastTr.offsetHeight;
        setLastTrHeight(height2 || 0);
      });
    };
    React.useEffect(getTFootHeight, [tableElmRef, props.footData, props.footerSummary]);
    React.useEffect(getLastTrHeight, [tableElmRef, props.firstFullRow]);
    React.useEffect(function () {
      setTableContentRef(tableContentRef.current);
    }, [tableContentRef]);
    React.useEffect(function () {
      return addTableResizeObserver(tableRef.current);
    }, [tableRef]);
    var newData = isPaginateData ? dataSource : data;
    var renderColGroup = function renderColGroup() {
      var isFixedHeader2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return /* @__PURE__ */React__default["default"].createElement("colgroup", null, finalColumns.map(function (col, index) {
        var style2 = {
          width: formatCSSUnit((isFixedHeader2 || resizable ? thWidthList.current[col.colKey] : void 0) || col.width)
        };
        if (col.minWidth) {
          style2.minWidth = formatCSSUnit(col.minWidth);
        }
        if (!style2.width && !col.minWidth && props.tableLayout === "fixed") {
          style2.minWidth = "80px";
        }
        return /* @__PURE__ */React__default["default"].createElement("col", {
          key: col.colKey || index,
          style: style2
        });
      }));
    };
    var headProps = {
      isFixedHeader: isFixedHeader,
      rowAndColFixedPosition: rowAndColFixedPosition,
      isMultipleHeader: isMultipleHeader,
      bordered: props.bordered,
      maxHeight: props.maxHeight,
      height: props.height,
      spansAndLeafNodes: spansAndLeafNodes,
      thList: thList,
      thWidthList: thWidthList.current,
      resizable: props.resizable,
      columnResizeParams: columnResizeParams,
      classPrefix: classPrefix,
      ellipsisOverlayClassName: props.size !== "medium" ? sizeClassNames[props.size] : "",
      attach: props.attach,
      thDraggable: props.thDraggable,
      showColumnShadow: showColumnShadow
    };
    var headUseMemoDependencies = [resizable, thWidthList, isFixedHeader, rowAndColFixedPosition, isMultipleHeader, spansAndLeafNodes, thList, columnResizeParams, classPrefix, props.bordered, props.resizable, props.size];
    var affixedLeftBorder = props.bordered ? 1 : 0;
    var IEHeaderWrap = getIEVersion() <= 11 ? 4 : 0;
    var affixHeaderHeight = (((_affixHeaderRef$curre = affixHeaderRef.current) === null || _affixHeaderRef$curre === void 0 ? void 0 : _affixHeaderRef$curre.getBoundingClientRect().height) || 0) - IEHeaderWrap;
    var renderFixedHeader = function renderFixedHeader() {
      if (!showHeader) return null;
      var headerOpacity = headerAffixedTop ? Number(showAffixHeader) : 1;
      var barWidth = isWidthOverflow ? scrollbarWidth : 0;
      var affixHeaderWrapHeight = affixHeaderHeight - barWidth;
      var affixHeaderWrapHeightStyle = {
        width: "".concat(tableWidth.current, "px"),
        height: "".concat(affixHeaderWrapHeight, "px"),
        opacity: headerOpacity
      };
      var affixedHeader = Boolean((headerAffixedTop || virtualConfig.isVirtualScroll) && tableWidth.current) && /* @__PURE__ */React__default["default"].createElement("div", {
        ref: affixHeaderRef,
        style: {
          width: "".concat(tableWidth.current - affixedLeftBorder, "px"),
          opacity: headerOpacity
        },
        className: classNames$1(["scrollbar", _defineProperty$2({}, tableBaseClass.affixedHeaderElm, props.headerAffixedTop || virtualConfig.isVirtualScroll)])
      }, /* @__PURE__ */React__default["default"].createElement("table", {
        className: classNames$1(tableElmClasses),
        style: _objectSpread$23(_objectSpread$23({}, tableElementStyles), {}, {
          width: tableElmWidth.current ? "".concat(tableElmWidth.current, "px") : void 0
        })
      }, renderColGroup(true), showHeader && /* @__PURE__ */React__default["default"].createElement(THead, _objectSpread$23({}, headProps))));
      var affixHeaderWithWrap = /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableBaseClass.affixedHeaderWrap,
        style: affixHeaderWrapHeightStyle
      }, affixedHeader);
      return affixHeaderWithWrap;
    };
    var renderAffixedHeader = function renderAffixedHeader() {
      if (!showHeader) return null;
      return !!(virtualConfig.isVirtualScroll || props.headerAffixedTop) && (props.headerAffixedTop ? /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$23(_objectSpread$23({
        offsetTop: 0
      }, getAffixProps(props.headerAffixedTop, props.headerAffixProps)), {}, {
        ref: headerTopAffixRef,
        onFixedChange: onFixedChange
      }), renderFixedHeader()) : isFixedHeader && renderFixedHeader());
    };
    var renderAffixedFooter = function renderAffixedFooter() {
      var _props$footData;
      var marginScrollbarWidth = isWidthOverflow ? scrollbarWidth : 0;
      if (bordered) {
        marginScrollbarWidth += 1;
      }
      var totalMarginTop = tableFootHeight - lastTrHeight + marginScrollbarWidth;
      var affixedFooter = Boolean((virtualConfig.isVirtualScroll || props.footerAffixedBottom) && ((_props$footData = props.footData) === null || _props$footData === void 0 ? void 0 : _props$footData.length) && tableWidth.current) && /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$23(_objectSpread$23({
        className: tableBaseClass.affixedFooterWrap,
        onFixedChange: onFixedChange,
        offsetBottom: marginScrollbarWidth || 0
      }, getAffixProps(props.footerAffixedBottom)), {}, {
        ref: footerBottomAffixRef,
        style: {
          marginTop: "".concat(-1 * totalMarginTop, "px")
        }
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        ref: affixFooterRef,
        style: {
          width: "".concat(tableWidth.current - affixedLeftBorder, "px"),
          opacity: Number(showAffixFooter)
        },
        className: classNames$1(["scrollbar", _defineProperty$2({}, tableBaseClass.affixedFooterElm, props.footerAffixedBottom || virtualConfig.isVirtualScroll)])
      }, /* @__PURE__ */React__default["default"].createElement("table", {
        className: tableElmClasses,
        style: _objectSpread$23(_objectSpread$23({}, tableElementStyles), {}, {
          width: tableElmWidth.current ? "".concat(tableElmWidth.current, "px") : void 0
        })
      }, renderColGroup(true), /* @__PURE__ */React__default["default"].createElement(TFoot, {
        rowKey: props.rowKey,
        isFixedHeader: isFixedHeader,
        rowAndColFixedPosition: rowAndColFixedPosition,
        footData: props.footData,
        columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
        rowAttributes: props.rowAttributes,
        rowClassName: props.rowClassName,
        thWidthList: thWidthList.current,
        footerSummary: props.footerSummary,
        rowspanAndColspanInFooter: props.rowspanAndColspanInFooter
      }))));
      return affixedFooter;
    };
    var tableBodyProps = _objectSpread$23(_objectSpread$23({
      classPrefix: classPrefix,
      ellipsisOverlayClassName: props.size !== "medium" ? sizeClassNames[props.size] : "",
      rowAndColFixedPosition: rowAndColFixedPosition,
      showColumnShadow: showColumnShadow,
      data: newData,
      virtualConfig: virtualConfig,
      handleRowMounted: virtualConfig.handleRowMounted,
      columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
      tableRef: tableRef,
      tableContentRef: tableContentRef,
      tableWidth: tableWidth,
      isWidthOverflow: isWidthOverflow,
      allTableClasses: allTableClasses,
      rowKey: props.rowKey || "id",
      scroll: props.scroll,
      cellEmptyContent: props.cellEmptyContent,
      renderExpandedRow: props.renderExpandedRow
    }, pick$1(props, extendTableProps)), {}, {
      pagination: innerPagination
    });
    var translate = "translate(0, ".concat(virtualConfig.scrollHeight + (affixHeaderHeight || 0) + (tableFootHeight || 0), "px)");
    var virtualStyle = {
      transform: translate,
      msTransform: translate,
      MozTransform: translate,
      WebkitTransform: translate
    };
    var tableContent = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: tableContentRef,
      className: tableBaseClass.content,
      style: tableContentStyles,
      onScroll: onInnerVirtualScroll
    }, virtualConfig.isVirtualScroll && /* @__PURE__ */React__default["default"].createElement("div", {
      className: virtualScrollClasses.cursor,
      style: virtualStyle
    }), /* @__PURE__ */React__default["default"].createElement("table", {
      ref: tableElmRef,
      className: classNames$1(tableElmClasses),
      style: _objectSpread$23(_objectSpread$23({}, tableElementStyles), {}, {
        width: resizable && isWidthOverflow && tableElmWidth.current ? "".concat(tableElmWidth.current, "px") : tableElementStyles.width
      })
    }, renderColGroup(false), React.useMemo(function () {
      if (!showHeader) return null;
      return /* @__PURE__ */React__default["default"].createElement(THead, _objectSpread$23({}, _objectSpread$23(_objectSpread$23({}, headProps), {}, {
        thWidthList: resizable ? thWidthList.current : {}
      })));
    }, headUseMemoDependencies), React.useMemo(function () {
      return /* @__PURE__ */React__default["default"].createElement(TBody, _objectSpread$23({}, tableBodyProps));
    }, [allTableClasses, tableBodyProps.ellipsisOverlayClassName, tableBodyProps.rowAndColFixedPosition, tableBodyProps.showColumnShadow, tableBodyProps.data, tableBodyProps.columns, tableRef, tableContentRef, tableWidth, isWidthOverflow, virtualConfig, props.rowKey, props.rowClassName, props.rowAttributes, props.loading, props.empty, props.fixedRows, props.firstFullRow, props.lastFullRow, props.rowspanAndColspan, props.scroll, props.cellEmptyContent]), React.useMemo(function () {
      return /* @__PURE__ */React__default["default"].createElement(TFoot, {
        rowKey: props.rowKey,
        isFixedHeader: isFixedHeader,
        rowAndColFixedPosition: rowAndColFixedPosition,
        footData: props.footData,
        columns: (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.leafColumns) || columns,
        rowAttributes: props.rowAttributes,
        rowClassName: props.rowClassName,
        thWidthList: thWidthList.current,
        footerSummary: props.footerSummary,
        rowspanAndColspanInFooter: props.rowspanAndColspanInFooter,
        virtualScroll: virtualConfig.isVirtualScroll
      });
    }, [isFixedHeader, rowAndColFixedPosition, spansAndLeafNodes, columns, thWidthList, props.rowKey, props.footData, props.rowAttributes, props.rowClassName, props.footerSummary, virtualConfig.isVirtualScroll])));
    var loading = props.loading,
      loadingProps = props.loadingProps;
    var customLoadingText = loading;
    var loadingContent = tableRef.current && loading !== void 0 && /* @__PURE__ */React__default["default"].createElement(Loading, _objectSpread$23({
      loading: !!loading,
      text: customLoadingText,
      attach: function attach() {
        return tableRef.current;
      },
      showOverlay: true,
      size: "small"
    }, loadingProps));
    var topContent = props.topContent,
      bottomContent = props.bottomContent;
    var paginationNode = pagination ? /* @__PURE__ */React__default["default"].createElement("div", {
      ref: paginationRef,
      className: tableBaseClass.paginationWrap,
      style: {
        opacity: Number(showAffixPagination)
      }
    }, renderPagination()) : null;
    var bottom = !!bottomContent && /* @__PURE__ */React__default["default"].createElement("div", {
      ref: bottomContentRef,
      className: tableBaseClass.bottomContent
    }, bottomContent);
    var affixedHeaderContent = React.useMemo(renderAffixedHeader, [].concat(headUseMemoDependencies, [showAffixHeader, tableWidth, tableElmWidth, affixHeaderRef, affixedLeftBorder, tableElmClasses, tableElementStyles, columns, spansAndLeafNodes, showHeader, props.headerAffixedTop]));
    var affixedFooterContent = React.useMemo(renderAffixedFooter, [showAffixFooter, isFixedHeader, rowAndColFixedPosition, spansAndLeafNodes, columns, thWidthList, tableBaseClass, tableElementStyles, tableElmWidth, affixFooterRef, affixedLeftBorder, bordered, isWidthOverflow, scrollbarWidth, tableElmClasses, tableFootHeight, lastTrHeight, tableWidth, virtualConfig.isVirtualScroll, props.rowKey, props.footData, props.rowAttributes, props.rowClassName, props.footerSummary, props.footerAffixedBottom, props.rowspanAndColspanInFooter, tableWidth.current]);
    var scrollbarDivider = React.useMemo(function () {
      var _tableContentRef$curr;
      if (!showRightDivider) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableBaseClass.scrollbarDivider,
        style: {
          right: "".concat(scrollbarWidth, "px"),
          bottom: dividerBottom ? "".concat(dividerBottom, "px") : void 0,
          height: "".concat((_tableContentRef$curr = tableContentRef.current) === null || _tableContentRef$curr === void 0 ? void 0 : _tableContentRef$curr.getBoundingClientRect().height, "px")
        }
      });
    }, [tableBaseClass, showRightDivider, scrollbarWidth, dividerBottom, tableContentRef]);
    var affixedScrollbar = props.horizontalScrollAffixedBottom && /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$23(_objectSpread$23({
      offsetBottom: 0
    }, getAffixProps(props.horizontalScrollAffixedBottom)), {}, {
      ref: horizontalScrollAffixRef,
      style: {
        marginTop: "-".concat(scrollbarWidth * 2, "px")
      }
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: horizontalScrollbarRef,
      className: classNames$1(["scrollbar", tableBaseClass.obviousScrollbar]),
      style: {
        width: "".concat(tableWidth.current, "px"),
        overflow: "auto",
        opacity: Number(showAffixFooter)
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      style: {
        width: "".concat(tableElmWidth.current, "px"),
        height: "5px"
      }
    })));
    var affixedPaginationContent = props.paginationAffixedBottom ? /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$23(_objectSpread$23({
      offsetBottom: 0
    }, getAffixProps(props.paginationAffixedBottom)), {}, {
      ref: paginationAffixRef
    }), paginationNode) : paginationNode;
    var tableElements = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, !!topContent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.topContent
    }, topContent), affixedHeaderContent, tableContent, affixedFooterContent, loadingContent, scrollbarDivider, bottom, affixedScrollbar, affixedPaginationContent, resizable && /* @__PURE__ */React__default["default"].createElement("div", {
      ref: resizeLineRef,
      className: tableBaseClass.resizeLine,
      style: resizeLineStyle
    }));
    if (resizable && tableLayout === "auto") {
      log.warn("Table", "table-layout can not be `auto`, cause you are using column resizable, set `table-layout: fixed` please.");
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: tableRef,
      className: classNames$1(dynamicBaseTableClasses),
      style: _objectSpread$23({
        position: "relative"
      }, style)
    }, tableElements);
  });
  BaseTable$1.displayName = "BaseTable";

  function useDeepEffect(effect, deps) {
    var isInitial = React.useRef(true);
    var prevDeps = React.useRef(deps);
    React.useEffect(function () {
      var isSame = isEqual(prevDeps.current, deps);
      if (isInitial.current || !isSame) {
        effect();
      }
      isInitial.current = false;
      prevDeps.current = deps;
    }, [effect, deps]);
  }

  function ownKeys$23(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$22(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$23(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$23(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var isFunction = function isFunction(arg) {
    return typeof arg === "function";
  };
  var useSetState = function useSetState() {
    var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _useState = React.useState(initialState),
      _useState2 = _slicedToArray$1(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    var setMergeState = React.useCallback(function (patch) {
      setState(function (prevState) {
        return _objectSpread$22(_objectSpread$22({}, prevState), isFunction(patch) ? patch(prevState) : patch);
      });
    }, []);
    return [state, setMergeState];
  };

  var dialogCardDefaultProps = {
    closeBtn: true,
    footer: true,
    header: true,
    theme: "default"
  };
  var dialogDefaultProps = {
    closeOnEscKeydown: void 0,
    closeOnOverlayClick: void 0,
    destroyOnClose: false,
    draggable: false,
    mode: "modal",
    placement: "top",
    preventScrollThrough: true,
    showInAttachedElement: false,
    showOverlay: true,
    lazy: true
  };

  var _excluded$z = ["theme", "header", "closeBtn", "footer", "body", "children", "className", "onCancel", "onConfirm", "onCloseBtnClick", "cancelBtn", "confirmBtn", "confirmLoading"];
  function ownKeys$22(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$21(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$22(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$22(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var renderDialogButton = function renderDialogButton(btn, defaultProps) {
    var result = null;
    if (isString(btn)) {
      result = /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$21({}, defaultProps), btn);
    } else if (/*#__PURE__*/React.isValidElement(btn)) {
      result = btn;
    } else if (isObject(btn)) {
      result = /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$21(_objectSpread$21({}, defaultProps), btn));
    } else if (isFunction$1(btn)) {
      result = btn();
    }
    return result;
  };
  var DialogCard$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var componentCls = "".concat(classPrefix, "-dialog");
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon,
        InfoCircleFilledIcon: TdInfoCircleFilledIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon$1
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon;
    var _useLocaleReceiver = useLocaleReceiver("dialog"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);
    var _useDefaultProps = useDefaultProps(props, dialogCardDefaultProps),
      theme = _useDefaultProps.theme,
      header = _useDefaultProps.header,
      closeBtn = _useDefaultProps.closeBtn,
      footer = _useDefaultProps.footer,
      body = _useDefaultProps.body,
      children = _useDefaultProps.children,
      className = _useDefaultProps.className,
      onCancel = _useDefaultProps.onCancel,
      onConfirm = _useDefaultProps.onConfirm,
      onCloseBtnClick = _useDefaultProps.onCloseBtnClick,
      _useDefaultProps$canc = _useDefaultProps.cancelBtn,
      cancelBtn = _useDefaultProps$canc === void 0 ? cancelText : _useDefaultProps$canc,
      _useDefaultProps$conf = _useDefaultProps.confirmBtn,
      confirmBtn = _useDefaultProps$conf === void 0 ? confirmText : _useDefaultProps$conf,
      confirmLoading = _useDefaultProps.confirmLoading,
      otherProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$z);
    var renderHeaderContent = function renderHeaderContent() {
      var iconMap = {
        info: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-info")
        }),
        warning: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-warning")
        }),
        error: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-error")
        }),
        danger: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-error")
        }),
        success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-success")
        })
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentCls, "__header-content")
      }, iconMap[theme], header);
    };
    var renderCloseBtn = function renderCloseBtn() {
      if (!closeBtn) {
        return null;
      }
      var closeIcon = function closeIcon() {
        return closeBtn === true ? /* @__PURE__ */React__default["default"].createElement(CloseIcon, null) : closeBtn;
      };
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(componentCls, "__close"),
        style: {
          marginLeft: "auto"
        },
        onClick: function onClick(e) {
          return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
            e: e
          });
        }
      }, closeIcon());
    };
    var renderHeader = function renderHeader() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(componentCls, "__header"))
      }, renderHeaderContent(), renderCloseBtn());
    };
    var renderFooter = function renderFooter() {
      var defaultFooter = function defaultFooter() {
        var _cancelBtn$props;
        var renderCancelBtn = renderDialogButton(cancelBtn, {
          variant: "outline",
          onClick: function onClick(e) {
            return onCancel === null || onCancel === void 0 ? void 0 : onCancel({
              e: e
            });
          },
          className: classNames$1("".concat(componentCls, "__cancel"), cancelBtn === null || cancelBtn === void 0 || (_cancelBtn$props = cancelBtn.props) === null || _cancelBtn$props === void 0 ? void 0 : _cancelBtn$props.className)
        });
        var renderConfirmBtn = renderDialogButton(confirmBtn, {
          theme: "primary",
          loading: confirmLoading,
          onClick: function onClick(e) {
            return onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
              e: e
            });
          },
          className: classNames$1("".concat(componentCls, "__confirm"), confirmBtn === null || confirmBtn === void 0 ? void 0 : confirmBtn.className)
        });
        return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderCancelBtn, renderConfirmBtn);
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentCls, "__footer")
      }, parseTNode(footer, null, defaultFooter()));
    };
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$21(_objectSpread$21({
      ref: ref
    }, otherProps), {}, {
      className: classNames$1(componentCls, "".concat(componentCls, "--default"), className)
    }), !!header && renderHeader(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(componentCls, "__body")
    }, body || children), !!footer && renderFooter());
  });
  DialogCard$1.displayName = "DialogCard";

  var useMouseEvent = function useMouseEvent(elementRef, options) {
    var _options$enabled = options.enabled,
      enabled = _options$enabled === void 0 ? true : _options$enabled,
      _options$enableTouch = options.enableTouch,
      enableTouch = _options$enableTouch === void 0 ? true : _options$enableTouch;
    var isMovingRef = React.useRef(false);
    var normalizeEvent = function normalizeEvent(e) {
      if (!enableTouch) {
        return e;
      }
      if ("touches" in e && e.touches.length > 0) {
        return e.touches[0];
      }
      if ("changedTouches" in e && e.changedTouches.length > 0) {
        return e.changedTouches[0];
      }
      if ("clientX" in e && "clientY" in e) {
        return e;
      }
      return void 0;
    };
    var getCoordinate = function getCoordinate(event) {
      var _elementRef$current;
      var rect = (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.getBoundingClientRect();
      if (!rect) {
        return {
          x: 0,
          y: 0
        };
      }
      var clientX = event.clientX,
        clientY = event.clientY;
      var left = clientX - rect.left;
      var top = clientY - rect.top;
      return {
        x: Math.min(Math.max(0, left), rect.width),
        y: Math.min(Math.max(0, top), rect.height)
      };
    };
    var emitMouseChange = function emitMouseChange(e, handler) {
      if (!handler) return;
      var event = normalizeEvent(e);
      var coordinate = getCoordinate(event);
      handler(event, {
        coordinate: coordinate
      });
    };
    var handleMouseMove = function handleMouseMove(e) {
      if (!isMovingRef.current) return;
      e.preventDefault();
      emitMouseChange(e, options.onMove);
    };
    var _handleMouseUp = function handleMouseUp(e) {
      if (!isMovingRef.current) return;
      isMovingRef.current = false;
      emitMouseChange(e, options.onUp);
      document.removeEventListener("mouseup", _handleMouseUp);
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("touchend", _handleMouseUp);
      document.removeEventListener("touchmove", handleMouseMove);
    };
    var handleMouseDown = function handleMouseDown(e) {
      isMovingRef.current = true;
      emitMouseChange(e, options.onDown);
      document.addEventListener("mouseup", _handleMouseUp);
      document.addEventListener("mousemove", handleMouseMove);
      if (!enableTouch) return;
      document.addEventListener("touchend", _handleMouseUp);
      document.addEventListener("touchmove", handleMouseMove, {
        passive: false
      });
    };
    var handleMouseEnter = function handleMouseEnter(e) {
      emitMouseChange(e, options.onEnter);
    };
    var handleMouseLeave = function handleMouseLeave(e) {
      emitMouseChange(e, options.onLeave);
    };
    React.useEffect(function () {
      var el = elementRef.current;
      if (!el || !enabled) return;
      el.addEventListener("mousedown", handleMouseDown);
      el.addEventListener("mousemove", handleMouseMove);
      el.addEventListener("mouseup", _handleMouseUp);
      options.onEnter && el.addEventListener("mouseenter", handleMouseEnter);
      options.onLeave && el.addEventListener("mouseleave", handleMouseLeave);
      if (!enableTouch) return;
      el.addEventListener("touchstart", handleMouseDown, {
        passive: false
      });
      el.addEventListener("touchend", _handleMouseUp);
      return function () {
        el.removeEventListener("mousedown", handleMouseDown);
        el.removeEventListener("mouseenter", handleMouseDown);
        el.removeEventListener("mouseleave", handleMouseLeave);
        el.removeEventListener("mousemove", handleMouseMove);
        el.removeEventListener("mouseup", _handleMouseUp);
        el.removeEventListener("touchstart", handleMouseDown);
        el.removeEventListener("touchend", _handleMouseUp);
      };
    }, [elementRef.current, options, enabled]);
    return {
      isMoving: isMovingRef.current
    };
  };

  var useDialogDrag = function useDialogDrag(props) {
    var dialogCardRef = props.dialogCardRef,
      canDraggable = props.canDraggable;
    var validWindow = (typeof window === "undefined" ? "undefined" : _typeof$3(window)) === "object";
    var screenHeight = validWindow ? window.innerHeight || document.documentElement.clientHeight : void 0;
    var screenWidth = validWindow ? window.innerWidth || document.documentElement.clientWidth : void 0;
    var dragOffset = React.useRef({
      x: 0,
      y: 0
    });
    useMouseEvent(dialogCardRef, {
      enabled: canDraggable,
      onDown: function onDown(e) {
        var _dialogCardRef$curren = dialogCardRef.current,
          offsetLeft = _dialogCardRef$curren.offsetLeft,
          offsetTop = _dialogCardRef$curren.offsetTop,
          offsetWidth = _dialogCardRef$curren.offsetWidth,
          offsetHeight = _dialogCardRef$curren.offsetHeight,
          style = _dialogCardRef$curren.style;
        if (offsetWidth > screenWidth || offsetHeight > screenHeight) return;
        style.cursor = "move";
        dragOffset.current = {
          x: e.clientX - offsetLeft,
          y: e.clientY - offsetTop
        };
      },
      onMove: function onMove(e) {
        var _dialogCardRef$curren2 = dialogCardRef.current,
          offsetWidth = _dialogCardRef$curren2.offsetWidth,
          offsetHeight = _dialogCardRef$curren2.offsetHeight,
          style = _dialogCardRef$curren2.style;
        var diffX = e.clientX - dragOffset.current.x;
        var diffY = e.clientY - dragOffset.current.y;
        if (diffX < 0) diffX = 0;
        if (diffY < 0) diffY = 0;
        if (screenWidth - offsetWidth - diffX < 0) diffX = screenWidth - offsetWidth;
        if (screenHeight - offsetHeight - diffY < 0) diffY = screenHeight - offsetHeight;
        style.position = "absolute";
        style.left = "".concat(diffX, "px");
        style.top = "".concat(diffY, "px");
      },
      onUp: function onUp() {
        dialogCardRef.current.style.cursor = "default";
      }
    });
  };

  var dialogSet = /* @__PURE__ */new Set();
  var useDialogEsc = function useDialogEsc(visible, dialog) {
    React.useEffect(function () {
      if (visible) {
        if (dialog !== null && dialog !== void 0 && dialog.current) {
          var _dialog$current;
          dialogSet.add(dialog);
          dialog === null || dialog === void 0 || (_dialog$current = dialog.current) === null || _dialog$current === void 0 || _dialog$current.focus();
        }
      } else if (dialogSet.has(dialog)) {
        var _dialogList;
        dialogSet["delete"](dialog);
        var dialogList = _toConsumableArray(dialogSet);
        (_dialogList = dialogList[dialogList.length - 1]) === null || _dialogList === void 0 || (_dialogList = _dialogList.current) === null || _dialogList === void 0 || _dialogList.focus();
      }
      return function () {
        dialogSet.forEach(function (item) {
          if (item.current === null) {
            dialogSet["delete"](item);
          }
        });
      };
    }, [visible, dialog]);
  };

  function useDialogPosition(visible, dialogCardRef) {
    var mousePosRef = React.useRef(null);
    var getClickPosition = function getClickPosition(e) {
      mousePosRef.current = {
        x: e.clientX,
        y: e.clientY
      };
      setTimeout(function () {
        mousePosRef.current = null;
      }, 100);
    };
    useIsomorphicLayoutEffect(function () {
      document.addEventListener("click", getClickPosition, true);
      return function () {
        document.removeEventListener("click", getClickPosition, true);
      };
    }, []);
    React.useEffect(function () {
      if (!visible) return;
      if (mousePosRef.current && dialogCardRef.current) {
        dialogCardRef.current.style.transformOrigin = "".concat(mousePosRef.current.x - dialogCardRef.current.offsetLeft, "px ").concat(mousePosRef.current.y - dialogCardRef.current.offsetTop, "px");
      }
    }, [visible, dialogCardRef]);
  }

  var key$2 = 1;
  function useDialogLockStyle(_ref) {
    var preventScrollThrough = _ref.preventScrollThrough,
      visible = _ref.visible,
      mode = _ref.mode,
      showInAttachedElement = _ref.showInAttachedElement;
    var lockStyleRef = React.useRef(null);
    var timerRef = React.useRef(null);
    var clearStyleFunc = React.useCallback(function () {
      clearTimeout(timerRef.current);
      timerRef.current = setTimeout(function () {
        var _lockStyleRef$current, _lockStyleRef$current2;
        (_lockStyleRef$current = lockStyleRef.current) === null || _lockStyleRef$current === void 0 || (_lockStyleRef$current = _lockStyleRef$current.parentNode) === null || _lockStyleRef$current === void 0 || (_lockStyleRef$current2 = _lockStyleRef$current.removeChild) === null || _lockStyleRef$current2 === void 0 || _lockStyleRef$current2.call(_lockStyleRef$current, lockStyleRef.current);
      }, 150);
    }, []);
    useIsomorphicLayoutEffect(function () {
      if (typeof document === "undefined" || !visible) return;
      if (!lockStyleRef.current) {
        lockStyleRef.current = document.createElement("style");
      }
      var hasScrollBar = document.documentElement.scrollHeight > document.documentElement.clientHeight;
      var scrollbarWidth = hasScrollBar ? getScrollbarWidth() : 0;
      lockStyleRef.current.dataset.id = "td_dialog_".concat(+new Date(), "_").concat(key$2 += 1);
      lockStyleRef.current.innerHTML = "\n      html body {\n        overflow-y: hidden;\n        width: calc(100% - ".concat(scrollbarWidth, "px);\n      }\n    ");
      return clearStyleFunc;
    }, [visible, clearStyleFunc]);
    useIsomorphicLayoutEffect(function () {
      if (typeof document === "undefined") return;
      if (mode !== "modal" || !preventScrollThrough || showInAttachedElement) return;
      if (visible) {
        document.head.appendChild(lockStyleRef.current);
      } else {
        clearStyleFunc();
      }
    }, [preventScrollThrough, visible, mode, showInAttachedElement, clearStyleFunc]);
  }

  function parseValueToPx(value) {
    if (typeof value === "number") return "".concat(value, "px");
    return value;
  }

  var _excluded$y = ["children"],
    _excluded2$3 = ["className", "dialogClassName", "style", "width", "mode", "zIndex", "visible", "attach", "onBeforeOpen", "onBeforeClose", "onOpened", "onCancel", "onConfirm", "onClose", "onClosed", "isPlugin", "draggable", "onOverlayClick", "onEscKeydown", "closeOnEscKeydown", "confirmOnEnter", "showOverlay", "showInAttachedElement", "closeOnOverlayClick", "destroyOnClose", "preventScrollThrough", "onCloseBtnClick", "forceRender", "lazy"];
  function ownKeys$21(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$20(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$21(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$21(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Dialog$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, dialogDefaultProps);
    var children = props.children,
      restProps = _objectWithoutProperties$2(props, _excluded$y);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var componentCls = "".concat(classPrefix, "-dialog");
    var wrapRef = React.useRef(null);
    var maskRef = React.useRef(null);
    var contentClickRef = React.useRef(false);
    var dialogCardRef = React.useRef(null);
    var dialogPosition = React.useRef(null);
    var portalRef = React.useRef(null);
    var _useSetState = useSetState(_objectSpread$20({
        isPlugin: false
      }, restProps)),
      _useSetState2 = _slicedToArray$1(_useSetState, 2),
      state = _useSetState2[0],
      setState = _useSetState2[1];
    var _useLocaleReceiver = useLocaleReceiver("dialog"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      local = _useLocaleReceiver2[0];
    var className = state.className,
      dialogClassName = state.dialogClassName,
      style = state.style,
      width = state.width,
      mode = state.mode,
      zIndex = state.zIndex,
      visible = state.visible,
      attach = state.attach,
      onBeforeOpen = state.onBeforeOpen,
      onBeforeClose = state.onBeforeClose,
      onOpened = state.onOpened,
      onCancel = state.onCancel,
      onConfirm = state.onConfirm,
      onClose = state.onClose,
      onClosed = state.onClosed,
      isPlugin = state.isPlugin,
      draggable = state.draggable,
      onOverlayClick = state.onOverlayClick,
      onEscKeydown = state.onEscKeydown,
      closeOnEscKeydown = state.closeOnEscKeydown,
      confirmOnEnter = state.confirmOnEnter,
      showOverlay = state.showOverlay,
      showInAttachedElement = state.showInAttachedElement,
      closeOnOverlayClick = state.closeOnOverlayClick,
      destroyOnClose = state.destroyOnClose,
      preventScrollThrough = state.preventScrollThrough,
      onCloseBtnClick = state.onCloseBtnClick,
      forceRender = state.forceRender,
      lazy = state.lazy,
      restState = _objectWithoutProperties$2(state, _excluded2$3);
    var dialogAttach = useAttach("dialog", attach);
    useDialogLockStyle({
      preventScrollThrough: preventScrollThrough,
      visible: visible,
      mode: mode,
      showInAttachedElement: showInAttachedElement
    });
    useDialogEsc(visible, wrapRef);
    useDialogPosition(visible, dialogCardRef);
    useDialogDrag({
      dialogCardRef: dialogCardRef,
      canDraggable: draggable && mode === "modeless"
    });
    useDeepEffect(function () {
      if (isPlugin) return;
      setState(function (prevState) {
        return _objectSpread$20(_objectSpread$20({}, prevState), props);
      });
    }, [props, setState]);
    React.useImperativeHandle(ref, function () {
      return {
        show: function show() {
          setState({
            visible: true
          });
        },
        hide: function hide() {
          setState({
            visible: false
          });
        },
        setConfirmLoading: function setConfirmLoading(loading) {
          setState({
            confirmLoading: loading
          });
        },
        destroy: function destroy() {
          setState({
            visible: false,
            destroyOnClose: true
          });
        },
        update: function update(newOptions) {
          setState(function (prevState) {
            return _objectSpread$20(_objectSpread$20({}, prevState), newOptions);
          });
        }
      };
    });
    if (props.mode === "normal") {
      log.error("Dialog", 'mode="normal" is not supported, please use DialogCard.');
      return /* @__PURE__ */React__default["default"].createElement(DialogCard$1, _objectSpread$20({}, props));
    }
    var onMaskClick = function onMaskClick(e) {
      if (showOverlay && (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick)) {
        if (contentClickRef.current) {
          contentClickRef.current = false;
        } else if (e.target === dialogPosition.current) {
          onOverlayClick === null || onOverlayClick === void 0 || onOverlayClick({
            e: e
          });
          onClose === null || onClose === void 0 || onClose({
            e: e,
            trigger: "overlay"
          });
        }
      }
    };
    var handleCancel = function handleCancel(_ref) {
      var e = _ref.e;
      onCancel === null || onCancel === void 0 || onCancel({
        e: e
      });
      onClose === null || onClose === void 0 || onClose({
        e: e,
        trigger: "cancel"
      });
    };
    var handleClose = function handleClose(_ref2) {
      var e = _ref2.e;
      onCloseBtnClick === null || onCloseBtnClick === void 0 || onCloseBtnClick({
        e: e
      });
      onClose === null || onClose === void 0 || onClose({
        e: e,
        trigger: "close-btn"
      });
    };
    var handleKeyDown = function handleKeyDown(e) {
      if (e.key === "Escape") {
        e.stopPropagation();
        onEscKeydown === null || onEscKeydown === void 0 || onEscKeydown({
          e: e
        });
        if (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) {
          onClose === null || onClose === void 0 || onClose({
            e: e,
            trigger: "esc"
          });
        }
      } else if (e.key === "Enter" || e.key === "NumpadEnter") {
        e.stopPropagation();
        confirmOnEnter && (onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
          e: e
        }));
      }
    };
    var onAnimateLeave = function onAnimateLeave() {
      onClosed === null || onClosed === void 0 || onClosed();
      if (!wrapRef.current) return;
      wrapRef.current.style.display = "none";
    };
    var onAnimateStart = function onAnimateStart() {
      if (!wrapRef.current) return;
      onBeforeOpen === null || onBeforeOpen === void 0 || onBeforeOpen();
      wrapRef.current.style.display = "block";
    };
    var onInnerAnimateStart = function onInnerAnimateStart() {
      if (!dialogCardRef.current) return;
      dialogCardRef.current.style.display = "block";
    };
    var onInnerAnimateLeave = function onInnerAnimateLeave() {
      if (!dialogCardRef.current) return;
      dialogCardRef.current.style.display = "none";
    };
    var renderMask = function renderMask() {
      if (mode !== "modal") return null;
      return showOverlay ? /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
        "in": visible,
        appear: true,
        timeout: 300,
        classNames: "".concat(componentCls, "-fade"),
        mountOnEnter: true,
        unmountOnExit: true,
        nodeRef: maskRef
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        ref: maskRef,
        className: "".concat(componentCls, "__mask")
      })) : null;
    };
    return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      "in": visible,
      appear: true,
      timeout: 300,
      mountOnEnter: isUndefined(forceRender) ? lazy : !forceRender,
      unmountOnExit: destroyOnClose,
      nodeRef: portalRef,
      onEnter: onAnimateStart,
      onEntered: onOpened,
      onExit: function onExit() {
        return onBeforeClose === null || onBeforeClose === void 0 ? void 0 : onBeforeClose();
      },
      onExited: onAnimateLeave
    }, /* @__PURE__ */React__default["default"].createElement(Portal, {
      attach: dialogAttach,
      ref: portalRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: wrapRef,
      className: classNames$1(className, "".concat(componentCls, "__ctx"), "".concat(componentCls, "__").concat(mode), _defineProperty$2(_defineProperty$2({}, "".concat(componentCls, "__ctx--fixed"), !showInAttachedElement), "".concat(componentCls, "__ctx--absolute"), showInAttachedElement)),
      style: {
        zIndex: zIndex,
        display: "none"
      },
      onKeyDown: handleKeyDown,
      tabIndex: 0
    }, renderMask(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(componentCls, "__wrap")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: dialogPosition,
      className: classNames$1("".concat(componentCls, "__position"), _defineProperty$2(_defineProperty$2({}, "".concat(componentCls, "--top"), !!props.top || props.placement === "top"), "".concat(componentCls, "--center"), props.placement === "center" && !props.top)),
      style: {
        paddingTop: parseValueToPx(props.top)
      },
      onClick: onMaskClick
    }, /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      "in": visible,
      appear: true,
      timeout: 300,
      classNames: "".concat(componentCls, "-zoom"),
      nodeRef: dialogCardRef,
      onEnter: onInnerAnimateStart,
      onExited: onInnerAnimateLeave
    }, /* @__PURE__ */React__default["default"].createElement(DialogCard$1, _objectSpread$20(_objectSpread$20({
      ref: dialogCardRef
    }, restState), {}, {
      className: dialogClassName,
      style: _objectSpread$20(_objectSpread$20({}, style), {}, {
        width: parseValueToPx(width || (style === null || style === void 0 ? void 0 : style.width))
      }),
      onConfirm: onConfirm,
      onCancel: handleCancel,
      onCloseBtnClick: handleClose
    }), children)))))));
  });
  Dialog$1.displayName = "Dialog";

  function ownKeys$20(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1$(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$20(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$20(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var createDialog = function createDialog(props) {
    var dialogRef = /*#__PURE__*/React__default["default"].createRef();
    var options = _objectSpread$1$({}, props);
    var _options$visible = options.visible,
      visible = _options$visible === void 0 ? true : _options$visible;
    var fragment = document.createDocumentFragment();
    var dGlobalConfig = ConfigProvider.getGlobalConfig();
    render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
      globalConfig: dGlobalConfig
    }, /* @__PURE__ */React__default["default"].createElement(Dialog$1, _objectSpread$1$(_objectSpread$1$({}, options), {}, {
      visible: visible,
      ref: dialogRef,
      isPlugin: true
    }))), fragment);
    var container = getAttach$1(options.attach);
    if (container) {
      container.appendChild(fragment);
    } else {
      log.error("Dialog", "attach is not exist");
    }
    var dialogNode = {
      show: function show() {
        requestAnimationFrame(function () {
          var _dialogRef$current;
          container.appendChild(fragment);
          (_dialogRef$current = dialogRef.current) === null || _dialogRef$current === void 0 || _dialogRef$current.show();
        });
      },
      hide: function hide() {
        requestAnimationFrame(function () {
          var _dialogRef$current2;
          (_dialogRef$current2 = dialogRef.current) === null || _dialogRef$current2 === void 0 || _dialogRef$current2.destroy();
        });
      },
      setConfirmLoading: function setConfirmLoading(loading) {
        requestAnimationFrame(function () {
          var _dialogRef$current3;
          (_dialogRef$current3 = dialogRef.current) === null || _dialogRef$current3 === void 0 || _dialogRef$current3.setConfirmLoading(loading);
        });
      },
      update: function update(updateOptions) {
        requestAnimationFrame(function () {
          var _dialogRef$current4;
          (_dialogRef$current4 = dialogRef.current) === null || _dialogRef$current4 === void 0 || _dialogRef$current4.update(updateOptions);
        });
      },
      destroy: function destroy() {
        requestAnimationFrame(function () {
          var _dialogRef$current5;
          (_dialogRef$current5 = dialogRef.current) === null || _dialogRef$current5 === void 0 || _dialogRef$current5.destroy();
        });
      }
    };
    return dialogNode;
  };
  var confirm = function confirm(props) {
    return createDialog(props);
  };
  var alert = function alert(props) {
    var options = _objectSpread$1$({}, props);
    options.cancelBtn = null;
    return createDialog(options);
  };
  createDialog.alert = alert;
  createDialog.confirm = confirm;
  var DialogPlugin$1 = createDialog;

  function ownKeys$1$(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1_(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1$(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1$(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CheckboxGroup$1 = Checkbox.Group;
  function getColumnKeys(columns) {
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      col.colKey && keys.add(col.colKey);
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnKeys(col.children, keys);
      }
    }
    return keys;
  }
  function useColumnController(props, extra) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      table = _useConfig.table;
    var _useGlobalIcon = useGlobalIcon({
        SettingIcon: TdSettingIcon
      }),
      SettingIcon = _useGlobalIcon.SettingIcon;
    var columns = props.columns,
      columnController = props.columnController,
      _props$displayColumns = props.displayColumns,
      displayColumns = _props$displayColumns === void 0 ? [] : _props$displayColumns,
      columnControllerVisible = props.columnControllerVisible;
    var dialogInstance = React.useRef(null);
    var enabledColKeys = function () {
      var arr = ((columnController === null || columnController === void 0 ? void 0 : columnController.fields) || _toConsumableArray(getColumnKeys(columns))).filter(function (v) {
        return v;
      });
      return new Set(arr);
    }();
    var keys = _toConsumableArray(getColumnKeys(columns));
    var _useControlled = useControlled(props, "displayColumns", props.onDisplayColumnsChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tDisplayColumns = _useControlled2[0],
      setTDisplayColumns = _useControlled2[1];
    var defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;
    var columnCheckboxKeys = React.useRef(defaultColumnCheckboxKeys);
    React.useEffect(function () {
      var _dialogInstance$curre;
      columnCheckboxKeys.current = _toConsumableArray(displayColumns || props.defaultDisplayColumns || keys);
      (_dialogInstance$curre = dialogInstance.current) === null || _dialogInstance$curre === void 0 || _dialogInstance$curre.update({
        body: getDialogContent()
      });
    }, [displayColumns]);
    function getCheckboxOptions(columns2) {
      var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _item$children;
        var item = columns2[i];
        if (item.colKey) {
          arr.push({
            label: renderTitle(item, i),
            value: item.colKey,
            disabled: !enabledColKeys.has(item.colKey)
          });
        }
        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          getCheckboxOptions(item.children, arr);
        }
      }
      return arr;
    }
    var handleCheckChange = function handleCheckChange(val, ctx) {
      var _props$onColumnChange;
      columnCheckboxKeys.current = val;
      var params = {
        columns: val,
        type: ctx.type,
        currentColumn: getCurrentRowByKey(columns, String(ctx.current)),
        e: ctx.e
      };
      (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 || _props$onColumnChange.call(props, params);
      dialogInstance.current.update({
        body: getDialogContent()
      });
    };
    var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
      if (checked) {
        var _props$onColumnChange2;
        var checkboxOptions = getCheckboxOptions(columns);
        var newData = (checkboxOptions === null || checkboxOptions === void 0 ? void 0 : checkboxOptions.map(function (t) {
          return t.value;
        })) || [];
        columnCheckboxKeys.current = newData;
        (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 || _props$onColumnChange2.call(props, {
          type: "check",
          columns: newData,
          e: ctx.e
        });
      } else {
        var _props$onColumnChange3;
        var disabledColKeys = getCheckboxOptions(columns).filter(function (t) {
          return t.disabled;
        }).map(function (t) {
          return t.value;
        });
        columnCheckboxKeys.current = disabledColKeys;
        (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 || _props$onColumnChange3.call(props, {
          type: "uncheck",
          columns: disabledColKeys,
          e: ctx.e
        });
      }
      dialogInstance.current.update({
        body: getDialogContent()
      });
    };
    function getDialogContent() {
      var checkboxOptions = getCheckboxOptions(columns);
      var intersectionChecked = intersection$1(columnCheckboxKeys.current, _toConsumableArray(enabledColKeys));
      var widthMode = (columnController === null || columnController === void 0 ? void 0 : columnController.displayType) === "fixed-width" ? "fixed" : "auto";
      var checkedLength = intersectionChecked.length;
      var isCheckedAll = checkedLength === enabledColKeys.size;
      var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(["".concat(classPrefix, "-table__column-controller"), "".concat(classPrefix, "-table__column-controller--").concat(widthMode)])
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__column-controller-body")
      }, /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-table__column-controller-desc")
      }, table.columnConfigDescriptionText), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__column-controller-block")
      }, /* @__PURE__ */React__default["default"].createElement(Checkbox, {
        indeterminate: isIndeterminate,
        checked: isCheckedAll,
        onChange: handleClickAllShowColumns
      }, table.selectAllText)), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__column-controller-block")
      }, /* @__PURE__ */React__default["default"].createElement(CheckboxGroup$1, _objectSpread$1_(_objectSpread$1_({
        options: checkboxOptions
      }, (columnController === null || columnController === void 0 ? void 0 : columnController.checkboxProps) || {}), {}, {
        value: columnCheckboxKeys.current,
        onChange: handleCheckChange
      })))));
    }
    var handleToggleColumnController = function handleToggleColumnController() {
      dialogInstance.current = DialogPlugin$1.confirm(_objectSpread$1_({
        header: table.columnConfigTitleText,
        body: getDialogContent(),
        confirmBtn: table.confirmText,
        cancelBtn: table.cancelText,
        width: 612,
        onConfirm: function onConfirm() {
          if (columnCheckboxKeys.current.length < displayColumns.length) {
            var _extra$onColumnReduce;
            var reduceKeys = xorWith$1(displayColumns, columnCheckboxKeys.current);
            extra === null || extra === void 0 || (_extra$onColumnReduce = extra.onColumnReduce) === null || _extra$onColumnReduce === void 0 || _extra$onColumnReduce.call(extra, reduceKeys);
          }
          setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.current));
          if (columnControllerVisible === void 0) {
            dialogInstance.current.hide();
          } else {
            var _props$onColumnContro;
            (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 || _props$onColumnContro.call(props, false, {
              trigger: "cancel"
            });
          }
        },
        onClose: function onClose() {
          columnCheckboxKeys.current = tDisplayColumns;
          if (columnControllerVisible === void 0) {
            dialogInstance.current.hide();
          } else {
            var _props$onColumnContro2;
            (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 || _props$onColumnContro2.call(props, false, {
              trigger: "confirm"
            });
          }
        }
      }, (columnController === null || columnController === void 0 ? void 0 : columnController.dialogProps) || {}));
    };
    React.useEffect(function () {
      if (columnControllerVisible === void 0) return;
      if (dialogInstance.current) {
        columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();
      } else {
        columnControllerVisible && handleToggleColumnController();
      }
    }, [columnControllerVisible, dialogInstance]);
    var renderColumnController = function renderColumnController() {
      var _props$columnControll;
      var isColumnController = !!(columnController && Object.keys(columnController).length);
      var placement = isColumnController ? columnController.placement || "top-right" : "";
      if (isColumnController && columnController.hideTriggerButton) return null;
      var classes = ["".concat(classPrefix, "-table__column-controller-trigger"), _defineProperty$2({}, "".concat(classPrefix, "-align-").concat(placement), !!placement)];
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(classes)
      }, /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1_({
        theme: "default",
        variant: "outline",
        onClick: handleToggleColumnController,
        content: table.columnConfigButtonText,
        icon: /* @__PURE__ */React__default["default"].createElement(SettingIcon, null)
      }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps)));
    };
    return {
      tDisplayColumns: tDisplayColumns,
      renderColumnController: renderColumnController
    };
  }

  function useRowExpand(props) {
    var _props$columns;
    var expandIcon = props.expandIcon,
      expandedRow = props.expandedRow;
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightCircleIcon: TdChevronRightCircleIcon
      }),
      ChevronRightCircleIcon = _useGlobalIcon.ChevronRightCircleIcon;
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      locale = _useLocaleReceiver2[0];
    var _useClassName = useClassName(),
      tableExpandClasses = _useClassName.tableExpandClasses,
      positiveRotate90 = _useClassName.positiveRotate90,
      tableFullRowClasses = _useClassName.tableFullRowClasses;
    var _useControlled = useControlled(props, "expandedRowKeys", props.onExpandChange, {
        defaultExpandedRowKeys: props.defaultExpandedRowKeys || []
      }),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tExpandedRowKeys = _useControlled2[0],
      setTExpandedRowKeys = _useControlled2[1];
    var showExpandedRow = Boolean(expandedRow);
    var getExpandedRowClass = React.useCallback(function (params) {
      if (!showExpandedRow) return null;
      var row = params.row,
        rowKey = params.rowKey;
      var currentRowKey = get(row, rowKey || "id");
      return tableExpandClasses[tExpandedRowKeys !== null && tExpandedRowKeys !== void 0 && tExpandedRowKeys.includes(currentRowKey) ? "rowExpanded" : "rowFolded"];
    }, [tExpandedRowKeys, tableExpandClasses, showExpandedRow]);
    var showExpandIconColumn = props.expandIcon !== false && showExpandedRow;
    var isFirstColumnFixed = ((_props$columns = props.columns) === null || _props$columns === void 0 || (_props$columns = _props$columns[0]) === null || _props$columns === void 0 ? void 0 : _props$columns.fixed) === "left";
    var onToggleExpand = function onToggleExpand(e, row) {
      props.expandOnRowClick && e.stopPropagation();
      var currentId = get(row, props.rowKey || "id");
      var index = tExpandedRowKeys.indexOf(currentId);
      var newKeys = _toConsumableArray(tExpandedRowKeys);
      index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
      setTExpandedRowKeys(newKeys, {
        expandedRowData: props.data.filter(function (t) {
          return newKeys.includes(get(t, props.rowKey || "id"));
        }),
        currentRowData: row
      });
    };
    var renderExpandIcon = function renderExpandIcon(p, expandIcon2) {
      var row = p.row,
        rowIndex = p.rowIndex;
      var currentId = get(row, props.rowKey || "id");
      var expanded = tExpandedRowKeys.includes(currentId);
      var defaultIcon = locale.expandIcon || /* @__PURE__ */React__default["default"].createElement(ChevronRightCircleIcon, null);
      var icon = defaultIcon;
      if (expandIcon2 === false || expandIcon2 === null) {
        icon = null;
      } else if (isFunction$1(expandIcon2)) {
        icon = expandIcon2({
          row: row,
          index: rowIndex
        });
      }
      var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$2({}, positiveRotate90, expanded)];
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(classes),
        onClick: function onClick(e) {
          return onToggleExpand(e, row);
        }
      }, icon);
    };
    var getExpandColumn = function getExpandColumn() {
      var expandCol = {
        colKey: "__EXPAND_ROW_ICON_COLUMN__",
        width: 46,
        className: tableExpandClasses.iconCell,
        fixed: isFirstColumnFixed ? "left" : void 0,
        cell: function cell(p) {
          return renderExpandIcon(p, expandIcon);
        },
        stopPropagation: true
      };
      return expandCol;
    };
    var renderExpandedRow = function renderExpandedRow(p) {
      var rowId = get(p.row, props.rowKey || "id");
      if (!tExpandedRowKeys || !tExpandedRowKeys.includes(rowId)) return null;
      var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
        return item.fixed === "left";
      });
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: "expand_".concat(rowId),
        className: classNames$1([tableExpandClasses.row, _defineProperty$2({}, tableFullRowClasses.base, isFixedLeft)])
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: p.columns.length
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1([tableExpandClasses.rowInner, _defineProperty$2({}, tableFullRowClasses.innerFullRow, isFixedLeft)]),
        style: isFixedLeft ? {
          width: "".concat(p.tableWidth, "px")
        } : {}
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFullRowClasses.innerFullElement
      }, parseContentTNode(expandedRow, p)))));
    };
    var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
      onToggleExpand(p.e, p.row);
    };
    return {
      showExpandedRow: showExpandedRow,
      showExpandIconColumn: showExpandIconColumn,
      getExpandColumn: getExpandColumn,
      renderExpandedRow: renderExpandedRow,
      onInnerExpandRowClick: onInnerExpandRowClick,
      getExpandedRowClass: getExpandedRowClass
    };
  }

  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    if (!selectColumn) return false;
    var disabled = isFunction$1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;
    if (selectColumn.checkProps) {
      if (isFunction$1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }
    return !!disabled;
  }
  function getEditableKeysMap(keys, list, rowKey) {
    var map = {};
    for (var i = 0, len = list.length; i < len; i++) {
      var rowValue = get(list[i], rowKey);
      if (keys.includes(rowValue)) {
        map[rowValue] = true;
      }
    }
    return map;
  }
  function getColumnDataByKey(columns, colKey) {
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i$children;
      if (columns[i].colKey === colKey) return columns[i];
      if ((_columns$i$children = columns[i].children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
        var t = getColumnDataByKey(columns[i].children, colKey);
        if (t) return t;
      }
    }
    return null;
  }
  function getColumnIndexByKey(columns, colKey) {
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i$children2;
      if (columns[i].colKey === colKey) {
        return i;
      }
      if ((_columns$i$children2 = columns[i].children) !== null && _columns$i$children2 !== void 0 && _columns$i$children2.length) {
        var t = getColumnDataByKey(columns[i].children, colKey);
        if (t) return i;
      }
    }
    return -1;
  }
  function getColumnsResetValue(columns) {
    var resetValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      if (col.filter && "resetValue" in col.filter) {
        resetValue[col.colKey] = col.filter.resetValue;
      }
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnsResetValue(col.children, resetValue);
      }
    }
    return resetValue;
  }

  function ownKeys$1_(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1Z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1_(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1_(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var selectedRowDataMap = /* @__PURE__ */new Map();
  function useRowSelect(props, tableSelectedClasses) {
    var selectedRowKeys = props.selectedRowKeys,
      columns = props.columns,
      data = props.data,
      rowKey = props.rowKey,
      indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;
    var pagination = props.pagination,
      reserveSelectedRowOnPaginate = props.reserveSelectedRowOnPaginate;
    var _useState = React.useState(data),
      _useState2 = _slicedToArray$1(_useState, 2),
      currentPaginateData = _useState2[0],
      setCurrentPaginateData = _useState2[1];
    var _useState3 = React.useState(),
      _useState4 = _slicedToArray$1(_useState3, 2),
      selectedRowClassNames = _useState4[0],
      setSelectedRowClassNames = _useState4[1];
    var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
        defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
      }),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tSelectedRowKeys = _useControlled2[0],
      setTSelectedRowKeys = _useControlled2[1];
    var selectColumn = columns.find(function (_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
    var canSelectedRows = React.useMemo(function () {
      var currentData = reserveSelectedRowOnPaginate ? data : currentPaginateData;
      return (currentData === null || currentData === void 0 ? void 0 : currentData.filter(function (row, rowIndex) {
        return !isDisabled(row, rowIndex);
      })) || [];
    }, [reserveSelectedRowOnPaginate, data, currentPaginateData]);
    var intersectionKeys = intersection$1(tSelectedRowKeys, canSelectedRows.map(function (t) {
      return get(t, rowKey || "id");
    }));
    React.useEffect(function () {
      if (reserveSelectedRowOnPaginate) return;
      var pageSize = pagination.pageSize,
        current = pagination.current,
        defaultPageSize = pagination.defaultPageSize,
        defaultCurrent = pagination.defaultCurrent;
      var tPageSize = pageSize || defaultPageSize;
      var tCurrent = current || defaultCurrent;
      var newData = data.slice(tPageSize * (tCurrent - 1), tPageSize * tCurrent);
      setCurrentPaginateData(newData);
    }, [data, reserveSelectedRowOnPaginate]);
    React.useEffect(function () {
      if (!selectColumn && (!tSelectedRowKeys || !tSelectedRowKeys.length)) return;
      var disabledRowFunc = function disabledRowFunc(p) {
        return selectColumn.disabled(p) ? tableSelectedClasses.disabled : "";
      };
      var disabledRowClass = selectColumn !== null && selectColumn !== void 0 && selectColumn.disabled ? disabledRowFunc : void 0;
      var selected = new Set(tSelectedRowKeys);
      var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
        var row = _ref2.row;
        var rowId = get(row, rowKey || "id");
        return selected.has(rowId) ? tableSelectedClasses.selected : "";
      };
      var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
      setSelectedRowClassNames([disabledRowClass, selectedRowClass]);
    }, [data, columns, tSelectedRowKeys, selectColumn, rowKey]);
    function isDisabled(row, rowIndex) {
      return isRowSelectedDisabled(selectColumn, row, rowIndex);
    }
    function getSelectedHeader() {
      return function () {
        var isIndeterminate = intersectionKeys.length > 0 && intersectionKeys.length < canSelectedRows.length;
        var isChecked = intersectionKeys.length !== 0 && canSelectedRows.length !== 0 && intersectionKeys.length === canSelectedRows.length;
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
          checked: isChecked,
          indeterminate: isIndeterminate,
          disabled: !canSelectedRows.length,
          onChange: handleSelectAll
        });
      };
    }
    function getRowSelectDisabledData(p) {
      var col = p.col,
        row = p.row,
        rowIndex = p.rowIndex;
      var disabled = typeof col.disabled === "function" ? col.disabled({
        row: row,
        rowIndex: rowIndex
      }) : col.disabled;
      var checkProps = isFunction$1(col.checkProps) ? col.checkProps({
        row: row,
        rowIndex: rowIndex
      }) : col.checkProps;
      return {
        disabled: disabled || (checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled),
        checkProps: checkProps
      };
    }
    function renderSelectCell(p) {
      var column = p.col,
        _p$row = p.row,
        row = _p$row === void 0 ? {} : _p$row;
      var checked = tSelectedRowKeys.includes(get(row, rowKey || "id"));
      var _getRowSelectDisabled = getRowSelectDisabledData(p),
        disabled = _getRowSelectDisabled.disabled,
        checkProps = _getRowSelectDisabled.checkProps;
      var selectBoxProps = _objectSpread$1Z(_objectSpread$1Z({
        checked: checked,
        disabled: disabled
      }, checkProps), {}, {
        onChange: function onChange() {
          handleSelectChange(row);
        }
      });
      var onCheckClick = function onCheckClick(p2) {
        var e = "e" in p2 ? p2.e : p2;
        e === null || e === void 0 || e.stopPropagation();
      };
      if (column.type === "single") return /* @__PURE__ */React__default["default"].createElement(Radio, _objectSpread$1Z(_objectSpread$1Z({}, selectBoxProps), {}, {
        onClick: onCheckClick
      }));
      if (column.type === "multiple") {
        var isIndeterminate = indeterminateSelectedRowKeys !== null && indeterminateSelectedRowKeys !== void 0 && indeterminateSelectedRowKeys.length ? indeterminateSelectedRowKeys.includes(get(row, rowKey)) : false;
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, _objectSpread$1Z(_objectSpread$1Z({
          indeterminate: isIndeterminate
        }, selectBoxProps), {}, {
          onClick: onCheckClick
        }));
      }
      return null;
    }
    var allowUncheck = React.useMemo(function () {
      var singleSelectCol = columns.find(function (col) {
        return col.type === "single";
      });
      if (!singleSelectCol || !singleSelectCol.checkProps || !("allowUncheck" in singleSelectCol.checkProps)) return false;
      return singleSelectCol.checkProps.allowUncheck;
    }, [columns]);
    function handleSelectChange() {
      var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys);
      var reRowKey = rowKey || "id";
      var id = get(row, reRowKey);
      var selectedRowIndex = selectedRowKeys2.indexOf(id);
      var isExisted = selectedRowIndex !== -1;
      if (selectColumn.type === "multiple") {
        isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
      } else if (selectColumn.type === "single") {
        selectedRowKeys2 = isExisted && allowUncheck ? [] : [id];
      } else {
        log.warn("Table", "`column.type` must be one of `multiple` and `single`");
        return;
      }
      setTSelectedRowKeys(selectedRowKeys2, {
        selectedRowData: selectedRowKeys2.map(function (t) {
          return selectedRowDataMap.get(t);
        }),
        currentRowKey: id,
        currentRowData: row,
        type: isExisted ? "uncheck" : "check"
      });
    }
    function handleSelectAll(checked) {
      var reRowKey = rowKey || "id";
      var canSelectedRowKeys = canSelectedRows.map(function (record) {
        return get(record, reRowKey);
      });
      var disabledSelectedRowKeys = (selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.filter(function (id) {
        return !canSelectedRowKeys.includes(id);
      })) || [];
      var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
      setTSelectedRowKeys(allIds, {
        selectedRowData: checked ? allIds.map(function (t) {
          return selectedRowDataMap.get(t);
        }) : [],
        type: checked ? "check" : "uncheck",
        currentRowKey: "CHECK_ALL_BOX"
      });
    }
    function formatToRowSelectColumn(col) {
      var isSelection = ["multiple", "single"].includes(col.type);
      if (!isSelection) return col;
      return _objectSpread$1Z(_objectSpread$1Z({}, col), {}, {
        width: col.width || 64,
        className: tableSelectedClasses.checkCell,
        cell: function cell(p) {
          return renderSelectCell(p);
        },
        title: col.type === "multiple" ? getSelectedHeader() : col.title
      });
    }
    var onInnerSelectRowClick = function onInnerSelectRowClick(_ref3) {
      var row = _ref3.row,
        index = _ref3.index;
      var selectedColIndex = props.columns.findIndex(function (item) {
        return item.colKey === "row-select";
      });
      if (selectedColIndex === -1) return;
      var _getRowSelectDisabled2 = getRowSelectDisabledData({
          row: row,
          rowIndex: index,
          col: props.columns[selectedColIndex],
          colIndex: selectedColIndex
        }),
        disabled = _getRowSelectDisabled2.disabled;
      if (disabled) return;
      handleSelectChange(row);
    };
    React.useEffect(function () {
      for (var i = 0, len = data.length; i < len; i++) {
        selectedRowDataMap.set(get(data[i], rowKey || "id"), data[i]);
      }
    }, [data, rowKey]);
    return {
      selectedRowClassNames: selectedRowClassNames,
      currentPaginateData: currentPaginateData,
      setCurrentPaginateData: setCurrentPaginateData,
      setTSelectedRowKeys: setTSelectedRowKeys,
      formatToRowSelectColumn: formatToRowSelectColumn,
      onInnerSelectRowClick: onInnerSelectRowClick
    };
  }

  function ownKeys$1Z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1Y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1Z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1Z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function SorterButton(props) {
    var _props$sortType = props.sortType,
      sortType = _props$sortType === void 0 ? "all" : _props$sortType;
    var _useGlobalIcon = useGlobalIcon({
        ChevronDownIcon: TdChevronDownIcon
      }),
      ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;
    var _useClassName = useClassName(),
      tableSortClasses = _useClassName.tableSortClasses,
      negativeRotate180 = _useClassName.negativeRotate180;
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var allowSortTypes = sortType === "all" ? ["asc", "desc"] : [sortType];
    var onSortIconClick = function onSortIconClick(e, direction) {
      props === null || props === void 0 || props.onSortIconClick(e, {
        descending: direction === "desc"
      });
    };
    function getSortIcon(direction, activeClass) {
      var defaultIcon = t(locale.sortIcon) || /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon, null);
      var icon = props.sortIcon || defaultIcon;
      var sortClassName = [activeClass, tableSortClasses.sortIcon, tableSortClasses.iconDirection[direction], _defineProperty$2({}, negativeRotate180, direction === "asc")];
      return /* @__PURE__ */React__default["default"].createElement("span", {
        key: direction,
        className: classNames$1(sortClassName),
        onClick: function onClick(e) {
          return onSortIconClick(e, direction);
        }
      }, icon);
    }
    var classes = [tableSortClasses.trigger, _defineProperty$2({}, tableSortClasses.doubleIcon, allowSortTypes.length > 1)];
    var tooltips = {
      asc: locale.sortAscendingOperationText,
      desc: locale.sortDescendingOperationText
    };
    var sortButton = allowSortTypes.map(function (direction) {
      var _props$hideSortTips;
      var activeClass = direction === props.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
      var cancelTips = locale.sortCancelOperationText;
      var tips = direction === props.sortOrder ? cancelTips : tooltips[direction];
      if ((_props$hideSortTips = props.hideSortTips) !== null && _props$hideSortTips !== void 0 ? _props$hideSortTips : locale.hideSortTips) return getSortIcon(direction, activeClass);
      return /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$1Y(_objectSpread$1Y({
        content: tips,
        key: direction,
        placement: "right"
      }, props.tooltipProps), {}, {
        showArrow: false
      }), getSortIcon(direction, activeClass));
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes)
    }, sortButton);
  }
  SorterButton.displayName = "SorterButton";

  function ownKeys$1Y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1X(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1Y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1Y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useSorter(props) {
    var _useState = React.useState(),
      _useState2 = _slicedToArray$1(_useState, 2),
      originalData = _useState2[0],
      setOriginalData = _useState2[1];
    var _useControlled = useControlled(props, "sort", props.onSortChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tSortInfo = _useControlled2[0],
      setTSortInfo = _useControlled2[1];
    var _useControlled3 = useControlled(props, "data", props.onDataChange),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      tData = _useControlled4[0],
      setTData = _useControlled4[1];
    var sorterFuncMap = getSorterFuncMap(props.columns);
    var _useState3 = React.useState(),
      _useState4 = _slicedToArray$1(_useState3, 2),
      innerSort = _useState4[0],
      setInnerSort = _useState4[1];
    var sortArray = function () {
      var sort = tSortInfo;
      if (!sort) return [];
      return Array.isArray(sort) ? sort : [sort];
    }();
    var sortMap = function () {
      var sortMap2 = {};
      sortArray.forEach(function (info, index) {
        var sortBy = info.sortBy;
        sortMap2[sortBy] = _objectSpread$1X({
          index: index
        }, info);
      });
      return sortMap2;
    }();
    function getSorterFuncMap(columns) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      for (var i = 0, len = columns.length; i < len; i++) {
        var _col$children;
        var col = columns[i];
        if (isFunction$1(col.sorter)) {
          map[col.colKey] = col.sorter;
        }
        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getSorterFuncMap(col.children, map);
        }
      }
      return map;
    }
    function handleDataSort(sortInfo) {
      var sort = sortInfo;
      if (!sorterFuncMap || !Object.keys(sorterFuncMap).length) return;
      if (!originalData) {
        setOriginalData(tData);
      }
      var isEmptyArraySort = !sort || sort instanceof Array && !sort.length;
      var isEmptyObjectSort = !(sort instanceof Array) && !(sort !== null && sort !== void 0 && sort.sortBy);
      if (isEmptyArraySort || isEmptyObjectSort) {
        setTData(originalData, {
          trigger: "sort"
        });
        return originalData;
      }
      var formattedSort = sort instanceof Array ? sort : [sort];
      var newData = tData.slice().sort(function (a, b) {
        var sortResult = 0;
        for (var i = 0, len = formattedSort.length; i < len; i++) {
          var item = formattedSort[i];
          var sortFunc = sorterFuncMap[item.sortBy];
          if (sortResult === 0 && sortFunc) {
            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
          } else {
            break;
          }
        }
        return sortResult;
      });
      if (JSON.stringify(newData) === JSON.stringify(tData)) return;
      setTData(newData, {
        trigger: "sort"
      });
      return newData;
    }
    function handleSortHeaderClick(col, p) {
      var _props$onChange;
      var sortInfo;
      if (props.multipleSort) {
        sortInfo = getMultipleNextSort(col, p);
      } else {
        var sort = tSortInfo instanceof Array ? tSortInfo[0] : tSortInfo;
        sortInfo = getSingleNextSort(col, sort, p);
      }
      var newData = handleDataSort(sortInfo);
      var currentData = newData || tData;
      var currentDataSource = currentData;
      setTSortInfo(sortInfo, {
        currentDataSource: currentDataSource,
        col: col
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
        sorter: sortInfo
      }, {
        currentData: currentData,
        trigger: "sorter"
      });
      setInnerSort(sortInfo);
    }
    function getSortOrder(descending) {
      if (descending === void 0) return;
      return descending ? "desc" : "asc";
    }
    function getSingleNextSort(col, sortInfo, p) {
      if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
        return void 0;
      }
      return {
        sortBy: col.colKey,
        descending: p.descending
      };
    }
    function getMultipleNextSort(col, p) {
      var sort = tSortInfo;
      if (!(sort instanceof Array)) return;
      var colKey = col.colKey;
      var result = _toConsumableArray(sort);
      for (var i = 0, len = sort.length; i < len; i++) {
        if (sort[i].sortBy === colKey) {
          var next = getSingleNextSort(col, sort[i], p);
          next ? result[i] = next : result.splice(i, 1);
          return result;
        }
      }
      result.push({
        sortBy: colKey,
        descending: p.descending
      });
      return result;
    }
    function renderSortIcon(_ref) {
      var _sortMap$col$colKey;
      var col = _ref.col;
      if (!col.sorter) return null;
      var sorterButtonsProps = {
        sortType: col.sortType,
        sortOrder: getSortOrder((_sortMap$col$colKey = sortMap[col.colKey]) === null || _sortMap$col$colKey === void 0 ? void 0 : _sortMap$col$colKey.descending),
        sortIcon: props.sortIcon,
        hideSortTips: props.hideSortTips
      };
      return /* @__PURE__ */React__default["default"].createElement(SorterButton, _objectSpread$1X(_objectSpread$1X({
        key: "sorter-button-".concat(col.colKey)
      }, sorterButtonsProps), {}, {
        onSortIconClick: function onSortIconClick(_, p) {
          return handleSortHeaderClick(col, p);
        }
      }));
    }
    var isSortInfoSame = function isSortInfoSame(a, b) {
      var tmpSortInfo = Array.isArray(a) ? a : [a];
      var tmpInnerSortInfo = Array.isArray(b) ? b : [b];
      if (tmpSortInfo.length && !b) return false;
      var _loop = function _loop() {
          var item = tmpSortInfo[i];
          var result = tmpInnerSortInfo.find(function (t) {
            return t.sortBy === item.sortBy;
          });
          if (!result) return {
            v: false
          };
          return {
            v: item.descending === result.descending
          };
        },
        _ret;
      for (var i = 0, len = tmpSortInfo.length; i < len; i++) {
        _ret = _loop();
        if (_ret) return _ret.v;
      }
    };
    React.useEffect(function () {
      if (!tSortInfo || !Object.keys(tSortInfo).length || !tData.length) return;
      if (!isSortInfoSame(tSortInfo, innerSort)) {
        handleDataSort(tSortInfo);
      }
    }, [tSortInfo, tData]);
    return {
      renderSortIcon: renderSortIcon
    };
  }

  function ownKeys$1X(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1W(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1X(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1X(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CheckboxGroup = Checkbox.Group;
  var RadioGroup = Radio.Group;
  function TableFilterController(props) {
    var tFilterValue = props.tFilterValue,
      innerFilterValue = props.innerFilterValue,
      tableFilterClasses = props.tableFilterClasses,
      isFocusClass = props.isFocusClass,
      column = props.column;
    var _useGlobalIcon = useGlobalIcon({
        FilterIcon: TdFilterIcon
      }),
      FilterIcon = _useGlobalIcon.FilterIcon;
    var triggerElementRef = React.useRef(null);
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      filterPopupVisible = _useState2[0],
      setFilterPopupVisible = _useState2[1];
    var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
      var _props$onVisibleChang;
      setFilterPopupVisible(visible);
      (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 || _props$onVisibleChang.call(props, visible);
    };
    var getFilterContent = function getFilterContent(column2) {
      var _column2$filter, _column2$filter2, _column2$filter3, _column2$filter4, _column2$filter5;
      var types = ["single", "multiple", "input"];
      if (column2.type && !types.includes(column2.filter.type)) {
        log.error("Table", "TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }
      var Component = {
        single: RadioGroup,
        multiple: CheckboxGroup,
        input: Input
      }[column2.filter.type];
      if (!Component && !(column2 !== null && column2 !== void 0 && (_column2$filter = column2.filter) !== null && _column2$filter !== void 0 && _column2$filter.component)) return;
      var filterComponentProps = _objectSpread$1W(_objectSpread$1W({
        options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.list : void 0
      }, ((_column2$filter3 = column2.filter) === null || _column2$filter3 === void 0 ? void 0 : _column2$filter3.props) || {}), {}, {
        onChange: function onChange(val) {
          var _props$onInnerFilterC;
          (_props$onInnerFilterC = props.onInnerFilterChange) === null || _props$onInnerFilterC === void 0 || _props$onInnerFilterC.call(props, val, column2);
        }
      });
      if (column2.colKey && innerFilterValue && column2.colKey in innerFilterValue) {
        filterComponentProps.value = innerFilterValue[column2.colKey];
      }
      if ((_column2$filter4 = column2.filter) !== null && _column2$filter4 !== void 0 && _column2$filter4.confirmEvents) {
        column2.filter.confirmEvents.forEach(function (event) {
          filterComponentProps[event] = function () {
            var _props$onConfirm;
            setFilterPopupVisible(false);
            (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, column2);
          };
        });
      }
      var FilterComponent = (column2 === null || column2 === void 0 || (_column2$filter5 = column2.filter) === null || _column2$filter5 === void 0 ? void 0 : _column2$filter5.component) || Component;
      var filter = column2.filter || {};
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.contentInner
      }, /* @__PURE__ */React__default["default"].createElement(FilterComponent, _objectSpread$1W(_objectSpread$1W({
        className: filter.classNames,
        style: filter.style
      }, filter.attrs), filterComponentProps)));
    };
    var getBottomButtons = function getBottomButtons(column2) {
      if (!column2.filter.showConfirmAndReset) return;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.bottomButtons
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "default",
        size: "small",
        onClick: function onClick() {
          var _props$onReset;
          setFilterPopupVisible(false);
          (_props$onReset = props.onReset) === null || _props$onReset === void 0 || _props$onReset.call(props, column2);
        }
      }, locale.resetText), /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        size: "small",
        onClick: function onClick() {
          var _props$onConfirm2;
          setFilterPopupVisible(false);
          (_props$onConfirm2 = props.onConfirm) === null || _props$onConfirm2 === void 0 || _props$onConfirm2.call(props, column2);
        }
      }, locale.confirmText));
    };
    if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
    var defaultFilterIcon = t(locale.filterIcon) || /* @__PURE__ */React__default["default"].createElement(FilterIcon, null);
    var filterValue = tFilterValue === null || tFilterValue === void 0 ? void 0 : tFilterValue[column.colKey];
    var isObjectTrue = _typeof$3(filterValue) === "object" && !isEmpty(filterValue);
    var isValueExist = ![null, void 0, ""].includes(filterValue) && _typeof$3(filterValue) !== "object";
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1([tableFilterClasses.icon, _defineProperty$2({}, isFocusClass, isObjectTrue || isValueExist)])
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$1W({
      visible: filterPopupVisible,
      destroyOnClose: true,
      trigger: "click",
      placement: "bottom-right",
      showArrow: true,
      overlayClassName: tableFilterClasses.popup,
      onVisibleChange: function onVisibleChange(val) {
        return onFilterPopupVisibleChange(val);
      },
      content: /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.popupContent
      }, getFilterContent(column), getBottomButtons(column))
    }, props.popupProps), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: triggerElementRef
    }, parseContentTNode(props.filterIcon, {
      col: column,
      colIndex: props.colIndex
    }) || defaultFilterIcon)));
  }

  function ownKeys$1W(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1V(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1W(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1W(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function isFilterValueExist(value) {
    var isArrayTrue = value instanceof Array && value.length;
    var isObject = _typeof$3(value) === "object" && !(value instanceof Array);
    var isObjectTrue = isObject && Object.keys(value || {}).length;
    return isArrayTrue || isObjectTrue || ![null, "", void 0].includes(value);
  }
  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      if (isFilterValueExist(item)) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }
  function useFilter(props, primaryTableRef) {
    var columns = props.columns;
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useClassName = useClassName(),
      tableFilterClasses = _useClassName.tableFilterClasses,
      isFocusClass = _useClassName.isFocusClass;
    var _useState = React.useState(),
      _useState2 = _slicedToArray$1(_useState, 2),
      isTableOverflowHidden = _useState2[0],
      setIsTableOverflowHidden = _useState2[1];
    var _useControlled = useControlled(props, "filterValue", props.onFilterChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tFilterValue = _useControlled2[0],
      setTFilterValue = _useControlled2[1];
    var _useState3 = React.useState(tFilterValue),
      _useState4 = _slicedToArray$1(_useState3, 2),
      innerFilterValue = _useState4[0],
      setInnerFilterValue = _useState4[1];
    var hasEmptyCondition = function () {
      var filterEmpty = filterEmptyData(tFilterValue || {});
      return !tFilterValue || !Object.keys(filterEmpty).length;
    }();
    React.useEffect(function () {
      setInnerFilterValue(tFilterValue);
    }, [tFilterValue]);
    function renderFirstFilterRow() {
      var _props$pagination, _props$data;
      if (hasEmptyCondition) return null;
      var defaultNode = /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.result
      }, /* @__PURE__ */React__default["default"].createElement("span", null, t(locale.searchResultText, {
        result: getFilterResultContent(),
        count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
      })), /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        onClick: onResetAll
      }, locale.clearFilterResultButtonText));
      var filterContent = isFunction$1(props.filterRow) ? props.filterRow() : props.filterRow;
      if (filterContent === null) return null;
      var r = filterContent || defaultNode;
      if (!r) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: tableFilterClasses.inner
      }, r);
    }
    function getFilterResultContent() {
      var arr = [];
      props.columns.filter(function (col) {
        return col.filter;
      }).forEach(function (col) {
        var value = tFilterValue[col.colKey];
        if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
          var formattedValue = value instanceof Array ? value : [value];
          var label = [];
          col.filter.list.forEach(function (option) {
            if (formattedValue.includes(option.value)) {
              label.push(option.label);
            }
          });
          value = label.join();
        }
        if (isFilterValueExist(value)) {
          arr.push("".concat(col.title, "\uFF1A").concat(value));
        }
      });
      return arr.join("\uFF1B");
    }
    function onInnerFilterChange(val, column) {
      var filterValue = _objectSpread$1V(_objectSpread$1V({}, innerFilterValue), {}, _defineProperty$2({}, column.colKey, val));
      setInnerFilterValue(filterValue);
      if (!column.filter.showConfirmAndReset) {
        emitFilterChange(filterValue, "filter-change", column);
      }
    }
    function emitFilterChange(filterValue, trigger, column) {
      var _props$onChange;
      setTFilterValue(filterValue, {
        col: column,
        trigger: trigger
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
        filter: filterValue
      }, {
        trigger: "filter"
      });
      requestAnimationFrame(function () {
        var _primaryTableRef$curr;
        (_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 || _primaryTableRef$curr.scrollToElement({
          index: -1
        });
      });
    }
    function onReset(column) {
      var filterValue = _objectSpread$1V(_objectSpread$1V({}, tFilterValue), {}, _defineProperty$2({}, column.colKey, {
        single: "",
        multiple: [],
        input: ""
      }[column.filter.type] || column.filter.resetValue || ""));
      emitFilterChange(filterValue, "reset", column);
    }
    function onResetAll() {
      var resetValue = getColumnsResetValue(columns);
      emitFilterChange(resetValue, "clear", void 0);
    }
    function onConfirm(column) {
      emitFilterChange(innerFilterValue, "confirm", column);
    }
    function renderFilterIcon(_ref) {
      var _primaryTableRef$curr2;
      var col = _ref.col,
        colIndex = _ref.colIndex;
      return /* @__PURE__ */React__default["default"].createElement(TableFilterController, {
        column: col,
        colIndex: colIndex,
        filterIcon: props.filterIcon,
        tFilterValue: tFilterValue,
        innerFilterValue: innerFilterValue,
        tableFilterClasses: tableFilterClasses,
        isFocusClass: isFocusClass,
        popupProps: col.filter.popupProps,
        onReset: onReset,
        onConfirm: onConfirm,
        onInnerFilterChange: onInnerFilterChange,
        primaryTableElement: primaryTableRef === null || primaryTableRef === void 0 || (_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableElement,
        onVisibleChange: onPopupVisibleChange
      });
    }
    function onPopupVisibleChange(visible) {
      if (visible && !isTableOverflowHidden) {
        setIsTableOverflowHidden(!visible);
      }
    }
    return {
      hasEmptyCondition: hasEmptyCondition,
      isTableOverflowHidden: isTableOverflowHidden,
      renderFilterIcon: renderFilterIcon,
      renderFirstFilterRow: renderFirstFilterRow
    };
  }

  /**!
   * Sortable 1.15.6
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys$1V(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys$1V(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1V(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var version = "1.15.6";
  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }
  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };
  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function matches(/**HTMLElement*/el, /**String*/selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));
    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }
    return false;
  }
  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }
  function closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;
      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }
        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }
    return null;
  }
  var R_SPACE = /\s+/g;
  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }
  function css(el, prop, val) {
    var style = el && el.style;
    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }
        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }
        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }
  function matrix(el, selfOnly) {
    var appliedTransforms = '';
    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');
        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */
      } while (!selfOnly && (el = el.parentNode));
    }
    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */
    return matrixFn && new matrixFn(appliedTransforms);
  }
  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;
      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }
      return list;
    }
    return [];
  }
  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;
    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }

  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */
  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;
    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }
    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode;

      // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11
      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect();

            // Set relative to edges of padding box of container
            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */
        } while (container = container.parentNode);
      }
    }
    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;
      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }
    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }

  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */
  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];

    /* jshint boss:true */
    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;
      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }
      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }
    return false;
  }

  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */
  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
      i = 0,
      children = el.children;
    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }
        currentChild++;
      }
      i++;
    }
    return null;
  }

  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */
  function lastChild(el, selector) {
    var last = el.lastElementChild;
    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }
    return last || null;
  }

  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */
  function index(el, selector) {
    var index = 0;
    if (!el || !el.parentNode) {
      return -1;
    }

    /* jshint boss:true */
    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }
    return index;
  }

  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */
  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();
    if (el) {
      do {
        var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }
    return [offsetLeft, offsetTop];
  }

  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */
  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;
      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }
    return -1;
  }
  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;
    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);
        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */
    } while (elem = elem.parentNode);
    return getWindowScrollingElement();
  }
  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }
    return dst;
  }
  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }
  var _throttleTimeout;
  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
          _this = this;
        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }
        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }
  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }
  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }
  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;
    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }
  function getChildContainingRectFromElement(container, options, ghostEl) {
    var rect = {};
    Array.from(container.children).forEach(function (child) {
      var _rect$left, _rect$top, _rect$right, _rect$bottom;
      if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl) return;
      var childRect = getRect(child);
      rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
      rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
      rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
      rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
    });
    rect.width = rect.right - rect.left;
    rect.height = rect.bottom - rect.top;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  var expando = 'Sortable' + new Date().getTime();
  function AnimationStateManager() {
    var animationStates = [],
      animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });
          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);

          // If animating: compensate for current animation
          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);
            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }
          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;
        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }
        var animating = false,
          animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);
          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }
          target.toRect = toRect;
          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
            // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          }

          // if fromRect != toRect: animate
          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;
            if (!time) {
              time = _this.options.animation;
            }
            _this.animate(target, animatingRect, toRect, time);
          }
          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);
        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }
        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }
  function repaint(target) {
    return target.offsetWidth;
  }
  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }
  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }
      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;
      this.eventCanceled = false;
      evt.cancel = function () {
        _this.eventCanceled = true;
      };
      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return;
        // Fire global events if it exists in this sortable
        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        }

        // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined
        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized;

        // Add default options from plugin
        _extends(defaults, initialized.defaults);
      });
      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);
        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;
        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return;

        // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin
        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };
  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
    // Support for new CustomEvent feature
    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }
    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }
    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }
    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }
  var _excluded$x = ["evt"];
  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded$x);
    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };
  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }
  var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
    ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)

    _silent = false,
    savedInputChecked = [];

  /** @const */
  var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
    supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
      if (!documentExists) return;
      // false when <= IE11
      if (IE11OrLess) {
        return false;
      }
      var el = document.createElement('x');
      el.style.cssText = 'pointer-events:auto';
      return el.style.pointerEvents === 'auto';
    }(),
    _detectDirection = function _detectDirection(el, options) {
      var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
      if (elCSS.display === 'flex') {
        return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
      }
      if (elCSS.display === 'grid') {
        return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
      }
      if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
        var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
        return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
      }
      return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
    },
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
      var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
      return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
    },
    /**
     * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
     * @param  {Number} x      X position
     * @param  {Number} y      Y position
     * @return {HTMLElement}   Element of the first found nearest Sortable
     */
    _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
      var ret;
      sortables.some(function (sortable) {
        var threshold = sortable[expando].options.emptyInsertThreshold;
        if (!threshold || lastChild(sortable)) return;
        var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
        if (insideHorizontally && insideVertically) {
          return ret = sortable;
        }
      });
      return ret;
    },
    _prepareGroup = function _prepareGroup(options) {
      function toFn(value, pull) {
        return function (to, from, dragEl, evt) {
          var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
          if (value == null && (pull || sameGroup)) {
            // Default pull value
            // Default pull and put value if same group
            return true;
          } else if (value == null || value === false) {
            return false;
          } else if (pull && value === 'clone') {
            return value;
          } else if (typeof value === 'function') {
            return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
          } else {
            var otherGroup = (pull ? to : from).options.group.name;
            return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
          }
        };
      }
      var group = {};
      var originalGroup = options.group;
      if (!originalGroup || _typeof(originalGroup) != 'object') {
        originalGroup = {
          name: originalGroup
        };
      }
      group.name = originalGroup.name;
      group.checkPull = toFn(originalGroup.pull, true);
      group.checkPut = toFn(originalGroup.put);
      group.revertClone = originalGroup.revertClone;
      options.group = group;
    },
    _hideGhostForTarget = function _hideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', 'none');
      }
    },
    _unhideGhostForTarget = function _unhideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', '');
      }
    };

  // #1184 fix - Prevent click event on fallback if dragged but item not changed position
  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }
  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;
      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
      if (nearest) {
        // Create imitation event
        var event = {};
        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }
        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;
        nearest[expando]._onDragOver(event);
      }
    }
  };
  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };

  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */
  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }
    this.el = el; // root element
    this.options = options = _extends({}, options);

    // Export instance
    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      // Disabled on Safari: #1571; Enabled on Safari IOS: #2244
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && (!Safari || IOS),
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults);

    // Set default options
    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }
    _prepareGroup(options);

    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    // Setup drag mode
    this.nativeDraggable = options.forceFallback ? false : supportDraggable;
    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    }

    // Bind events
    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }
    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }
    sortables.push(this.el);

    // Restore sorting
    options.store && options.store.get && this.sort(options.store.get(this) || []);

    // Add animation state manager
    _extends(this, AnimationStateManager());
  }
  Sortable.prototype = /** @lends Sortable.prototype */{
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(/** Event|TouchEvent */evt) {
      if (!evt.cancelable) return;
      var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;
      _saveInputCheckedState(el);

      // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
      if (dragEl) {
        return;
      }
      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      }

      // cancel dnd if original target is content editable
      if (originalTarget.isContentEditable) {
        return;
      }

      // Safari ignores further event handling after mousedown
      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }
      target = closest(target, options.draggable, el, false);
      if (target && target.animated) {
        return;
      }
      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      }

      // Get the index of the dragged element within its parent
      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable);

      // Check filter
      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);
          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });
            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });
        if (filter) {
          preventOnFilter && evt.preventDefault();
          return; // cancel dnd
        }
      }
      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      }

      // Prepare `dragstart`
      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(/** Event */evt, /** Touch */touch, /** HTMLElement */target) {
      var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;
      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';
        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });
          if (Sortable.eventCanceled) {
            _this._onDrop();
            return;
          }
          // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove
          _this._disableDelayedDragEvents();
          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          }

          // Bind the events: dragstart/dragend
          _this._triggerDragStart(evt, touch);

          // Drag start event
          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          });

          // Chosen item
          toggleClass(dragEl, options.chosenClass, true);
        };

        // Disable "draggable"
        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        if (options.supportPointer) {
          on(ownerDocument, 'pointerup', _this._onDrop);
          // Native D&D triggers pointercancel
          !this.nativeDraggable && on(ownerDocument, 'pointercancel', _this._onDrop);
        } else {
          on(ownerDocument, 'mouseup', _this._onDrop);
          on(ownerDocument, 'touchend', _this._onDrop);
          on(ownerDocument, 'touchcancel', _this._onDrop);
        }

        // Make dragEl draggable (must be before delay for FireFox)
        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }
        pluginEvent('delayStart', this, {
          evt: evt
        });

        // Delay is impossible for native DnD in Edge or IE
        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();
            return;
          }
          // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag
          if (options.supportPointer) {
            on(ownerDocument, 'pointerup', _this._disableDelayedDrag);
            on(ownerDocument, 'pointercancel', _this._disableDelayedDrag);
          } else {
            on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
            on(ownerDocument, 'touchend', _this._disableDelayedDrag);
            on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          }
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(/** TouchEvent|PointerEvent **/e) {
      var touch = e.touches ? e.touches[0] : e;
      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);
      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'pointerup', this._disableDelayedDrag);
      off(ownerDocument, 'pointercancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(/** Event */evt, /** Touch */touch) {
      touch = touch || evt.pointerType == 'touch' && evt;
      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }
      try {
        if (document.selection) {
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;
      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });
        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }
        var options = this.options;

        // Apply effect
        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost();

        // Drag start event
        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;
        _hideGhostForTarget();
        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;
        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }
        dragEl.parentNode[expando]._isOutsideThisEl(target);
        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });
              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }
            target = parent; // store last element
          }
          /* jshint boss:true */ while (parent = getParentOrHost(parent));
        }
        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(/**TouchEvent*/evt) {
      if (tapEvt) {
        var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);

        // only set the status to dragging, when we are actually dragging
        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }
          this._onDragStart(evt, true);
        }
        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }
          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }
        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options;

        // Position absolutely
        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;
          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }
          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }
          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }
        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl);

        // Set transform-origin
        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(/**Event*/evt, /**boolean*/fallback) {
      var _this = this;
      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });
      if (Sortable.eventCanceled) {
        this._onDrop();
        return;
      }
      pluginEvent('setupClone', this);
      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';
        this._hideClone();
        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      }

      // #1143: IFrame support workaround
      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;
        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }
        _this._hideClone();
        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true);

      // Set proper drop events
      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);
        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }
        on(document, 'drop', _this);

        // #1276 fix:
        css(dragEl, 'transform', 'translateZ(0)');
      }
      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;
      window.getSelection().removeAllRanges();
      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(/**Event*/evt) {
      var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;
      if (_silent) return;
      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      }

      // Capture animation state
      function capture() {
        dragOverEvent('dragOverAnimationCapture');
        _this.captureAnimationState();
        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      }

      // Return invocation when dragEl is inserted (or completed)
      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });
        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }
          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }
          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          }

          // Animation
          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }
          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });
          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        }

        // Null lastTarget if it is not inside a previously swapped element
        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        }

        // no bubbling and not fallback
        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target);

          // Do not detect for empty insert if already inserted
          !insertion && nearestEmptyInsertDetectEvent(evt);
        }
        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      }

      // Call when dragEl has been inserted
      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);
        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }
      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }
      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;
      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }
      ignoreNextClick = false;
      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;
        if (revert) {
          parentEl = rootEl; // actualization
          capture();
          this._hideClone();
          dragOverEvent('revert');
          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }
          return completed(true);
        }
        var elLastChild = lastChild(el, options.draggable);
        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list

          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          }

          // if there is a last element, it is the target
          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }
          if (target) {
            targetRect = getRect(target);
          }
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();
            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);
          if (firstChild === dragEl) {
            return completed(false);
          }
          target = firstChild;
          targetRect = getRect(target);
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }
          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;
          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);
            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          }
          // If dragEl is already beside target: Do not insert
          if (direction === 0 || sibling === target) {
            return completed(false);
          }
          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
            after = false;
          after = direction === 1;
          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }
            _silent = true;
            setTimeout(_unsilent, 30);
            capture();
            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            }

            // Undo chrome's scroll adjustment (has no effect on other browsers)
            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }
            parentEl = dragEl.parentNode; // actualization

            // must be done before animation
            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }
            changed();
            return completed(true);
          }
        }
        if (el.contains(dragEl)) {
          return completed(false);
        }
      }
      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'pointercancel', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(/**Event*/evt) {
      var el = this.el,
        options = this.options;

      // Get the index of the dragged element within its parent
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode;

      // Get again after plugin event
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      if (Sortable.eventCanceled) {
        this._nulling();
        return;
      }
      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);
      _cancelNextTick(this.cloneId);
      _cancelNextTick(this._dragStartId);

      // Unbind events
      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }
      this._offMoveEvents();
      this._offUpEvents();
      if (Safari) {
        css(document.body, 'user-select', '');
      }
      css(dragEl, 'transform', '');
      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }
        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }
        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }
          _disableDraggable(dragEl);
          dragEl.style['will-change'] = '';

          // Remove classes
          // ghostClass is added in dragStarted
          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }
          toggleClass(dragEl, this.options.chosenClass, false);

          // Drag stop event
          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });
          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              // Remove event
              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              });

              // drag from one list and drop into another
              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }
          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }
            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            });

            // Save sorting
            this.save();
          }
        }
      }
      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(/**Event*/evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);
          break;
        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);
            _globalDragOver(evt);
          }
          break;
        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },
    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;
      for (; i < n; i++) {
        el = children[i];
        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }
      return order;
    },
    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
        rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];
        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },
    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },
    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },
    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;
      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);
        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }
        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },
    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);
      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      }
      // Remove draggable attributes
      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });
      this._onDrop();
      this._disableDelayedDragEvents();
      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');
        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }
        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();
        return;
      }
      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return;

        // show clone at dragEl or original position
        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }
        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }
        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };
  function _globalDragOver(/**Event*/evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }
    evt.cancelable && evt.preventDefault();
  }
  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal;
    // Support for new CustomEvent feature
    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }
    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);
    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }
    return retVal;
  }
  function _disableDraggable(el) {
    el.draggable = false;
  }
  function _unsilent() {
    _silent = false;
  }
  function _ghostIsFirst(evt, vertical, sortable) {
    var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
    var spacer = 10;
    return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
  }
  function _ghostIsLast(evt, vertical, sortable) {
    var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
    var spacer = 10;
    return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
  }
  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;
    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }
        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }
    invert = invert || invertSwap;
    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }
    return 0;
  }

  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */
  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }

  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */
  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;
    while (i--) {
      sum += str.charCodeAt(i);
    }
    return sum.toString(36);
  }
  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;
    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }
  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }
  function _cancelNextTick(id) {
    return clearTimeout(id);
  }

  // Fixed #973:
  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  }

  // Export utils
  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild,
    expando: expando
  };

  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */
  Sortable.get = function (element) {
    return element[expando];
  };

  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */
  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }
    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }
      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };

  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */
  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  };

  // Export
  Sortable.version = version;
  var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;
  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      };

      // Bind all private methods
      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }
    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;
        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent;
        // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }
        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;
        var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt;

        // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good
        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback);

          // Listener for pointer element change
          var ogElemScroller = getParentAutoScrollElement(elem, true);
          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval();
            // Detect for pointer elem change, emulating native DnD behaviour
            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }
              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }
          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }
  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }
  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }
  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
      scrollCustomFn;

    // New scroll root, set scrollEl
    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;
      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }
    var layersOut = 0;
    var currentParent = scrollEl;
    do {
      var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;
      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }
      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }
      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);
        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */
          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
            }
            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }
            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }
      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);
  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();
    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };
  function Revert() {}
  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();
      if (putSortable) {
        putSortable.captureAnimationState();
      }
      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }
      this.sortable.animateAll();
      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };
  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });
  function Remove() {}
  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };
  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });
  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  function swapDragArrayElement(data, currentIndex, targetIndex) {
    var newData = _toConsumableArray(data);
    if (targetIndex - currentIndex > 0) {
      newData.splice(targetIndex + 1, 0, newData[currentIndex]);
      newData.splice(currentIndex, 1);
    } else {
      newData.splice(targetIndex, 0, newData[currentIndex]);
      newData.splice(currentIndex + 1, 1);
    }
    return newData;
  }

  function ownKeys$1U(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1U(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1U(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1U(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useDragSort(props, _ref) {
    var primaryTableRef = _ref.primaryTableRef,
      innerPagination = _ref.innerPagination;
    var sortOnRowDraggable = props.sortOnRowDraggable,
      dragSort = props.dragSort,
      data = props.data,
      onDragSort = props.onDragSort;
    var _useClassName = useClassName(),
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableFullRowClasses = _useClassName.tableFullRowClasses;
    var _useState = React.useState(props.columns || []),
      _useState2 = _slicedToArray$1(_useState, 2),
      columns = _useState2[0],
      setDragSortColumns = _useState2[1];
    var dragCol = React.useMemo(function () {
      return columns.find(function (item) {
        return item.colKey === "drag";
      });
    }, [columns]);
    var isRowDraggable = React.useMemo(function () {
      return sortOnRowDraggable || dragSort === "row";
    }, [dragSort, sortOnRowDraggable]);
    var isRowHandlerDraggable = React.useMemo(function () {
      return ["row-handler", "row-handler-col"].includes(dragSort) && !!dragCol;
    }, [dragSort, dragCol]);
    var isColDraggable = React.useMemo(function () {
      return ["col", "row-handler-col"].includes(dragSort);
    }, [dragSort]);
    var lastRowList = React.useRef([]);
    var tData = React.useRef(null);
    var lastColList = React.useRef([]);
    var dragColumns = React.useRef([]);
    var originalColumns = React.useRef([]);
    var dragColInstanceTmp = null;
    if (props.sortOnRowDraggable) {
      log.warn("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
    }
    React.useEffect(function () {
      lastRowList.current = data.map(function (item) {
        return String(get(item, props.rowKey));
      });
      tData.current = data;
    }, [data, props.rowKey]);
    React.useEffect(function () {
      lastColList.current = props.columns.map(function (t) {
        return t.colKey;
      });
      dragColumns.current = props.columns;
      originalColumns.current = props.columns;
    }, [props.columns]);
    var onDragSortRef = useLatest(onDragSort);
    function getDataPageIndex(index, pagination) {
      var _pagination$current, _pagination$pageSize;
      var current = (_pagination$current = pagination.current) !== null && _pagination$current !== void 0 ? _pagination$current : pagination.defaultCurrent;
      var pageSize = (_pagination$pageSize = pagination.pageSize) !== null && _pagination$pageSize !== void 0 ? _pagination$pageSize : pagination.defaultPageSize;
      if (!props.disableDataPage && pagination && data.length > pageSize) {
        return pageSize * (current - 1) + index;
      }
      return index;
    }
    var registerRowDragEvent = function registerRowDragEvent(element) {
      var _dragInstanceTmp2;
      if (!isRowHandlerDraggable && !isRowDraggable) return;
      var dragInstanceTmp = null;
      var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");
      if (!dragContainer) {
        return null;
      }
      var baseOptions = _objectSpread$1U({
        animation: 150,
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        filter: ".".concat(tableFullRowClasses.base),
        onMove: function onMove(evt) {
          return !hasClass$1(evt.related, tableFullRowClasses.base);
        },
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp, _onDragSortRef$curren;
          if (evt.newIndex === evt.oldIndex) return;
          var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
          (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 || _dragInstanceTmp.sort(_toConsumableArray(lastRowList.current));
          if (props.firstFullRow) {
            currentIndex -= 1;
            targetIndex -= 1;
          }
          if (innerPagination.current) {
            currentIndex = getDataPageIndex(currentIndex, innerPagination.current);
            targetIndex = getDataPageIndex(targetIndex, innerPagination.current);
          }
          var newData = swapDragArrayElement(_toConsumableArray(tData.current), currentIndex, targetIndex);
          var params = {
            currentIndex: currentIndex,
            current: tData.current[currentIndex],
            targetIndex: targetIndex,
            target: tData.current[targetIndex],
            data: tData.current,
            newData: newData,
            e: evt,
            sort: "row"
          };
          params.currentData = params.newData;
          (_onDragSortRef$curren = onDragSortRef.current) === null || _onDragSortRef$curren === void 0 || _onDragSortRef$curren.call(onDragSortRef, params);
        }
      }, props.dragSortOptions);
      if (!dragContainer) return;
      if (isRowDraggable) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$1U({}, baseOptions));
      } else if (isRowHandlerDraggable) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$1U(_objectSpread$1U({}, baseOptions), {}, {
          handle: ".".concat(tableDraggableClasses.handle)
        }));
      }
      lastRowList.current = (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.toArray();
    };
    var registerOneLevelColDragEvent = function registerOneLevelColDragEvent(container, recover) {
      var options = _objectSpread$1U({
        animation: 150,
        dataIdAttr: "data-colkey",
        direction: "vertical",
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        handle: ".".concat(tableBaseClass.thCellInner),
        onEnd: function onEnd(evt) {
          var _onDragSortRef$curren2;
          if (evt.newIndex === evt.oldIndex) return;
          if (recover) {
            var _dragColInstanceTmp;
            (_dragColInstanceTmp = dragColInstanceTmp) === null || _dragColInstanceTmp === void 0 || _dragColInstanceTmp.sort(_toConsumableArray(lastColList.current));
          }
          var oldIndex = evt.oldIndex,
            newIndex = evt.newIndex,
            targetElement = evt.target;
          var currentIndex = recover ? oldIndex : newIndex;
          var targetIndex = recover ? newIndex : oldIndex;
          var oldElement = targetElement.children[currentIndex];
          var newElement = targetElement.children[targetIndex];
          var current = getColumnDataByKey(originalColumns.current, oldElement.dataset.colkey);
          var target = getColumnDataByKey(originalColumns.current, newElement.dataset.colkey);
          if (!current || !current.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
          }
          if (!target || !target.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
          }
          currentIndex = getColumnIndexByKey(originalColumns.current, current.colKey);
          targetIndex = getColumnIndexByKey(originalColumns.current, target.colKey);
          var params = {
            data: dragColumns.current,
            currentIndex: currentIndex,
            current: current,
            targetIndex: targetIndex,
            target: target,
            newData: swapDragArrayElement(_toConsumableArray(originalColumns.current), currentIndex, targetIndex),
            e: evt,
            sort: "col"
          };
          params.currentData = params.newData;
          (_onDragSortRef$curren2 = onDragSortRef.current) === null || _onDragSortRef$curren2 === void 0 || _onDragSortRef$curren2.call(onDragSortRef, params);
        }
      }, props.dragSortOptions);
      if (!container) return;
      dragColInstanceTmp = new Sortable(container, options);
      return dragColInstanceTmp;
    };
    var registerColDragEvent = function registerColDragEvent(tableElement) {
      if (!isColDraggable || !tableElement) return;
      var trList = tableElement.querySelectorAll("thead > tr");
      if (trList.length <= 1) {
        var container = trList[0];
        var dragInstanceTmp = registerOneLevelColDragEvent(container, true);
        lastColList.current = dragInstanceTmp === null || dragInstanceTmp === void 0 ? void 0 : dragInstanceTmp.toArray();
      } else {
        trList === null || trList === void 0 || trList.forEach(function (container) {
          registerOneLevelColDragEvent(container, false);
        });
      }
    };
    React.useEffect(function () {
      var _primaryTableRef$curr, _primaryTableRef$curr2;
      if (!primaryTableRef || !primaryTableRef.current) return;
      registerRowDragEvent((_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableElement);
      registerColDragEvent((_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableHtmlElement);
      var timer = setTimeout(function () {
        var _primaryTableRef$curr3;
        if ((_primaryTableRef$curr3 = primaryTableRef.current) !== null && _primaryTableRef$curr3 !== void 0 && _primaryTableRef$curr3.affixHeaderElement) {
          registerColDragEvent(primaryTableRef.current.affixHeaderElement);
        }
        clearTimeout(timer);
      });
      return function () {
        clearTimeout(timer);
      };
    }, [primaryTableRef, columns, dragSort, innerPagination]);
    return {
      isRowDraggable: isRowDraggable,
      isRowHandlerDraggable: isRowHandlerDraggable,
      isColDraggable: isColDraggable,
      setDragSortColumns: setDragSortColumns
    };
  }

  function useAsyncLoading(props) {
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      local = _useLocaleReceiver2[0];
    var _useClassName = useClassName(),
      isLoadingClass = _useClassName.isLoadingClass,
      isLoadMoreClass = _useClassName.isLoadMoreClass,
      asyncLoadingClass = _useClassName.asyncLoadingClass;
    var classes = [asyncLoadingClass, _defineProperty$2(_defineProperty$2({}, isLoadingClass, props.asyncLoading === "loading"), isLoadMoreClass, props.asyncLoading === "load-more")];
    function onLoadClick() {
      var _props$onAsyncLoading;
      if (typeof props.asyncLoading !== "string") return;
      var status = props.asyncLoading === "loading" ? "loading" : "load-more";
      (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 || _props$onAsyncLoading.call(props, {
        status: status
      });
    }
    function renderAsyncLoading() {
      var asyncLoadingNode = props.asyncLoading;
      if (isString(asyncLoadingNode)) {
        var asyncLoading = props.asyncLoading;
        var loadingText = {
          "load-more": local.loadingMoreText,
          loading: local.loadingText
        }[String(asyncLoading)];
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1(classes),
          onClick: onLoadClick
        }, /* @__PURE__ */React__default["default"].createElement(Loading, {
          loading: true,
          size: "small",
          text: loadingText,
          indicator: asyncLoading === "loading"
        }));
      }
      if (asyncLoadingNode) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1(classes),
          onClick: onLoadClick
        }, asyncLoadingNode);
      }
      return null;
    }
    return {
      renderAsyncLoading: renderAsyncLoading
    };
  }

  function _toArray$1(r) {
    return _arrayWithHoles$1(r) || _iterableToArray(r) || _unsupportedIterableToArray$6(r) || _nonIterableRest$1();
  }

  var isDate$1 = {exports: {}};

  var merge = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;
      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }
      return obj;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(merge, merge.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _slicedToArray(r, e) {
      return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e,
          n,
          i,
          u,
          a = [],
          f = !0,
          o = !1;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = !1;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
          o = !0, n = r;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    function _createForOfIteratorHelper(r, e) {
      var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (!t) {
        if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
          t && (r = t);
          var _n = 0,
            F = function F() {};
          return {
            s: F,
            n: function n() {
              return _n >= r.length ? {
                done: !0
              } : {
                done: !1,
                value: r[_n++]
              };
            },
            e: function e(r) {
              throw r;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var o,
        a = !0,
        u = !1;
      return {
        s: function s() {
          t = t.call(r);
        },
        n: function n() {
          var r = t.next();
          return a = r.done, r;
        },
        e: function e(r) {
          u = !0, o = r;
        },
        f: function f() {
          try {
            a || null == t["return"] || t["return"]();
          } finally {
            if (u) throw o;
          }
        }
      };
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };
    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }
    function zip(date, format) {
      var zippedArr = [],
        len = Math.max(date.length, format.length);
      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }
      return zippedArr;
    }
    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatibility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }
      if (typeof input === 'string' && isValidFormat(options.format)) {
        if (options.strictMode && input.length !== options.format.length) return false;
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};
        var _iterator = _createForOfIteratorHelper(dateAndFormat),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
              dateWord = _step$value[0],
              formatWord = _step$value[1];
            if (!dateWord || !formatWord || dateWord.length !== formatWord.length) {
              return false;
            }
            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var fullYear = dateObj.y;

        // Check if the year starts with a hyphen
        if (fullYear.startsWith('-')) {
          return false; // Hyphen before year is not allowed
        }
        if (dateObj.y.length === 2) {
          var parsedYear = parseInt(dateObj.y, 10);
          if (isNaN(parsedYear)) {
            return false;
          }
          var currentYearLastTwoDigits = new Date().getFullYear() % 100;
          if (parsedYear < currentYearLastTwoDigits) {
            fullYear = "20".concat(dateObj.y);
          } else {
            fullYear = "19".concat(dateObj.y);
          }
        }
        var month = dateObj.m;
        if (dateObj.m.length === 1) {
          month = "0".concat(dateObj.m);
        }
        var day = dateObj.d;
        if (dateObj.d.length === 1) {
          day = "0".concat(dateObj.d);
        }
        return new Date("".concat(fullYear, "-").concat(month, "-").concat(day, "T00:00:00.000Z")).getUTCDate() === +dateObj.d;
      }
      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isDate$1, isDate$1.exports);
  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate$1.exports);

  var isEmail$1 = {exports: {}};

  var assertString = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;
    function assertString(input) {
      if (input === undefined || input === null) throw new TypeError("Expected a string but received a ".concat(input));
      if (input.constructor.name !== 'String') throw new TypeError("Expected a string but received a ".concat(input.constructor.name));
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(assertString, assertString.exports);

  var checkHost = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = checkHost;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(checkHost, checkHost.exports);

  var isByteLength = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;
    var _assertString = _interopRequireDefault(assertString.exports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }
    /* eslint-disable prefer-rest-params */
    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;
      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }
      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isByteLength, isByteLength.exports);

  var isFQDN = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;
    var _assertString = _interopRequireDefault(assertString.exports);
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false,
      ignore_max_length: false
    };
    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);

      /* Remove the optional trailing dot before checking validity */
      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }

      /* Remove the optional wildcard before checking validity */
      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }
      var parts = str.split('.');
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }
        if (!options.allow_numeric_tld && !/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        }

        // disallow spaces
        if (/\s/.test(tld)) {
          return false;
        }
      }

      // reject numeric TLDs
      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function (part) {
        if (part.length > 63 && !options.ignore_max_length) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        }

        // disallow full-width chars
        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        }

        // disallow parts starting or ending with hyphen
        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isFQDN, isFQDN.exports);

  var isIP = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;
    var _assertString = _interopRequireDefault(assertString.exports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }
    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */
    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z.]{1,})?$');
    function isIP(ipAddress) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      (0, _assertString["default"])(ipAddress);

      // accessing 'arguments' for backwards compatibility: isIP(ipAddress [, version])
      // eslint-disable-next-line prefer-rest-params
      var version = (_typeof(options) === 'object' ? options.version : arguments[1]) || '';
      if (!version) {
        return isIP(ipAddress, {
          version: 4
        }) || isIP(ipAddress, {
          version: 6
        });
      }
      if (version.toString() === '4') {
        return IPv4AddressRegExp.test(ipAddress);
      }
      if (version.toString() === '6') {
        return IPv6AddressRegExp.test(ipAddress);
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isIP, isIP.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;
    var _assertString = _interopRequireDefault(assertString.exports);
    var _checkHost = _interopRequireDefault(checkHost.exports);
    var _isByteLength = _interopRequireDefault(isByteLength.exports);
    var _isFQDN = _interopRequireDefault(isFQDN.exports);
    var _isIP = _interopRequireDefault(isIP.exports);
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    var default_email_options = {
      allow_display_name: false,
      allow_underscores: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: [],
      host_whitelist: []
    };

    /* eslint-disable max-len */
    /* eslint-disable no-control-regex */
    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A1-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */
    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */
    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1');
      // display name with only spaces is not valid
      if (!display_name_without_quotes.trim()) {
        return false;
      }

      // check whether display name contains illegal character
      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        }

        // the quotes in display name must start with character symbol \
        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
        if (!all_start_with_back_slash) {
          return false;
        }
      }
      return true;
    }
    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);
      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);
        if (display_email) {
          var display_name = display_email[1];

          // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)
          str = str.replace(display_name, '').replace(/(^<|>$)/g, '');

          // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space
          if (display_name.endsWith(' ')) {
            display_name = display_name.slice(0, -1);
          }
          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }
      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }
      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();
      if (options.host_blacklist.length > 0 && (0, _checkHost["default"])(lower_domain, options.host_blacklist)) {
        return false;
      }
      if (options.host_whitelist.length > 0 && !(0, _checkHost["default"])(lower_domain, options.host_whitelist)) {
        return false;
      }
      var user = parts.join('@');
      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
        Previously we removed dots for gmail addresses before validating.
        This was removed because it allows `multiple..dots@gmail.com`
        to be reported as valid, but it is not.
        Gmail only normalizes single dots, removing them from here is pointless,
        should be done in normalizeEmail
        */
        user = user.toLowerCase();

        // Removing sub-address from username before gmail validation
        var username = user.split('+')[0];

        // Dots are not included in gmail length restriction
        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }
        var _user_parts = username.split('.');
        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }
      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }
      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld,
        ignore_max_length: options.ignore_max_length,
        allow_underscores: options.allow_underscores
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }
        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }
          var noBracketdomain = domain.slice(1, -1);
          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }
      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }
      if (user[0] === '"' && user[user.length - 1] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }
      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');
      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isEmail$1, isEmail$1.exports);
  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail$1.exports);

  var isURL$1 = {exports: {}};

  var includesString = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var includes = function includes(str, val) {
      return str.indexOf(val) !== -1;
    };
    exports["default"] = includes;
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(includesString, includesString.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;
    var _assertString = _interopRequireDefault(assertString.exports);
    var _checkHost = _interopRequireDefault(checkHost.exports);
    var _includesString = _interopRequireDefault(includesString.exports);
    var _isFQDN = _interopRequireDefault(isFQDN.exports);
    var _isIP = _interopRequireDefault(isIP.exports);
    var _merge = _interopRequireDefault(merge.exports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _slicedToArray(r, e) {
      return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e,
          n,
          i,
          u,
          a = [],
          f = !0,
          o = !1;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = !1;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
          o = !0, n = r;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    /*
    options for isURL method
    
    protocols - valid protocols can be modified with this option.
    require_tld - If set to false isURL will not check if the URL's host includes a top-level domain.
    require_protocol - if set to true isURL will return false if protocol is not present in the URL.
    require_host - if set to false isURL will not check if host is present in the URL.
    require_port - if set to true isURL will check if port is present in the URL.
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option.
    allow_underscores - if set to true, the validator will allow underscores in the URL.
    host_whitelist - if set to an array of strings or regexp, and the domain matches none of the strings
                     defined in it, the validation fails.
    host_blacklist - if set to an array of strings or regexp, and the domain matches any of the strings
                     defined in it, the validation fails.
    allow_trailing_dot - if set to true, the validator will allow the domain to end with
                         a `.` character.
    allow_protocol_relative_urls - if set to true protocol relative URLs will be allowed.
    allow_fragments - if set to false isURL will return false if fragments are present.
    allow_query_components - if set to false isURL will return false if query components are present.
    disallow_auth - if set to true, the validator will fail if the URL contains an authentication
                    component, e.g. `http://username:password@example.com`
    validate_length - if set to false isURL will skip string length validation. `max_allowed_length`
                      will be ignored if this is set as `false`.
    max_allowed_length - if set, isURL will not allow URLs longer than the specified value (default is
                         2084 that IE maximum URL length).
    
    */

    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true,
      max_allowed_length: 2084
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isURL(url, options) {
      (0, _assertString["default"])(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf('mailto:') === 0) {
        return false;
      }
      options = (0, _merge["default"])(options, default_url_options);
      if (options.validate_length && url.length > options.max_allowed_length) {
        return false;
      }
      if (!options.allow_fragments && (0, _includesString["default"])(url, '#')) {
        return false;
      }
      if (!options.allow_query_components && ((0, _includesString["default"])(url, '?') || (0, _includesString["default"])(url, '&'))) {
        return false;
      }
      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.slice(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.slice(2);
      }
      url = split.join('://');
      if (url === '') {
        return false;
      }
      split = url.split('/');
      url = split.shift();
      if (url === '' && !options.require_host) {
        return true;
      }
      split = url.split('@');
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === '') {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }
        var _auth$split = auth.split(':'),
          _auth$split2 = _slicedToArray(_auth$split, 2),
          user = _auth$split2[0],
          password = _auth$split2[1];
        if (user === '' && password === '') {
          return false;
        }
      }
      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();
        if (split.length) {
          port_str = split.join(':');
        }
      }
      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (options.host_whitelist) {
        return (0, _checkHost["default"])(host, options.host_whitelist);
      }
      if (host === '' && !options.require_host) {
        return true;
      }
      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_blacklist && (0, _checkHost["default"])(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isURL$1, isURL$1.exports);
  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL$1.exports);

  function ownKeys$1T(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1T(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1T(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1T(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };
    if (type === typeMap.Date) {
      return false;
    }
    return _typeof$3(val) === "object" ? isEmpty(val) : ["", void 0, null].includes(val);
  }
  var compareValue = function compareValue(val, num, isMax) {
    var compare = function compare(a, b) {
      return isMax ? a <= b : a >= b;
    };
    if (isNumber(val)) return compare(val, num);
    if (Array.isArray(val)) return compare(val.length, num);
    return compare(getCharacterLength(val), num);
  };
  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    whitespace: function whitespace(val) {
      return !(/^\s+$/.test(val) || val === "");
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return compareValue(val, num, true);
    },
    min: function min(val, num) {
      return compareValue(val, num, false);
    },
    len: function len(val, num) {
      return getCharacterLength(val) === num;
    },
    number: function number(val) {
      return isNumber(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }
  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            validateResult = {
              result: true
            };
            keys = Object.keys(rule);
            i = 0;
          case 1:
            if (!(i < keys.length)) {
              _context.next = 4;
              break;
            }
            key = keys[i];
            if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return", validateResult);
          case 2:
            validateRule = VALIDATE_MAP[key];
            if (!(validateRule && ![void 0, null].includes(rule[key]))) {
              _context.next = 3;
              break;
            }
            vOptions = rule[key] === true ? void 0 : rule[key];
            vValidateFun = validateRule;
            return _context.abrupt("continue", 4);
          case 3:
            i++;
            _context.next = 1;
            break;
          case 4:
            if (!vValidateFun) {
              _context.next = 7;
              break;
            }
            _context.next = 5;
            return vValidateFun(value, vOptions);
          case 5:
            validateResult = _context.sent;
            if (!(typeof validateResult === "boolean")) {
              _context.next = 6;
              break;
            }
            return _context.abrupt("return", _objectSpread$1T(_objectSpread$1T({}, rule), {}, {
              result: validateResult
            }));
          case 6:
            if (!(_typeof$3(validateResult) === "object")) {
              _context.next = 7;
              break;
            }
            return _context.abrupt("return", validateResult);
          case 7:
            return _context.abrupt("return", validateResult);
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }
  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }
  function _validate() {
    _validate = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            all = rules.map(function (rule) {
              return validateOneRule(value, rule);
            });
            _context2.next = 1;
            return Promise.all(all);
          case 1:
            r = _context2.sent;
            return _context2.abrupt("return", r);
          case 2:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }
  function parseMessage(template, options) {
    return template.replace(/\$\{\w+\}/g, function (str) {
      var key = str.slice(2, -1);
      return options[key];
    });
  }

  function ownKeys$1S(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1S(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1S(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1S(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var EditableCell = function EditableCell(props) {
    var _col$edit, _col$edit6, _errorList$, _col$edit7, _errorList$2;
    var row = props.row,
      col = props.col,
      colIndex = props.colIndex,
      rowIndex = props.rowIndex,
      errors = props.errors,
      editable = props.editable,
      tableBaseClass = props.tableBaseClass;
    var _useGlobalIcon = useGlobalIcon({
        Edit1Icon: TdEdit1Icon
      }),
      Edit1Icon = _useGlobalIcon.Edit1Icon;
    var tableEditableCellRef = React.useRef(null);
    var isKeepEditMode = Boolean((_col$edit = col.edit) === null || _col$edit === void 0 ? void 0 : _col$edit.keepEditMode);
    var _useState = React.useState(function () {
        var _props$col$edit;
        return isKeepEditMode || ((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false;
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      isEdit = _useState2[0],
      setIsEdit = _useState2[1];
    var _useState3 = React.useState(),
      _useState4 = _slicedToArray$1(_useState3, 2),
      editValue = _useState4[0],
      setEditValue = _useState4[1];
    var _useState5 = React.useState([]),
      _useState6 = _slicedToArray$1(_useState5, 2),
      errorList = _useState6[0],
      setErrorList = _useState6[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    React.useEffect(function () {
      if (isKeepEditMode) {
        setIsEdit(true);
      }
    }, [isKeepEditMode]);
    var getCurrentRow = function getCurrentRow(row2, colKey, value) {
      if (!colKey) return row2;
      var _ref = colKey.split(".") || [],
        _ref2 = _toArray$1(_ref),
        firstKey = _ref2[0],
        restKeys = _ref2.slice(1);
      var newRow = _objectSpread$1S({}, row2);
      if (restKeys.length) {
        newRow[firstKey] = cloneDeep(row2[firstKey]);
        set(newRow[firstKey], restKeys.join("."), value);
      } else {
        set(newRow, colKey, value);
      }
      return newRow;
    };
    var cellParams = React.useMemo(function () {
      return {
        col: col,
        row: row,
        colIndex: colIndex,
        rowIndex: rowIndex
      };
    }, [col, row, colIndex, rowIndex]);
    var cellValue = React.useMemo(function () {
      return get(row, col.colKey);
    }, [row, col.colKey]);
    var currentRow = React.useMemo(function () {
      return getCurrentRow(row, col.colKey, editValue);
    }, [col.colKey, editValue, row]);
    var updateEditedCellValue = function updateEditedCellValue(val) {
      setEditValue(val);
    };
    var editOnListeners = React.useMemo(function () {
      var _col$edit2, _col$edit2$on;
      return ((_col$edit2 = col.edit) === null || _col$edit2 === void 0 || (_col$edit2$on = _col$edit2.on) === null || _col$edit2$on === void 0 ? void 0 : _col$edit2$on.call(_col$edit2, _objectSpread$1S(_objectSpread$1S({}, cellParams), {}, {
        editedRow: currentRow,
        updateEditedCellValue: updateEditedCellValue
      }))) || {};
    }, [cellParams, currentRow]);
    var cellNode = React.useMemo(function () {
      var node = renderCell({
        row: currentRow,
        col: _objectSpread$1S(_objectSpread$1S({}, col), {}, {
          cell: props.oldCell
        }),
        rowIndex: props.rowIndex,
        colIndex: props.colIndex
      }, {
        cellEmptyContent: props.cellEmptyContent
      });
      return node;
    }, [col, currentRow, props.cellEmptyContent, props.colIndex, props.oldCell, props.rowIndex]);
    var componentProps = React.useMemo(function () {
      var _edit$abortEditOnEven;
      var edit = col.edit;
      if (!edit) return {};
      var editProps = isFunction$1(edit.props) ? edit.props(_objectSpread$1S(_objectSpread$1S({}, cellParams), {}, {
        editedRow: currentRow,
        updateEditedCellValue: updateEditedCellValue
      })) : _objectSpread$1S({}, edit.props);
      delete editProps.onChange;
      delete editProps.value;
      (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 || _edit$abortEditOnEven.forEach(function (item) {
        delete editProps[item];
      });
      return editProps;
    }, [currentRow, cellParams, col]);
    var isAbortEditOnChange = React.useMemo(function () {
      var _edit$abortEditOnEven2;
      var edit = col.edit;
      if (!edit) return false;
      return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
    }, [col]);
    var validateEdit = function validateEdit(trigger, newVal) {
      return new Promise(function (resolve) {
        var params = {
          result: [_objectSpread$1S(_objectSpread$1S({}, cellParams), {}, {
            errorList: [],
            value: newVal
          })],
          trigger: trigger
        };
        var rules = isFunction$1(col.edit.rules) ? col.edit.rules(cellParams) : col.edit.rules;
        if (!col.edit || !rules || !rules.length) {
          var _props$onValidate;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, params);
          resolve(true);
          return;
        }
        validate(newVal, rules).then(function (result) {
          var _props$onValidate2;
          var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
            return !t.result;
          });
          params.result[0].errorList = list;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, params);
          if (!list || !list.length) {
            setErrorList([]);
            resolve(true);
          } else {
            setErrorList(list);
            resolve(list);
          }
        });
      });
    };
    var isSame = function isSame(a, b) {
      if (_typeof$3(a) === "object" && _typeof$3(b) === "object") {
        return JSON.stringify(a) === JSON.stringify(b);
      }
      return a === b;
    };
    var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent, eventName) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      validateEdit("self", args[0].value).then(function (result) {
        var _editOnListeners$even;
        if (result !== true) return;
        var oldValue = get(row, col.colKey);
        if (!isSame(args[0].value, oldValue)) {
          setEditValue(oldValue);
          outsideAbortEvent === null || outsideAbortEvent === void 0 || outsideAbortEvent.apply(void 0, args);
        }
        (_editOnListeners$even = editOnListeners[eventName]) === null || _editOnListeners$even === void 0 || _editOnListeners$even.call(editOnListeners, args[2]);
        var timer = setTimeout(function () {
          if (!isKeepEditMode) {
            setIsEdit(false);
          }
          setErrorList([]);
          clearTimeout(timer);
        }, 0);
      });
    };
    var listeners = React.useMemo(function () {
      var _edit$abortEditOnEven3;
      var edit = col.edit;
      var isCellEditable = props.editable === void 0;
      if (!isEdit || !isCellEditable) return;
      if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
      var tListeners = {};
      var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
      edit.abortEditOnEvent.forEach(function (itemEvent) {
        if (itemEvent === "onChange") return;
        tListeners[itemEvent] = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, itemEvent, _objectSpread$1S(_objectSpread$1S({}, cellParams), {}, {
            value: editValue,
            trigger: itemEvent,
            newRowData: currentRow
          })].concat(args));
        };
      });
      return tListeners;
    }, [col, currentRow, isEdit, props.rowIndex]);
    var onEditChange = function onEditChange(val) {
      var _props$onChange, _props$onRuleChange, _editOnListeners$onCh, _col$edit4;
      setEditValue(val);
      var params = _objectSpread$1S(_objectSpread$1S({}, cellParams), {}, {
        value: val,
        editedRow: set(_objectSpread$1S({}, props.row), props.col.colKey, val)
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, params);
      (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 || _props$onRuleChange.call(props, params);
      (_editOnListeners$onCh = editOnListeners.onChange) === null || _editOnListeners$onCh === void 0 || _editOnListeners$onCh.call(editOnListeners, params);
      var isCellEditable = props.editable === void 0;
      if (isCellEditable && isAbortEditOnChange) {
        var _col$edit3;
        var outsideAbortEvent = (_col$edit3 = col.edit) === null || _col$edit3 === void 0 ? void 0 : _col$edit3.onEdited;
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        updateAndSaveAbort.apply(void 0, [outsideAbortEvent, "change", {
          value: val,
          trigger: "onChange",
          newRowData: getCurrentRow(currentRow, col.colKey, val),
          rowIndex: props.rowIndex
        }].concat(args));
      }
      if (((_col$edit4 = col.edit) === null || _col$edit4 === void 0 ? void 0 : _col$edit4.validateTrigger) === "change") {
        validateEdit("self", val);
      }
    };
    var documentClickHandler = function documentClickHandler(e) {
      var _e$composedPath;
      if (!col.edit || !col.edit.component) return;
      if (!isEdit) return;
      var path = ((_e$composedPath = e.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e)) || e.path || [];
      var node = path.find(function (node2) {
        var _node2$classList;
        return (_node2$classList = node2.classList) === null || _node2$classList === void 0 ? void 0 : _node2$classList.contains("".concat(classPrefix, "-popup__content"));
      });
      if (node) return;
      var outsideAbortEvent = col.edit.onEdited;
      updateAndSaveAbort(outsideAbortEvent, "", {
        value: editValue,
        trigger: "document",
        newRowData: currentRow,
        rowIndex: props.rowIndex
      });
    };
    React.useEffect(function () {
      setEditValue(cellValue);
    }, [cellValue]);
    React.useEffect(function () {
      if (typeof document === "undefined") return;
      var isCellEditable = props.editable === void 0;
      if (!col.edit || !col.edit.component || !isCellEditable) return;
      if (isEdit) {
        document.addEventListener("click", documentClickHandler);
      } else {
        document.removeEventListener("click", documentClickHandler);
      }
      return function () {
        document.removeEventListener("click", documentClickHandler);
      };
    }, [col.edit, isEdit, editValue]);
    React.useEffect(function () {
      if (props.editable === false) {
        setEditValue(cellValue);
      }
    }, [cellValue, editable]);
    React.useEffect(function () {
      if (props.editable === true) {
        var _props$onRuleChange2;
        (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 || _props$onRuleChange2.call(props, _objectSpread$1S(_objectSpread$1S({}, cellParams), {}, {
          value: cellValue,
          editedRow: currentRow || row
        }));
      }
    }, [props.editable, cellValue, row, col, cellParams, currentRow]);
    React.useEffect(function () {
      setErrorList(errors);
    }, [errors]);
    if (props.readonly) {
      return cellNode || null;
    }
    if (props.editable === void 0 && !isEdit || editable === false) {
      var _col$edit5;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(tableBaseClass.cellEditable),
        onClick: function onClick(e) {
          setIsEdit(true);
          e.stopPropagation();
          e.nativeEvent.stopImmediatePropagation();
        }
      }, cellNode, ((_col$edit5 = col.edit) === null || _col$edit5 === void 0 ? void 0 : _col$edit5.showEditIcon) !== false && /* @__PURE__ */React__default["default"].createElement(Edit1Icon, null));
    }
    var Component = (_col$edit6 = col.edit) === null || _col$edit6 === void 0 ? void 0 : _col$edit6.component;
    if (!Component) {
      log.error("Table", "edit.component is required.");
      return null;
    }
    var errorMessage = errorList === null || errorList === void 0 || (_errorList$ = errorList[0]) === null || _errorList$ === void 0 ? void 0 : _errorList$.message;
    var tmpEditOnListeners = _objectSpread$1S({}, editOnListeners);
    delete tmpEditOnListeners.onChange;
    if ((_col$edit7 = col.edit) !== null && _col$edit7 !== void 0 && (_col$edit7 = _col$edit7.abortEditOnEvent) !== null && _col$edit7 !== void 0 && _col$edit7.length) {
      col.edit.abortEditOnEvent.forEach(function (onEventName) {
        if (tmpEditOnListeners[onEventName]) {
          delete tmpEditOnListeners[onEventName];
        }
      });
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: tableBaseClass.cellEditWrap,
      onClick: function onClick(e) {
        e.stopPropagation();
        e.nativeEvent.stopImmediatePropagation();
      }
    }, /* @__PURE__ */React__default["default"].createElement(Component, _objectSpread$1S(_objectSpread$1S(_objectSpread$1S(_objectSpread$1S({
      ref: tableEditableCellRef,
      status: errorMessage ? (errorList === null || errorList === void 0 || (_errorList$2 = errorList[0]) === null || _errorList$2 === void 0 ? void 0 : _errorList$2.type) || "error" : void 0,
      tips: errorMessage
    }, componentProps), listeners), tmpEditOnListeners), {}, {
      value: editValue,
      onChange: onEditChange
    })));
  };
  EditableCell.displayName = "EditableCell";

  function ownKeys$1R(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1R(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1R(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1R(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useEditableRow(props) {
    var cellRuleMap = React.useMemo(function () {
      return /* @__PURE__ */new Map();
    }, []);
    var editableRowKeys = props.editableRowKeys;
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      errorListMap = _useState2[0],
      setErrorListMap = _useState2[1];
    var editableKeysMap = React.useMemo(function () {
      return editableRowKeys && getEditableKeysMap(editableRowKeys, props.data, props.rowKey || "id");
    }, [editableRowKeys, props.data, props.rowKey]);
    var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
      var errorMap = {};
      errors.forEach(function (_ref) {
        var row = _ref.row,
          col = _ref.col,
          errorList = _ref.errorList;
        var rowValue = get(row, props.rowKey || "id");
        var key = [rowValue, col.colKey].join("__");
        if (errorList !== null && errorList !== void 0 && errorList.length) {
          errorMap[key] = errorList;
        } else {
          delete errorMap[key];
        }
      });
      return errorMap;
    };
    var validateOneRowData = function validateOneRowData(rowValue) {
      var rowRules = cellRuleMap.get(rowValue);
      if (!rowRules) return;
      var list = rowRules.map(function (item) {
        return new Promise(function (resolve) {
          var editedRow = item.editedRow,
            col = item.col;
          var rules = isFunction$1(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;
          if (!col.edit || !rules || !rules) {
            resolve(_objectSpread$1R(_objectSpread$1R({}, item), {}, {
              errorList: []
            }));
            return;
          }
          validate(get(editedRow, col.colKey), rules).then(function (r) {
            resolve(_objectSpread$1R(_objectSpread$1R({}, item), {}, {
              errorList: r.filter(function (t) {
                return !t.result;
              })
            }));
          });
        });
      });
      return new Promise(function (resolve, reject) {
        Promise.all(list).then(function (errors) {
          resolve({
            errors: errors.filter(function (t) {
              var _t$errorList;
              return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
            }),
            errorMap: getErrorListMapByErrors(errors)
          });
        }, reject);
      });
    };
    var validateRowData = function validateRowData(rowValue) {
      return new Promise(function (resolve, reject) {
        validateOneRowData(rowValue).then(function (_ref2) {
          var _props$onRowValidate;
          var errors = _ref2.errors,
            errorMap = _ref2.errorMap;
          setErrorListMap(errorMap);
          var tTrigger = "parent";
          (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 || _props$onRowValidate.call(props, {
            trigger: tTrigger,
            result: errors
          });
          resolve({
            trigger: tTrigger,
            result: errors
          });
        }, reject);
      });
    };
    var validateTableData = function validateTableData() {
      var promiseList = [];
      var data = props.data || [];
      for (var i = 0, len = data.length; i < len; i++) {
        var rowValue = get(data[i], props.rowKey || "id");
        promiseList.push(validateOneRowData(rowValue));
      }
      return new Promise(function (resolve, reject) {
        Promise.all(promiseList).then(function (rList) {
          var _props$onValidate;
          var allErrorListMap = {};
          rList.forEach(function () {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                errors: [],
                errorMap: {}
              },
              errorMap = _ref3.errorMap;
            errorMap && Object.assign(allErrorListMap, errorMap);
          });
          setErrorListMap(allErrorListMap);
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {
            result: allErrorListMap
          });
          resolve({
            result: allErrorListMap
          });
        }, reject);
      });
    };
    var onRuleChange = function onRuleChange(context) {
      if (props.editableRowKeys) {
        var rowValue = get(context.row, props.rowKey || "id");
        var rules = cellRuleMap.get(rowValue);
        if (rules) {
          var index = rules.findIndex(function (t) {
            return t.col.colKey === context.col.colKey;
          });
          if (index === -1) {
            rules.push(context);
          } else {
            rules[index] = context;
          }
          cellRuleMap.set(rowValue, rules);
        } else {
          cellRuleMap.set(rowValue, [context]);
        }
      }
    };
    var clearValidateData = function clearValidateData() {
      setErrorListMap({});
    };
    return {
      errorListMap: errorListMap,
      editableKeysMap: editableKeysMap,
      validateRowData: validateRowData,
      validateTableData: validateTableData,
      clearValidateData: clearValidateData,
      onRuleChange: onRuleChange
    };
  }

  function ownKeys$1Q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1Q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1Q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1Q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var PrimaryTable$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, primaryTableDefaultProps);
    var columns = props.columns,
      columnController = props.columnController,
      editableRowKeys = props.editableRowKeys,
      style = props.style,
      className = props.className;
    var primaryTableRef = React.useRef(null);
    var innerPagination = React.useRef(props.pagination);
    var _useClassName = useClassName(),
      classPrefix = _useClassName.classPrefix,
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableSelectedClasses = _useClassName.tableSelectedClasses,
      tableSortClasses = _useClassName.tableSortClasses;
    var _useStyle = useStyle(props),
      sizeClassNames = _useStyle.sizeClassNames;
    var _useColumnController = useColumnController(props, {
        onColumnReduce: onColumnReduce
      }),
      tDisplayColumns = _useColumnController.tDisplayColumns,
      renderColumnController = _useColumnController.renderColumnController;
    var _useRowExpand = useRowExpand(props),
      showExpandedRow = _useRowExpand.showExpandedRow,
      showExpandIconColumn = _useRowExpand.showExpandIconColumn,
      getExpandColumn = _useRowExpand.getExpandColumn,
      renderExpandedRow = _useRowExpand.renderExpandedRow,
      onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick,
      getExpandedRowClass = _useRowExpand.getExpandedRowClass;
    var _useSorter = useSorter(props),
      renderSortIcon = _useSorter.renderSortIcon;
    var _useRowSelect = useRowSelect(props, tableSelectedClasses),
      selectedRowClassNames = _useRowSelect.selectedRowClassNames,
      setCurrentPaginateData = _useRowSelect.setCurrentPaginateData,
      formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn,
      setTSelectedRowKeys = _useRowSelect.setTSelectedRowKeys,
      onInnerSelectRowClick = _useRowSelect.onInnerSelectRowClick;
    var _useFilter = useFilter(props, primaryTableRef),
      hasEmptyCondition = _useFilter.hasEmptyCondition,
      isTableOverflowHidden = _useFilter.isTableOverflowHidden,
      renderFilterIcon = _useFilter.renderFilterIcon,
      renderFirstFilterRow = _useFilter.renderFirstFilterRow;
    var _useDragSort = useDragSort(props, {
        primaryTableRef: primaryTableRef,
        innerPagination: innerPagination
      }),
      isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable,
      isRowDraggable = _useDragSort.isRowDraggable,
      isColDraggable = _useDragSort.isColDraggable,
      setDragSortColumns = _useDragSort.setDragSortColumns;
    var _useTableHeader = useTableHeader({
        columns: props.columns
      }),
      renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;
    var _useAsyncLoading = useAsyncLoading(props),
      renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;
    var primaryTableClasses = _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableDraggableClasses.colDraggable, isColDraggable), tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable), tableDraggableClasses.rowDraggable, isRowDraggable), tableBaseClass.overflowVisible, isTableOverflowHidden === false), tableBaseClass.tableRowEdit, editableRowKeys);
    var _useEditableRow = useEditableRow(props),
      errorListMap = _useEditableRow.errorListMap,
      editableKeysMap = _useEditableRow.editableKeysMap,
      validateRowData = _useEditableRow.validateRowData,
      validateTableData = _useEditableRow.validateTableData,
      onRuleChange = _useEditableRow.onRuleChange,
      clearValidateData = _useEditableRow.clearValidateData;
    var tRowClassNames = function () {
      var tClassNames = [props.rowClassName, selectedRowClassNames, getExpandedRowClass];
      return tClassNames.filter(function (v) {
        return v;
      });
    }();
    var tRowAttributes = function () {
      var tAttributes = [props.rowAttributes];
      if (isRowHandlerDraggable || isRowDraggable) {
        tAttributes.push(function (_ref) {
          var row = _ref.row;
          return {
            "data-id": get(row, props.rowKey || "id")
          };
        });
      }
      return tAttributes.filter(function (v) {
        return v;
      });
    }();
    React.useImperativeHandle(ref, function () {
      return _objectSpread$1Q({
        validateRowData: validateRowData,
        validateTableData: validateTableData,
        clearValidateData: clearValidateData
      }, primaryTableRef.current);
    });
    function onColumnReduce(reduceKeys) {
      if (props.resizable) {
        primaryTableRef.current.updateTableWidthOnColumnChange(reduceKeys);
      }
    }
    var _getColumns = function getColumns(columns2) {
      var arr = [];
      var _loop = function _loop() {
        var _item$children, _item$edit, _item$children2, _item$children3;
        var item = _objectSpread$1Q({}, columns2[i]);
        var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || (tDisplayColumns === null || tDisplayColumns === void 0 ? void 0 : tDisplayColumns.includes(item.colKey));
        if (!isDisplayColumn && props.columnController && tDisplayColumns) return 1; // continue
        item = formatToRowSelectColumn(item);
        var sort = props.sort;
        if (item.sorter && props.showSortColumnBgColor) {
          var sorts = sort instanceof Array ? sort : [sort];
          var sortedColumn = sorts.find(function (sort2) {
            return sort2 && sort2.sortBy === item.colKey && sort2.descending !== void 0;
          });
          if (sortedColumn) {
            item.className = item.className instanceof Array ? item.className.concat(tableSortClasses.sortColumn) : [item.className, tableSortClasses.sortColumn];
          }
        }
        if (item.sorter || item.filter) {
          var titleContent = renderTitle(item, i);
          var _item = item,
            ellipsisTitle = _item.ellipsisTitle;
          item.title = function (p) {
            var _primaryTableRef$curr;
            var sortIcon = item.sorter ? renderSortIcon(p) : null;
            var filterIcon = item.filter ? renderFilterIcon(p) : null;
            var attach = (_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableContentRef;
            return renderTitleWidthIcon([titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach, {
              classPrefix: classPrefix,
              ellipsisOverlayClassName: props.size !== "medium" ? sizeClassNames[props.size] : ""
            });
          };
          item.ellipsisTitle = false;
        }
        if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
          var oldCell = item.cell;
          item.cell = function (p) {
            var cellProps = _objectSpread$1Q(_objectSpread$1Q({}, p), {}, {
              oldCell: oldCell,
              tableBaseClass: tableBaseClass,
              cellEmptyContent: props.cellEmptyContent,
              onChange: props.onRowEdit,
              onValidate: props.onRowValidate,
              onRuleChange: onRuleChange
            });
            if (props.editableRowKeys) {
              var rowValue = get(p.row, props.rowKey || "id");
              cellProps.editable = editableKeysMap[rowValue] || false;
              var key = [rowValue, p.col.colKey].join("__");
              var errorList = errorListMap[key];
              errorList && (cellProps.errors = errorList);
            }
            if (props.editableCellState) {
              cellProps.readonly = !props.editableCellState(p);
            }
            return /* @__PURE__ */React__default["default"].createElement(EditableCell, _objectSpread$1Q({}, cellProps));
          };
        }
        if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
          item.children = _getColumns(item.children);
        }
        if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
          arr.push(item);
        }
      };
      for (var i = 0, len = columns2.length; i < len; i++) {
        if (_loop()) continue;
      }
      return arr;
    };
    var tColumns = function () {
      var cols = _getColumns(columns);
      if (showExpandIconColumn) {
        cols.unshift(getExpandColumn());
      }
      return cols;
    }();
    var onInnerPageChange = function onInnerPageChange(pageInfo, newData) {
      var _props$onPageChange, _props$onChange;
      innerPagination.current = _objectSpread$1Q(_objectSpread$1Q({}, innerPagination), pageInfo);
      setCurrentPaginateData(newData);
      (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 || _props$onPageChange.call(props, pageInfo, newData);
      var changeParams = [{
        pagination: pageInfo
      }, {
        trigger: "pagination",
        currentData: newData
      }];
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call.apply(_props$onChange, [props].concat(changeParams));
      if (!props.reserveSelectedRowOnPaginate) {
        setTSelectedRowKeys([], {
          selectedRowData: [],
          type: "uncheck",
          currentRowKey: "CLEAR_ON_PAGINATE"
        });
      }
    };
    var onInnerRowClick = function onInnerRowClick(params) {
      if (props.expandOnRowClick) {
        onInnerExpandRowClick(params);
      }
      if (props.selectOnRowClick) {
        onInnerSelectRowClick(params);
      }
    };
    function formatNode(api, renderInnerNode, condition, extra) {
      if (!condition) return props[api];
      var innerNode = renderInnerNode();
      var propsNode = props[api];
      if (innerNode && !propsNode) return innerNode;
      if (propsNode && !innerNode) return propsNode;
      if (innerNode && propsNode) {
        return extra !== null && extra !== void 0 && extra.reverse ? /* @__PURE__ */React__default["default"].createElement("div", null, innerNode, propsNode) : /* @__PURE__ */React__default["default"].createElement("div", null, propsNode, innerNode);
      }
      return null;
    }
    var isColumnController = !!(columnController && Object.keys(columnController).length);
    var placement = isColumnController ? columnController.placement || "top-right" : "";
    var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
    var topContent = formatNode("topContent", renderColumnController, isColumnController && !isBottomController);
    var bottomContent = formatNode("bottomContent", renderColumnController, isBottomController, {
      reverse: true
    });
    var firstFullRow = formatNode("firstFullRow", renderFirstFilterRow, !hasEmptyCondition);
    var lastFullRow = formatNode("lastFullRow", renderAsyncLoading, !!props.asyncLoading);
    var baseTableProps = _objectSpread$1Q(_objectSpread$1Q({}, props), {}, {
      rowClassName: tRowClassNames,
      rowAttributes: tRowAttributes,
      columns: tColumns,
      topContent: topContent,
      bottomContent: bottomContent,
      firstFullRow: firstFullRow,
      lastFullRow: lastFullRow,
      thDraggable: ["col", "row-handler-col"].includes(props.dragSort),
      onPageChange: onInnerPageChange,
      renderExpandedRow: showExpandedRow ? renderExpandedRow : void 0
    });
    if (props.expandOnRowClick || props.selectOnRowClick) {
      baseTableProps.onRowClick = onInnerRowClick;
    }
    return /* @__PURE__ */React__default["default"].createElement(BaseTable$1, _objectSpread$1Q(_objectSpread$1Q({
      ref: primaryTableRef
    }, baseTableProps), {}, {
      className: classNames$1(primaryTableClasses, className),
      style: style,
      onLeafColumnsChange: setDragSortColumns
    }));
  });
  PrimaryTable$1.displayName = "PrimaryTable";

  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }

  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }

  function ownKeys$1P(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1P(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1P(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1P(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
    code: 1001,
    reason: "The same level of rows can not be swapped."
  };
  function getUniqueRowValue(row, colKey) {
    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var rowValue = get(row, colKey);
    return rowIndex || level ? "".concat(rowValue, "_").concat(rowIndex || 0, "_").concat(level || 0, "}") : rowValue;
  }
  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);
      _defineProperty$2(this, "treeDataMap", /* @__PURE__ */new Map());
      this.treeDataMap = /* @__PURE__ */new Map();
    }
    return _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;
        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 || _this$treeDataMap.clear();
        this.initialTreeDataMap(this.treeDataMap, dataSource, columns.find(function (col) {
          return col.colKey === "row-select";
        }), keys);
      }
    }, {
      key: "getAllUniqueKeys",
      value: function getAllUniqueKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          arr.push(getUniqueRowValue(item, keys.rowKey));
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.getAllUniqueKeys(children, keys, arr);
          }
        }
        return arr;
      }
    }, {
      key: "getExpandedChildrenKeys",
      value: function getExpandedChildrenKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          var rowValue = getUniqueRowValue(item, keys.rowKey);
          var rowState = this.treeDataMap.get(rowValue);
          if (rowState.expanded) {
            arr.push(rowValue);
          }
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.getExpandedChildrenKeys(children, keys, arr);
          }
        }
        return arr;
      }
    }, {
      key: "expandTreeNode",
      value: function expandTreeNode(rowList, dataSource, keys) {
        var _this = this;
        if (!rowList.length) return dataSource;
        rowList.forEach(function (rowValue) {
          var rowState = _this.treeDataMap.get(rowValue);
          if (!rowState) return;
          _this.toggleExpandData({
            row: rowState.row,
            rowIndex: rowState.rowIndex
          }, dataSource, keys, "expand");
        });
        return dataSource;
      }
    }, {
      key: "foldTreeNode",
      value: function foldTreeNode(rowList, dataSource, keys) {
        var _this2 = this;
        if (!rowList.length) return dataSource;
        rowList.forEach(function (rowValue) {
          var rowState = _this2.treeDataMap.get(rowValue);
          if (!rowState) return;
          _this2.toggleExpandData({
            row: rowState.row,
            rowIndex: rowState.rowIndex
          }, dataSource, keys, "fold");
        });
        return dataSource;
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSource, keys, type) {
        var _r$rowIndex;
        if (!p) {
          log.error("EnhancedTable", "the node toggleExpanded doest not exist in `data`");
          return dataSource;
        }
        var rowValue = get(p.row, keys.rowKey);
        if (isUndefined(rowValue)) {
          log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return [];
        }
        var childrenNodes = get(p.row, keys.childrenKey);
        if (childrenNodes === true) return dataSource;
        var r = this.treeDataMap.get(rowValue);
        if (type === "expand" && r.expanded) return dataSource;
        if (type === "fold" && !r.expanded) return dataSource;
        r.rowIndex = (_r$rowIndex = r.rowIndex) !== null && _r$rowIndex !== void 0 ? _r$rowIndex : p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        return this.updateExpandRow(r, dataSource, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
          rowIndex = changeRow.rowIndex,
          expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get(row, keys.childrenKey);
        if (!row || !childrenNodes) return dataSource;
        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }
        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
        return dataSource;
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(rowValue, newRowData, dataSource, keys) {
        var newRowValue = getUniqueRowValue(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(rowValue);
        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, rowValue, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return -1;
        }
        if (get(newRowData, keys.childrenKey) === true) {
          var oldChildren = get(rowState.row, keys.childrenKey);
          if (oldChildren !== null && oldChildren !== void 0 && oldChildren.length) {
            for (var i = 0, len = oldChildren.length; i < len; i++) {
              var rowValue2 = getUniqueRowValue(oldChildren[i], keys.rowKey);
              var state = this.treeDataMap.get(rowValue2);
              if (state) {
                this.treeDataMap["delete"](rowValue2);
              }
            }
          }
        }
        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        rowState.id = newRowValue;
        if (rowState.parent) {
          var siblings = get(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return getUniqueRowValue(item, keys.rowKey) === rowValue;
          });
          siblings[index] = newRowData;
        }
        this.treeDataMap.set(newRowValue, rowState);
        if (rowValue !== newRowValue) {
          this.treeDataMap["delete"](rowValue);
        }
        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);
        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);
          if (r.parent) {
            var siblings = get(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }
          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey,
            type: "remove"
          });
        } else {
          log.warn("EnhancedTable", "Can not remove this node, which is not appeared.");
        }
        return dataSource;
      }
    }, {
      key: "removeChildren",
      value: function removeChildren(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);
        if (r && r.rowIndex >= 0) {
          var removeNumber = r.expandChildrenLength || 0;
          if (removeNumber) {
            dataSource.splice(r.rowIndex + 1, removeNumber);
          }
          if (r.parent) {
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }
          r.expandChildrenLength = 0;
          r.expanded = false;
          set(r.row, keys.childrenKey, void 0);
          this.treeDataMap.set(key, r);
          if (removeNumber) {
            updateRowIndex(this.treeDataMap, dataSource, {
              minRowIndex: r.rowIndex + 1,
              rowKey: keys.rowKey,
              type: "remove"
            });
          }
        } else {
          log.warn("EnhancedTable", "Can not remove this node's children, which is not appeared.");
        }
        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(rowValue, newData, dataSource, keys) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var children = get(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var tmpData = newData instanceof Array ? newData : [newData];
        var newChildrenData = [];
        var firstNewChildrenIndex = -1;
        for (var i = 0, len = tmpData.length; i < len; i++) {
          var oneData = tmpData[i];
          var newRowValue = getUniqueRowValue(oneData, keys.rowKey);
          var mapState = this.treeDataMap.get(newRowValue);
          if (!this.validateDataDoubleExist(mapState, newRowValue)) {
            log.warn("Table", "Duplicated Data `".concat(newRowValue, "` has been removed."));
          } else {
            var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;
            if (i === 0) {
              firstNewChildrenIndex = rowIndex;
            }
            var newState = {
              id: newRowValue,
              row: oneData,
              rowIndex: rowIndex,
              level: state.level + 1,
              expanded: false,
              expandChildrenLength: 0,
              disabled: false,
              path: _toConsumableArray(state.path),
              parent: state
            };
            newState.path = newState.path.concat(newState);
            newChildrenData.push(oneData);
            this.treeDataMap.set(newRowValue, newState);
          }
        }
        if (!newChildrenData.length) return dataSource;
        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);
        } else {
          state.row[keys.childrenKey] = newChildrenData;
          state.expanded = true;
        }
        if (isShowNewNode) {
          dataSource.splice.apply(dataSource, [firstNewChildrenIndex, 0].concat(newChildrenData));
          var newChildrenCount = newChildrenData.length || 1;
          updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,
            rowKey: keys.rowKey,
            type: "add",
            count: 1
          });
        }
        return dataSource;
      }
    }, {
      key: "appendToRoot",
      value: function appendToRoot(newData, dataSource, keys) {
        var newDataSource = dataSource.concat(newData);
        var tmpNewData = newData instanceof Array ? newData : [newData];
        var dataSourceLen = dataSource.length;
        for (var i = 0, len = tmpNewData.length; i < len; i++) {
          var rowValue = get(tmpNewData[i], keys.rowKey);
          if (!rowValue) {
            log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            continue;
          }
          var state = {
            id: rowValue,
            row: tmpNewData[i],
            rowIndex: dataSourceLen + i,
            level: 0,
            expanded: false,
            expandChildrenLength: 0,
            disabled: false
          };
          state.path = [state];
          this.treeDataMap.set(rowValue, state);
        }
        return newDataSource;
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "after");
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "before");
      }
    }, {
      key: "insert",
      value: function insert(rowValue, newData, dataSource, keys, type) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: state.path.slice(0, -1),
          parent: state.parent
        };
        newState.path = newState.path.concat(newState);
        var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
        dataSource.splice(dataIndex, 0, newData);
        var distance = type === "after" ? 1 : 0;
        if (state.parent) {
          var childrenIndex = state.parent.row[keys.childrenKey].findIndex(function (t) {
            return rowValue === get(t, keys.rowKey);
          });
          state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys);
        }
        this.treeDataMap.set(newRowValue, newState);
        updateRowIndex(this.treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: state.rowIndex + 1,
          type: "add"
        });
        return dataSource;
      }
    }, {
      key: "swapData",
      value: function swapData(dataSource, params, keys) {
        var startIndex = params.currentIndex;
        var endIndex = params.targetIndex;
        if (startIndex === endIndex) return {
          dataSource: dataSource,
          result: true
        };
        var startRowValue = get(params.current, keys.rowKey);
        var endRowValue = get(params.target, keys.rowKey);
        var startState = this.treeDataMap.get(startRowValue);
        var endState = this.treeDataMap.get(endRowValue);
        if (startState.level !== endState.level) {
          return {
            dataSource: dataSource,
            result: false,
            code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
            reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
          };
        }
        var startLastIndex = startIndex + startState.expandChildrenLength + 1;
        var endLastIndex = endIndex + endState.expandChildrenLength + 1;
        var startRowList = dataSource.slice(startIndex, startLastIndex);
        var endRowList = dataSource.slice(endIndex, endLastIndex);
        if (startIndex > endIndex) {
          var middleRowList = dataSource.slice(endLastIndex, startIndex);
          var allSwapList = startRowList.concat(endRowList, middleRowList);
          dataSource.splice(endIndex, allSwapList.length);
          dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: endIndex,
            maxRowIndex: startLastIndex
          });
        } else {
          var _middleRowList = dataSource.slice(startLastIndex, endIndex);
          var _allSwapList = _middleRowList.concat(endRowList, startRowList);
          dataSource.splice(startIndex, _allSwapList.length);
          dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: startIndex,
            maxRowIndex: endLastIndex
          });
        }
        if (startState.parent) {
          var children = startState.parent.row[keys.childrenKey];
          var count = 0;
          var targetIndex = -1;
          var currentIndex = -1;
          for (var i = 0, len = children.length; i < len; i++) {
            if (get(children[i], keys.rowKey) === startRowValue) {
              currentIndex = i;
              count += 1;
            }
            if (get(children[i], keys.rowKey) === endRowValue) {
              targetIndex = i;
              count += 1;
            }
            if (count >= 2) break;
          }
          if (currentIndex < targetIndex) {
            children.splice(targetIndex + 1, 0, params.current);
            children.splice(currentIndex, 1);
          } else {
            children.splice(currentIndex, 1);
            children.splice(targetIndex, 0, params.current);
          }
        }
        return {
          dataSource: dataSource,
          result: true
        };
      }
    }, {
      key: "expandAll",
      value: function expandAll(dataSource, keys) {
        var _this3 = this;
        this.expandAllRowIndex = 0;
        var newData = [];
        var _expandLoop = function expandLoop(dataSource2, keys2) {
          var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          for (var i = 0, len = dataSource2.length; i < len; i++) {
            var item = dataSource2[i];
            var rowValue = get(item, keys2.rowKey);
            var state = _this3.treeDataMap.get(rowValue);
            var children = get(item, keys2.childrenKey);
            state.rowIndex = _this3.expandAllRowIndex;
            if (children !== true && children !== null && children !== void 0 && children.length) {
              state.expanded = true;
            }
            state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
            _this3.expandAllRowIndex += 1;
            newData.push(item);
            _this3.treeDataMap.set(rowValue, state);
            if (children !== null && children !== void 0 && children.length) {
              var tmpParent = parent;
              while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                var _tmpParent;
                tmpParent.expandChildrenLength += children.length;
                _this3.treeDataMap.set(tmpParent.id, tmpParent);
                tmpParent = tmpParent.parent;
              }
              _expandLoop(children, keys2, state);
            }
          }
        };
        _expandLoop(dataSource, keys);
        return newData;
      }
    }, {
      key: "foldAll",
      value: function foldAll(dataSource, keys) {
        var newData = [];
        var index = 0;
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          state.rowIndex = state.level === 0 ? index : -1;
          state.expanded = false;
          state.expandChildrenLength = 0;
          if (state.level === 0) {
            newData.push(item);
            index += 1;
          }
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.foldAll(children, keys);
          }
        }
        return newData;
      }
    }, {
      key: "getTreeNode",
      value: function getTreeNode(dataSource, keys) {
        var treeData = [];
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          if (state.level === 0) {
            treeData.push(item);
          }
        }
        return treeData;
      }
    }, {
      key: "getTreeExpandedRow",
      value: function getTreeExpandedRow(dataSource, keys) {
        var _this4 = this;
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "data";
        var arr = [];
        dataSource.forEach(function (item) {
          var rowValue = get(item, keys.rowKey);
          var rowState = _this4.treeDataMap.get(rowValue);
          if (!rowState.expanded) return;
          if (type === "unique") {
            arr.push(rowValue);
          } else if (type === "data") {
            arr.push(item);
          } else {
            arr.push(rowState);
          }
        });
        return arr;
      }
    }, {
      key: "initialTreeDataMap",
      value: function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var parent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = getUniqueRowValue(item, keys.rowKey);
          if (isUndefined(rowValue)) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }
          var children = get(item, keys.childrenKey);
          var state = {
            id: rowValue,
            row: item,
            rowIndex: level === 0 ? i : -1,
            level: level,
            expanded: false,
            expandChildrenLength: 0,
            disabled: isRowSelectedDisabled(column, item, i),
            parent: parent
          };
          state.path = parent ? parent.path.concat(state) : [state];
          treeDataMap.set(rowValue, state);
          if (children !== null && children !== void 0 && children.length) {
            this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);
          }
        }
      }
    }, {
      key: "updateDisabledState",
      value: function updateDisabledState(dataSource, column, keys) {
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get(item, keys.rowKey);
          if (isUndefined(rowValue)) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }
          var state = this.treeDataMap.get(rowValue);
          state.disabled = isRowSelectedDisabled(column, item, i);
          this.treeDataMap.set(rowValue, state);
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.updateDisabledState(children, column, keys);
          }
        }
      }
    }, {
      key: "validateDataExist",
      value: function validateDataExist(state, rowValue) {
        if (!state) {
          log.warn("EnhancedTable", "".concat(rowValue, " does not exist."));
          return false;
        }
        return true;
      }
    }, {
      key: "validateDataDoubleExist",
      value: function validateDataDoubleExist(state, rowValue) {
        if (state) {
          log.warn("EnhancedTable", "Duplicated Key. ".concat(rowValue, " already exists."));
          return false;
        }
        return true;
      }
    }]);
  }();
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;
    while (tmp) {
      var _state$parent;
      var state = treeDataMap.get(get(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 || (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }
    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get(row, keys.childrenKey);
    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
      rowIndex = rowState.rowIndex;
    var childrenNodes = get(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);
      var newState = _objectSpread$1P(_objectSpread$1P({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState
      });
      treeDataMap.set(rowValue, newState);
      if (!expanded) {
        var children = get(item, keys.childrenKey);
        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$1P(_objectSpread$1P({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];
      if (get(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }
      var children = get(item, keys.childrenKey) || [];
      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;
    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get(item, extra.rowKey));
      if (!state) {
        log.warn("Table", "tree map went wrong");
      }
      state.rowIndex = rowIndex + ((extra === null || extra === void 0 ? void 0 : extra.count) || 1) - 1;
    }
  }
  function diffExpandedTreeNode() {
    var newExpandedNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var oldExpandedNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var removedList = [];
    var addedList = [];
    var newExpandedNodeMap = /* @__PURE__ */new Map();
    var oldExpandedNodeMap = /* @__PURE__ */new Map();
    for (var i = 0, len = newExpandedNode.length; i < len; i++) {
      newExpandedNodeMap.set(newExpandedNode[i], true);
    }
    for (var _i = 0, _len = oldExpandedNode.length; _i < _len; _i++) {
      oldExpandedNodeMap.set(oldExpandedNode[_i], true);
    }
    for (var _i2 = 0, _len2 = newExpandedNode.length; _i2 < _len2; _i2++) {
      if (!oldExpandedNodeMap.get(newExpandedNode[_i2])) {
        addedList.push(newExpandedNode[_i2]);
      }
    }
    for (var _i3 = 0, _len3 = oldExpandedNode.length; _i3 < _len3; _i3++) {
      if (!newExpandedNodeMap.get(oldExpandedNode[_i3])) {
        removedList.push(oldExpandedNode[_i3]);
      }
    }
    return {
      removedList: removedList,
      addedList: addedList
    };
  }

  function ownKeys$1O(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1O(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1O(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1O(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTreeDataExpand(props, params) {
    var store = params.store,
      dataSource = params.dataSource,
      rowDataKeys = params.rowDataKeys,
      setDataSource = params.setDataSource;
    var data = props.data,
      tree = props.tree;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isDefaultExpandAllExecute = _useState2[0],
      setIsDefaultExpandAllExecute = _useState2[1];
    var _useControlled = useControlled(props, "expandedTreeNodes", props.onExpandedTreeNodesChange, {
        defaultExpandedTreeNodes: props.defaultSelectedRowKeys || []
      }),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tExpandedTreeNode = _useControlled2[0],
      setTExpandedTreeNode = _useControlled2[1];
    var oldExpandedTreeNode = usePrevious(tExpandedTreeNode);
    var _useState3 = React.useState({
        type: "props-change"
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      changedExpandTreeNode = _useState4[0],
      setChangedExpandTreeNode = _useState4[1];
    function expandAll() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "expand-all";
      var list = arguments.length > 1 ? arguments[1] : undefined;
      var newData = list || data;
      var expandedData = store.expandAll(newData, rowDataKeys);
      setDataSource(expandedData);
      var expandedNode = expandedData.map(function (t) {
        return getUniqueRowValue(t, rowDataKeys.rowKey);
      });
      setTExpandedTreeNode(expandedNode, {
        row: void 0,
        rowState: void 0,
        rowIndex: void 0,
        type: "expand",
        trigger: type
      });
      setChangedExpandTreeNode({
        type: "expand-all"
      });
    }
    function foldAll() {
      setDataSource(_toConsumableArray(store.foldAll(dataSource, rowDataKeys)));
      setTExpandedTreeNode([], {
        row: void 0,
        rowState: void 0,
        rowIndex: void 0,
        type: "fold",
        trigger: "fold-all"
      });
    }
    function onExpandFoldIconClick(p, trigger) {
      var _props$onTreeExpandCh;
      var row = p.row,
        rowIndex = p.rowIndex;
      setChangedExpandTreeNode(_objectSpread$1O({
        type: "user-reaction-change"
      }, p));
      var rowValue = getUniqueRowValue(row, rowDataKeys.rowKey);
      var rowState = store.treeDataMap.get(rowValue);
      var expandedNodes = _toConsumableArray(tExpandedTreeNode);
      if (rowState.expanded) {
        var expandedChildrenKeys = store.getExpandedChildrenKeys([row], rowDataKeys);
        for (var i = 0, len = expandedNodes.length; i < len; i++) {
          var nodeValue = expandedNodes[i];
          if (expandedChildrenKeys.includes(nodeValue)) {
            expandedNodes[i] = void 0;
          }
        }
        expandedNodes = expandedNodes.filter(Boolean);
      } else {
        expandedNodes.push(rowValue);
      }
      var params2 = {
        row: row,
        rowIndex: rowIndex,
        rowState: rowState,
        trigger: trigger
      };
      setTExpandedTreeNode(expandedNodes, _objectSpread$1O(_objectSpread$1O({}, params2), {}, {
        type: rowState.expanded ? "fold" : "expand"
      }));
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 || _props$onTreeExpandCh.call(props, params2);
    }
    function updateExpandState(data2, tExpandedTreeNode2) {
      var oldExpandedTreeNode2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var _diffExpandedTreeNode = diffExpandedTreeNode(tExpandedTreeNode2, oldExpandedTreeNode2 || []),
        addedList = _diffExpandedTreeNode.addedList,
        removedList = _diffExpandedTreeNode.removedList;
      store.expandTreeNode(addedList, data2, rowDataKeys);
      store.foldTreeNode(removedList, data2, rowDataKeys);
      return data2;
    }
    React.useEffect(function () {
      if (!store.treeDataMap.size) return;
      if (changedExpandTreeNode.type === "user-reaction-change") {
        var _ref = changedExpandTreeNode || {},
          row = _ref.row,
          rowIndex = _ref.rowIndex;
        var newData = store.toggleExpandData({
          row: row,
          rowIndex: rowIndex
        }, dataSource, rowDataKeys);
        setDataSource(_toConsumableArray(newData));
      } else if (changedExpandTreeNode.type === "props-change") {
        updateExpandState(_toConsumableArray(dataSource), tExpandedTreeNode, oldExpandedTreeNode);
      }
      if (changedExpandTreeNode.type !== "props-change") {
        setChangedExpandTreeNode({
          type: "props-change"
        });
      }
    }, [tExpandedTreeNode]);
    var updateExpandOnDataChange = function updateExpandOnDataChange(data2) {
      if (tree !== null && tree !== void 0 && tree.defaultExpandAll && !isDefaultExpandAllExecute) {
        expandAll("default-expand-all", _toConsumableArray(data2));
        setIsDefaultExpandAllExecute(true);
        return;
      }
      var newData = updateExpandState(_toConsumableArray(data2), tExpandedTreeNode, []);
      setDataSource(_toConsumableArray(newData));
    };
    return {
      expandAll: expandAll,
      foldAll: foldAll,
      onExpandFoldIconClick: onExpandFoldIconClick,
      updateExpandOnDataChange: updateExpandOnDataChange
    };
  }

  function ownKeys$1N(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1N(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1N(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1N(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTreeData(props) {
    var _props$tree;
    var data = props.data,
      columns = props.columns,
      tree = props.tree,
      rowKey = props.rowKey,
      treeExpandAndFoldIcon = props.treeExpandAndFoldIcon,
      expandedTreeNodes = props.expandedTreeNodes;
    var _useState = React.useState(function () {
        return new TableTreeStore();
      }),
      _useState2 = _slicedToArray$1(_useState, 1),
      store = _useState2[0];
    var _useState3 = React.useState(function () {
        return getTreeNodeColumnCol();
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      treeNodeCol = _useState4[0],
      setTreeNodeCol = _useState4[1];
    var _useState5 = React.useState(data || []),
      _useState6 = _slicedToArray$1(_useState5, 2),
      dataSource = _useState6[0],
      setDataSource = _useState6[1];
    var _useClassName = useClassName(),
      tableTreeClasses = _useClassName.tableTreeClasses;
    var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useGlobalIcon = useGlobalIcon({
        AddRectangleIcon: TdAddRectangleIcon,
        MinusRectangleIcon: TdMinusRectangleIcon
      }),
      AddRectangleIcon = _useGlobalIcon.AddRectangleIcon,
      MinusRectangleIcon = _useGlobalIcon.MinusRectangleIcon;
    var rowDataKeys = React.useMemo(function () {
      return {
        rowKey: rowKey || "id",
        childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
      };
    }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
    var _useTreeDataExpand = useTreeDataExpand(props, {
        store: store,
        dataSource: dataSource,
        rowDataKeys: rowDataKeys,
        setDataSource: setDataSource
      }),
      expandAll = _useTreeDataExpand.expandAll,
      foldAll = _useTreeDataExpand.foldAll,
      updateExpandOnDataChange = _useTreeDataExpand.updateExpandOnDataChange,
      onExpandFoldIconClick = _useTreeDataExpand.onExpandFoldIconClick;
    var checkedColumn = React.useMemo(function () {
      return columns.find(function (col) {
        return col.colKey === "row-select";
      });
    }, [columns]);
    React.useEffect(function () {
      if (!store || !checkedColumn) return;
      var rowValue = get(dataSource[0], rowDataKeys.rowKey);
      if (!store.treeDataMap.get(rowValue)) return;
      store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);
    }, [checkedColumn]);
    React.useEffect(function () {
      if (!data || !store) return;
      if (tree) {
        resetData(data);
      } else {
        setDataSource(data);
      }
    }, [data, expandedTreeNodes]);
    React.useEffect(function () {
      var treeNodeColTmp = getTreeNodeColumnCol();
      setTreeNodeCol(treeNodeColTmp);
    }, [columns, (_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.treeNodeColumnIndex]);
    function resetData(data2) {
      var columns2 = props.columns;
      store.initialTreeStore(data2, columns2, rowDataKeys);
      updateExpandOnDataChange(_toConsumableArray(data2));
    }
    function getTreeNodeStyle(level) {
      var _props$tree2, _props$tree3;
      if (level === void 0) return;
      var indent = ((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.indent) === void 0 ? 24 : (_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent;
      return indent ? {
        paddingLeft: "".concat(level * indent || 1, "px")
      } : {};
    }
    function toggleExpandData(p, trigger) {
      var _props$onTreeExpandCh, _store$treeDataMap;
      var currentData = _objectSpread$1N({}, p);
      if (p.row.__VIRTUAL_SCROLL_INDEX !== void 0) {
        currentData.rowIndex = p.row.__VIRTUAL_SCROLL_INDEX;
      }
      var newData = store.toggleExpandData(currentData, dataSource, rowDataKeys);
      setDataSource(_toConsumableArray(newData));
      var rowValue = get(p.row, rowDataKeys.rowKey);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 || _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: store === null || store === void 0 || (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue),
        trigger: trigger
      });
    }
    function getTreeNodeColumnCol() {
      var _props$tree4;
      var columns2 = props.columns;
      var treeNodeColumnIndex = ((_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.treeNodeColumnIndex) || 0;
      while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
        var _columns2$treeNodeCol, _columns2$treeNodeCol2;
        treeNodeColumnIndex += 1;
      }
      return columns2[treeNodeColumnIndex];
    }
    function formatTreeColumn(col) {
      if (!col || !treeNodeCol || !store) return {};
      if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;
      var newCol = _objectSpread$1N({}, treeNodeCol);
      newCol.cell = function (p) {
        var cellInfo = renderCell(_objectSpread$1N(_objectSpread$1N({}, p), {}, {
          col: _objectSpread$1N({}, treeNodeCol)
        }), {
          cellEmptyContent: props.cellEmptyContent
        });
        var currentState = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey));
        var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
        var classes = _defineProperty$2({}, tableTreeClasses.inlineCol, !!col.ellipsis);
        var childrenNodes = get(p.row, rowDataKeys.childrenKey);
        if (Array.isArray(childrenNodes) && childrenNodes.length > 0 || childrenNodes === true) {
          var _store$treeDataMap$ge;
          var expanded = (_store$treeDataMap$ge = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey))) === null || _store$treeDataMap$ge === void 0 ? void 0 : _store$treeDataMap$ge.expanded;
          var type = expanded ? "fold" : "expand";
          var defaultIconNode = t(locale.treeExpandAndFoldIcon, {
            type: type
          }) || (expanded ? /* @__PURE__ */React__default["default"].createElement(MinusRectangleIcon, null) : /* @__PURE__ */React__default["default"].createElement(AddRectangleIcon, null));
          var iconNode = treeExpandAndFoldIcon ? parseContentTNode(treeExpandAndFoldIcon, _objectSpread$1N({
            type: type
          }, p)) : defaultIconNode;
          return /* @__PURE__ */React__default["default"].createElement("div", {
            className: classNames$1([tableTreeClasses.col, classes]),
            style: colStyle
          }, !!(childrenNodes.length || childrenNodes === true) && /* @__PURE__ */React__default["default"].createElement("span", {
            className: tableTreeClasses.icon,
            onClick: function onClick(e) {
              onExpandFoldIconClick(p, "expand-fold-icon");
              e.stopPropagation();
            }
          }, iconNode), cellInfo);
        }
        return /* @__PURE__ */React__default["default"].createElement("div", {
          style: colStyle,
          className: classNames$1([classes, tableTreeClasses.leafNode])
        }, /* @__PURE__ */React__default["default"].createElement("span", {
          className: tableTreeClasses.icon
        }), cellInfo);
      };
      if (newCol.ellipsis === true) {
        newCol.ellipsis = function (p) {
          return renderCell(_objectSpread$1N(_objectSpread$1N({}, p), {}, {
            col: _objectSpread$1N({}, treeNodeCol)
          }));
        };
      }
      return newCol;
    }
    function setData(key, newRowData) {
      var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);
      var newData = _toConsumableArray(dataSource);
      newData[rowIndex] = newRowData;
      setDataSource(_toConsumableArray(newData));
    }
    function getData(key) {
      return store.getData(key);
    }
    function remove(key) {
      var newData = store.remove(key, dataSource, rowDataKeys);
      setDataSource(_toConsumableArray(newData));
    }
    function removeChildren(key) {
      var newData = store.removeChildren(key, dataSource, rowDataKeys);
      setDataSource(_toConsumableArray(newData));
    }
    function appendTo(key, newData) {
      if (!key) {
        setDataSource(_toConsumableArray(store.appendToRoot(newData, dataSource, rowDataKeys)));
        return;
      }
      setDataSource(_toConsumableArray(store.appendTo(key, newData, dataSource, rowDataKeys)));
    }
    function insertAfter(rowValue, newData) {
      setDataSource(_toConsumableArray(store.insertAfter(rowValue, newData, dataSource, rowDataKeys)));
    }
    function insertBefore(rowValue, newData) {
      setDataSource(_toConsumableArray(store.insertBefore(rowValue, newData, dataSource, rowDataKeys)));
    }
    function swapData(params) {
      var r = store.swapData(params.data, params, rowDataKeys);
      if (r.result) {
        setDataSource(_toConsumableArray(r.dataSource));
      } else {
        var _props$onAbnormalDrag;
        var params2 = {
          code: r.code,
          reason: r.reason
        };
        (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 || _props$onAbnormalDrag.call(props, params2);
      }
    }
    function getTreeNode() {
      return store.getTreeNode(dataSource, rowDataKeys);
    }
    function getTreeExpandedRow() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
      return store.getTreeExpandedRow(dataSource, rowDataKeys, type);
    }
    return {
      store: store,
      rowDataKeys: rowDataKeys,
      dataSource: dataSource,
      swapData: swapData,
      setData: setData,
      getData: getData,
      remove: remove,
      removeChildren: removeChildren,
      appendTo: appendTo,
      insertAfter: insertAfter,
      insertBefore: insertBefore,
      formatTreeColumn: formatTreeColumn,
      toggleExpandData: toggleExpandData,
      expandAll: expandAll,
      foldAll: foldAll,
      getTreeNode: getTreeNode,
      resetData: resetData,
      getTreeExpandedRow: getTreeExpandedRow,
      onExpandFoldIconClick: onExpandFoldIconClick
    };
  }

  function ownKeys$1M(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1M(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1M(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1M(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var childrenMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, keys, r) {
    if (childrenMap.get(data)) return childrenMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: [],
      leafNodeKeys: []
    };
    var children = get(data, keys.childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;
      return !((_treeDataMap$get = treeDataMap.get(get(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));
    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get(tItem, keys.childrenKey);
      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);
        result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));
      }
    }
    for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {
      var item = result.allChildren[_i];
      var children2 = get(item, keys.childrenKey);
      var rowValue = get(item, keys.rowKey);
      result.allChildrenKeys.push(rowValue);
      if (!children2 || !children2.length) {
        result.leafNodeKeys.push(rowValue);
      }
    }
    result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));
    result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));
    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
      removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };
    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }
    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
      selectedRowKeys = p.selectedRowKeys;
    var result = [];
    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }
    return result;
  }
  function useTreeSelect(props, treeDataMap) {
    var tree = props.tree,
      rowKey = props.rowKey,
      data = props.data,
      indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      tIndeterminateSelectedRowKeys = _useState2[0],
      setTIndeterminateSelectedRowKeys = _useState2[1];
    var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
        defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
      }),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tSelectedRowKeys = _useControlled2[0],
      setTSelectedRowKeys = _useControlled2[1];
    var rowDataKeys = React.useMemo(function () {
      return {
        rowKey: rowKey || "id",
        childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
      };
    }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
    React.useEffect(function () {
      if (!tree || !treeDataMap.size || tree.checkStrictly) return;
      updateIndeterminateState();
    }, [tSelectedRowKeys, data, tree, treeDataMap]);
    function updateIndeterminateState() {
      if (!tree || tree.checkStrictly) return;
      if (!tSelectedRowKeys.length) {
        setTIndeterminateSelectedRowKeys([]);
        return;
      }
      var keys = [];
      var parentMap = {};
      for (var i = 0, len = tSelectedRowKeys.length; i < len; i++) {
        var rowValue = tSelectedRowKeys[i];
        var state = treeDataMap.get(rowValue);
        if (!state) continue;
        var children = get(state.row, rowDataKeys.childrenKey);
        if (!children || !children.length) {
          var parentTmp = state.parent;
          while (parentTmp) {
            if (!parentMap[parentTmp.id]) {
              parentMap[parentTmp.id] = [];
            }
            parentMap[parentTmp.id].push(state.row);
            var checkedLength = parentMap[parentTmp.id].length;
            var _getChildrenData = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys),
              allChildrenKeys = _getChildrenData.allChildrenKeys;
            var parentTmpIndex = keys.indexOf(parentTmp.id);
            var selectedIndex = tSelectedRowKeys.indexOf(parentTmp.id);
            if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {
              parentTmpIndex === -1 && keys.push(parentTmp.id);
            } else {
              parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);
            }
            parentTmp = parentTmp.parent;
          }
        }
      }
      setTIndeterminateSelectedRowKeys(keys);
    }
    function updateParentCheckedState(selectedKeys, currentRowKey, type) {
      if (!tree || tree.checkStrictly) return;
      var keys = _toConsumableArray(selectedKeys);
      var state = treeDataMap.get(currentRowKey);
      var parentTmp = state.parent;
      while (parentTmp) {
        var _getChildrenData2 = getChildrenData(treeDataMap, parentTmp.row, rowDataKeys),
          leafNodeKeys = _getChildrenData2.leafNodeKeys;
        var checkedChildrenKeys = intersection$1(leafNodeKeys, selectedKeys);
        var selectedIndex = keys.indexOf(parentTmp.id);
        if (type === "uncheck") {
          selectedIndex !== -1 && keys.splice(selectedIndex, 1);
        } else if (checkedChildrenKeys.length === leafNodeKeys.length) {
          selectedIndex === -1 && keys.push(parentTmp.id);
        }
        parentTmp = parentTmp.parent;
      }
      return keys;
    }
    function onInnerSelectChange(rowKeys, extraData) {
      if (!tree || tree.checkStrictly) {
        setTSelectedRowKeys(rowKeys, extraData);
        return;
      }
      if (extraData.currentRowKey === "CHECK_ALL_BOX") {
        handleSelectAll(extraData);
      } else {
        handleSelect(rowKeys, extraData);
      }
    }
    function handleSelectAll(extraData) {
      var newRowKeys = [];
      var newRowData = [];
      if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
        var arr = _toConsumableArray(treeDataMap.values());
        for (var i = 0, len = arr.length; i < len; i++) {
          var item = arr[i];
          if (!(item !== null && item !== void 0 && item.disabled)) {
            newRowData.push(item.row);
            newRowKeys.push(get(item.row, rowDataKeys.rowKey));
          }
        }
      }
      var newExtraData = _objectSpread$1M(_objectSpread$1M({}, extraData), {}, {
        selectedRowData: newRowData || []
      });
      setTSelectedRowKeys(newRowKeys, newExtraData);
    }
    function handleSelect(rowKeys, extraData) {
      var newRowKeys = _toConsumableArray(rowKeys);
      if (tree.checkStrictly === false) {
        if (extraData.type === "check") {
          var result = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);
          var allChildrenKeys = result.allChildrenKeys;
          childrenMap.set(extraData.currentRowData, result);
          newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
        } else if (extraData.type === "uncheck") {
          var children = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys);
          var _result = removeChildrenKeys({
            selectedRowKeys: rowKeys,
            removeKeys: children.allChildrenKeys
          });
          newRowKeys = _result.keys;
        }
      }
      newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);
      var newRowData = getRowDataByKeys({
        treeDataMap: treeDataMap,
        selectedRowKeys: newRowKeys
      });
      var newExtraData = _objectSpread$1M(_objectSpread$1M({}, extraData), {}, {
        selectedRowData: newRowData
      });
      setTSelectedRowKeys(newRowKeys, newExtraData);
    }
    return {
      tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys || tIndeterminateSelectedRowKeys,
      onInnerSelectChange: onInnerSelectChange
    };
  }

  var _excluded$w = ["store", "dataSource", "formatTreeColumn", "swapData", "onExpandFoldIconClick"];
  function ownKeys$1L(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1L(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1L(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1L(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var EnhancedTable$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$tree2;
    var tree = props.tree,
      columns = props.columns,
      style = props.style,
      className = props.className;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var primaryTableRef = React.useRef(null);
    var _useTreeData = useTreeData(props),
      store = _useTreeData.store,
      dataSource = _useTreeData.dataSource,
      formatTreeColumn = _useTreeData.formatTreeColumn,
      swapData = _useTreeData.swapData,
      onExpandFoldIconClick = _useTreeData.onExpandFoldIconClick,
      treeInstanceFunctions = _objectWithoutProperties$2(_useTreeData, _excluded$w);
    var treeDataMap = store === null || store === void 0 ? void 0 : store.treeDataMap;
    var _useTreeSelect = useTreeSelect(props, treeDataMap),
      tIndeterminateSelectedRowKeys = _useTreeSelect.tIndeterminateSelectedRowKeys,
      onInnerSelectChange = _useTreeSelect.onInnerSelectChange;
    var _getColumns = function getColumns(columns2) {
      var arr = [];
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _item$children, _item$children2;
        var item = _objectSpread$1L({}, columns2[i]);
        item = formatTreeColumn(item);
        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          item.children = _getColumns(item.children);
        }
        if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
          arr.push(item);
        }
      }
      return arr;
    };
    var tColumns = function () {
      var isTreeData = !tree || !Object.keys(tree).length;
      return isTreeData ? columns : _getColumns(columns);
    }();
    var onEnhancedTableRowClick = function onEnhancedTableRowClick(p) {
      var _props$tree, _props$onRowClick;
      if ((_props$tree = props.tree) !== null && _props$tree !== void 0 && _props$tree.expandTreeNodeOnClick) {
        onExpandFoldIconClick({
          row: p.row,
          rowIndex: p.index
        }, "row-click");
      }
      (_props$onRowClick = props.onRowClick) === null || _props$onRowClick === void 0 || _props$onRowClick.call(props, p);
    };
    React.useImperativeHandle(ref, function () {
      return _objectSpread$1L(_objectSpread$1L({
        treeDataMap: treeDataMap
      }, treeInstanceFunctions), primaryTableRef.current);
    });
    var onDragSortChange = function onDragSortChange(params) {
      var _props$onDragSort;
      if (props.beforeDragSort && !props.beforeDragSort(params)) return;
      swapData({
        data: params.data,
        current: params.current,
        target: params.target,
        currentIndex: params.currentIndex,
        targetIndex: params.targetIndex
      });
      (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 || _props$onDragSort.call(props, params);
    };
    var primaryTableProps = _objectSpread$1L(_objectSpread$1L({}, props), {}, {
      data: dataSource,
      columns: tColumns,
      indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys,
      disableDataPage: Boolean(tree && Object.keys(tree).length),
      onSelectChange: onInnerSelectChange,
      onDragSort: onDragSortChange,
      rowClassName: function rowClassName(_ref) {
        var row = _ref.row;
        var rowValue = get(row, props.rowKey || "id");
        var rowState = treeDataMap.get(rowValue);
        if (!rowState) return [props.rowClassName];
        return ["".concat(classPrefix, "-table-tr--level-").concat(rowState.level), props.rowClassName];
      },
      style: style,
      className: className
    });
    if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.expandTreeNodeOnClick) {
      primaryTableProps.onRowClick = onEnhancedTableRowClick;
    }
    return /* @__PURE__ */React__default["default"].createElement(PrimaryTable$1, _objectSpread$1L(_objectSpread$1L({}, primaryTableProps), {}, {
      ref: primaryTableRef
    }));
  });
  EnhancedTable$1.displayName = "EnhancedTable";

  var SimpleTable = BaseTable$1;
  var BaseTable = BaseTable$1;
  var PrimaryTable = PrimaryTable$1;
  var Table = PrimaryTable;
  var EnhancedTable = EnhancedTable$1;

  var ListItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
      className = props.className,
      style = props.style,
      action = props.action,
      content = props.content;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var actionElement = action && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-list-item__action")
    }, action);
    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-list-item"), className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item-main")
    }, children ? children : content, actionElement));
  });
  ListItem.displayName = "ListItem";

  var ListItemMeta = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var title = props.title,
      image = props.image,
      description = props.description,
      className = props.className,
      style = props.style;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var renderAvatar = function renderAvatar() {
      if (image && typeof image === "string") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-list-item__meta-avatar")
        }, /* @__PURE__ */React__default["default"].createElement("img", {
          src: image,
          alt: ""
        }));
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-list-item__meta-avatar")
      }, image);
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-list-item__meta"), className),
      style: style
    }, image && renderAvatar(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item__meta-content")
    }, /* @__PURE__ */React__default["default"].createElement("h3", {
      className: "".concat(classPrefix, "-list-item__meta-title")
    }, title), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item__meta-description")
    }, typeof description === "string" ? /* @__PURE__ */React__default["default"].createElement("p", null, description) : description)));
  });
  ListItemMeta.displayName = "ListItemMeta";

  var listDefaultProps = {
    layout: "horizontal",
    size: "medium",
    split: false,
    stripe: false
  };

  function ownKeys$1K(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1K(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1K(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1K(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useListVirtualScroll = function useListVirtualScroll(scroll, listRef, listItems) {
    var virtualScrollParams = React.useMemo(function () {
      return {
        data: listItems,
        scroll: scroll
      };
    }, [listItems, scroll]);
    var virtualConfig = useVirtualScroll(listRef, virtualScrollParams);
    var isVirtualScroll = virtualConfig.isVirtualScroll;
    var lastScrollY = -1;
    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      var target = e.target || e.srcElement;
      var top = target.scrollTop;
      if (lastScrollY !== top) {
        virtualConfig.isVirtualScroll && virtualConfig.handleScroll();
      } else {
        lastScrollY = -1;
      }
      lastScrollY = top;
    };
    var cursorStyle = React.useMemo(function () {
      return {
        position: "absolute",
        width: "1px",
        height: "1px",
        transition: "transform 0.2s",
        transform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)"),
        msTransform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)"),
        MozTransform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)"),
        WebkitTransform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)")
      };
    }, [virtualConfig.scrollHeight]);
    var listStyle = React.useMemo(function () {
      return {
        transform: "translate(0, ".concat(virtualConfig.translateY, "px)"),
        msTransform: "translate(0, ".concat(virtualConfig.translateY, "px)"),
        MozTransform: "translate(0, ".concat(virtualConfig.translateY, "px)"),
        WebkitTransform: "translate(0, ".concat(virtualConfig.translateY, "px)")
      };
    }, [virtualConfig.translateY]);
    var handleScrollTo = function handleScrollTo(params) {
      var index = params.index,
        key = params.key;
      var targetIndex = index === 0 ? index : index !== null && index !== void 0 ? index : Number(key);
      if (!targetIndex && targetIndex !== 0) {
        log.error("List", "scrollTo: `index` or `key` must exist.");
        return;
      }
      if (targetIndex < 0 || targetIndex >= listItems.length) {
        log.error("List", "".concat(targetIndex, " does not exist in data, check `index` or `key` please."));
        return;
      }
      virtualConfig.scrollToElement(_objectSpread$1K(_objectSpread$1K({}, params), {}, {
        index: targetIndex - 1
      }));
    };
    return {
      virtualConfig: virtualConfig,
      cursorStyle: cursorStyle,
      listStyle: listStyle,
      isVirtualScroll: isVirtualScroll,
      onInnerVirtualScroll: onInnerVirtualScroll,
      scrollToElement: handleScrollTo
    };
  };

  function ownKeys$1J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1J(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var List$1 = forwardRefWithStatics(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, listDefaultProps),
      header = _useDefaultProps.header,
      footer = _useDefaultProps.footer,
      asyncLoading = _useDefaultProps.asyncLoading,
      size = _useDefaultProps.size,
      split = _useDefaultProps.split,
      stripe = _useDefaultProps.stripe,
      layout = _useDefaultProps.layout,
      children = _useDefaultProps.children,
      className = _useDefaultProps.className,
      _useDefaultProps$onLo = _useDefaultProps.onLoadMore,
      onLoadMore = _useDefaultProps$onLo === void 0 ? noop : _useDefaultProps$onLo,
      _useDefaultProps$onSc = _useDefaultProps.onScroll,
      onScroll = _useDefaultProps$onSc === void 0 ? noop : _useDefaultProps$onSc,
      style = _useDefaultProps.style,
      scroll = _useDefaultProps.scroll;
    var wrapperRef = React.useRef(null);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("list"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var listItems = React.useMemo(function () {
      var _compact;
      return (_compact = compact(React__default["default"].Children.map(children, function (child) {
        return child === null || child === void 0 ? void 0 : child.props;
      }))) !== null && _compact !== void 0 ? _compact : [];
    }, [children]);
    var _useListVirtualScroll = useListVirtualScroll(scroll, wrapperRef, listItems),
      virtualConfig = _useListVirtualScroll.virtualConfig,
      cursorStyle = _useListVirtualScroll.cursorStyle,
      listStyle = _useListVirtualScroll.listStyle,
      isVirtualScroll = _useListVirtualScroll.isVirtualScroll,
      onInnerVirtualScroll = _useListVirtualScroll.onInnerVirtualScroll,
      scrollToElement = _useListVirtualScroll.scrollToElement;
    var COMPONENT_NAME = "".concat(classPrefix, "-list");
    var handleClickLoad = function handleClickLoad(e) {
      if (asyncLoading === "load-more") {
        onLoadMore({
          e: e
        });
      }
    };
    var handleScroll = function handleScroll(event) {
      var currentTarget = event.currentTarget;
      var scrollTop = currentTarget.scrollTop,
        offsetHeight = currentTarget.offsetHeight,
        scrollHeight = currentTarget.scrollHeight;
      var scrollBottom = scrollHeight - scrollTop - offsetHeight;
      if (isVirtualScroll) onInnerVirtualScroll(event);
      onScroll({
        e: event,
        scrollTop: scrollTop,
        scrollBottom: scrollBottom
      });
    };
    var loadElement = isString(asyncLoading) ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-list__load"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-list__load--loading"), asyncLoading === "loading"), "".concat(classPrefix, "-list__load--load-more"), asyncLoading === "load-more")),
      onClick: handleClickLoad
    }, asyncLoading === "loading" && /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true
    }), /* @__PURE__ */React__default["default"].createElement("span", null, t(local.loadingText))), asyncLoading === "load-more" && /* @__PURE__ */React__default["default"].createElement("span", null, t(local.loadingMoreText))) : asyncLoading;
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollToElement
      };
    });
    var renderContent = function renderContent() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, isVirtualScroll ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        style: cursorStyle
      }), /* @__PURE__ */React__default["default"].createElement("ul", {
        className: "".concat(COMPONENT_NAME, "__inner"),
        style: listStyle
      }, virtualConfig.visibleData.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement(ListItem, {
          key: index,
          content: item.children
        });
      }))) : /* @__PURE__ */React__default["default"].createElement("ul", {
        className: "".concat(COMPONENT_NAME, "__inner")
      }, children));
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: wrapperRef,
      style: _objectSpread$1J(_objectSpread$1J({}, style), {}, {
        position: isVirtualScroll ? "relative" : void 0
      }),
      onScroll: handleScroll,
      className: classNames$1("".concat(COMPONENT_NAME), className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME, "--split"), split), "".concat(COMPONENT_NAME, "--stripe"), stripe), "".concat(COMPONENT_NAME, "--vertical-action"), layout === "vertical"), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-l"), size === "large"))
    }, header && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(COMPONENT_NAME, "__header")
    }, parseTNode(header)), renderContent(), asyncLoading && loadElement, footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(COMPONENT_NAME, "__footer")
    }, parseTNode(footer)));
  }, {
    ListItem: ListItem,
    ListItemMeta: ListItemMeta
  });
  List$1.displayName = "List";

  var List = List$1;

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };
  var getDomOffsetLeft = function getDomOffsetLeft(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetLeft) || 0;
  };
  function calculateOffset(depElement, offset, scrollPosition) {
    var navsContainer = depElement.navsContainer,
      activeTab = depElement.activeTab,
      rightOperations = depElement.rightOperations,
      leftOperations = depElement.leftOperations;
    var tabWidth = getDomWidth(activeTab);
    var wrapWidth = getDomWidth(navsContainer);
    var tabOffset = getDomOffsetLeft(activeTab);
    var rightOperationsWidth = getDomWidth(rightOperations);
    var leftOperationsWidth = getDomWidth(leftOperations);
    if (scrollPosition === "auto") {
      if (tabOffset - leftOperationsWidth < offset) {
        return tabOffset - leftOperationsWidth;
      }
      if (tabOffset + tabWidth > offset + wrapWidth - rightOperationsWidth) {
        return tabOffset + tabWidth - wrapWidth + rightOperationsWidth;
      }
    } else if (scrollPosition === "start") {
      return tabOffset - leftOperationsWidth;
    } else if (scrollPosition === "center") {
      return tabOffset + (tabWidth - wrapWidth) / 2;
    } else if (scrollPosition === "end") {
      return tabOffset + tabWidth - wrapWidth + rightOperationsWidth;
    }
    return offset;
  }
  function calcPrevOrNextOffset(elements, offset, action) {
    var navsContainer = elements.navsContainer,
      activeTab = elements.activeTab;
    var navsContainerWidth = getDomWidth(navsContainer);
    var activeTabWidth = getDomWidth(activeTab);
    var diffWidth = Math.abs(navsContainerWidth - activeTabWidth);
    if (action === "next") {
      return offset + diffWidth;
    }
    return offset - diffWidth;
  }
  function calcMaxOffset(elements) {
    var navsWrap = elements.navsWrap,
      navsContainer = elements.navsContainer,
      rightOperations = elements.rightOperations,
      toRightBtn = elements.toRightBtn;
    var wrapWidth = getDomWidth(navsWrap);
    var containerWidth = getDomWidth(navsContainer);
    var rightOperationsWidth = getDomWidth(rightOperations);
    var toRightBtnWidth = getDomWidth(toRightBtn);
    return wrapWidth - containerWidth + rightOperationsWidth - toRightBtnWidth;
  }
  function calcValidOffset(offset, maxOffset) {
    return Math.max(0, Math.min(offset, maxOffset));
  }

  var useTabClass = function useTabClass() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var tdTabsClassPrefix = "".concat(classPrefix, "-tabs");
    var tdTabPanelClassPrefix = "".concat(classPrefix, "-tab-panel");
    var tdClassGenerator = function tdClassGenerator(append) {
      return "".concat(classPrefix, "-").concat(append);
    };
    var tdTabsClassGenerator = function tdTabsClassGenerator(append) {
      return "".concat(tdTabsClassPrefix, "__").concat(append);
    };
    var tdTabPanelClassGenerator = function tdTabPanelClassGenerator(append) {
      return "".concat(tdTabPanelClassPrefix, "__").concat(append);
    };
    var tdSizeClassGenerator = function tdSizeClassGenerator(size) {
      return "".concat(classPrefix, "-size-").concat(size === "large" ? "l" : "m");
    };
    return {
      tdTabsClassPrefix: tdTabsClassPrefix,
      tdTabPanelClassPrefix: tdTabPanelClassPrefix,
      tdClassGenerator: tdClassGenerator,
      tdTabsClassGenerator: tdTabsClassGenerator,
      tdTabPanelClassGenerator: tdTabPanelClassGenerator,
      tdSizeClassGenerator: tdSizeClassGenerator
    };
  };

  function ownKeys$1I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1I(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TabNavItem = function TabNavItem(props) {
    var label = props.label,
      removable = props.removable,
      isActive = props.isActive,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? noop : _props$onClick,
      theme = props.theme,
      placement = props.placement,
      _props$onRemove = props.onRemove,
      onRemove = _props$onRemove === void 0 ? noop : _props$onRemove,
      value = props.value,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      index = props.index,
      _props$onTabRemove = props.onTabRemove,
      onTabRemove = _props$onTabRemove === void 0 ? noop : _props$onTabRemove,
      innerRef = props.innerRef,
      dragProps = props.dragProps;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon;
    var isCard = theme === "card";
    var _useTabClass = useTabClass(),
      tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
      tdClassGenerator = _useTabClass.tdClassGenerator,
      tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      navItemDom = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    useRipple(navItemDom);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1I(_objectSpread$1I({}, dragProps), {}, {
      ref: innerRef,
      onClick: disabled ? noop : onClick,
      className: classNames$1(tdTabsClassGenerator("nav-item"), isCard ? tdTabsClassGenerator("nav--card") : "", tdSizeClassGenerator(size), isActive ? tdClassGenerator("is-active") : "", tdClassGenerator("is-".concat(placement)), disabled ? tdClassGenerator("is-disabled") : "", props.className)
    }), isCard ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(tdTabsClassGenerator("nav-item-text-wrapper"))
    }, label) : /* @__PURE__ */React__default["default"].createElement("div", {
      ref: setRefCurrent,
      className: classNames$1(tdTabsClassGenerator("nav-item-wrapper"))
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(tdTabsClassGenerator("nav-item-text-wrapper"))
    }, label)), removable && !disabled ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("remove-btn"),
      onClick: function onClick(e) {
        e.stopPropagation();
        onRemove({
          value: value,
          e: e
        });
        onTabRemove({
          value: value,
          e: e,
          index: index
        });
      }
    }, /* @__PURE__ */React__default["default"].createElement(CloseIcon, null)) : null);
  };

  function useResizeObserver(container, callback) {
    var enabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var callbackRef = useLatest(callback);
    useIsomorphicLayoutEffect(function () {
      var isSupport = canUseDocument && window.ResizeObserver;
      var element = container.current;
      var observer = null;
      if (!enabled) return;
      if (isSupport && element) {
        var resizeCallback = function resizeCallback(entries) {
          callbackRef.current(entries);
        };
        observer = new ResizeObserver(resizeCallback);
        observer.observe(element);
      }
      return function () {
        if (observer && element) {
          var _observer$disconnect, _observer;
          observer.unobserve(element);
          (_observer$disconnect = (_observer = observer).disconnect) === null || _observer$disconnect === void 0 || _observer$disconnect.call(_observer);
          observer = null;
        }
      };
    }, [container, enabled]);
  }

  var TabBar = function TabBar(props) {
    var tabPosition = props.tabPosition,
      activeId = props.activeId,
      containerRef = props.containerRef,
      navsWrapRef = props.navsWrapRef;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      barStyle = _useState2[0],
      setBarStyle = _useState2[1];
    var tabsClassPrefix = "".concat(classPrefix, "-tabs");
    var currentActiveIdRef = React.useRef(activeId);
    React.useEffect(function () {
      currentActiveIdRef.current = activeId;
    }, [activeId]);
    var computeStyle = React__default["default"].useCallback(function () {
      var isHorizontal = ["bottom", "top"].includes(tabPosition);
      var transformPosition = isHorizontal ? "translateX" : "translateY";
      var itemProp = isHorizontal ? "width" : "height";
      var barBorderProp = isHorizontal ? "width" : "height";
      var offset = 0;
      if (containerRef.current) {
        var _containerRef$current;
        var itemsRef = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelectorAll(".".concat(tabsClassPrefix, "__nav-item"));
        if (itemsRef.length - 1 >= currentActiveIdRef.current) {
          itemsRef.forEach(function (item, itemIndex) {
            if (itemIndex < currentActiveIdRef.current) {
              offset += Number(getComputedStyle(item)[itemProp].replace("px", ""));
            }
          });
          var computedItem = itemsRef[currentActiveIdRef.current];
          if (!computedItem) {
            setBarStyle(_defineProperty$2({
              transform: "".concat(transformPosition, "(", 0, "px)")
            }, barBorderProp, 0));
            return;
          }
          var itemPropValue = getComputedStyle(computedItem)[itemProp];
          setBarStyle(_defineProperty$2({
            transform: "".concat(transformPosition, "(").concat(offset, "px)")
          }, barBorderProp, itemPropValue || 0));
        }
      }
    }, [currentActiveIdRef, containerRef, tabPosition, tabsClassPrefix]);
    React.useEffect(function () {
      if (containerRef.current) {
        setTimeout(function () {
          return computeStyle();
        });
      }
    }, [tabPosition, activeId, containerRef.current]);
    var handleMutationObserver = React__default["default"].useCallback(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.type === "characterData") {
          computeStyle();
        }
      });
    }, [computeStyle]);
    useMutationObservable(containerRef.current, handleMutationObserver);
    useResizeObserver(navsWrapRef, computeStyle);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(_defineProperty$2(_defineProperty$2({}, "".concat(tabsClassPrefix, "__bar"), true), "".concat(classPrefix, "-is-").concat(tabPosition), true)),
      style: barStyle
    });
  };
  TabBar.displayName = "TabBar";

  function ownKeys$1H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1H(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TabNav = function TabNav(props) {
    var _props$placement = props.placement,
      placement = _props$placement === void 0 ? "top" : _props$placement,
      _props$itemList = props.itemList,
      itemList = _props$itemList === void 0 ? [] : _props$itemList,
      theme = props.theme,
      addable = props.addable,
      onAdd = props.onAdd,
      _props$scrollPosition = props.scrollPosition,
      scrollPosition = _props$scrollPosition === void 0 ? "auto" : _props$scrollPosition,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$onRemove = props.onRemove,
      onRemove = _props$onRemove === void 0 ? noop : _props$onRemove,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      activeValue = props.activeValue,
      children = props.children,
      action = props.action,
      getDragProps = props.getDragProps;
    var _useGlobalIcon = useGlobalIcon({
        AddIcon: TdAddIcon,
        ChevronLeftIcon: TdChevronLeftIcon,
        ChevronRightIcon: TdChevronRightIcon
      }),
      AddIcon = _useGlobalIcon.AddIcon,
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var isCard = theme === "card";
    var _useTabClass = useTabClass(),
      tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
      tdClassGenerator = _useTabClass.tdClassGenerator,
      tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;
    var navsContainerRef = React.useRef(null);
    var navsWrapRef = React.useRef(null);
    var getIndex = React.useCallback(function (value) {
      var index = itemList.findIndex(function (item) {
        return item.value === value;
      });
      return index > -1 ? index : -1;
    }, [itemList]);
    var activeIndex = getIndex(activeValue);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      canToLeft = _useState2[0],
      setToLeftBtnVisible = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      canToRight = _useState4[0],
      setToRightBtnVisible = _useState4[1];
    var scrollBarRef = React.useRef(null);
    var leftOperationsRef = React.useRef(null);
    var rightOperationsRef = React.useRef(null);
    var toLeftBtnRef = React.useRef(null);
    var toRightBtnRef = React.useRef(null);
    var _useState5 = React.useState(0),
      _useState6 = _slicedToArray$1(_useState5, 2),
      scrollLeft = _useState6[0],
      setScrollLeft = _useState6[1];
    var _useState7 = React.useState(0),
      _useState8 = _slicedToArray$1(_useState7, 2),
      maxScrollLeft = _useState8[0],
      setMaxScrollLeft = _useState8[1];
    var _useState9 = React.useState(null),
      _useState0 = _slicedToArray$1(_useState9, 2),
      activeTab = _useState0[0],
      setActiveTab = _useState0[1];
    var setOffset = function setOffset(offset) {
      setScrollLeft(calcValidOffset(offset, maxScrollLeft));
    };
    var getMaxScrollLeft = React.useCallback(function () {
      if (["top", "bottom"].includes(placement.toLowerCase())) {
        var maxOffset = calcMaxOffset({
          navsWrap: navsWrapRef.current,
          navsContainer: navsContainerRef.current,
          rightOperations: rightOperationsRef.current,
          toRightBtn: toRightBtnRef.current
        });
        setMaxScrollLeft(maxOffset);
      }
    }, [placement]);
    var moveActiveTabIntoView = function moveActiveTabIntoView() {
      var offset = calculateOffset({
        activeTab: activeTab,
        navsContainer: navsContainerRef.current,
        leftOperations: leftOperationsRef.current,
        rightOperations: rightOperationsRef.current
      }, scrollLeft, scrollPosition);
      setOffset(offset);
    };
    React.useEffect(function () {
      var timeout = setTimeout(function () {
        moveActiveTabIntoView();
      }, 100);
      return function () {
        return clearTimeout(timeout);
      };
    }, [activeTab, maxScrollLeft, scrollPosition]);
    React.useEffect(function () {
      if (["top", "bottom"].includes(placement.toLowerCase())) {
        var canToLeft2 = scrollLeft > 1;
        var canToRight2 = scrollLeft < maxScrollLeft - 1;
        setToLeftBtnVisible(canToLeft2);
        setToRightBtnVisible(canToRight2);
      }
    }, [placement, scrollLeft, maxScrollLeft]);
    var handleScroll = function handleScroll(action2) {
      var offset = calcPrevOrNextOffset({
        activeTab: activeTab,
        navsContainer: navsContainerRef.current
      }, scrollLeft, action2);
      setOffset(offset);
    };
    React.useEffect(function () {
      var scrollBar = scrollBarRef.current;
      if (!scrollBar) return;
      var handleWheel = function handleWheel(e) {
        if (!canToLeft && !canToRight) return;
        e.preventDefault();
        var deltaX = e.deltaX,
          deltaY = e.deltaY;
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
          setOffset(scrollLeft + deltaX);
        } else {
          setOffset(scrollLeft + deltaY);
        }
      };
      scrollBar.addEventListener("wheel", handleWheel, {
        passive: false
      });
      return function () {
        scrollBar === null || scrollBar === void 0 || scrollBar.removeEventListener("wheel", handleWheel);
      };
    });
    React.useEffect(function () {
      var onResize = debounce$1(getMaxScrollLeft, 300);
      window.addEventListener("resize", onResize);
      return function () {
        window.removeEventListener("resize", onResize);
        onResize.cancel();
      };
    });
    React.useEffect(function () {
      getMaxScrollLeft();
    }, [itemList.length, children, getMaxScrollLeft]);
    var TabBarCom = isCard ? null : /* @__PURE__ */React__default["default"].createElement(TabBar, {
      tabPosition: placement,
      activeId: activeIndex,
      containerRef: navsWrapRef,
      navsWrapRef: navsWrapRef
    });
    var handleTabItemRemove = function handleTabItemRemove(removeItem) {
      var removeValue = removeItem.value,
        removeIndex = removeItem.index;
      if (removeValue === activeValue) {
        var _itemList;
        onChange(removeIndex === 0 ? (_itemList = itemList[removeIndex + 1]) === null || _itemList === void 0 ? void 0 : _itemList.value : itemList[removeIndex - 1].value);
      }
      onRemove(removeItem);
    };
    var handleTabItemClick = function handleTabItemClick(clickItem) {
      var _clickItem$onClick;
      if (activeValue !== clickItem.value) {
        onChange(clickItem.value);
      }
      clickItem === null || clickItem === void 0 || (_clickItem$onClick = clickItem.onClick) === null || _clickItem$onClick === void 0 || _clickItem$onClick.call(clickItem, clickItem.value);
    };
    var handleTabAdd = function handleTabAdd(e) {
      onAdd({
        e: e
      });
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: navsContainerRef,
      className: classNames$1(tdTabsClassGenerator("nav")),
      style: {
        minHeight: 48
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: leftOperationsRef,
      className: classNames$1(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--left"))
    }, canToLeft ? /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: function onClick() {
        handleScroll("prev");
      },
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--left"), tdSizeClassGenerator(size)),
      ref: toLeftBtnRef
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
      ref: rightOperationsRef,
      className: classNames$1(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--right"))
    }, canToRight ? /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: function onClick() {
        handleScroll("next");
      },
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--right"), tdSizeClassGenerator(size)),
      ref: toRightBtnRef
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null)) : null, addable ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("add-btn"), tdTabsClassGenerator("btn"), tdSizeClassGenerator(size)),
      onClick: handleTabAdd
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon, null)) : null, action ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("nav-action"), tdSizeClassGenerator(size))
    }, parseTNode(action)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-container"), isCard ? tdTabsClassGenerator("nav--card") : "", tdClassGenerator("is-".concat(placement)), addable ? tdClassGenerator("is-addable") : "")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-scroll"), canToLeft || canToRight ? tdClassGenerator("is-scrollable") : ""),
      ref: scrollBarRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-wrap"), ["left", "right"].includes(placement) ? tdClassGenerator("is-vertical") : "", tdClassGenerator("is-smooth")),
      style: {
        transform: "translate(".concat(-scrollLeft, "px, 0)")
      },
      ref: navsWrapRef
    }, placement !== "bottom" ? TabBarCom : null, !isCard && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("bar"), tdClassGenerator("is-".concat(placement)))
    }), itemList.map(function (v, index) {
      return /* @__PURE__ */React__default["default"].createElement(TabNavItem, _objectSpread$1H(_objectSpread$1H(_objectSpread$1H({}, omit$2(props, ["className", "style"])), v), {}, {
        dragProps: _objectSpread$1H({}, getDragProps === null || getDragProps === void 0 ? void 0 : getDragProps(index, v)),
        onRemove: v.onRemove,
        key: v.value,
        label: v.label,
        isActive: activeValue === v.value,
        theme: theme,
        placement: placement,
        index: index,
        disabled: disabled || v.disabled,
        onClick: function onClick() {
          return handleTabItemClick(v);
        },
        onTabRemove: handleTabItemRemove,
        innerRef: function innerRef(ref) {
          if (activeValue === v.value) {
            setActiveTab(ref);
          }
        }
      }));
    }), placement === "bottom" ? TabBarCom : null))));
  };
  TabNav.displayName = "TabNav";

  var tabsDefaultProps = {
    addable: false,
    disabled: false,
    dragSort: false,
    placement: "top",
    scrollPosition: "auto",
    size: "medium",
    theme: "normal"
  };
  var tabPanelDefaultProps = {
    destroyOnHide: true,
    disabled: false,
    draggable: true,
    lazy: false,
    removable: false
  };

  function ownKeys$1G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1G(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TabPanel$1 = function TabPanel(props) {
    var _useDefaultProps = useDefaultProps(props, tabPanelDefaultProps),
      className = _useDefaultProps.className,
      lazy = _useDefaultProps.lazy,
      isActive = _useDefaultProps.isActive,
      destroyOnHide = _useDefaultProps.destroyOnHide,
      style = _useDefaultProps.style;
    var _useTabClass = useTabClass(),
      tdTabPanelClassPrefix = _useTabClass.tdTabPanelClassPrefix;
    var lazyRenderRef = React.useRef(lazy);
    if (lazy && isActive && lazyRenderRef.current) {
      lazyRenderRef.current = false;
    }
    if (!isActive && destroyOnHide || lazyRenderRef.current) {
      return null;
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabPanelClassPrefix, className),
      style: _objectSpread$1G({
        display: !isActive ? "none" : void 0
      }, style)
    }, props.children || props.panel);
  };
  TabPanel$1.displayName = "TabPanel";

  function ownKeys$1F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1F(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Tabs$1 = forwardRefWithStatics(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, tabsDefaultProps);
    var children = props.children,
      list = props.list,
      placement = props.placement,
      dragSort = props.dragSort,
      className = props.className,
      style = props.style,
      onRemove = props.onRemove;
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useTabClass = useTabClass(),
      tdTabsClassPrefix = _useTabClass.tdTabsClassPrefix,
      tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
      tdClassGenerator = _useTabClass.tdClassGenerator;
    var targetClassNameRegExpStr = "^".concat(tdTabsClassPrefix, "(__nav-item|__nav-item-wrapper|__nav-item-text-wrapper)");
    var _useDragSorter = useDragSorter(_objectSpread$1F(_objectSpread$1F({}, props), {}, {
        sortOnDraggable: dragSort,
        onDragOverCheck: {
          x: true,
          targetClassNameRegExp: new RegExp(targetClassNameRegExpStr)
        }
      })),
      getDragProps = _useDragSorter.getDragProps;
    var memoChildren = React__default["default"].useMemo(function () {
      if (!list || list.length === 0) {
        return children;
      }
      return list.map(function (panelProps) {
        return /* @__PURE__ */React__default["default"].createElement(TabPanel$1, _objectSpread$1F({
          key: panelProps.value
        }, panelProps));
      });
    }, [children, list]);
    var itemList = React__default["default"].Children.map(memoChildren, function (child) {
      if (child && child.type === TabPanel$1) {
        return child.props;
      }
      return null;
    });
    var handleChange = React__default["default"].useCallback(function (v) {
      onChange === null || onChange === void 0 || onChange(v);
    }, [onChange]);
    var headerNode = React__default["default"].useMemo(function () {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(tdTabsClassGenerator("header"), tdClassGenerator("is-".concat(placement)))
      }, /* @__PURE__ */React__default["default"].createElement(TabNav, _objectSpread$1F(_objectSpread$1F({}, props), {}, {
        getDragProps: getDragProps,
        activeValue: value,
        onRemove: onRemove,
        itemList: itemList,
        onChange: handleChange
      })));
    }, [props, getDragProps, value, onRemove, itemList, handleChange, placement, tdTabsClassGenerator, tdClassGenerator]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1(tdTabsClassPrefix, className),
      style: style
    }, placement !== "bottom" ? headerNode : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("content"), tdClassGenerator("is-".concat(placement)))
    }, React__default["default"].Children.map(memoChildren, function (child) {
      if (child && child.type === TabPanel$1) {
        return /* @__PURE__ */React__default["default"].createElement(TabPanel$1, _objectSpread$1F(_objectSpread$1F({}, child.props), {}, {
          isActive: child.props.value === value
        }));
      }
      return null;
    })), placement === "bottom" ? headerNode : null);
  }, {
    TabPanel: TabPanel$1
  });
  Tabs$1.displayName = "Tabs";

  var Tabs = Tabs$1;

  function ownKeys$1E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1E(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var seed = 0;
  var listMap = /* @__PURE__ */new Map();
  var NotificationRemoveContext = /*#__PURE__*/React__default["default"].createContext(noop);
  var NotificationList = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var placement = props.placement,
      zIndex = props.zIndex,
      renderCallback = props.renderCallback;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      list = _useState2[0],
      setList = _useState2[1];
    var remove = function remove(key) {
      setList(function (oldList) {
        var index = oldList.findIndex(function (item) {
          return item.key === key;
        });
        if (index !== -1) {
          var tempList = _toConsumableArray(oldList);
          tempList.splice(index, 1);
          return _toConsumableArray(tempList);
        }
        return oldList;
      });
    };
    var calOffset = function calOffset(offset) {
      return isNaN(Number(offset)) ? offset : "".concat(offset, "px");
    };
    var push = function push(theme, options) {
      var key = String(seed += 1);
      var _ref = _toConsumableArray(options.offset),
        horizontal = _ref[0],
        vertical = _ref[1];
      var horizontalOffset = calOffset(horizontal);
      var verticalOffset = calOffset(vertical);
      var style = {
        top: verticalOffset,
        left: horizontalOffset,
        marginBottom: 16,
        position: "relative"
      };
      var ref2 = /*#__PURE__*/React__default["default"].createRef();
      setList(function (oldList) {
        return [].concat(_toConsumableArray(oldList), [_objectSpread$1E(_objectSpread$1E({}, options), {}, {
          key: key,
          theme: theme,
          style: style,
          ref: ref2,
          id: key
        })]);
      });
      return new Promise(function (resolve) {
        setTimeout(function () {
          resolve(ref2.current);
        }, 1e3 / 60);
      });
    };
    var removeAll = function removeAll() {
      return setList([]);
    };
    React.useImperativeHandle(ref, function () {
      return {
        push: push,
        remove: remove,
        removeAll: removeAll
      };
    });
    React.useEffect(function () {
      renderCallback({
        push: push,
        remove: remove,
        removeAll: removeAll
      });
    }, []);
    return /* @__PURE__ */React__default["default"].createElement(NotificationRemoveContext.Provider, {
      value: remove
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-notification__show--").concat(placement),
      style: {
        zIndex: zIndex
      }
    }, list.map(function (props2) {
      var _props2$onDurationEnd = props2.onDurationEnd,
        _onDurationEnd = _props2$onDurationEnd === void 0 ? noop : _props2$onDurationEnd,
        _props2$onCloseBtnCli = props2.onCloseBtnClick,
        _onCloseBtnClick = _props2$onCloseBtnCli === void 0 ? noop : _props2$onCloseBtnCli;
      return /* @__PURE__ */React__default["default"].createElement(Notification$1, _objectSpread$1E(_objectSpread$1E({
        ref: props2.ref
      }, props2), {}, {
        key: props2.key,
        onDurationEnd: function onDurationEnd() {
          remove(props2.key);
          _onDurationEnd();
        },
        onCloseBtnClick: function onCloseBtnClick(e) {
          remove(props2.key);
          _onCloseBtnClick(e);
        }
      }));
    })));
  });
  var renderNotification$1 = false;
  var fetchListInstance = function fetchListInstance(placement, attach, zIndex) {
    return new Promise(function (resolve) {
      function idle() {
        if (listMap.has(placement)) {
          resolve(listMap.get(placement));
          return;
        }
        if (!renderNotification$1) {
          renderNotification$1 = true;
          var nGlobalConfig = ConfigProvider.getGlobalConfig();
          render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
            globalConfig: nGlobalConfig
          }, /* @__PURE__ */React__default["default"].createElement(NotificationList, {
            attach: attach,
            placement: placement,
            zIndex: Number(zIndex),
            renderCallback: function renderCallback(instance) {
              renderNotification$1 = false;
              listMap.set(placement, instance);
              resolve(instance);
            }
          })), attach);
          return;
        }
        setTimeout(idle, 1e3 / 60);
      }
      idle();
    });
  };

  var notificationDefaultProps = {
    closeBtn: void 0,
    duration: 3e3,
    icon: true,
    theme: "info"
  };

  var Notification$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, notificationDefaultProps),
      title = _useDefaultProps.title,
      content = _useDefaultProps.content,
      theme = _useDefaultProps.theme,
      icon = _useDefaultProps.icon,
      closeBtn = _useDefaultProps.closeBtn,
      footer = _useDefaultProps.footer,
      duration = _useDefaultProps.duration,
      _useDefaultProps$onCl = _useDefaultProps.onCloseBtnClick,
      onCloseBtnClick = _useDefaultProps$onCl === void 0 ? noop : _useDefaultProps$onCl,
      _useDefaultProps$onDu = _useDefaultProps.onDurationEnd,
      onDurationEnd = _useDefaultProps$onDu === void 0 ? noop : _useDefaultProps$onDu,
      style = _useDefaultProps.style,
      className = _useDefaultProps.className,
      id = _useDefaultProps.id;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var baseClassPrefix = "".concat(classPrefix, "-notification");
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon,
        InfoCircleFilledIcon: TdInfoCircleFilledIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon$1
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon;
    var remove = React.useContext(NotificationRemoveContext);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        close: function close() {
          return remove(id);
        }
      };
    });
    React__default["default"].useEffect(function () {
      var timer;
      if (duration > 0) {
        timer = setTimeout(function () {
          clearTimeout(timer);
          onDurationEnd();
        }, duration);
      }
      return function () {
        if (timer) {
          clearTimeout(timer);
        }
      };
    }, []);
    var renderIcon = function renderIcon() {
      if (typeof icon === "boolean" && !icon) {
        return null;
      }
      var IconWrapper = function IconWrapper(_ref) {
        var children = _ref.children;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(baseClassPrefix, "__icon")
        }, children);
      };
      if (/*#__PURE__*/React__default["default"].isValidElement(icon)) {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, icon);
      }
      if (theme && theme === "success") {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-success")
        }));
      }
      if (theme && ["info", "warning", "error"].indexOf(theme) >= 0) {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-").concat(theme)
        }));
      }
      return null;
    };
    var renderCloseBtn = function renderCloseBtn() {
      if (typeof closeBtn === "boolean") {
        return closeBtn && /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
          className: "".concat(baseClassPrefix, "-icon-close"),
          onClick: function onClick(e) {
            onCloseBtnClick({
              e: e
            });
          }
        });
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(baseClassPrefix, "-close"),
        onClick: function onClick(e) {
          onCloseBtnClick({
            e: e
          });
        }
      }, parseTNode(closeBtn));
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(className, baseClassPrefix, _defineProperty$2({}, "".concat(baseClassPrefix, "-is-").concat(theme), theme)),
      style: style
    }, renderIcon(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__main")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__title__wrap")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassPrefix, "__title")
    }, title), renderCloseBtn()), content && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__content")
    }, parseTNode(content)), footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassPrefix, "__detail")
    }, parseTNode(footer))));
  });
  Notification$1.displayName = "Notification";

  function ownKeys$1D(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1D(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1D(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var pluginDefaultConfig = _objectSpread$1D(_objectSpread$1D({}, notificationDefaultProps), {}, {
    zIndex: 6e3,
    placement: "top-right",
    offset: ["-16px", "16px"]
  });
  var getConfig = function getConfig(options) {
    var currentOptions = _objectSpread$1D({}, options);
    for (var i in currentOptions) {
      if (typeof currentOptions[i] === "undefined") {
        delete currentOptions[i];
      }
    }
    if (typeof currentOptions.duration !== "number" || currentOptions.duration < 0) {
      delete currentOptions.duration;
    }
    if (["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(currentOptions.placement) < 0) {
      delete currentOptions.placement;
    }
    if (["info", "success", "warning", "error"].indexOf(currentOptions.theme) < 0) {
      delete currentOptions.theme;
    }
    if (!Array.isArray(currentOptions.offset)) {
      delete currentOptions.offset;
    }
    return _objectSpread$1D(_objectSpread$1D({}, pluginDefaultConfig), currentOptions);
  };
  var setGlobalConfig = function setGlobalConfig(options) {
    pluginDefaultConfig = _objectSpread$1D({}, getConfig(options));
  };

  var renderNotification = function renderNotification(theme, options) {
    if (_typeof$3(options) !== "object") return;
    var configs = getConfig(options);
    var placement = configs.placement;
    var attach = function () {
      var containerId = "tdesign-notification-".concat(placement);
      var container = document.querySelector("#".concat(containerId));
      if (container && container instanceof HTMLElement) {
        return container;
      }
      var element = document.createElement("div");
      element.setAttribute("id", containerId);
      if (options.attach && typeof options.attach === "string") {
        var container2 = document.querySelector(options.attach);
        if (container2 instanceof HTMLElement) return container2.appendChild(element);
      }
      if (options.attach instanceof HTMLElement) return options.attach.appendChild(element);
      document.body.appendChild(element);
      return element;
    }();
    return fetchListInstance(placement, attach, configs.zIndex).then(function (listInstance) {
      return listInstance.push(theme, configs);
    });
  };
  var NotificationPlugin$1 = function NotificationPlugin(theme, props) {
    return renderNotification(theme, props);
  };
  NotificationPlugin$1.info = function (options) {
    return renderNotification("info", options);
  };
  NotificationPlugin$1.success = function (options) {
    return renderNotification("success", options);
  };
  NotificationPlugin$1.warning = function (options) {
    return renderNotification("warning", options);
  };
  NotificationPlugin$1.error = function (options) {
    return renderNotification("error", options);
  };
  NotificationPlugin$1.close = function (promise) {
    return promise.then(function (instance) {
      return instance.close();
    });
  };
  NotificationPlugin$1.closeAll = function () {
    return _toConsumableArray(listMap.values()).forEach(function (list) {
      return list.removeAll();
    });
  };
  NotificationPlugin$1.config = function (options) {
    return setGlobalConfig(options);
  };

  var Notification = Notification$1;
  var notification = NotificationPlugin$1;
  var NotificationPlugin = NotificationPlugin$1;

  var MenuContext = /*#__PURE__*/React.createContext({
    setState: noop,
    onExpand: noop
  });

  var DEFAULT_MENU_WIDTH = [232, 64];

  function _createForOfIteratorHelper$4(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$4(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$4(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$4(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$4(r, a) : void 0; } }
  function _arrayLikeToArray$4(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var MenuTree = /*#__PURE__*/function () {
    function MenuTree(children) {
      var expandMutex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _classCallCheck(this, MenuTree);
      _defineProperty$2(this, "menuMap", /* @__PURE__ */new Map());
      _defineProperty$2(this, "expandedSet", /* @__PURE__ */new Set());
      this.buildTree(children);
      this.expandMutex = expandMutex;
    }
    return _createClass(MenuTree, [{
      key: "buildTree",
      value: function buildTree(children) {
        this.menuMap.clear();
        this.traverseChildren(children);
      }
    }, {
      key: "traverseChildren",
      value: function traverseChildren(node, parentValue) {
        var _this = this;
        if (Array.isArray(node)) {
          node.forEach(function (child) {
            return _this.traverseChildren(child, parentValue);
          });
          return;
        }
        if (! /*#__PURE__*/React.isValidElement(node)) return;
        var _node$props = node.props,
          value = _node$props.value,
          children = _node$props.children;
        if (value !== void 0) {
          if (!this.menuMap.has(value)) {
            this.menuMap.set(value, {
              parent: parentValue,
              children: []
            });
          }
          if (parentValue !== void 0) {
            var parentNode = this.menuMap.get(parentValue);
            if (parentNode && !parentNode.children.includes(value)) {
              parentNode.children.push(value);
            }
          }
          if (children) {
            this.traverseChildren(children, value);
          }
        } else if (children) {
          this.traverseChildren(children, parentValue);
        }
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expandedList) {
        this.expandedSet = new Set(expandedList);
      }
    }, {
      key: "getExpanded",
      value: function getExpanded() {
        return Array.from(this.expandedSet);
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(value) {
        return this.expandedSet.has(value);
      }
    }, {
      key: "getAncestors",
      value: function getAncestors(value) {
        var _this$menuMap$get;
        var ancestors = [];
        var current = (_this$menuMap$get = this.menuMap.get(value)) === null || _this$menuMap$get === void 0 ? void 0 : _this$menuMap$get.parent;
        while (current !== void 0) {
          var _this$menuMap$get2;
          ancestors.unshift(current);
          current = (_this$menuMap$get2 = this.menuMap.get(current)) === null || _this$menuMap$get2 === void 0 ? void 0 : _this$menuMap$get2.parent;
        }
        return ancestors;
      }
    }, {
      key: "getDescendants",
      value: function getDescendants(value) {
        var _this2 = this;
        var descendants = [];
        if (!this.menuMap.get(value)) return descendants;
        var _dfs = function dfs(nodeValue) {
          var node = _this2.menuMap.get(nodeValue);
          if (!node) return;
          node.children.forEach(function (child) {
            descendants.push(child);
            _dfs(child);
          });
        };
        _dfs(value);
        return descendants;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings(value) {
        var node = this.menuMap.get(value);
        if (!node) return [];
        var parentValue = node.parent;
        if (parentValue === void 0) {
          var rootNodes = [];
          var _iterator = _createForOfIteratorHelper$4(this.menuMap.entries()),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _step$value = _slicedToArray$1(_step.value, 2),
                nodeValue = _step$value[0],
                info = _step$value[1];
              if (info.parent === void 0 && nodeValue !== value) {
                rootNodes.push(nodeValue);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return rootNodes;
        }
        var parent = this.menuMap.get(parentValue);
        return parent ? parent.children.filter(function (child) {
          return child !== value;
        }) : [];
      }
    }, {
      key: "expandNode",
      value: function expandNode(value) {
        var _this3 = this;
        var isCurrExpanded = this.isExpanded(value);
        var nextExpanded = this.getExpanded();
        if (isCurrExpanded) {
          var descendants = this.getDescendants(value);
          var toClose = /* @__PURE__ */new Set([value].concat(_toConsumableArray(descendants)));
          nextExpanded = nextExpanded.filter(function (item) {
            return !toClose.has(item);
          });
        } else {
          var expandedSet = new Set(nextExpanded);
          if (this.expandMutex) {
            var siblings = this.getSiblings(value);
            var siblingsToClose = /* @__PURE__ */new Set();
            siblings.forEach(function (sibling) {
              if (expandedSet.has(sibling)) {
                siblingsToClose.add(sibling);
                var siblingDescendants = _this3.getDescendants(sibling);
                siblingDescendants.forEach(function (desc) {
                  return siblingsToClose.add(desc);
                });
              }
            });
            nextExpanded = nextExpanded.filter(function (item) {
              return !siblingsToClose.has(item);
            });
          }
          var ancestors = this.getAncestors(value);
          ancestors.forEach(function (ancestor) {
            if (!nextExpanded.includes(ancestor)) {
              nextExpanded.push(ancestor);
            }
          });
          if (!nextExpanded.includes(value)) {
            nextExpanded.push(value);
          }
        }
        this.setExpanded(nextExpanded);
      }
    }]);
  }();

  function ownKeys$1C(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1C(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1C(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1C(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useMenuContext(_ref) {
    var defaultValue = _ref.defaultValue,
      defaultExpanded = _ref.defaultExpanded,
      expandMutex = _ref.expandMutex,
      children = _ref.children,
      _ref$onExpand = _ref.onExpand,
      onExpand = _ref$onExpand === void 0 ? noop$2 : _ref$onExpand,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop$2 : _ref$onChange,
      value = _ref.value,
      expanded = _ref.expanded,
      collapsed = _ref.collapsed,
      expandType = _ref.expandType,
      theme = _ref.theme,
      mode = _ref.mode;
    var _useState = React.useState({
        active: defaultValue,
        expanded: defaultExpanded
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    var setStateValue = function setStateValue(menuState) {
      return setState(_objectSpread$1C(_objectSpread$1C({}, state), menuState));
    };
    var menuTree = React.useMemo(function () {
      return new MenuTree(children, expandMutex);
    }, [children, expandMutex]);
    React.useEffect(function () {
      var currExpanded = expanded || state.expanded || [];
      menuTree.setExpanded(currExpanded);
    }, [expanded, state.expanded, menuTree]);
    var handleExpandChange = function handleExpandChange(value2) {
      menuTree.expandNode(value2);
      var nextExpanded = menuTree.getExpanded();
      onExpand(nextExpanded);
      setState(function (prevState) {
        return _objectSpread$1C(_objectSpread$1C({}, prevState), {}, {
          expanded: nextExpanded
        });
      });
    };
    return {
      value: {
        onExpand: handleExpandChange,
        onChange: onChange,
        active: value || state.active,
        expanded: expanded || state.expanded,
        collapsed: collapsed || state.collapsed,
        setState: setStateValue,
        expandMutex: expandMutex,
        expandType: collapsed ? "popup" : expandType,
        mode: mode,
        theme: theme
      }
    };
  }

  var menuDefaultProps = {
    collapsed: false,
    expandMutex: false,
    expandType: "normal",
    theme: "light",
    width: "232px"
  };

  var MenuBlockType = /* @__PURE__ */function (MenuBlockType2) {
    MenuBlockType2["MenuItem"] = "MenuItem";
    MenuBlockType2["SubMenu"] = "SubMenu";
    MenuBlockType2["MenuItemGroup"] = "MenuItemGroup";
    MenuBlockType2["MenuGroup"] = "MenuGroup";
    return MenuBlockType2;
  }(MenuBlockType || {});

  var checkIsSubMenu = function checkIsSubMenu(child) {
    if (!child) return false;
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.SubMenu;
  };
  var checkIsMenuItem = function checkIsMenuItem(child) {
    if (!child) return false;
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.MenuItem;
  };
  var checkIsMenuGroup = function checkIsMenuGroup(child) {
    if (!child) return false;
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.MenuGroup;
  };

  var _checkSubMenuChildrenActive = function checkSubMenuChildrenActive(children, active) {
    var activeFlag = false;
    React__default["default"].Children.forEach(children, function (child) {
      if (activeFlag) return;
      if (checkIsSubMenu(child)) {
        activeFlag = _checkSubMenuChildrenActive(child.props.children, active);
      } else if (checkIsMenuItem(child)) {
        activeFlag = active === child.props.value ? true : activeFlag;
      }
    });
    return activeFlag;
  };

  var checkSubMenuActive = function checkSubMenuActive(children, active) {
    return React__default["default"].Children.toArray(children).find(function (child) {
      return checkIsSubMenu(child) && (child.props.value === active || _checkSubMenuChildrenActive(child.props.children, active));
    });
  };

  var _excluded$v = ["children"];
  function ownKeys$1B(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1B(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1B(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1B(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TabPanel = Tabs.TabPanel;
  var HeadMenu = function HeadMenu(props) {
    var children = props.children,
      className = props.className,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? "light" : _props$theme,
      style = props.style,
      logo = props.logo,
      operations = props.operations;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useMenuContext = useMenuContext(_objectSpread$1B(_objectSpread$1B({}, props), {}, {
        children: children,
        mode: "title"
      })),
      value = _useMenuContext.value;
    var childList = React.useMemo(function () {
      if (value.expandType === "popup") return null;
      var activeMenu = checkSubMenuActive(children, value.active);
      if (!activeMenu) return null;
      var child = activeMenu.props.children;
      if (Array.isArray(child)) return child;
      if (isObject(child)) return [child];
      return activeMenu.props.children;
    }, [children, value.expandType, value.active]);
    var currentChildListValues = (childList === null || childList === void 0 ? void 0 : childList.length) > 0 ? childList.map(function (item) {
      return item.props.value;
    }) : [];
    return /* @__PURE__ */React__default["default"].createElement(MenuContext.Provider, {
      value: value
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-head-menu"), "".concat(classPrefix, "-menu--").concat(theme), className),
      style: _objectSpread$1B({}, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-head-menu__inner")
    }, logo && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__logo")
    }, logo), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-menu")
    }, children), operations && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__operations")
    }, operations)), (childList === null || childList === void 0 ? void 0 : childList.length) > 0 && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-head-menu__submenu ").concat(classPrefix, "-submenu")
    }, /* @__PURE__ */React__default["default"].createElement(Tabs, {
      value: currentChildListValues.includes(value.active) ? value.active : currentChildListValues[0],
      onChange: value.onChange
    }, childList.map(function (_ref) {
      var _ref$props = _ref.props,
        children2 = _ref$props.children,
        restProps = _objectWithoutProperties$2(_ref$props, _excluded$v);
      return /* @__PURE__ */React__default["default"].createElement(TabPanel, _objectSpread$1B(_objectSpread$1B({
        key: props.value
      }, restProps), {}, {
        label: children2
      }));
    })))));
  };

  var _getSubMenuChildCount = function getSubMenuChildCount(children) {
    var count = 0;
    React__default["default"].Children.forEach(children, function (child) {
      if (checkIsSubMenu(child) || checkIsMenuGroup(child)) {
        count += _getSubMenuChildCount(child.props.children) + 1;
      } else {
        count += 1;
      }
    });
    return count;
  };
  var MENU_ITEM_HEIGHT = 50;
  var getSubMenuMaxHeight = function getSubMenuMaxHeight(children) {
    return _getSubMenuChildCount(children) * MENU_ITEM_HEIGHT;
  };

  var DEFAULT_SUBMENU_PADDING_LEFT = 44;
  var INCREASE_SUBMENU_PADDING_LEFT = 16;
  var cacularPaddingLeft = function cacularPaddingLeft(level) {
    return DEFAULT_SUBMENU_PADDING_LEFT + level * INCREASE_SUBMENU_PADDING_LEFT;
  };

  var _excluded$u = ["overlayClassName", "overlayInnerClassName"],
    _excluded2$2 = ["overlayClassName", "overlayInnerClassName"];
  function ownKeys$1A(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1A(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1A(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1A(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SubAccordion = function SubAccordion(props) {
    var content = props.content,
      _props$children = props.children,
      children = _props$children === void 0 ? content : _props$children,
      disabled = props.disabled,
      icon = props.icon,
      title = props.title,
      value = props.value,
      className = props.className,
      style = props.style,
      _props$level = props.level,
      level = _props$level === void 0 ? 1 : _props$level,
      popupProps = props.popupProps;
    var _ref = popupProps || {},
      overlayClassName = _ref.overlayClassName,
      overlayInnerClassName = _ref.overlayInnerClassName,
      restPopupProps = _objectWithoutProperties$2(_ref, _excluded$u);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];
    var _useContext = React.useContext(MenuContext),
      _useContext$expanded = _useContext.expanded,
      expanded = _useContext$expanded === void 0 ? [] : _useContext$expanded,
      onExpand = _useContext.onExpand,
      active = _useContext.active,
      expandType = _useContext.expandType,
      _useContext$theme = _useContext.theme,
      theme = _useContext$theme === void 0 ? "light" : _useContext$theme;
    var isPopUp = expandType === "popup";
    var isExpand = expanded.includes(value) && !disabled && !isPopUp;
    var handleClick = function handleClick(e) {
      e.stopPropagation();
      onExpand(value, expanded);
      setOpen(false);
    };
    var handleVisibleChange = function handleVisibleChange(visible) {
      setOpen(visible);
    };
    var popupChildren = React__default["default"].Children.map(children, function (child) {
      var _child$props;
      return /*#__PURE__*/React__default["default"].cloneElement(child, {
        className: classNames$1("".concat(classPrefix, "-menu__item--plain"), "".concat(classPrefix, "-submenu__item"), "".concat(classPrefix, "-submenu__item--icon"), (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.className)
      });
    });
    var childStyle = {
      maxHeight: isExpand || open && isPopUp ? getSubMenuMaxHeight(children) : 0
    };
    var isOpen = React.useMemo(function () {
      if (disabled) return false;
      if (isPopUp) return open;
      return isExpand;
    }, [disabled, isPopUp, open, isExpand]);
    var menuPaddingLeft = cacularPaddingLeft(level - 1);
    var fakeArrowStyle = isPopUp && level > 1 ? {
      transform: "rotate(-90deg)"
    } : {};
    var contentRef = React.useRef(null);
    var transitionCallbacks = {
      onEnter: function onEnter() {
        contentRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.scrollHeight, "px");
      },
      onEntered: function onEntered() {
        contentRef.current.style.height = "auto";
      },
      onExit: function onExit() {
        contentRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.scrollHeight, "px");
      },
      onExiting: function onExiting() {
        contentRef.current.style.height = "0px";
      }
    };
    var pupContent = /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu__popup-wrapper"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen)),
      key: "popup",
      style: childStyle
    }, popupChildren);
    var submenu = /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-submenu"), className, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-opened"), isOpen)),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__item"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen), "".concat(classPrefix, "-is-active"), _checkSubMenuChildrenActive(children, active))),
      onClick: handleClick
    }, parseTNode(icon), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, title), /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      style: fakeArrowStyle,
      isActive: isOpen,
      disabled: disabled
    })), !isPopUp && /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$1A({
      "in": isOpen,
      appear: true,
      timeout: 300,
      nodeRef: contentRef
    }, transitionCallbacks), /* @__PURE__ */React__default["default"].createElement("ul", {
      key: "normal",
      style: _objectSpread$1A(_objectSpread$1A({}, childStyle), {}, {
        "--padding-left": "".concat(menuPaddingLeft, "px"),
        overflow: "hidden"
      }),
      className: classNames$1("".concat(classPrefix, "-menu__sub"), "".concat(classPrefix, "-slide-down-enter-active")),
      ref: contentRef
    }, popupChildren)));
    if (isPopUp) {
      return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$1A(_objectSpread$1A({}, restPopupProps), {}, {
        overlayInnerClassName: ["".concat(classPrefix, "-menu__popup"), "".concat(classPrefix, "-is-vertical"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen), overlayInnerClassName],
        overlayClassName: ["".concat(classPrefix, "-menu--").concat(theme), _defineProperty$2({}, "".concat(classPrefix, "-menu-is-nested"), level > 1), overlayClassName],
        visible: open,
        placement: "right-top",
        content: pupContent,
        onVisibleChange: handleVisibleChange
      }), submenu);
    }
    return submenu;
  };
  var SubTitleMenu = function SubTitleMenu(props) {
    var className = props.className,
      style = props.style,
      children = props.children,
      disabled = props.disabled,
      icon = props.icon,
      title = props.title,
      value = props.value,
      _props$level2 = props.level,
      level = _props$level2 === void 0 ? 1 : _props$level2,
      popupProps = props.popupProps;
    var _ref4 = popupProps || {},
      overlayClassName = _ref4.overlayClassName,
      overlayInnerClassName = _ref4.overlayInnerClassName,
      restPopupProps = _objectWithoutProperties$2(_ref4, _excluded2$2);
    var _useContext2 = React.useContext(MenuContext),
      active = _useContext2.active,
      onChange = _useContext2.onChange,
      expandType = _useContext2.expandType,
      _useContext2$theme = _useContext2.theme,
      theme = _useContext2$theme === void 0 ? "light" : _useContext2$theme;
    var _useConfig2 = useConfig$2(),
      classPrefix = _useConfig2.classPrefix;
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      open = _useState4[0],
      setOpen = _useState4[1];
    var handleClick = function handleClick() {
      return onChange(value);
    };
    var handleVisibleChange = function handleVisibleChange(visible) {
      setOpen(visible);
    };
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      subMenuDom = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    useRipple(subMenuDom);
    var isPopUp = expandType === "popup";
    var isActive = _checkSubMenuChildrenActive(children, active) || active === value;
    var isOpen = React.useMemo(function () {
      if (disabled) return false;
      if (isPopUp) return open;
      return false;
    }, [disabled, isPopUp, open]);
    var fakeArrowStyle = level > 1 ? {
      transform: "rotate(-90deg)"
    } : {};
    var pupContent = /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu__popup-wrapper"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen))
    }, children);
    var placement = "right-top";
    if (level < 2) {
      placement = "bottom-left";
    }
    var submenu = /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-submenu"), className, _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), open))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: setRefCurrent,
      className: classNames$1("".concat(classPrefix, "-menu__item"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-active"), isActive), "".concat(classPrefix, "-is-opened"), open)),
      onClick: handleClick,
      style: style
    }, parseTNode(icon), /* @__PURE__ */React__default["default"].createElement("span", null, title), isPopUp && /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      style: fakeArrowStyle,
      isActive: level === 1 && open
    })));
    if (isPopUp) {
      return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$1A(_objectSpread$1A({}, restPopupProps), {}, {
        overlayInnerClassName: ["".concat(classPrefix, "-menu__popup"), "".concat(classPrefix, "-is-vertical"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen), overlayInnerClassName],
        overlayClassName: ["".concat(classPrefix, "-menu--").concat(theme), "".concat(classPrefix, "-is-head-menu"), _defineProperty$2({}, "".concat(classPrefix, "-menu-is-nested"), level > 1), overlayClassName],
        visible: open,
        placement: placement,
        content: pupContent,
        onVisibleChange: handleVisibleChange
      }), submenu);
    }
    return submenu;
  };
  var SubMenu = function SubMenu(props) {
    var _useContext3 = React.useContext(MenuContext),
      mode = _useContext3.mode;
    var children = props.children,
      _props$level3 = props.level,
      level = _props$level3 === void 0 ? 1 : _props$level3;
    var _changeItemLevel = function changeItemLevel(item) {
      if (checkIsSubMenu(item)) {
        return /*#__PURE__*/React__default["default"].cloneElement(item, {
          level: level + 1
        });
      }
      if (checkIsMenuGroup(item)) {
        var groupChildren = React__default["default"].Children.map(item.props.children, function (item2) {
          return _changeItemLevel(item2);
        });
        return /*#__PURE__*/React__default["default"].cloneElement(item, {
          level: level + 1
        }, groupChildren);
      }
      return item;
    };
    var childElement = React__default["default"].Children.map(children, function (item) {
      return _changeItemLevel(item);
    });
    if (mode === "accordion") return /* @__PURE__ */React__default["default"].createElement(SubAccordion, _objectSpread$1A({}, props), childElement);
    if (mode === "title") return /* @__PURE__ */React__default["default"].createElement(SubTitleMenu, _objectSpread$1A({}, props), childElement);
    return null;
  };
  SubMenu.displayName = "SubMenu";

  function ownKeys$1z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var MenuItem = function MenuItem(props) {
    var content = props.content,
      _props$children = props.children,
      children = _props$children === void 0 ? content : _props$children,
      disabled = props.disabled,
      href = props.href,
      _props$target = props.target,
      target = _props$target === void 0 ? "_self" : _props$target,
      value = props.value,
      className = props.className,
      style = props.style,
      icon = props.icon,
      onClick = props.onClick;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      menuItemDom = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    useRipple(menuItemDom);
    var _useContext = React.useContext(MenuContext),
      onChange = _useContext.onChange,
      setState = _useContext.setState,
      active = _useContext.active,
      collapsed = _useContext.collapsed;
    var handleClick = function handleClick(e) {
      e.stopPropagation();
      if (disabled) return;
      onClick && onClick({
        e: e,
        value: value
      });
      if (value !== active) onChange(value);
      setState({
        active: value
      });
    };
    var liContent = /* @__PURE__ */React__default["default"].createElement("li", {
      ref: setRefCurrent,
      className: classNames$1("".concat(classPrefix, "-menu__item"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-active"), value === active), "".concat(classPrefix, "-menu__item--plain"), !icon)),
      style: _objectSpread$1z({}, style),
      onClick: handleClick
    }, /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, icon, href ? /* @__PURE__ */React__default["default"].createElement("a", {
      href: href,
      target: target,
      className: classNames$1("".concat(classPrefix, "-menu__item-link"))
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, children)) : /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, children)));
    if (collapsed && !disabled && !/submenu/i.test(className)) {
      return /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$1z({
        content: children,
        placement: "right"
      }, props.tooltipProps), liContent);
    }
    return liContent;
  };
  MenuItem.displayName = "MenuItem";

  var MenuGroup = function MenuGroup(_ref) {
    var title = _ref.title,
      className = _ref.className,
      style = _ref.style,
      children = _ref.children,
      _ref$level = _ref.level,
      level = _ref$level === void 0 ? 1 : _ref$level;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var itemAndGroupPaddingBias = 28;
    var menuPaddingLeft = cacularPaddingLeft(level - 1) - itemAndGroupPaddingBias;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(className, "".concat(classPrefix, "-menu-group")),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu-group__title")),
      style: {
        paddingLeft: "".concat(menuPaddingLeft, "px")
      }
    }, title), children);
  };
  MenuGroup.displayName = "MenuGroup";

  function ownKeys$1y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Menu$1 = forwardRefWithStatics(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, menuDefaultProps);
    var className = props.className,
      _props$width = props.width,
      width = _props$width === void 0 ? DEFAULT_MENU_WIDTH : _props$width,
      children = props.children,
      theme = props.theme,
      logo = props.logo,
      operations = props.operations,
      style = props.style;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useMenuContext = useMenuContext(_objectSpread$1y(_objectSpread$1y({}, props), {}, {
        children: children,
        mode: "accordion"
      })),
      value = _useMenuContext.value;
    var menuWidthArr = Array.isArray(width) ? width : [width, DEFAULT_MENU_WIDTH[1]];
    var collapsed = value.collapsed;
    return /* @__PURE__ */React__default["default"].createElement(MenuContext.Provider, {
      value: value
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-default-menu"), className, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-collapsed"), collapsed), "".concat(classPrefix, "-menu--dark"), theme === "dark")),
      style: _objectSpread$1y({
        width: collapsed ? menuWidthArr[1] : menuWidthArr[0]
      }, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-default-menu__inner")
    }, logo && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__logo")
    }, logo), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu"), "".concat(classPrefix, "-menu--scroll"))
    }, children), operations && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__operations")
    }, operations))));
  }, {
    HeadMenu: HeadMenu,
    SubMenu: SubMenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup
  });
  Menu$1.displayName = "Menu";

  var Menu = Menu$1;

  var Dialog = Dialog$1;
  var DialogCard = DialogCard$1;
  var dialog = DialogPlugin$1;
  var DialogPlugin = DialogPlugin$1;

  function useTreeConfig() {
    var _useConfig = useConfig$2(),
      prefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("tree"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      _locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    return React.useMemo(function () {
      var tree = "".concat(prefix, "-tree");
      var treeClassNames = {
        icon: "".concat(prefix, "-icon"),
        folderIcon: "".concat(prefix, "-folder-icon"),
        actived: "".concat(prefix, "-is-active"),
        disabled: "".concat(prefix, "-is-disabled"),
        treeIconRight: "".concat(prefix, "-icon-arrow-right"),
        treeIconDown: "".concat(prefix, "-icon-arrow-down"),
        tree: tree,
        treeFx: "".concat(tree, "--transition"),
        treeBlockNode: "".concat(tree, "--block-node"),
        treeEmpty: "".concat(tree, "__empty"),
        treeList: "".concat(tree, "__list"),
        treeNode: "".concat(tree, "__item"),
        treeNodeOpen: "".concat(tree, "__item--open"),
        treeHoverable: "".concat(tree, "--hoverable"),
        treeCheckable: "".concat(tree, "--checkable"),
        treeLabel: "".concat(tree, "__label"),
        treeLabelStrictly: "".concat(tree, "__label--strictly"),
        treeIcon: "".concat(tree, "__icon"),
        treeIconDefault: "".concat(tree, "__icon--default"),
        treeSpace: "".concat(tree, "__space"),
        treeOperations: "".concat(tree, "__operations"),
        treeNodeDraggable: "".concat(tree, "__item--draggable"),
        treeNodeDragging: "".concat(tree, "__item--dragging"),
        treeNodeDragTipTop: "".concat(tree, "__item--tip-top"),
        treeNodeDragTipBottom: "".concat(tree, "__item--tip-bottom"),
        treeNodeDragTipHighlight: "".concat(tree, "__item--tip-highlight"),
        line: "".concat(tree, "__line"),
        lineIsLeaf: "".concat(tree, "__line--leaf"),
        lineIsFirst: "".concat(tree, "__line--first"),
        treeNodeShow: "".concat(tree, "__item--show"),
        treeClickable: "".concat(tree, "__item--clickable"),
        loading: "".concat(prefix, "-icon-loading ").concat(prefix, "-icon-loading-blue"),
        toggleEnter: "".concat(tree, "__item--enter-active"),
        toggleLeave: "".concat(tree, "__item--leave-active"),
        treeVscroll: "".concat(tree, "__vscroll"),
        treeVscrollCursor: "".concat(tree, "__vscroll-cursor")
      };
      var transitionNames = {
        treeNode: "".concat(prefix, "-tree-toggle")
      };
      var transitionClassNames = {
        enter: treeClassNames.toggleEnter,
        exit: treeClassNames.toggleLeave
      };
      return {
        treeClassNames: treeClassNames,
        transitionNames: transitionNames,
        transitionClassNames: transitionClassNames,
        transitionDuration: 300,
        locale: function locale(key) {
          return t(_locale[key]);
        }
      };
    }, [_locale, prefix, t]);
  }

  function createHookContext(hook) {
    var Context = /*#__PURE__*/React.createContext(null);
    function Provider(props) {
      return /* @__PURE__ */React__default["default"].createElement(Context.Provider, {
        value: hook(props.value)
      }, props.children);
    }
    function use() {
      return React.useContext(Context);
    }
    return {
      Provider: Provider,
      use: use
    };
  }

  function ownKeys$1x(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1x(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1x(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1x(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TreeDraggableContext = createHookContext(function (value) {
    var props = value.props,
      store = value.store;
    var dragNode = React.useRef(null);
    var onDragStart = function onDragStart(context) {
      var _props$onDragStart;
      dragNode.current = context.node;
      (_props$onDragStart = props.onDragStart) === null || _props$onDragStart === void 0 || _props$onDragStart.call(props, _objectSpread$1x(_objectSpread$1x({}, context), {}, {
        node: context.node.getModel()
      }));
    };
    var onDragEnd = function onDragEnd(context) {
      var _props$onDragEnd;
      dragNode.current = context.node;
      (_props$onDragEnd = props.onDragEnd) === null || _props$onDragEnd === void 0 || _props$onDragEnd.call(props, _objectSpread$1x(_objectSpread$1x({}, context), {}, {
        node: context.node.getModel()
      }));
    };
    var onDragOver = function onDragOver(context) {
      var _props$onDragOver, _dragNode$current;
      (_props$onDragOver = props.onDragOver) === null || _props$onDragOver === void 0 || _props$onDragOver.call(props, _objectSpread$1x(_objectSpread$1x({}, context), {}, {
        node: context.node.getModel(),
        dragNode: (_dragNode$current = dragNode.current) === null || _dragNode$current === void 0 ? void 0 : _dragNode$current.getModel()
      }));
    };
    var onDragLeave = function onDragLeave(context) {
      var _props$onDragLeave, _dragNode$current2;
      (_props$onDragLeave = props.onDragLeave) === null || _props$onDragLeave === void 0 || _props$onDragLeave.call(props, _objectSpread$1x(_objectSpread$1x({}, context), {}, {
        node: context.node.getModel(),
        dragNode: (_dragNode$current2 = dragNode.current) === null || _dragNode$current2 === void 0 ? void 0 : _dragNode$current2.getModel()
      }));
    };
    var onDrop = function onDrop(context) {
      var _dragNode$current3, _props$allowDrop, _props$onDrop, _dragNode$current6;
      var node = context.node,
        dropPosition = context.dropPosition;
      if (node.value === ((_dragNode$current3 = dragNode.current) === null || _dragNode$current3 === void 0 ? void 0 : _dragNode$current3.value) || node.getParents().some(function (_node) {
        var _dragNode$current4;
        return _node.value === ((_dragNode$current4 = dragNode.current) === null || _dragNode$current4 === void 0 ? void 0 : _dragNode$current4.value);
      })) {
        return;
      }
      var ctx = {
        dropNode: node.getModel(),
        dragNode: dragNode.current.getModel(),
        dropPosition: dropPosition,
        e: context.e
      };
      if (((_props$allowDrop = props.allowDrop) === null || _props$allowDrop === void 0 ? void 0 : _props$allowDrop.call(props, ctx)) === false) return;
      var nodes = store.getNodes();
      nodes.some(function (_node) {
        if (_node.value === node.value) {
          if (dropPosition === 0) {
            var _dragNode$current5;
            (_dragNode$current5 = dragNode.current) === null || _dragNode$current5 === void 0 || _dragNode$current5.appendTo(store, _node);
          } else if (dropPosition < 0) {
            node.insertBefore(dragNode.current);
          } else {
            node.insertAfter(dragNode.current);
          }
          return true;
        }
        return false;
      });
      (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 || _props$onDrop.call(props, _objectSpread$1x(_objectSpread$1x({}, context), {}, {
        dragNode: (_dragNode$current6 = dragNode.current) === null || _dragNode$current6 === void 0 ? void 0 : _dragNode$current6.getModel(),
        dropNode: node.getModel()
      }));
    };
    return {
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      onDragOver: onDragOver,
      onDragLeave: onDragLeave,
      onDrop: onDrop
    };
  });
  var useTreeDraggableContext = function useTreeDraggableContext() {
    return TreeDraggableContext.use();
  };

  function ownKeys$1w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1w(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useDraggable(props) {
    var nodeRef = props.nodeRef,
      node = props.node,
      allowDrop = props.allowDrop;
    var _useTreeDraggableCont = useTreeDraggableContext(),
      onDragStart = _useTreeDraggableCont.onDragStart,
      onDragEnd = _useTreeDraggableCont.onDragEnd,
      onDragLeave = _useTreeDraggableCont.onDragLeave,
      onDragOver = _useTreeDraggableCont.onDragOver,
      onDrop = _useTreeDraggableCont.onDrop;
    var _useState = React.useState({
        isDragOver: false,
        isDragging: false,
        dropPosition: 0
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    var setPartialState = usePersistFn(function (newState) {
      setState(function (prev) {
        return _objectSpread$1w(_objectSpread$1w({}, prev), newState);
      });
    });
    var updateDropPosition = React.useRef(throttle$1(function (e) {
      if (!nodeRef.current) return;
      var rect = nodeRef.current.getBoundingClientRect();
      var offsetY = window.pageYOffset + rect.top;
      var pageY = e.pageY;
      var gapHeight = rect.height / 4;
      var diff = pageY - offsetY;
      if (diff < gapHeight) {
        setPartialState({
          dropPosition: -1
        });
      } else if (diff < rect.height - gapHeight) {
        setPartialState({
          dropPosition: 0
        });
      } else {
        setPartialState({
          dropPosition: 1
        });
      }
    })).current;
    var setDragStatus = function setDragStatus(status, e) {
      switch (status) {
        case "dragStart":
          setPartialState({
            isDragging: true,
            dropPosition: 0
          });
          onDragStart === null || onDragStart === void 0 || onDragStart({
            node: node,
            e: e
          });
          break;
        case "dragEnd":
          setPartialState({
            isDragging: false,
            isDragOver: false,
            dropPosition: 0
          });
          updateDropPosition.cancel();
          onDragEnd === null || onDragEnd === void 0 || onDragEnd({
            node: node,
            e: e
          });
          break;
        case "dragOver":
          setPartialState({
            isDragOver: true
          });
          updateDropPosition(e);
          onDragOver === null || onDragOver === void 0 || onDragOver({
            node: node,
            dropPosition: state.dropPosition,
            e: e
          });
          break;
        case "dragLeave":
          setPartialState({
            isDragOver: false
          });
          updateDropPosition.cancel();
          onDragLeave === null || onDragLeave === void 0 || onDragLeave({
            node: node,
            dropPosition: state.dropPosition,
            e: e
          });
          break;
        case "drop":
          onDrop === null || onDrop === void 0 || onDrop({
            node: node,
            dropPosition: state.dropPosition,
            e: e,
            allowDrop: allowDrop
          });
          setPartialState({
            isDragOver: false
          });
          updateDropPosition.cancel();
          break;
      }
    };
    return _objectSpread$1w(_objectSpread$1w({}, state), {}, {
      setDragStatus: setDragStatus
    });
  }

  var _excluded$t = ["setData"];
  function ownKeys$1v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1v(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TreeItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var node = props.node,
      icon = props.icon,
      label = props.label,
      line = props.line,
      expandOnClickNode = props.expandOnClickNode,
      activable = props.activable,
      checkProps = props.checkProps,
      disableCheck = props.disableCheck,
      operations = props.operations,
      onClick = props.onClick,
      _onChange = props.onChange,
      isVirtual = props.isVirtual,
      onTreeItemMounted = props.onTreeItemMounted,
      allowDrop = props.allowDrop;
    var _useGlobalIcon = useGlobalIcon({
        CaretRightSmallIcon: TdCaretRightSmallIcon
      }),
      CaretRightSmallIcon = _useGlobalIcon.CaretRightSmallIcon;
    var level = node.level;
    var nodeRef = React.useRef(null);
    var _useTreeConfig = useTreeConfig(),
      treeClassNames = _useTreeConfig.treeClassNames,
      locale = _useTreeConfig.locale;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    React.useEffect(function () {
      onTreeItemMounted === null || onTreeItemMounted === void 0 || onTreeItemMounted({
        ref: nodeRef.current,
        data: node
      });
    }, [isVirtual, nodeRef, node, onTreeItemMounted]);
    var handleClick = function handleClick(evt) {
      var _srcTarget$className, _srcTarget$className$;
      var srcTarget = evt.target;
      var isBranchTrigger = node.children && expandOnClickNode && (srcTarget.className === "".concat(classPrefix, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
      if (isBranchTrigger) return;
      if (expandOnClickNode && node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 || (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(classPrefix, "-tree__label"))) !== -1) evt.preventDefault();
      onClick === null || onClick === void 0 || onClick(node, {
        e: evt,
        expand: expandOnClickNode,
        active: activable,
        trigger: "node-click"
      });
    };
    var handleItemClick = function handleItemClick(evt) {
      if (node.loading) {
        return;
      }
      onClick === null || onClick === void 0 || onClick(node, {
        e: evt,
        expand: true,
        active: false,
        trigger: "icon-click"
      });
    };
    var handleIconClick = function handleIconClick(evt) {
      if (!icon) return;
      evt.stopPropagation();
      handleItemClick(evt);
    };
    var stopPropagation = function stopPropagation(e) {
      e.stopPropagation();
    };
    var renderIcon = function renderIcon() {
      var isDefaultIcon = false;
      var renderIconNode = function renderIconNode() {
        if (icon === false) {
          return null;
        }
        if (icon instanceof Function) {
          return icon(node.getModel());
        }
        if (/*#__PURE__*/React__default["default"].isValidElement(icon)) {
          return icon;
        }
        if (icon && icon !== true) {
          throw new Error("invalid type of icon");
        }
        if (!node.isLeaf()) {
          isDefaultIcon = true;
          if (node.loading && node.expanded) {
            return /* @__PURE__ */React__default["default"].createElement(Loading, {
              loading: true
            });
          }
          return /* @__PURE__ */React__default["default"].createElement(CaretRightSmallIcon, {
            className: treeClassNames.treeIconRight
          });
        }
        return null;
      };
      var iconNode = renderIconNode();
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(treeClassNames.treeIcon, treeClassNames.folderIcon, _defineProperty$2({}, treeClassNames.treeIconDefault, isDefaultIcon)),
        onClick: handleIconClick
      }, iconNode);
    };
    var renderLine = function renderLine() {
      var iconVisible = icon !== false;
      if (line === false) {
        return null;
      }
      if (isFunction$1(line)) {
        return line(node.getModel());
      }
      if (/*#__PURE__*/React__default["default"].isValidElement(line)) {
        return line;
      }
      if (node.parent && node.tree) {
        var shadowStyles = [];
        var parents = node.getParents();
        parents.pop();
        parents.forEach(function (pnode, index) {
          if (!pnode.vmIsLast) {
            shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
          }
        });
        var styles = {
          "--level": level,
          boxShadow: shadowStyles.join(",")
        };
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1(treeClassNames.line, _defineProperty$2(_defineProperty$2({}, treeClassNames.lineIsLeaf, node.vmIsLeaf || !iconVisible), treeClassNames.lineIsFirst, node.vmIsFirst && iconVisible)),
          style: styles,
          onClick: stopPropagation
        });
      }
      return null;
    };
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      labelDom = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    useRipple(labelDom);
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      updateRender = _useState2[1];
    var renderLabel = function renderLabel() {
      var _node$data, _node$data2;
      var emptyView = locale("empty");
      var labelText = "";
      if (label instanceof Function) {
        var _node$getModel = node.getModel(),
          nodeSetData = _node$getModel.setData,
          rest = _objectWithoutProperties$2(_node$getModel, _excluded$t);
        labelText = label(_objectSpread$1v(_objectSpread$1v({}, rest), {}, {
          setData: function setData(value) {
            nodeSetData(value);
            updateRender({});
          }
        })) || emptyView;
      } else {
        labelText = node.label || emptyView;
      }
      var labelClasses = classNames$1(treeClassNames.treeLabel, treeClassNames.treeLabelStrictly, _defineProperty$2({}, treeClassNames.actived, node.isActivable() ? node.actived : false));
      if (node.isCheckable()) {
        var checkboxDisabled;
        if (typeof disableCheck === "function") {
          checkboxDisabled = disableCheck(node.getModel());
        } else {
          checkboxDisabled = !!disableCheck;
        }
        if (node.isDisabled()) {
          checkboxDisabled = true;
        }
        var checkboxProps;
        if (typeof checkProps === "function") {
          checkboxProps = checkProps(node.getModel());
        } else {
          checkboxProps = checkProps;
        }
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, _objectSpread$1v({
          ref: setRefCurrent,
          checked: node.checked,
          indeterminate: node.indeterminate,
          disabled: checkboxDisabled,
          name: String(node.value),
          onChange: function onChange(checked, ctx) {
            return _onChange(node, ctx);
          },
          className: labelClasses,
          stopLabelTrigger: expandOnClickNode && !!node.children
        }, checkboxProps), /* @__PURE__ */React__default["default"].createElement("span", {
          "data-target": "label"
        }, labelText));
      }
      return /* @__PURE__ */React__default["default"].createElement("span", {
        ref: setRefCurrent,
        "data-target": "label",
        className: labelClasses,
        title: /*#__PURE__*/React.isValidElement(node.label) && !((_node$data = node.data) !== null && _node$data !== void 0 && _node$data.text) ? "" : String(((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.text) || node.label)
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        style: {
          position: "relative"
        }
      }, labelText));
    };
    var renderOperations = function renderOperations() {
      var operationsView = null;
      if (operations) {
        if (/*#__PURE__*/React__default["default"].isValidElement(operations)) {
          operationsView = operations;
        } else if (operations instanceof Function) {
          var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
          operationsView = operations(treeNodeModel);
        } else {
          throw new Error("invalid type of operations");
        }
      }
      if (operationsView) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: treeClassNames.treeOperations,
          "data-target": "operations"
        }, operationsView);
      }
      return null;
    };
    var _useDraggable = useDraggable({
        node: node,
        nodeRef: nodeRef,
        allowDrop: allowDrop
      }),
      setDragStatus = _useDraggable.setDragStatus,
      isDragging = _useDraggable.isDragging,
      dropPosition = _useDraggable.dropPosition,
      isDragOver = _useDraggable.isDragOver;
    var handleDragStart = function handleDragStart(evt) {
      var node2 = props.node;
      if (!node2.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragStart", evt);
      try {
        var _evt$dataTransfer;
        (_evt$dataTransfer = evt.dataTransfer) === null || _evt$dataTransfer === void 0 || _evt$dataTransfer.setData("text/plain", "");
      } catch (e) {}
    };
    var handleDragEnd = function handleDragEnd(evt) {
      var node2 = props.node;
      if (!node2.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragEnd", evt);
    };
    var handleDragOver = function handleDragOver(evt) {
      var node2 = props.node;
      if (!node2.isDraggable()) return;
      evt.stopPropagation();
      evt.preventDefault();
      setDragStatus("dragOver", evt);
    };
    var handleDragLeave = function handleDragLeave(evt) {
      var node2 = props.node;
      if (!node2.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragLeave", evt);
    };
    var handleDrop = function handleDrop(evt) {
      var node2 = props.node;
      if (!node2.isDraggable()) return;
      evt.stopPropagation();
      evt.preventDefault();
      setDragStatus("drop", evt);
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: composeRefs(ref, nodeRef),
      "data-value": node.value,
      "data-level": level,
      className: classNames$1(treeClassNames.treeNode, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, treeClassNames.treeNodeOpen, node.expanded), treeClassNames.actived, node.isActivable() ? node.actived : false), treeClassNames.disabled, node.isDisabled()), treeClassNames.treeNodeDraggable, !node.isDisabled() && node.isDraggable()), treeClassNames.treeNodeDragging, isDragging), treeClassNames.treeNodeDragTipTop, isDragOver && dropPosition < 0), treeClassNames.treeNodeDragTipBottom, isDragOver && dropPosition > 0), treeClassNames.treeNodeDragTipHighlight, !isDragging && isDragOver && dropPosition === 0)),
      style: {
        "--level": level,
        boxShadow: ""
      },
      onClick: handleClick,
      draggable: !node.isDisabled() && node.isDraggable(),
      onDragStart: handleDragStart,
      onDragEnd: handleDragEnd,
      onDragOver: handleDragOver,
      onDragLeave: handleDragLeave,
      onDrop: handleDrop
    }, renderLine(), renderIcon(), renderLabel(), renderOperations());
  });
  TreeItem.displayName = "TreeItem";

  function useControllable(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useControlled3 = useControlled(props, "expanded", props.onExpand),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      expanded = _useControlled4[0],
      onExpand = _useControlled4[1];
    var _useControlled5 = useControlled(props, "actived", props.onActive),
      _useControlled6 = _slicedToArray$1(_useControlled5, 2),
      actived = _useControlled6[0],
      onActive = _useControlled6[1];
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      indeterminate = _useState2[0],
      setTreeIndeterminate = _useState2[1];
    return {
      value: value,
      onChange: onChange,
      expanded: expanded,
      onExpand: onExpand,
      actived: actived,
      onActive: onActive,
      setTreeIndeterminate: setTreeIndeterminate,
      indeterminate: indeterminate
    };
  }

  function mitt (n) {
    return {
      all: n = n || new Map(),
      on: function on(t, e) {
        var i = n.get(t);
        i ? i.push(e) : n.set(t, [e]);
      },
      off: function off(t, e) {
        var i = n.get(t);
        i && (e ? i.splice(i.indexOf(e) >>> 0, 1) : n.set(t, []));
      },
      emit: function emit(t, e) {
        var i = n.get(t);
        i && i.slice().map(function (n) {
          n(e);
        }), (i = n.get("*")) && i.slice().map(function (n) {
          n(t, e);
        });
      }
    };
  }

  function ownKeys$1u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1u(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getExposedProps(node) {
    var props = pick$1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }
  function createNodeModel(node) {
    var props = getExposedProps(node);
    var model = _objectSpread$1u(_objectSpread$1u({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;
        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;
        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (isBoolean(children)) {
          childrenModel = children;
        }
        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }
        var tree = node.tree;
        var targetNode = tree.getNode(value);
        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }
        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });
        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }
        targetNode.remove();
      },
      setData: function setData(data) {
        var _data = omit$2(data, ["children", "value", "label"]);
        var keys = node.tree.config.keys;
        var dataValue = data[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
        var dataLabel = data[(keys === null || keys === void 0 ? void 0 : keys.label) || "label"];
        if (!isUndefined(dataValue)) _data.value = dataValue;
        if (!isUndefined(dataLabel)) _data.label = dataLabel;
        Object.assign(node.data, _data);
        Object.assign(node, _data);
      }
    });
    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$1t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1t(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var settableStatus = {
    expandMutex: null,
    activable: null,
    checkable: null,
    draggable: null,
    loading: false
  };
  var settableProps = Object.keys(settableStatus);
  var syncableProps = [].concat(settableProps, ["actived", "expanded", "checked"]);
  var privateKey = "__tdesign_id__";
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      var _this = this;
      _classCallCheck(this, TreeNode);
      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = config.keys || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      var propsDisabled = keys.disabled || "disabled";
      this.model = null;
      this.children = null;
      this.level = 0;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = false;
      this.vmIsLocked = false;
      this.visible = false;
      this.actived = false;
      this.checked = false;
      this.indeterminate = false;
      this.loading = false;
      this.expanded = config.expandAll;
      this.activable = null;
      this.checkable = null;
      this.expandMutex = null;
      this.draggable = null;
      this[privateKey] = uniqueId(prefix);
      this.value = isNil(get(data, propValue)) ? this[privateKey] : get(data, propValue);
      var nodeMap = tree.nodeMap,
        privateMap = tree.privateMap;
      if (nodeMap.get(this.value)) {
        log.warn("Tree", "Dulplicate value: ".concat(this.value));
      }
      nodeMap.set(this.value, this);
      privateMap.set(this[privateKey], this);
      this.label = get(data, propLabel) || "";
      this.disabled = get(data, propsDisabled);
      var children = data[propChildren];
      if (children === true) {
        this.children = children;
      }
      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }
      syncableProps.forEach(function (prop) {
        if (typeof data[prop] !== "undefined") {
          _this[prop] = data[prop];
        }
      });
      this.initActived();
      this.initExpanded();
      this.initChecked();
      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }
      if (this.isLeaf()) {
        this.expanded = false;
        this.tree.expandedMap["delete"](this.value);
      }
      this.updateChecked();
      this.update();
      tree.reflow(this);
    }
    return _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
          value = this.value,
          parent = this.parent;
        var checkedMap = tree.checkedMap;
        var checkStrictly = tree.config.checkStrictly;
        if (this.checked) {
          checkedMap.set(value, true);
        }
        if (!checkStrictly && parent !== null && parent !== void 0 && parent.checked) {
          checkedMap.set(value, true);
        }
        this.updateChecked();
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;
        if (isNumber(config.expandLevel) && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }
        if (this.children === true && config.lazy) {
          expanded = false;
        }
        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }
        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
          actived = this.actived;
        if (actived && this.isActivable()) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this2 = this;
        var list = [];
        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }
        if (list.length <= 0) {
          return;
        }
        var wasLeaf = this.isLeaf();
        if (!Array.isArray(this.children)) {
          this.children = [];
        }
        var children = this.children,
          tree = this.tree;
        list.forEach(function (item) {
          var node = null;
          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this2.tree, _this2);
          } else {
            node = new TreeNode(_this2.tree, item, _this2);
            children.push(node);
          }
        });
        if (wasLeaf && tree.config.expandAll && !this.isLeaf()) {
          tree.expandedMap.set(this.value, true);
          this.expanded = true;
        }
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this3 = this;
        var parentNode = parent;
        var targetIndex = -1;
        if (isNumber(index)) {
          targetIndex = index;
        }
        var targetParents = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.getParents()) || [];
        var includeCurrent = targetParents.some(function (pnode) {
          return pnode === _this3;
        });
        if (includeCurrent) {
          throw new Error("\u65E0\u6CD5\u5C06\u7236\u8282\u70B9\u63D2\u5165\u5230\u5B50\u8282\u70B9");
        }
        if (parentNode === this) {
          throw new Error("\u65E0\u6CD5\u5C06\u8282\u70B9\u63D2\u5165\u5230\u672C\u8282\u70B9");
        }
        if (Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
          var targetPosNode = parentNode === null || parentNode === void 0 ? void 0 : parentNode.children[targetIndex];
          if (targetPosNode && targetPosNode === this) {
            return;
          }
        }
        var siblings = null;
        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
            parentNode.children = [];
          }
          siblings = parent.children;
        } else {
          siblings = tree.children;
        }
        if (!Array.isArray(siblings)) {
          throw new Error("\u65E0\u6CD5\u63D2\u5165\u5230\u76EE\u6807\u4F4D\u7F6E\uFF0C\u53EF\u63D2\u5165\u7684\u8282\u70B9\u5217\u8868\u4E0D\u5B58\u5728");
        }
        var prevLength = siblings.length;
        var prevIndex = this.getIndex();
        this.remove();
        if (isNumber(index)) {
          var targetIndex2 = index;
          if (parentNode === this.parent) {
            var curLength = siblings.length;
            if (curLength < prevLength && prevIndex <= targetIndex2) {
              targetIndex2 -= 1;
            }
          }
          siblings.splice(targetIndex2, 0, this);
        } else {
          siblings.push(this);
        }
        this.parent = parentNode;
        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);
          tree.privateMap.set(node[privateKey], node);
          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.walk()) || tree.children.map(function (item) {
          return item.walk();
        }).flat();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
          parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;
        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);
          if (isNumber(index)) {
            siblings.splice(index, 0, node);
          }
          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }
        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();
        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }
        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
          value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
        tree.filterMap["delete"](value);
        tree.privateMap["delete"](this[privateKey]);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                config = get(this, "tree.config") || {};
                if (!(this.children === true && !this.loading)) {
                  _context.next = 2;
                  break;
                }
                if (!("load" in config && isFunction$1(config.load))) {
                  _context.next = 2;
                  break;
                }
                this.loading = true;
                this.update();
                list = [];
                _context.next = 1;
                return config.load(this);
              case 1:
                list = _context.sent;
                this.tree.emit("load", {
                  node: this,
                  data: list
                });
                this.loading = false;
                if (Array.isArray(list) && list.length > 0) {
                  this.append(list);
                } else {
                  this.children = false;
                }
                this.update();
              case 2:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }
        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this4 = this;
        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty.call(settableStatus, key) || key === "label" || key === "disabled") {
            _this4[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;
        while (node) {
          parents.push(node);
          node = node.parent;
        }
        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
          tree = this.tree;
        var list = [];
        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }
        return list;
      }
    }, {
      key: "getChildren",
      value: function getChildren(deep) {
        var childrenModel = false;
        var children = this.children;
        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = this.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (isBoolean(children)) {
          childrenModel = children;
        }
        return childrenModel;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
          config = _this$tree.config,
          filterMap = _this$tree.filterMap,
          hasFilter = _this$tree.hasFilter;
        var rest = false;
        if (hasFilter) {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }
        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }
        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var _this$tree2 = this.tree,
          nodeMap = _this$tree2.nodeMap,
          hasFilter = _this$tree2.hasFilter,
          config = _this$tree2.config;
        var allowFoldNodeOnFilter = config.allowFoldNodeOnFilter;
        var visible = true;
        if (!nodeMap.get(this.value)) {
          return false;
        }
        if (hasFilter && !allowFoldNodeOnFilter) {
          visible = this.vmIsLocked || this.vmIsRest;
          return visible;
        }
        var expandVisible = true;
        var parents = this.getParents();
        if (parents.length > 0) {
          expandVisible = parents.every(function (node) {
            return node.expanded;
          });
        }
        if (hasFilter) {
          visible = expandVisible && (this.vmIsRest || this.vmIsLocked);
        } else {
          visible = expandVisible;
        }
        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        var _this$parent;
        var tree = this.tree;
        var hasFilter = tree.hasFilter,
          config = tree.config;
        var disabled = config.disabled,
          allowFoldNodeOnFilter = config.allowFoldNodeOnFilter,
          checkStrictly = config.checkStrictly;
        if (hasFilter && !allowFoldNodeOnFilter && this.vmIsLocked && !this.vmIsRest) {
          return true;
        }
        var state = disabled || false;
        if (typeof this.disabled === "boolean") {
          state = this.disabled;
        }
        if (!checkStrictly && (_this$parent = this.parent) !== null && _this$parent !== void 0 && _this$parent.isDisabled()) {
          state = true;
        }
        return state;
      }
    }, {
      key: "isDraggable",
      value: function isDraggable() {
        var state = !!get(this, "tree.config.draggable");
        if (typeof this.draggable === "boolean") {
          state = this.draggable;
        }
        return state;
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        var state = !!get(this, "tree.config.expandMutex");
        if (typeof this.expandMutex === "boolean") {
          state = this.expandMutex;
        }
        return state;
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        var state = !!get(this, "tree.config.activable");
        if (typeof this.activable === "boolean") {
          state = this.activable;
        }
        return state;
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        var state = !!get(this, "tree.config.checkable");
        if (typeof this.checkable === "boolean") {
          state = this.checkable;
        }
        return state;
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
          value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
          value = this.value,
          vmIsLocked = this.vmIsLocked;
        var hasFilter = tree.hasFilter,
          config = tree.config;
        var allowFoldNodeOnFilter = config.allowFoldNodeOnFilter;
        if (hasFilter && !allowFoldNodeOnFilter && vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
          tree = this.tree,
          value = this.value;
        var _tree$config = tree.config,
          checkStrictly = _tree$config.checkStrictly,
          valueMode = _tree$config.valueMode;
        if (!tree.nodeMap.get(value)) return false;
        if (!this.isCheckable()) return false;
        var checkedMap = map || tree.checkedMap;
        if (checkStrictly) {
          return !!checkedMap.get(value);
        }
        var checked = false;
        if (checkedMap.get(value) && (valueMode !== "onlyLeaf" || this.isLeaf())) {
          return true;
        }
        if (Array.isArray(children) && children.length > 0) {
          checked = children.every(function (node) {
            var childIsChecked = node.isChecked(checkedMap);
            return childIsChecked;
          });
        } else {
          var parents = this.getParents();
          checked = parents.some(function (node) {
            return checkedMap.get(node.value);
          });
        }
        return checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
          tree = this.tree,
          value = this.value;
        var checkStrictly = tree.config.checkStrictly;
        if (!tree.nodeMap.get(value)) return false;
        if (!this.isCheckable()) return false;
        if (checkStrictly) return false;
        if (!Array.isArray(children)) return false;
        var childChecked = null;
        var indeterminate = children.some(function (node) {
          if (node.isIndeterminate()) {
            return true;
          }
          if (isNull(childChecked)) {
            childChecked = node.isChecked();
          }
          if (childChecked !== node.isChecked()) {
            return true;
          }
          return false;
        });
        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;
        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }
        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();
        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
        this.updateChildren();
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;
        var config = tree.config;
        var options = _objectSpread$1t({
          directly: false
        }, opts);
        var map = tree.expandedMap;
        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }
        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);
          if (config.expandParent) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }
          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;
            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config2;
              isExpandMutex = tree === null || tree === void 0 || (_tree$config2 = tree.config) === null || _tree$config2 === void 0 ? void 0 : _tree$config2.expandMutex;
            }
            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
                snode.update();
                snode.updateChildren();
              });
            }
            map.set(node.value, true);
            node.update();
            node.updateChildren();
          });
        } else {
          map["delete"](this.value);
        }
        if (options.directly) {
          this.afterExpanded();
        }
        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;
        var options = _objectSpread$1t({
          directly: false
        }, opts);
        var config = tree.config || {};
        var map = tree.activedMap;
        if (!options.directly) {
          map = new Map(tree.activedMap);
        }
        if (this.isActivable()) {
          if (actived) {
            var prevKeys = Array.from(map.keys());
            if (!config.activeMultiple) {
              map.clear();
            }
            prevKeys.forEach(function (value) {
              var node = tree.getNode(value);
              node === null || node === void 0 || node.update();
            });
            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }
        this.update();
        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};
        var options = _objectSpread$1t({
          isAction: true,
          directly: false
        }, opts);
        var map = tree.checkedMap;
        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }
        if (!this.isCheckable()) {
          return tree.getChecked(map);
        }
        if (options.isAction && this.isDisabled()) {
          return tree.getChecked(map);
        }
        if (checked === this.isChecked()) {
          return tree.getChecked(map);
        }
        if (checked) {
          map.set(this.value, true);
        } else {
          map["delete"](this.value);
        }
        if (config.checkStrictly) {
          if (options.directly) {
            this.updateChecked();
          }
        } else {
          this.spreadChildrenChecked(checked, map, options);
          this.spreadParentChecked(checked, map, options);
          if (options.directly) {
            var relatedNodes = tree.getRelatedNodes([this.value], {
              reverse: true
            });
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }
        this.isIndeterminateManual = false;
        return tree.getChecked(map);
      }
    }, {
      key: "setIndeterminate",
      value: function setIndeterminate(indeterminate, opts) {
        var tree = this.tree;
        tree.config || {};
        var options = _objectSpread$1t({
          isAction: true,
          directly: false
        }, opts);
        var map = tree.checkedMap;
        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }
        if (!this.isCheckable()) {
          return tree.getChecked(map);
        }
        if (options.isAction && this.isDisabled()) {
          return tree.getChecked(map);
        }
        if (indeterminate === this.isIndeterminate()) {
          return tree.getChecked(map);
        }
        this.indeterminate = indeterminate;
        this.isIndeterminateManual = true;
        return tree.getChecked(map);
      }
    }, {
      key: "spreadParentChecked",
      value: function spreadParentChecked(checked, map, opts) {
        var options = _objectSpread$1t({
          isAction: true,
          directly: false
        }, opts);
        if (!this.isCheckable()) return;
        var children = this.children;
        if (Array.isArray(children) && children.length > 0) {
          map["delete"](this.value);
        }
        var parent = this.parent;
        if (!parent) return;
        parent.spreadParentChecked(checked, map, options);
      }
    }, {
      key: "spreadChildrenChecked",
      value: function spreadChildrenChecked(checked, map, opts) {
        var options = _objectSpread$1t({
          isAction: true,
          directly: false
        }, opts);
        if (!this.isCheckable()) return;
        if (options.isAction && this.isDisabled()) return;
        var children = this.children;
        if (!Array.isArray(children)) return;
        children.forEach(function (node) {
          if (options.isAction && node.isDisabled()) return;
          if (checked) {
            map.set(node.value, true);
          } else {
            map["delete"](node.value);
          }
          node.spreadChildrenChecked(checked, map, options);
        });
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.vmCheckable = this.isCheckable();
        this.vmIsRest = this.isRest();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked(from) {
        var tree = this.tree,
          value = this.value,
          isIndeterminateManual = this.isIndeterminateManual;
        if (isIndeterminateManual && ["refresh"].includes(from)) {
          return;
        }
        var checkedMap = tree.checkedMap;
        this.checked = this.isChecked();
        this.indeterminate = this.isIndeterminate();
        if (this.checked) {
          checkedMap.set(value, true);
        }
        tree.updated(this);
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;
        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;
        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          if (node.isIndeterminateManual && node.indeterminate) return;
          node.updateChecked();
        });
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);
        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }
        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;
        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }
        updateNodeModel(model, this);
        return model;
      }
    }]);
  }();

  function ownKeys$1s(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1s(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1s(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);
      var config = _objectSpread$1s({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        draggable: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        allowFoldNodeOnFilter: false,
        onLoad: null,
        onReflow: null,
        onUpdate: null
      }, options);
      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.privateMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.indeterminateMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
      this.hasFilter = isFunction$1(config.filter);
      this.emitter = mitt();
    }
    return _createClass(TreeStore, [{
      key: "setConfig",
      value: function setConfig(options) {
        var config = this.config;
        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];
          if (val !== config[key]) {
            hasChanged = true;
            config[key] = val;
          }
        });
        this.hasFilter = isFunction$1(config.filter);
        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;
        if (isString(item) || isNumber(item)) {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }
        if (!node) node = null;
        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);
        if (node) {
          parent = node.getParent();
        }
        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];
        if (node) {
          parents = node.getParents();
        }
        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;
        if (node) {
          index = node.getIndex();
        }
        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";
        if (isString(item) || isNumber(item)) {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }
        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);
          if (node) {
            nodes = node.walk();
          }
        }
        if (options) {
          var conf = _objectSpread$1s({
            filter: null,
            level: Infinity
          }, options);
          if (isNumber(conf.level) && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }
          if (isFunction$1(conf.filter)) {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }
          if (isPlainObject(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }
        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this = this;
        list.forEach(function (item) {
          var node = new TreeNode(_this, item);
          _this.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;
        if (isString(para) || isNumber(para)) {
          value = para;
          node = this.getNode(value);
          data = item;
        } else if (para instanceof TreeNode) {
          if (item) {
            node = para;
            data = item;
          } else {
            data = para;
          }
        } else {
          data = para;
        }
        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);
        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (isArray$1(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }
            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);
        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);
        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
          nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodeMap = this.nodeMap;
        nodeMap.forEach(function (node) {
          node.update();
          node.updateChecked("refresh");
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this2 = this;
        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }
        if (this.updateTimer) return;
        this.updateTimer = setTimeout(function () {
          clearTimeout(_this2.updateTimer);
          _this2.updateTimer = null;
          if (_this2.shouldReflow) {
            _this2.refreshNodes();
            _this2.emit("reflow");
          }
          _this2.lockFilterPathNodes();
          var updatedList = Array.from(_this2.updatedMap.keys());
          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this2.getNode(value);
            });
            _this2.emit("update", {
              nodes: updatedNodes,
              map: _this2.updatedMap
            });
          } else if (_this2.shouldReflow) {
            _this2.emit("update", {
              nodes: [],
              map: _this2.updatedMap
            });
          }
          _this2.shouldReflow = false;
          _this2.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "replaceIndeterminate",
      value: function replaceIndeterminate(list) {
        this.setIndeterminate(list);
      }
    }, {
      key: "setIndeterminate",
      value: function setIndeterminate(indeterminate) {
        var _this3 = this;
        indeterminate.forEach(function (val) {
          _this3.indeterminateMap.set(val, true);
          var node = _this3.getNode(val);
          if (node) {
            node.setIndeterminate(true);
            node.update();
          }
        });
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;
        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);
        if (!activeMultiple) {
          list.length = 1;
        }
        list.forEach(function (val) {
          _this4.activedMap.set(val, true);
          var node = _this4.getNode(val);
          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference$1(list, expanded);
        var removed = difference$1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;
        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          var node = _this5.getNode(val);
          if (!(node !== null && node !== void 0 && node.isLeaf()) && expanded) {
            _this5.expandedMap.set(val, true);
          } else {
            _this5.expandedMap["delete"](val);
          }
          node === null || node === void 0 || node.afterExpanded();
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodeMap = this.nodeMap,
          config = this.config;
        var valueMode = config.valueMode,
          checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodeMap.forEach(function (node) {
          if (!node.isChecked(checkedMap)) return;
          if (valueMode === "parentFirst" && !checkStrictly) {
            if (!node.parent || !node.parent.isChecked(checkedMap)) {
              list.push(node.value);
            }
          } else if (valueMode === "onlyLeaf" && !checkStrictly) {
            if (node.isLeaf()) {
              list.push(node.value);
            }
          } else {
            list.push(node.value);
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list) {
        var _this6 = this;
        var _this$config = this.config,
          checkStrictly = _this$config.checkStrictly,
          checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);
          if (!node) return;
          if (checkStrictly) {
            _this6.checkedMap.set(val, true);
            node.updateChecked();
          } else {
            var childrenNodes = node.walk();
            childrenNodes.forEach(function (childNode) {
              _this6.checkedMap.set(childNode.value, true);
            });
          }
        });
        if (!checkStrictly) {
          var checkedValues = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checkedValues);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        this.nodeMap.forEach(function (node) {
          node.update();
          node.updateChecked("refresh");
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);
        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;
        var conf = _objectSpread$1s({
          reverse: false,
          withParents: true
        }, options);
        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;
          var node = _this7.getNode(value);
          if (node) {
            var parents = node.getParents().reverse();
            var children = node.walk();
            var related = [];
            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }
            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        if (conf.reverse) {
          relatedNodes = relatedNodes.reverse();
        }
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config,
          emitter = this.emitter;
        var methodName = camelCase$1("on-".concat(name));
        var method = config[methodName];
        if (isFunction$1(method)) {
          method(state);
        }
        emitter.emit(name, state);
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var config = this.config;
        var allNodes = this.getNodes();
        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            if (node.vmIsLocked) {
              node.lock(false);
            }
          });
        }
        var currentFilter = config.filter;
        if (!currentFilter || !isFunction$1(currentFilter)) return;
        this.prevFilter = config.filter;
        allNodes.reverse().forEach(function (node) {
          var parent = node.getParent();
          if (!parent) return;
          if (node.vmIsRest || node.vmIsLocked) {
            if (!parent.vmIsLocked) {
              parent.lock(true);
            }
          }
        });
      }
    }]);
  }();

  var useIsFirstRender = function useIsFirstRender() {
    var isFirstRenderRef = React.useRef(true);
    if (isFirstRenderRef.current) {
      isFirstRenderRef.current = false;
      return true;
    }
    return isFirstRenderRef.current;
  };

  var useUpdateLayoutEffect = function useUpdateLayoutEffect(callback, dependency) {
    var isFirstRender = useIsFirstRender();
    useIsomorphicLayoutEffect(function () {
      if (isFirstRender) return;
      return callback();
    }, dependency);
  };

  function useStore(props, refresh) {
    var storeRef = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      filterChanged = _useState2[0],
      toggleFilterChanged = _useState2[1];
    var _useState3 = React.useState(null),
      _useState4 = _slicedToArray$1(_useState3, 2),
      prevExpanded = _useState4[0],
      changePrevExpanded = _useState4[1];
    var data = props.data,
      keys = props.keys,
      expandAll = props.expandAll,
      expandParent = props.expandParent,
      expanded = props.expanded,
      expandLevel = props.expandLevel,
      expandMutex = props.expandMutex,
      activable = props.activable,
      activeMultiple = props.activeMultiple,
      actived = props.actived,
      disabled = props.disabled,
      draggable = props.draggable,
      checkable = props.checkable,
      value = props.value,
      checkStrictly = props.checkStrictly,
      load = props.load,
      lazy = props.lazy,
      valueMode = props.valueMode,
      filter = props.filter,
      _onLoad = props.onLoad,
      indeterminate = props.indeterminate,
      setTreeIndeterminate = props.setTreeIndeterminate,
      _props$allowFoldNodeO = props.allowFoldNodeOnFilter,
      allowFoldNodeOnFilter = _props$allowFoldNodeO === void 0 ? false : _props$allowFoldNodeO;
    var preFilter = usePrevious(filter);
    React.useEffect(function () {
      if (!allowFoldNodeOnFilter) return;
      toggleFilterChanged(JSON.stringify(preFilter) !== JSON.stringify(filter));
    }, [filter, allowFoldNodeOnFilter]);
    var expandFilterPath = function expandFilterPath() {
      if (!allowFoldNodeOnFilter || !filterChanged) return;
      toggleFilterChanged(false);
      var store2 = storeRef.current;
      if (props.filter) {
        if (!prevExpanded) changePrevExpanded(store2.getExpanded());
        var pathValues = [];
        var allNodes = store2.getNodes();
        allNodes.forEach(function (node) {
          if (node.vmIsLocked) {
            pathValues.push(node.value);
          }
        });
        store2.setExpanded(pathValues);
      } else if (prevExpanded) {
        store2.replaceExpanded(prevExpanded);
        changePrevExpanded(null);
      }
    };
    var handleUpdate = usePersistFn(function () {
      expandFilterPath();
      refresh();
    });
    var getExpandedArr = function getExpandedArr(arr, store2) {
      var expandedMap = /* @__PURE__ */new Map();
      arr.forEach(function (val) {
        expandedMap.set(val, true);
        if (expandParent) {
          var node = store2.getNode(val);
          node === null || node === void 0 || node.getParents().forEach(function (tn) {
            expandedMap.set(tn.value, true);
          });
        }
      });
      return Array.from(expandedMap.keys());
    };
    var createStore = function createStore() {
      var store2 = new TreeStore({
        keys: keys,
        activable: activable,
        activeMultiple: activeMultiple,
        checkable: checkable,
        checkStrictly: checkStrictly,
        expandAll: expandAll,
        expandLevel: expandLevel,
        expandMutex: expandMutex,
        expandParent: expandParent,
        disabled: disabled,
        draggable: draggable,
        load: load,
        lazy: lazy,
        valueMode: valueMode,
        filter: filter,
        onLoad: function onLoad(info) {
          var node = info.node;
          _onLoad === null || _onLoad === void 0 || _onLoad({
            node: node.getModel()
          });
        },
        onUpdate: handleUpdate,
        allowFoldNodeOnFilter: allowFoldNodeOnFilter
      });
      var list = cloneDeep(data);
      if (!Array.isArray(list)) {
        list = [];
      }
      store2.append(list);
      store2.refreshNodes();
      if (Array.isArray(value)) {
        store2.setChecked(value);
      }
      if (Array.isArray(expanded)) {
        var expandedArr = getExpandedArr(expanded, store2);
        store2.setExpanded(expandedArr);
      }
      if (Array.isArray(actived)) {
        store2.setActived(actived);
      }
      store2.refreshNodes();
      return store2;
    };
    if (!storeRef.current) {
      storeRef.current = createStore();
    }
    var store = storeRef.current;
    useUpdateLayoutEffect(function () {
      if (data && Array.isArray(data)) {
        var expanded2 = store.getExpanded();
        var checked = store.getChecked();
        var actived2 = store.getActived();
        store.removeAll();
        store.append(data);
        store.setChecked(checked);
        store.setActived(actived2);
        store.setExpanded(expanded2);
      }
    }, [data, store]);
    useUpdateLayoutEffect(function () {
      store.setConfig({
        keys: keys,
        expandAll: expandAll,
        expandLevel: expandLevel,
        expandMutex: expandMutex,
        expandParent: expandParent,
        activable: activable,
        activeMultiple: activeMultiple,
        disabled: disabled,
        checkable: checkable,
        draggable: draggable,
        checkStrictly: checkStrictly,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      });
      store.refreshState();
    }, [activable, activeMultiple, checkStrictly, draggable, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
    useUpdateLayoutEffect(function () {
      if (expandAll) {
        var valueList = store.getNodes().filter(function (node) {
          return Array.isArray(node.children) && node.children.length;
        }).map(function (node) {
          return node.value;
        });
        store.setExpanded(valueList);
      } else {
        store.replaceExpanded(prevExpanded);
        changePrevExpanded(null);
      }
    }, [store, expandAll]);
    useUpdateLayoutEffect(function () {
      if (Array.isArray(value)) {
        store.replaceChecked(value);
        var checkedValue = store.getCheckedNodes().map(function (v) {
          return v.data[(keys === null || keys === void 0 ? void 0 : keys.value) || "value"];
        });
        var indeterminateConflict = checkedValue.filter(function (v) {
          return indeterminate.includes(v);
        });
        if (indeterminateConflict.length) {
          setTreeIndeterminate(indeterminate.filter(function (v) {
            return !indeterminateConflict.includes(v);
          }));
        }
      }
    }, [store, value, data]);
    useUpdateLayoutEffect(function () {
      if (Array.isArray(expanded)) {
        var expandedArr = getExpandedArr(expanded, store);
        store.replaceExpanded(expandedArr);
      }
    }, [expanded, store]);
    useUpdateLayoutEffect(function () {
      if (Array.isArray(actived)) {
        store.replaceActived(actived);
      }
    }, [actived, store]);
    useUpdateLayoutEffect(function () {
      if (Array.isArray(indeterminate)) {
        store.replaceIndeterminate(indeterminate);
      }
    }, [indeterminate, store, data]);
    useUpdateLayoutEffect(function () {
      store.setConfig({
        filter: filter
      });
      store.updateAll();
    }, [filter, store]);
    return storeRef.current;
  }

  function useTreeVirtualScroll(_ref) {
    var treeRef = _ref.treeRef,
      scroll = _ref.scroll,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      onScroll = _ref.onScroll;
    var scrollThreshold = (scroll === null || scroll === void 0 ? void 0 : scroll.threshold) || 100;
    var scrollType = scroll === null || scroll === void 0 ? void 0 : scroll.type;
    var isVirtual = React.useMemo(function () {
      return scrollType === "virtual" && (data === null || data === void 0 ? void 0 : data.length) > scrollThreshold;
    }, [scrollType, scrollThreshold, data]);
    var scrollParams = React.useMemo(function () {
      return {
        type: "virtual",
        isFixedRowHeight: (scroll === null || scroll === void 0 ? void 0 : scroll.isFixedRowHeight) || false,
        rowHeight: (scroll === null || scroll === void 0 ? void 0 : scroll.rowHeight) || 34,
        bufferSize: (scroll === null || scroll === void 0 ? void 0 : scroll.bufferSize) || 20,
        threshold: scrollThreshold
      };
    }, [scroll, scrollThreshold]);
    var _useVirtualScroll = useVirtualScroll(treeRef, {
        data: data || [],
        scroll: scrollParams
      }),
      _useVirtualScroll$vis = _useVirtualScroll.visibleData,
      visibleData = _useVirtualScroll$vis === void 0 ? null : _useVirtualScroll$vis,
      _useVirtualScroll$han = _useVirtualScroll.handleScroll,
      handleVirtualScroll = _useVirtualScroll$han === void 0 ? null : _useVirtualScroll$han,
      _useVirtualScroll$scr = _useVirtualScroll.scrollHeight,
      scrollHeight = _useVirtualScroll$scr === void 0 ? null : _useVirtualScroll$scr,
      _useVirtualScroll$tra = _useVirtualScroll.translateY,
      translateY = _useVirtualScroll$tra === void 0 ? null : _useVirtualScroll$tra,
      _useVirtualScroll$han2 = _useVirtualScroll.handleRowMounted,
      handleRowMounted = _useVirtualScroll$han2 === void 0 ? null : _useVirtualScroll$han2,
      scrollToElement = _useVirtualScroll.scrollToElement;
    var lastScrollY = -1;
    var onInnerVirtualScroll = useEventCallback(function (e) {
      onScroll === null || onScroll === void 0 || onScroll({
        e: e
      });
      if (!isVirtual) {
        return;
      }
      var target = e.target;
      var top = target.scrollTop;
      if (lastScrollY !== top) {
        handleVirtualScroll();
      } else {
        lastScrollY = -1;
      }
      lastScrollY = top;
    });
    React.useEffect(function () {
      var _treeList$addEventLis;
      var treeList = treeRef === null || treeRef === void 0 ? void 0 : treeRef.current;
      treeList === null || treeList === void 0 || (_treeList$addEventLis = treeList.addEventListener) === null || _treeList$addEventLis === void 0 || _treeList$addEventLis.call(treeList, "scroll", onInnerVirtualScroll);
      return function () {
        var _treeList$removeEvent;
        treeList === null || treeList === void 0 || (_treeList$removeEvent = treeList.removeEventListener) === null || _treeList$removeEvent === void 0 || _treeList$removeEvent.call(treeList, "scroll", onInnerVirtualScroll);
      };
    }, [treeRef, onInnerVirtualScroll]);
    var cursorStyle = {
      position: "absolute",
      width: "1px",
      height: "1px",
      transition: "transform 0.2s",
      transform: "translate(0, ".concat(scrollHeight, "px)"),
      MsTransform: "translate(0, ".concat(scrollHeight, "px)"),
      MozTransform: "translate(0, ".concat(scrollHeight, "px)"),
      WebkitTransform: "translate(0, ".concat(scrollHeight, "px)")
    };
    var treeNodeStyle = {
      transform: "translate(0, ".concat(translateY, "px)"),
      MsTransform: "translate(0, ".concat(translateY, "px)"),
      MozTransform: "translate(0, ".concat(translateY, "px)"),
      WebkitTransform: "translate(0, ".concat(translateY, "px)")
    };
    return {
      scrollHeight: scrollHeight,
      translateY: translateY,
      visibleData: visibleData,
      handleRowMounted: handleRowMounted,
      isVirtual: isVirtual,
      cursorStyle: cursorStyle,
      treeNodeStyle: treeNodeStyle,
      scrollToElement: scrollToElement
    };
  }

  var treeDefaultProps = {
    activable: false,
    activeMultiple: false,
    allowFoldNodeOnFilter: false,
    checkStrictly: false,
    checkable: false,
    data: [],
    disableCheck: false,
    empty: "",
    expandAll: false,
    expandLevel: 0,
    expandMutex: false,
    expandOnClickNode: false,
    expandParent: false,
    expanded: [],
    icon: true,
    label: true,
    lazy: true,
    line: false,
    transition: true,
    defaultValue: [],
    valueMode: "onlyLeaf"
  };

  function ownKeys$1r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1r(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Tree$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useTreeConfig = useTreeConfig(),
      treeClassNames = _useTreeConfig.treeClassNames,
      transitionNames = _useTreeConfig.transitionNames,
      transitionClassNames = _useTreeConfig.transitionClassNames,
      transitionDuration = _useTreeConfig.transitionDuration,
      locale = _useTreeConfig.locale;
    var _useControllable = useControllable(originalProps),
      value = _useControllable.value,
      onChange = _useControllable.onChange,
      expanded = _useControllable.expanded,
      onExpand = _useControllable.onExpand,
      onActive = _useControllable.onActive,
      actived = _useControllable.actived,
      setTreeIndeterminate = _useControllable.setTreeIndeterminate,
      indeterminate = _useControllable.indeterminate;
    var props = useDefaultProps(originalProps, treeDefaultProps);
    var empty = props.empty,
      activable = props.activable,
      disabled = props.disabled,
      checkable = props.checkable,
      checkProps = props.checkProps,
      disableCheck = props.disableCheck,
      hover = props.hover,
      icon = props.icon,
      line = props.line,
      label = props.label,
      operations = props.operations,
      transition = props.transition,
      expandOnClickNode = props.expandOnClickNode,
      onClick = props.onClick,
      scroll = props.scroll,
      className = props.className,
      style = props.style,
      allowDrop = props.allowDrop,
      onScroll = props.onScroll;
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      visibleNodes = _useState2[0],
      setVisibleNodes = _useState2[1];
    var emptyText = empty || locale("empty");
    var store = useStore(_objectSpread$1r(_objectSpread$1r({}, props), {}, {
      value: value,
      onChange: onChange,
      expanded: expanded,
      onExpand: onExpand,
      onActive: onActive,
      actived: actived,
      indeterminate: indeterminate,
      setTreeIndeterminate: setTreeIndeterminate
    }), initial);
    function initial() {
      var nodes = store === null || store === void 0 ? void 0 : store.getNodes();
      var newVisibleNodes = nodes === null || nodes === void 0 ? void 0 : nodes.filter(function (node) {
        return node.visible;
      });
      setVisibleNodes(newVisibleNodes);
    }
    var setExpanded = usePersistFn(function (node, isExpanded, ctx) {
      var e = ctx.e,
        trigger = ctx.trigger;
      var expanded2 = node.setExpanded(isExpanded);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      (e || trigger) && (onExpand === null || onExpand === void 0 ? void 0 : onExpand(expanded2, {
        node: treeNodeModel,
        e: e,
        trigger: trigger
      }));
      return expanded2;
    });
    var setIndeterminate = usePersistFn(function (node, isIndeterminate, ctx) {
      ctx.e;
        ctx.trigger;
      var indeterminate2 = node.setIndeterminate(isIndeterminate);
      return indeterminate2;
    });
    var treeRef = React.useRef(null);
    var _useTreeVirtualScroll = useTreeVirtualScroll({
        treeRef: treeRef,
        scroll: scroll,
        data: visibleNodes,
        onScroll: onScroll
      }),
      visibleData = _useTreeVirtualScroll.visibleData,
      isVirtual = _useTreeVirtualScroll.isVirtual,
      virtualTreeNodeStyle = _useTreeVirtualScroll.treeNodeStyle,
      cursorStyle = _useTreeVirtualScroll.cursorStyle,
      handleRowMounted = _useTreeVirtualScroll.handleRowMounted,
      scrollToElement = _useTreeVirtualScroll.scrollToElement;
    var setActived = usePersistFn(function (node, isActived, ctx) {
      var actived2 = node.setActived(isActived);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onActive === null || onActive === void 0 || onActive(actived2, _objectSpread$1r({
        node: treeNodeModel
      }, ctx));
      return actived2;
    });
    var setChecked = usePersistFn(function (node, isChecked, ctx) {
      var checked = node.setChecked(isChecked);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onChange === null || onChange === void 0 || onChange(checked, _objectSpread$1r({
        node: treeNodeModel
      }, ctx));
      return checked;
    });
    var handleItemClick = function handleItemClick(node, options) {
      if (!node) {
        return;
      }
      var isDisabled = disabled || node.disabled;
      var expand = options.expand,
        active = options.active,
        e = options.e,
        trigger = options.trigger;
      if (expand) setExpanded(node, !node.isExpanded(), {
        e: e,
        trigger: trigger
      });
      if (!isDisabled) {
        var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
        if (active) {
          setActived(node, !node.isActived(), {
            e: e,
            trigger: "node-click"
          });
          onClick === null || onClick === void 0 || onClick({
            node: treeNodeModel,
            e: e
          });
        } else {
          onClick === null || onClick === void 0 || onClick({
            node: treeNodeModel,
            e: e
          });
        }
      }
    };
    var handleChange = function handleChange(node, ctx) {
      if (!node || disabled || node.disabled) {
        return;
      }
      setChecked(node, !node.isChecked(), _objectSpread$1r(_objectSpread$1r({}, ctx), {}, {
        trigger: "node-click"
      }));
    };
    var handleScrollToElement = React.useCallback(function (params) {
      var index = params.index;
      if (!index && index !== 0) {
        if (!params.key) {
          log.error("Tree", "scrollToElement: one of `index` or `key` must exist.");
          return;
        }
        var data = visibleNodes;
        index = data === null || data === void 0 ? void 0 : data.findIndex(function (item) {
          return [get(item.data, "key"), get(item.data, "value")].includes(params.key);
        });
        if (index < 0) {
          log.error("Tree", "".concat(params.key, " does not exist in data, check `key` or `data` please."));
        }
      }
      scrollToElement(_objectSpread$1r(_objectSpread$1r({}, params), {}, {
        index: index
      }));
    }, [scrollToElement, visibleNodes]);
    React.useImperativeHandle(ref, function () {
      return {
        store: store,
        scrollTo: function scrollTo(p) {
          return handleScrollToElement(p);
        },
        appendTo: function appendTo(value2, newData) {
          var list = [];
          if (Array.isArray(newData)) {
            list = newData;
          } else {
            list = [newData];
          }
          list.forEach(function (item) {
            store.appendNodes(value2, item);
          });
        },
        getIndex: function getIndex(value2) {
          return store.getNodeIndex(value2);
        },
        getItem: function getItem(value2) {
          var node = store.getNode(value2);
          return node === null || node === void 0 ? void 0 : node.getModel();
        },
        getItems: function getItems(value2) {
          var nodes = store.getNodes(value2);
          return nodes.map(function (node) {
            return node.getModel();
          });
        },
        getParent: function getParent(value2) {
          var node = store.getParent(value2);
          return node === null || node === void 0 ? void 0 : node.getModel();
        },
        getParents: function getParents(value2) {
          var nodes = store.getParents(value2);
          return nodes.map(function (node) {
            return node.getModel();
          });
        },
        getPath: function getPath(value2) {
          var node = store.getNode(value2);
          var pathNodes = [];
          if (node) {
            pathNodes = node.getPath().map(function (node2) {
              return node2.getModel();
            });
          }
          return pathNodes;
        },
        insertAfter: function insertAfter(value2, newData) {
          return store.insertAfter(value2, newData);
        },
        insertBefore: function insertBefore(value2, newData) {
          return store.insertBefore(value2, newData);
        },
        remove: function remove(value2) {
          return store.remove(value2);
        },
        setItem: function setItem(value2, options) {
          var node = this.store.getNode(value2);
          var spec = options;
          if (node && spec) {
            if ("expanded" in options) {
              setExpanded(node, spec.expanded, {
                trigger: "setItem"
              });
              delete spec.expanded;
            }
            if ("actived" in options) {
              setActived(node, spec.actived, {
                trigger: "setItem"
              });
              delete spec.actived;
            }
            if ("checked" in options) {
              setChecked(node, spec.checked, {
                trigger: "setItem"
              });
              delete spec.checked;
            }
            if ("indeterminate" in options) {
              setTreeIndeterminate(function (prevIndeterminate) {
                return [].concat(_toConsumableArray(prevIndeterminate), [value2]);
              });
              setIndeterminate(node, spec.indeterminate, {
                trigger: "setItem"
              });
              delete spec.indeterminate;
            }
            node.set(spec);
          }
        }
      };
    }, [store, setExpanded, setActived, setTreeIndeterminate, setChecked, setIndeterminate, handleScrollToElement]);
    var nodeList = React.useMemo(function () {
      return visibleNodes.map(function () {
        return /*#__PURE__*/React__default["default"].createRef();
      });
    }, [visibleNodes]);
    var renderEmpty = function renderEmpty() {
      return parseTNode(emptyText);
    };
    var renderItems = function renderItems(renderNode) {
      if (renderNode.length <= 0) {
        return renderEmpty();
      }
      if (isVirtual) return /* @__PURE__ */React__default["default"].createElement("div", {
        className: treeClassNames.treeList,
        style: virtualTreeNodeStyle
      }, renderNode.map(function (node, index) {
        return /* @__PURE__ */React__default["default"].createElement(TreeItem, {
          ref: nodeList[index],
          key: node.value,
          node: node,
          keys: props.keys,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          allowDrop: allowDrop,
          transition: transition,
          expandOnClickNode: expandOnClickNode,
          activable: activable,
          operations: operations,
          checkProps: checkProps,
          disableCheck: disableCheck,
          onClick: handleItemClick,
          onChange: handleChange,
          onTreeItemMounted: handleRowMounted,
          isVirtual: isVirtual
        });
      }));
      return /* @__PURE__ */React__default["default"].createElement(TransitionGroup$1, {
        name: transitionNames.treeNode,
        className: treeClassNames.treeList
      }, renderNode.map(function (node, index) {
        return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
          nodeRef: nodeList[index],
          key: node.value,
          timeout: transitionDuration,
          classNames: transitionClassNames
        }, /* @__PURE__ */React__default["default"].createElement(TreeItem, {
          ref: nodeList[index],
          node: node,
          keys: props.keys,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          allowDrop: allowDrop,
          transition: transition,
          expandOnClickNode: expandOnClickNode,
          activable: activable,
          operations: operations,
          checkProps: checkProps,
          disableCheck: disableCheck,
          onClick: handleItemClick,
          onChange: handleChange
        }));
      }));
    };
    var draggable = React.useMemo(function () {
      return {
        props: props,
        store: store
      };
    }, [props, store]);
    return /* @__PURE__ */React__default["default"].createElement(TreeDraggableContext.Provider, {
      value: draggable
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(treeClassNames.tree, className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, treeClassNames.disabled, disabled), treeClassNames.treeHoverable, hover), treeClassNames.treeCheckable, checkable), treeClassNames.treeFx, transition), treeClassNames.treeBlockNode, expandOnClickNode), treeClassNames.treeVscroll, props.scroll)),
      style: style,
      ref: treeRef
    }, isVirtual ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: treeClassNames.treeVscrollCursor,
      style: cursorStyle
    }), renderItems(visibleData)) : renderItems(visibleNodes)));
  });
  Tree$1.displayName = "Tree";

  var Tree = Tree$1;

  var treeSelectDefaultProps = {
    autoWidth: false,
    autofocus: false,
    borderless: false,
    clearable: false,
    data: [],
    filterable: false,
    loading: false,
    max: 0,
    minCollapsedNum: 0,
    multiple: false,
    placeholder: void 0,
    defaultPopupVisible: void 0,
    readonly: false,
    reserveKeyword: false,
    size: "medium",
    status: "default",
    valueType: "value"
  };

  function ownKeys$1q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useTreeSelectUtils = function useTreeSelectUtils(_ref, treeRef) {
    var data = _ref.data,
      treeProps = _ref.treeProps,
      valueType = _ref.valueType;
    var defaultStore = React.useMemo(function () {
      var store = new TreeStore(_objectSpread$1q(_objectSpread$1q({}, treeSelectDefaultProps.treeProps), treeProps));
      store.append(data);
      return store;
    }, [data, treeProps]);
    var getNodeItem = usePersistFn(function (value) {
      var _defaultStore$getNode;
      if (treeRef.current) {
        return treeRef.current.getItem(value);
      }
      return (_defaultStore$getNode = defaultStore.getNode(value)) === null || _defaultStore$getNode === void 0 ? void 0 : _defaultStore$getNode.getModel();
    });
    var formatValue = usePersistFn(function (value) {
      var _treeProps$keys$value, _treeProps$keys, _treeProps$keys$label, _treeProps$keys2;
      var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(value);
      var valueKey = (_treeProps$keys$value = treeProps === null || treeProps === void 0 || (_treeProps$keys = treeProps.keys) === null || _treeProps$keys === void 0 ? void 0 : _treeProps$keys.value) !== null && _treeProps$keys$value !== void 0 ? _treeProps$keys$value : "value";
      var labelKey = (_treeProps$keys$label = treeProps === null || treeProps === void 0 || (_treeProps$keys2 = treeProps.keys) === null || _treeProps$keys2 === void 0 ? void 0 : _treeProps$keys2.label) !== null && _treeProps$keys$label !== void 0 ? _treeProps$keys$label : "label";
      return value && valueType === "object" ? _defineProperty$2(_defineProperty$2({}, valueKey, value), labelKey, label) : value;
    });
    var normalizeValue = usePersistFn(function (value) {
      var _treeProps$keys$value2, _treeProps$keys3, _treeProps$keys$label2, _treeProps$keys4, _ref3, _node$label;
      var valueKey = (_treeProps$keys$value2 = treeProps === null || treeProps === void 0 || (_treeProps$keys3 = treeProps.keys) === null || _treeProps$keys3 === void 0 ? void 0 : _treeProps$keys3.value) !== null && _treeProps$keys$value2 !== void 0 ? _treeProps$keys$value2 : "value";
      var labelKey = (_treeProps$keys$label2 = treeProps === null || treeProps === void 0 || (_treeProps$keys4 = treeProps.keys) === null || _treeProps$keys4 === void 0 ? void 0 : _treeProps$keys4.label) !== null && _treeProps$keys$label2 !== void 0 ? _treeProps$keys$label2 : "label";
      var realValue = valueType === "value" ? value : value === null || value === void 0 ? void 0 : value[valueKey];
      var node = getNodeItem(realValue);
      var realLabel = valueType === "object" ? value === null || value === void 0 ? void 0 : value[labelKey] : void 0;
      return {
        value: realValue,
        label: (_ref3 = (_node$label = node === null || node === void 0 ? void 0 : node.label) !== null && _node$label !== void 0 ? _node$label : realLabel) !== null && _ref3 !== void 0 ? _ref3 : String(realValue)
      };
    });
    return {
      getNodeItem: getNodeItem,
      formatValue: formatValue,
      normalizeValue: normalizeValue
    };
  };

  var SelectArrow = function SelectArrow(_ref) {
    var isActive = _ref.isActive,
      isHighlight = _ref.isHighlight,
      disabled = _ref.disabled;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      isActive: isActive,
      disabled: disabled,
      className: classNames$1(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-fake-arrow--highlight"), isHighlight), "".concat(classPrefix, "-fake-arrow--disable"), disabled))
    });
  };

  function ownKeys$1p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1p(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SelectInputPassthroughPropsKey = ["multiple", "style", "disabled", "minCollapsedNum", "popupProps", "clearable", "loading", "autoWidth", "borderless", "readonly"];
  var useTreeSelectPassThroughProps = function useTreeSelectPassThroughProps(props) {
    var _props$popupProps;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return _objectSpread$1p(_objectSpread$1p({}, pick$1(props, SelectInputPassthroughPropsKey)), {}, {
      popupProps: _objectSpread$1p(_objectSpread$1p({}, props.popupProps), {}, {
        overlayClassName: classNames$1(props === null || props === void 0 || (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayClassName, "".concat(classPrefix, "-tree-select-popup"))
      })
    });
  };

  var useTreeSelectLocale = function useTreeSelectLocale(props) {
    var _props$empty, _props$loadingText, _props$placeholder;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("treeSelect"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var emptyText = t(local.empty);
    var placeholderText = t(local.placeholder);
    var loadingTextLabel = t(local.loadingText);
    return {
      empty: (_props$empty = props.empty) !== null && _props$empty !== void 0 ? _props$empty : /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, emptyText),
      loadingItem: /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-select__loading-tips")
      }, (_props$loadingText = props.loadingText) !== null && _props$loadingText !== void 0 ? _props$loadingText : /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, loadingTextLabel)),
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : placeholderText
    };
  };

  function ownKeys$1o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1o(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useMergeFn = function useMergeFn() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return usePersistFn(function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return fns.forEach(function (fn) {
        return fn === null || fn === void 0 ? void 0 : fn.apply(void 0, args);
      });
    });
  };
  var TreeSelect$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, treeSelectDefaultProps);
    var _useTreeSelectLocale = useTreeSelectLocale(props),
      placeholder = _useTreeSelectLocale.placeholder,
      empty = _useTreeSelectLocale.empty,
      loadingItem = _useTreeSelectLocale.loadingItem;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var className = props.className,
      onInputChange = props.onInputChange,
      readonly = props.readonly,
      disabled = props.disabled,
      multiple = props.multiple,
      prefixIcon = props.prefixIcon,
      label = props.label,
      loading = props.loading,
      size = props.size,
      max = props.max,
      data = props.data,
      panelTopContent = props.panelTopContent,
      panelBottomContent = props.panelBottomContent,
      rawFilter = props.filter,
      rawFilterable = props.filterable,
      onClear = props.onClear,
      valueDisplay = props.valueDisplay,
      treeProps = props.treeProps,
      inputProps = props.inputProps,
      valueType = props.valueType,
      collapsedItems = props.collapsedItems,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      onSearch = props.onSearch,
      onRemove = props.onRemove,
      onEnter = props.onEnter;
    var selectInputProps = useTreeSelectPassThroughProps(props);
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      popupVisible = _useControlled4[0],
      setPopupVisible = _useControlled4[1];
    var _useSwitch = useSwitch(),
      _useSwitch2 = _slicedToArray$1(_useSwitch, 2),
      hover = _useSwitch2[0],
      hoverAction = _useSwitch2[1];
    var _useControlled5 = useControlled(props, "inputValue", onInputChange),
      _useControlled6 = _slicedToArray$1(_useControlled5, 2),
      filterInput = _useControlled6[0],
      setFilterInput = _useControlled6[1];
    var treeRef = React.useRef(null);
    var selectInputRef = React.useRef(null);
    var tKeys = React.useMemo(function () {
      return _objectSpread$1o({
        value: "value",
        label: "label",
        children: "children"
      }, props.keys);
    }, [props.keys]);
    var passThroughDefaultStore = React.useMemo(function () {
      return {
        data: data,
        treeProps: _objectSpread$1o({
          keys: tKeys
        }, treeProps),
        valueType: valueType
      };
    }, [tKeys, data, treeProps, valueType]);
    var _useTreeSelectUtils = useTreeSelectUtils(passThroughDefaultStore, treeRef),
      normalizeValue = _useTreeSelectUtils.normalizeValue,
      formatValue = _useTreeSelectUtils.formatValue,
      getNodeItem = _useTreeSelectUtils.getNodeItem;
    React.useImperativeHandle(ref, function () {
      return _objectSpread$1o(_objectSpread$1o({}, selectInputRef.current || {}), treeRef.current || {});
    });
    var defaultFilter = function defaultFilter(text, option) {
      if (!text) return true;
      if (!option.label && !option.value) return false;
      if (option.label && typeof option.label === "string") {
        return option.label.includes(text);
      }
      if (option.data.text && typeof option.data.text === "string") {
        return option.data.text.includes(text);
      }
      return true;
    };
    var filter = onSearch ? void 0 : rawFilter || defaultFilter;
    var filterable = rawFilterable || !!props.filter;
    var normalizedValue = React.useMemo(function () {
      var calcValue = Array.isArray(value) ? value : [value];
      return calcValue.reduce(function (result, value2) {
        var normalized = normalizeValue(value2);
        typeof normalized.value !== "undefined" && result.push(normalized);
        return result;
      }, []);
    }, [normalizeValue, value, data]);
    var internalInputValue = React.useMemo(function () {
      if (multiple) return normalizedValue;
      return filterable && popupVisible ? filterInput : normalizedValue[0] || "";
    }, [multiple, normalizedValue, filterable, popupVisible, filterInput]);
    var normalizedValueDisplay = React.useMemo(function () {
      if (!valueDisplay) {
        return;
      }
      if (multiple) {
        return function (_ref) {
          var onClose = _ref.onClose;
          return isFunction$1(valueDisplay) ? valueDisplay({
            value: normalizedValue,
            onClose: onClose
          }) : valueDisplay;
        };
      }
      var displayNode = isFunction$1(valueDisplay) ? valueDisplay({
        value: normalizedValue[0],
        onClose: noop
      }) : valueDisplay;
      return normalizedValue.length ? displayNode : "";
    }, [valueDisplay, multiple, normalizedValue]);
    var internalInputValueDisplay = React.useMemo(function () {
      if (filterable && !multiple && popupVisible) {
        return void 0;
      }
      return normalizedValueDisplay;
    }, [filterable, popupVisible, multiple, normalizedValueDisplay]);
    var inputPlaceholder = React.useMemo(function () {
      if (filterable && !multiple && popupVisible && normalizedValue.length) {
        var valueDisplayPlaceholder = normalizedValueDisplay;
        if (typeof valueDisplayPlaceholder === "string") {
          return valueDisplayPlaceholder;
        }
        return typeof normalizedValue[0].label === "string" ? normalizedValue[0].label : String(normalizedValue[0].value);
      }
      return placeholder;
    }, [filterable, multiple, popupVisible, normalizedValue, placeholder, normalizedValueDisplay]);
    var showLoading = !disabled && loading;
    var handleFilter = React.useCallback(function (node) {
      return filterable && filter ? filter(filterInput, node) : true;
    }, [filter, filterInput, filterable]);
    var handleSingleChange = usePersistFn(function (value2, context) {
      var $value = Array.isArray(value2) && value2.length ? value2[0] : void 0;
      if ($value) {
        onChange(formatValue($value, context.node.label), _objectSpread$1o(_objectSpread$1o({}, context), {}, {
          data: context.node.data,
          trigger: "check"
        }));
      }
      setPopupVisible(false, _objectSpread$1o(_objectSpread$1o({}, context), {}, {
        trigger: "trigger-element-click"
      }));
    });
    var handleMultiChange = usePersistFn(function (value2, context) {
      if (max === 0 || value2.length <= max) {
        onChange(value2.map(function (value3) {
          var _getNodeItem;
          return formatValue(value3, (_getNodeItem = getNodeItem(value3)) === null || _getNodeItem === void 0 ? void 0 : _getNodeItem.label);
        }), _objectSpread$1o(_objectSpread$1o({}, context), {}, {
          data: context.node.data,
          trigger: value2.length > normalizedValue.length ? "check" : "uncheck"
        }));
      }
    });
    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, ctx) {
      setPopupVisible(visible, {
        e: ctx.e
      });
    };
    var handleClear = usePersistFn(function (ctx) {
      ctx.e.stopPropagation();
      onChange(multiple ? [] : formatValue(void 0), {
        node: null,
        data: null,
        trigger: "clear",
        e: ctx.e
      });
      onClear === null || onClear === void 0 || onClear(ctx);
      setPopupVisible(false, {
        trigger: "clear"
      });
    });
    var handleTagChange = usePersistFn(function (tags, ctx) {
      if (ctx.trigger === "tag-remove" || ctx.trigger === "backspace") {
        var index = ctx.index,
          e = ctx.e,
          trigger = ctx.trigger;
        var node = getNodeItem(normalizedValue[index].value);
        onChange(normalizedValue.filter(function (value2, i) {
          return i !== index;
        }).map(function (_ref2) {
          var value2 = _ref2.value,
            label2 = _ref2.label;
          return formatValue(value2, label2);
        }), {
          node: node,
          data: node.data,
          trigger: trigger,
          e: e
        });
        onRemove === null || onRemove === void 0 || onRemove({
          value: node.value,
          node: node,
          index: index,
          data: _objectSpread$1o({
            value: node.value,
            label: node.label
          }, node.data),
          e: e,
          trigger: trigger
        });
      }
    });
    var getTreeSelectEventValue = function getTreeSelectEventValue() {
      var selectedOptions = Array.isArray(normalizedValue) ? normalizedValue : [normalizedValue];
      var value2 = selectedOptions.map(function (item) {
        return valueType === "object" ? item : item[tKeys.value];
      });
      return multiple ? value2 : value2[0];
    };
    var handleBlur = usePersistFn(function (_, ctx) {
      onBlur === null || onBlur === void 0 || onBlur(_objectSpread$1o({
        value: getTreeSelectEventValue()
      }, ctx));
    });
    var handleFocus = usePersistFn(function (_, ctx) {
      onFocus === null || onFocus === void 0 || onFocus({
        value: getTreeSelectEventValue(),
        e: ctx.e
      });
    });
    var handleEnter = usePersistFn(function (_, ctx) {
      onSearch === null || onSearch === void 0 || onSearch(ctx.inputValue, {
        e: ctx.e
      });
      onEnter === null || onEnter === void 0 || onEnter({
        inputValue: ctx.inputValue,
        e: ctx.e,
        value: getTreeSelectEventValue()
      });
    });
    var handleFilterChange = usePersistFn(function (value2, ctx) {
      if (ctx.trigger === "clear") return;
      setFilterInput(value2, ctx);
      onSearch === null || onSearch === void 0 || onSearch(value2, {
        e: ctx.e
      });
    });
    var renderTree = function renderTree() {
      if (readonly) return empty;
      if (showLoading) return loadingItem;
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, panelTopContent, /* @__PURE__ */React__default["default"].createElement(Tree, _objectSpread$1o(_objectSpread$1o({
        ref: treeRef,
        hover: true,
        transition: true,
        filter: filterInput ? handleFilter : null,
        data: data,
        disabled: disabled,
        empty: empty,
        expandOnClickNode: false,
        allowFoldNodeOnFilter: true,
        keys: tKeys
      }, multiple ? {
        checkable: true,
        onChange: handleMultiChange,
        value: normalizedValue.map(function (_ref3) {
          var value2 = _ref3.value;
          return value2;
        })
      } : {
        activable: true,
        actived: normalizedValue.map(function (_ref4) {
          var value2 = _ref4.value;
          return value2;
        }),
        onActive: handleSingleChange
      }), treeProps)), panelBottomContent);
    };
    return /* @__PURE__ */React__default["default"].createElement(SelectInput$1, _objectSpread$1o(_objectSpread$1o(_objectSpread$1o({
      status: props.status,
      tips: props.tips
    }, props.selectInputProps), selectInputProps), {}, {
      ref: selectInputRef,
      className: classNames$1("".concat(classPrefix, "-tree-select"), className),
      value: internalInputValue,
      inputValue: filterInput,
      panel: renderTree(),
      allowInput: filterable,
      inputProps: _objectSpread$1o(_objectSpread$1o({}, inputProps), {}, {
        size: size
      }),
      tagInputProps: {
        size: size,
        excessTagsDisplayType: "break-line",
        inputProps: inputProps,
        tagProps: props.tagProps
      },
      placeholder: inputPlaceholder,
      popupVisible: popupVisible && !disabled,
      onInputChange: handleFilterChange,
      onPopupVisibleChange: onInnerPopupVisibleChange,
      onFocus: useMergeFn(handleFocus),
      onBlur: useMergeFn(handleBlur),
      onClear: handleClear,
      onTagChange: handleTagChange,
      onEnter: handleEnter,
      onMouseenter: hoverAction.on,
      onMouseleave: hoverAction.off,
      suffixIcon: props.suffixIcon || (readonly ? null : /* @__PURE__ */React__default["default"].createElement(SelectArrow, {
        isActive: popupVisible,
        isHighlight: hover || popupVisible,
        disabled: disabled
      })),
      collapsedItems: collapsedItems,
      label: parseTNode(label || prefixIcon),
      valueDisplay: internalInputValueDisplay
    }));
  });
  TreeSelect$1.displayName = "TreeSelect";

  var TreeSelect = TreeSelect$1;

  var dividerDefaultProps = {
    align: "center",
    dashed: false,
    layout: "horizontal"
  };

  var _excluded$s = ["layout", "dashed", "align", "className", "style", "children", "content"];
  function ownKeys$1n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1n(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Divider$1 = function Divider(props) {
    var _useDefaultProps = useDefaultProps(props, dividerDefaultProps),
      layout = _useDefaultProps.layout,
      dashed = _useDefaultProps.dashed,
      align = _useDefaultProps.align,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      children = _useDefaultProps.children,
      content = _useDefaultProps.content,
      otherDividerProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$s);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var childrenNode = content || children;
    var showText = layout !== "vertical" && !!childrenNode;
    var dividerClassNames = classNames$1("".concat(classPrefix, "-divider"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-divider--").concat(layout), layout), "".concat(classPrefix, "-divider--dashed"), !!dashed), "".concat(classPrefix, "-divider--with-text"), showText), "".concat(classPrefix, "-divider--with-text-").concat(align), showText));
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1n(_objectSpread$1n({}, otherDividerProps), {}, {
      className: dividerClassNames,
      style: style
    }), showText ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-divider__inner-text")
    }, childrenNode) : null);
  };
  Divider$1.displayName = "Divider";

  var Divider = Divider$1;

  var switchDefaultProps = {
    label: [],
    loading: false,
    size: "medium"
  };

  var _excluded$r = ["className", "value", "defaultValue", "disabled", "loading", "size", "label", "customValue", "onChange", "beforeChange"];
  function ownKeys$1m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1m(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Switch$1 = /*#__PURE__*/React__default["default"].forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, switchDefaultProps);
    var className = props.className,
      value = props.value,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      loading = props.loading,
      size = props.size,
      label = props.label,
      customValue = props.customValue,
      onChange = props.onChange,
      beforeChange = props.beforeChange,
      restProps = _objectWithoutProperties$2(props, _excluded$r);
    var _ref = customValue || [],
      _ref2 = _slicedToArray$1(_ref, 2),
      _ref2$ = _ref2[0],
      activeValue = _ref2$ === void 0 ? true : _ref2$,
      _ref2$2 = _ref2[1],
      inactiveValue = _ref2$2 === void 0 ? false : _ref2$2;
    var isControlled = typeof value !== "undefined";
    var initChecked = defaultValue === activeValue || value === activeValue;
    var _useState = React.useState(initChecked),
      _useState2 = _slicedToArray$1(_useState, 2),
      innerChecked = _useState2[0],
      setInnerChecked = _useState2[1];
    var contentNode = React__default["default"].useMemo(function () {
      if (Array.isArray(label)) {
        var _label = _slicedToArray$1(label, 2),
          _label$ = _label[0],
          activeContent = _label$ === void 0 ? "" : _label$,
          _label$2 = _label[1],
          inactiveContent = _label$2 === void 0 ? "" : _label$2;
        var content = innerChecked ? activeContent : inactiveContent;
        return parseTNode(content, {
          value: value
        });
      }
      return parseTNode(label, {
        value: value
      });
    }, [label, innerChecked, value]);
    var handleChange = function handleChange(e) {
      !isControlled && setInnerChecked(!innerChecked);
      var changedValue = !innerChecked ? activeValue : inactiveValue;
      onChange === null || onChange === void 0 || onChange(changedValue, {
        e: e
      });
    };
    var onInternalClick = function onInternalClick(e) {
      if (disabled) {
        return;
      }
      if (!beforeChange) {
        handleChange(e);
        return;
      }
      Promise.resolve(beforeChange()).then(function (v) {
        if (v) {
          handleChange(e);
        }
      })["catch"](function (e2) {
        log.error("Switch", "some error occurred: ".concat(e2));
      });
    };
    React.useEffect(function () {
      if (Array.isArray(customValue) && !customValue.includes(value)) {
        log.error("Switch", "value is not in customValue: ".concat(JSON.stringify(customValue)));
      }
      isControlled && setInnerChecked(value === activeValue);
    }, [value, customValue, activeValue, isControlled]);
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE,
      STATUS = _useCommonClassName.STATUS;
    var switchClassName = classNames$1("".concat(classPrefix, "-switch"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.checked, innerChecked), STATUS.disabled, disabled), STATUS.loading, loading), SIZE[size]);
    return /* @__PURE__ */React__default["default"].createElement("button", _objectSpread$1m(_objectSpread$1m({}, restProps), {}, {
      type: "button",
      role: "switch",
      disabled: disabled || loading,
      className: switchClassName,
      ref: ref,
      onClick: onInternalClick
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-switch__handle")
    }, loading && /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true,
      size: "small"
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-switch__content")
    }, contentNode));
  });
  Switch$1.displayName = "Switch";

  var Switch = Switch$1;

  var AnchorContext = /*#__PURE__*/React.createContext({
    onClick: noop,
    activeItem: "",
    registerItem: noop,
    unregisterItem: noop
  });

  var anchorDefaultProps = {
    bounds: 5,
    container: function container() {
      return window;
    },
    size: "medium",
    targetOffset: 0
  };
  var anchorItemDefaultProps = {
    target: "_self"
  };
  var anchorTargetDefaultProps = {
    tag: "div"
  };

  var _excluded$q = ["href", "title", "target", "children", "className"];
  function ownKeys$1l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1l(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var AnchorItem = function AnchorItem(props) {
    var _useContext = React.useContext(AnchorContext),
      onClick = _useContext.onClick,
      activeItem = _useContext.activeItem,
      registerItem = _useContext.registerItem,
      unregisterItem = _useContext.unregisterItem;
    var _useDefaultProps = useDefaultProps(props, anchorItemDefaultProps),
      href = _useDefaultProps.href,
      title = _useDefaultProps.title,
      target = _useDefaultProps.target,
      children = _useDefaultProps.children,
      className = _useDefaultProps.className,
      rest = _objectWithoutProperties$2(_useDefaultProps, _excluded$q);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var titleAttr = typeof title === "string" ? title : null;
    var handleClick = function handleClick(e) {
      onClick({
        title: titleAttr,
        href: href
      }, e);
    };
    React.useEffect(function () {
      registerItem(href);
      return function () {
        return unregisterItem(href);
      };
    }, [href, registerItem, unregisterItem]);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1l(_objectSpread$1l({}, rest), {}, {
      className: classNames$1("".concat(classPrefix, "-anchor__item"), _defineProperty$2({}, "".concat(classPrefix, "-is-active"), activeItem === href), className)
    }), /* @__PURE__ */React__default["default"].createElement("a", {
      href: href,
      className: classNames$1("".concat(classPrefix, "-anchor__item-link")),
      title: titleAttr,
      target: target,
      onClick: function onClick(e) {
        return handleClick(e);
      }
    }, title), children);
  };
  AnchorItem.displayName = "AnchorItem";

  function copyText(text) {
    var _document$execCommand, _document;
    if (!canUseDocument) return;
    if ("clipboard" in navigator) {
      navigator.clipboard.writeText(text);
      return;
    }
    var textarea = document.createElement("textarea");
    textarea.textContent = text;
    textarea.style.width = "0px";
    textarea.style.height = "0px";
    document.body.appendChild(textarea);
    var selection = document.getSelection();
    var range = document.createRange();
    range.selectNode(textarea);
    selection.removeAllRanges();
    selection.addRange(range);
    (_document$execCommand = (_document = document).execCommand) === null || _document$execCommand === void 0 || _document$execCommand.call(_document, "copy");
    selection.removeAllRanges();
    document.body.removeChild(textarea);
  }

  var AnchorTarget = function AnchorTarget(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        FileCopyIcon: TdFileCopyIcon
      }),
      FileCopyIcon = _useGlobalIcon.FileCopyIcon;
    var _useDefaultProps = useDefaultProps(props, anchorTargetDefaultProps),
      id = _useDefaultProps.id,
      tag = _useDefaultProps.tag,
      children = _useDefaultProps.children,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style;
    var tagClassName = classNames$1("".concat(classPrefix, "-anchor__target"), className);
    var iconClassName = "".concat(classPrefix, "-anchor__copy");
    var handleCopyText = function handleCopyText() {
      var a = document.createElement("a");
      a.href = "#".concat(id);
      copyText(a.href);
      MessagePlugin.success("\u94FE\u63A5\u590D\u5236\u6210\u529F", 1e3);
    };
    var Content = function Content() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, children, /* @__PURE__ */React__default["default"].createElement(Popup, {
        content: "\u590D\u5236\u94FE\u63A5",
        placement: "top",
        showArrow: true
      }, /* @__PURE__ */React__default["default"].createElement(FileCopyIcon, {
        className: iconClassName,
        onClick: handleCopyText
      })));
    };
    return /*#__PURE__*/React__default["default"].createElement(tag, {
      id: id,
      className: tagClassName,
      style: style
    }, /*#__PURE__*/React__default["default"].createElement(Content));
  };
  AnchorTarget.displayName = "AnchorTarget";

  var _excluded$p = ["affixProps", "bounds", "targetOffset", "container", "size", "children", "cursor", "onClick", "onChange", "className", "getCurrentAnchor"];
  function ownKeys$1k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1k(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  var Anchor$1 = forwardRefWithStatics(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, anchorDefaultProps),
      affixProps = _useDefaultProps.affixProps,
      bounds = _useDefaultProps.bounds,
      targetOffset = _useDefaultProps.targetOffset,
      container = _useDefaultProps.container,
      size = _useDefaultProps.size,
      children = _useDefaultProps.children,
      cursor = _useDefaultProps.cursor,
      onClick = _useDefaultProps.onClick,
      onChange = _useDefaultProps.onChange,
      className = _useDefaultProps.className,
      getCurrentAnchor = _useDefaultProps.getCurrentAnchor,
      rest = _objectWithoutProperties$2(_useDefaultProps, _excluded$p);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(""),
      _useState2 = _slicedToArray$1(_useState, 2),
      activeItem = _useState2[0],
      setActiveItem = _useState2[1];
    var _useState3 = React.useState({
        top: "0px",
        height: "0px",
        opacity: 0
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      cursorStyle = _useState4[0],
      setCursorStyle = _useState4[1];
    var anchorEl = React.useRef(null);
    var intervalRef = React.useRef({
      items: [],
      scrollContainer: canUseDocument ? window : null,
      handleScrollLock: false
    });
    React.useImperativeHandle(ref, function () {
      return anchorEl.current;
    });
    var registerItem = function registerItem(href) {
      var items = intervalRef.current.items;
      if (ANCHOR_SHARP_REGEXP.test(href) && items.indexOf(href) < 0) items.push(href);
    };
    var unregisterItem = function unregisterItem(href) {
      var items = intervalRef.current.items;
      intervalRef.current.items = items.filter(function (item) {
        return href !== item;
      });
    };
    var getAnchorTarget = function getAnchorTarget(href) {
      return document.querySelector(href);
    };
    var handleScrollTo = function handleScrollTo(link) {
      var anchor = getAnchorTarget(link);
      if (!anchor) return;
      onChange === null || onChange === void 0 || onChange(link, activeItem);
      setActiveItem(link);
      intervalRef.current.handleScrollLock = true;
      var scrollContainer = intervalRef.current.scrollContainer;
      var scrollTop = getScroll(scrollContainer);
      var offsetTop = getOffsetTop(anchor, scrollContainer);
      var top = scrollTop + offsetTop - targetOffset;
      scrollTo(top, {
        container: scrollContainer
      }).then(function () {
        intervalRef.current.handleScrollLock = false;
      });
    };
    var handleClick = function handleClick(item, e) {
      onClick === null || onClick === void 0 || onClick(_objectSpread$1k({
        e: e
      }, item));
      handleScrollTo(item.href);
    };
    React.useEffect(function () {
      var _anchorEl$current$que, _anchorEl$current;
      var pointEl = (_anchorEl$current$que = (_anchorEl$current = anchorEl.current).querySelector) === null || _anchorEl$current$que === void 0 ? void 0 : _anchorEl$current$que.call(_anchorEl$current, ".".concat(classPrefix, "-is-active>a"));
      if (!pointEl) {
        setCursorStyle(null);
      } else {
        var top = pointEl.offsetTop,
          height = pointEl.offsetHeight;
        setCursorStyle({
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        });
      }
    }, [activeItem, classPrefix]);
    var handleScroll = React.useCallback(function () {
      var _intervalRef$current = intervalRef.current,
        scrollContainer = _intervalRef$current.scrollContainer,
        handleScrollLock = _intervalRef$current.handleScrollLock;
      if (handleScrollLock) return;
      var items = intervalRef.current.items;
      var filters = [];
      var active = "";
      items.forEach(function (href) {
        var anchor = getAnchorTarget(href);
        if (!anchor) return;
        var top = getOffsetTop(anchor, scrollContainer);
        if (top <= bounds + targetOffset) {
          filters.push({
            href: href,
            top: top
          });
        }
      });
      if (filters.length) {
        var latest = filters.reduce(function (prev, cur) {
          return prev.top > cur.top ? prev : cur;
        });
        active = latest.href;
      }
      if (active !== activeItem) {
        onChange === null || onChange === void 0 || onChange(active, activeItem);
        setActiveItem(active);
      }
    }, [activeItem, bounds, onChange, targetOffset]);
    React.useEffect(function () {
      intervalRef.current.scrollContainer = getScrollContainer(container);
      var scrollContainer = intervalRef.current.scrollContainer;
      handleScroll();
      scrollContainer === null || scrollContainer === void 0 || scrollContainer.addEventListener("scroll", handleScroll);
      return function () {
        scrollContainer === null || scrollContainer === void 0 || scrollContainer.removeEventListener("scroll", handleScroll);
      };
    }, [container, handleScroll]);
    var anchorClass = classNames$1("".concat(classPrefix, "-anchor"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-m"), size === "medium"), "".concat(classPrefix, "-size-l"), size === "large"), className);
    var CursorCmp = function CursorCmp() {
      if (isFunction$1(cursor)) return cursor();
      if (isEmpty(cursor)) return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-anchor__line-cursor")
      });
      return cursor;
    };
    var Cmp = /* @__PURE__ */React__default["default"].createElement(AnchorContext.Provider, {
      value: {
        onClick: handleClick,
        activeItem: (getCurrentAnchor === null || getCurrentAnchor === void 0 ? void 0 : getCurrentAnchor(activeItem)) || activeItem,
        registerItem: registerItem,
        unregisterItem: unregisterItem
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1k(_objectSpread$1k({}, rest), {}, {
      className: anchorClass,
      ref: anchorEl
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-anchor__line")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-anchor__line-cursor-wrapper"),
      style: cursorStyle
    }, CursorCmp())), children));
    return isEmpty(affixProps) ? Cmp : /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$1k({}, affixProps), Cmp);
  }, {
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget
  });
  Anchor$1.displayName = "Anchor";

  var Anchor = Anchor$1;

  function usePrefixClass() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return React.useCallback(function () {
      var className = "";
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      args.forEach(function (item, index) {
        if (item && index > 0) className = className.concat(" ");
        if (item instanceof Array) {
          var _item = _slicedToArray$1(item, 3),
            block = _item[0],
            element = _item[1],
            modifier = _item[2];
          className = className.concat(classPrefix, "-", block);
          if (element) className = className.concat("__", element);
          if (modifier) className = className.concat("--", modifier);
        } else if (typeof item === "string") {
          className = className.concat(classPrefix, "-", item);
        }
      });
      return className;
    }, [classPrefix]);
  }

  var blockName = "calendar";
  var minYear = 1970;
  var getDay = function getDay(dt) {
    var day = dayjs(dt).day();
    if (day === 0) {
      day = 7;
    }
    return day;
  };
  var createDateList = function createDateList(year, month, firstDayOfWeek, currentValue, format) {
    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };
    var monthFirstDay = dayjs("".concat(year, "-").concat(month));
    var rowList = [];
    var list = [];
    var weekCount = 1;
    var lastMonthDaysCount = (getDay(monthFirstDay.toDate()) - firstDayOfWeek + 7) % 7;
    for (var i = 0; i < lastMonthDaysCount; i++) {
      var dayObj = monthFirstDay.subtract(i + 1, "day");
      list.unshift(createCellData(-1, false, dayObj.toDate(), weekCount));
    }
    var monthDaysCount = monthFirstDay.endOf("month").daysInMonth();
    for (var _i = 0; _i < monthDaysCount; _i++) {
      var _dayObj = monthFirstDay.add(_i, "day");
      list.push(createCellData(0, currentValue.isSame(_dayObj), _dayObj.toDate(), weekCount));
      if (list.length === 7) {
        rowList.push(list);
        list = [];
        weekCount += 1;
      }
    }
    if (list.length) {
      var monthLastDay = dayjs("".concat(year, "-").concat(month)).endOf("month");
      var nextMonthDaysCount = 7 - list.length;
      for (var _i2 = 0; _i2 < nextMonthDaysCount; _i2++) {
        var _dayObj2 = monthLastDay.add(_i2 + 1, "day");
        list.push(createCellData(1, false, _dayObj2.toDate(), weekCount));
      }
      rowList.push(list);
    }
    return rowList;
  };
  var createMonthList = function createMonthList(year, currentValue, format) {
    var rowNum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
    var monthsArr = [];
    var isCurYear = currentValue.year() === year;
    var tmpArr = [];
    for (var i = 1; i <= 12; i++) {
      var date = new Date(year, i - 1);
      var curDateMon = parseInt(currentValue.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === i;
      tmpArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });
      if (tmpArr.length === rowNum) {
        monthsArr.push(tmpArr);
        tmpArr = [];
      }
    }
    return monthsArr;
  };

  var CalendarCellComp = function CalendarCellComp(props) {
    var mode = props.mode,
      cell = props.cell,
      cellAppend = props.cellAppend,
      theme = props.theme,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      cellData = props.cellData,
      isCurrent = props.isCurrent,
      isNow = props.isNow,
      fillWithZero = props.fillWithZero,
      createCalendarCell = props.createCalendarCell,
      onCellClick = props.onCellClick,
      onCellDoubleClick = props.onCellDoubleClick,
      onCellRightClick = props.onCellRightClick;
    var _useLocaleReceiver = useLocaleReceiver("calendar"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var monthLabelList = t(local.cellMonth).split(",");
    var getMonthCN = function getMonthCN(month) {
      return monthLabelList[month];
    };
    var _useConfig = useConfig$2(),
      calendarConfig = _useConfig.calendar;
    var fix0 = function fix0(num) {
      var _ref;
      var fillZero = num < 10 && ((_ref = fillWithZero !== null && fillWithZero !== void 0 ? fillWithZero : calendarConfig.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
      return fillZero ? "0".concat(num) : num;
    };
    var prefixCls = usePrefixClass();
    return /* @__PURE__ */React__default["default"].createElement("td", {
      className: prefixCls([blockName, "table-body-cell"], isDisabled ? "is-disabled" : null, isCurrent ? "is-checked" : null, isNow ? [blockName, "table-body-cell--now"] : null),
      onClick: onCellClick,
      onDoubleClick: onCellDoubleClick,
      onContextMenu: onCellRightClick
    }, function () {
      if (cell && typeof cell === "function") return cell(mode === "month" ? createCalendarCell(cellData) : cellData);
      if (cell && typeof cell !== "function") return cell;
      var cellCtx;
      if (mode === "year") {
        var mIndex = cellData.date.getMonth();
        cellCtx = theme === "full" ? getMonthCN(mIndex) : t(local.monthSelection, {
          month: "".concat(mIndex + 1)
        });
      } else {
        cellCtx = fix0(cellData.date.getDate());
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: prefixCls([blockName, "table-body-cell-display"])
      }, cellCtx);
    }(), function () {
      var cellCtx;
      if (cellAppend && typeof cellAppend === "function") {
        cellCtx = cellAppend(mode === "month" ? createCalendarCell(cellData) : cellData);
      }
      if (cellAppend && typeof cellAppend !== "function") {
        cellCtx = cellAppend;
      }
      return cellAppend && /* @__PURE__ */React__default["default"].createElement("div", {
        className: prefixCls([blockName, "table-body-cell-content"])
      }, cellCtx);
    }());
  };

  var calendarDefaultProps = {
    format: "YYYY-MM-DD",
    isShowWeekendDefault: true,
    mode: "month",
    preventCellContextmenu: false,
    theme: "full"
  };

  function ownKeys$1j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1j(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {
          popupProps: {
            overlayInnerStyle: {
              width: "110px"
            }
          }
        }
      },
      month: {
        visible: true,
        selectProps: {
          popupProps: {
            overlayInnerStyle: {
              width: "90px"
            }
          }
        }
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };
  var Calendar$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, calendarDefaultProps),
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      modeFromProps = _useDefaultProps.mode,
      valueFromProps = _useDefaultProps.value,
      _useDefaultProps$firs = _useDefaultProps.firstDayOfWeek,
      firstDayOfWeek = _useDefaultProps$firs === void 0 ? 1 : _useDefaultProps$firs,
      format = _useDefaultProps.format,
      range = _useDefaultProps.range,
      head = _useDefaultProps.head,
      cell = _useDefaultProps.cell,
      cellAppend = _useDefaultProps.cellAppend,
      week = _useDefaultProps.week,
      theme = _useDefaultProps.theme,
      controllerConfig = _useDefaultProps.controllerConfig,
      _useDefaultProps$isSh = _useDefaultProps.isShowWeekendDefault,
      isShowWeekendDefault = _useDefaultProps$isSh === void 0 ? true : _useDefaultProps$isSh,
      _useDefaultProps$prev = _useDefaultProps.preventCellContextmenu,
      preventCellContextmenu = _useDefaultProps$prev === void 0 ? false : _useDefaultProps$prev,
      monthProps = _useDefaultProps.month,
      yearProps = _useDefaultProps.year,
      _useDefaultProps$onCo = _useDefaultProps.onControllerChange,
      onControllerChange = _useDefaultProps$onCo === void 0 ? noop : _useDefaultProps$onCo,
      _useDefaultProps$onCe = _useDefaultProps.onCellClick,
      onCellClick = _useDefaultProps$onCe === void 0 ? noop : _useDefaultProps$onCe,
      _useDefaultProps$onCe2 = _useDefaultProps.onCellDoubleClick,
      onCellDoubleClick = _useDefaultProps$onCe2 === void 0 ? noop : _useDefaultProps$onCe2,
      _useDefaultProps$onCe3 = _useDefaultProps.onCellRightClick,
      onCellRightClick = _useDefaultProps$onCe3 === void 0 ? noop : _useDefaultProps$onCe3,
      _useDefaultProps$onMo = _useDefaultProps.onMonthChange,
      onMonthChange = _useDefaultProps$onMo === void 0 ? noop : _useDefaultProps$onMo,
      fillWithZero = _useDefaultProps.fillWithZero;
    var controllerConfigData = typeof controllerConfig === "boolean" ? getDefaultControllerConfigData(controllerConfig) : _objectSpread$1j(_objectSpread$1j({}, getDefaultControllerConfigData()), controllerConfig);
    if (typeof controllerConfig !== "boolean") {
      if (monthProps) {
        controllerConfigData.month.visible = true;
      }
      if (yearProps) {
        controllerConfigData.year.visible = true;
      }
    }
    var visible = controllerConfigData.visible,
      disabled = controllerConfigData.disabled,
      modeFromConfig = controllerConfigData.mode,
      yearFromConfig = controllerConfigData.year,
      monthFromConfig = controllerConfigData.month,
      weekend = controllerConfigData.weekend,
      current = controllerConfigData.current;
    var _modeFromConfig$visib = modeFromConfig.visible,
      visibleForMode = _modeFromConfig$visib === void 0 ? true : _modeFromConfig$visib,
      _modeFromConfig$radio = modeFromConfig.radioGroupProps,
      radioGroupPropsForMode = _modeFromConfig$radio === void 0 ? {} : _modeFromConfig$radio;
    var _yearFromConfig$visib = yearFromConfig.visible,
      visibleForYear = _yearFromConfig$visib === void 0 ? true : _yearFromConfig$visib,
      _yearFromConfig$selec = yearFromConfig.selectProps,
      selectPropsForYear = _yearFromConfig$selec === void 0 ? {} : _yearFromConfig$selec;
    var _monthFromConfig$visi = monthFromConfig.visible,
      visibleForMonth = _monthFromConfig$visi === void 0 ? true : _monthFromConfig$visi,
      _monthFromConfig$sele = monthFromConfig.selectProps,
      selectPropsForMonth = _monthFromConfig$sele === void 0 ? {} : _monthFromConfig$sele;
    var _weekend$visible = weekend.visible,
      visibleForWeekendToggle = _weekend$visible === void 0 ? true : _weekend$visible,
      _weekend$showWeekendB = weekend.showWeekendButtonProps,
      showWeekendButtonProps = _weekend$showWeekendB === void 0 ? {} : _weekend$showWeekendB,
      _weekend$hideWeekendB = weekend.hideWeekendButtonProps,
      hideWeekendButtonProps = _weekend$hideWeekendB === void 0 ? {} : _weekend$hideWeekendB;
    var _current$visible = current.visible,
      visibleForCurrent = _current$visible === void 0 ? true : _current$visible,
      _current$currentDayBu = current.currentDayButtonProps,
      currentDayButtonProps = _current$currentDayBu === void 0 ? {} : _current$currentDayBu,
      _current$currentMonth = current.currentMonthButtonProps,
      currentMonthButtonProps = _current$currentMonth === void 0 ? {} : _current$currentMonth;
    var _useState = React.useState("month"),
      _useState2 = _slicedToArray$1(_useState, 2),
      mode = _useState2[0],
      setMode = _useState2[1];
    var _useState3 = React.useState(function () {
        return dayjs(valueFromProps || dayjs().format("YYYY-MM-DD"));
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];
    var _useState5 = React.useState(function () {
        return yearProps ? Number(yearProps) : value.year();
      }),
      _useState6 = _slicedToArray$1(_useState5, 2),
      year = _useState6[0],
      setYear = _useState6[1];
    var _useState7 = React.useState(function () {
        return monthProps ? Number(monthProps) : parseInt(value.format("M"), 10);
      }),
      _useState8 = _slicedToArray$1(_useState7, 2),
      month = _useState8[0],
      setMonth = _useState8[1];
    var _useState9 = React.useState(isShowWeekendDefault),
      _useState0 = _slicedToArray$1(_useState9, 2),
      isShowWeekend = _useState0[0],
      setIsShowWeekend = _useState0[1];
    var _useLocaleReceiver = useLocaleReceiver("calendar"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var weekLabelList = t(local.week).split(",");
    var colHeaderList = React.useMemo(function () {
      if (mode === "year") return [];
      var weekTextArr = Array.isArray(week) && week.length >= 7 ? week : _toConsumableArray(weekLabelList);
      var list = [];
      for (var i = firstDayOfWeek; i <= 7; i++) {
        if (!isShowWeekend && i > 5) {
          break;
        }
        list.push({
          day: i,
          text: weekTextArr[i - 1]
        });
      }
      if (firstDayOfWeek > 1) {
        for (var _i = 1; _i < firstDayOfWeek; _i++) {
          if (!isShowWeekend && _i > 5) {
            break;
          }
          list.push({
            day: _i,
            text: weekTextArr[_i - 1]
          });
        }
      }
      return list;
    }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);
    var rangeFromTo = React.useMemo(function () {
      if (!range || range.length < 2) {
        return null;
      }
      var _range = _slicedToArray$1(range, 2),
        v1 = _range[0],
        v2 = _range[1];
      if (dayjs(v1).isBefore(dayjs(v2))) {
        return {
          from: v1,
          to: v2
        };
      }
      return {
        from: v2,
        to: v1
      };
    }, [range]);
    var controllerOptions = React.useMemo(function () {
      var dayJsFilterDate = dayjs("".concat(year, "-").concat(month));
      var re = {
        filterDate: dayJsFilterDate.toDate(),
        formattedFilterDate: dayJsFilterDate.format(format),
        mode: mode,
        isShowWeekend: isShowWeekend
      };
      return re;
    }, [isShowWeekend, mode, year, month, format]);
    var _useMemo = React.useMemo(function () {
        var isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;
        var checkMonthSelectorDisabled = function checkMonthSelectorDisabled(yearIn, monthIn) {
          if (isRangeValid) {
            var beginYear = dayjs(rangeFromTo.from).year();
            var endYear = dayjs(rangeFromTo.to).year();
            if (yearIn === beginYear) {
              var beginMon = parseInt(dayjs(rangeFromTo.from).format("M"), 10);
              return monthIn < beginMon;
            }
            if (yearIn === endYear) {
              var endMon = parseInt(dayjs(rangeFromTo.to).format("M"), 10);
              return monthIn > endMon;
            }
          }
          return false;
        };
        var yearList = [];
        var monthList2 = [];
        var yearBegin = isRangeValid ? dayjs(rangeFromTo.from).year() : Math.max(minYear, year - 10);
        var yearEnd = isRangeValid ? dayjs(rangeFromTo.to).year() : Math.max(minYear, year + 10);
        for (var i = yearBegin; i <= yearEnd; i++) {
          yearList.push({
            value: i,
            disabled: checkMonthSelectorDisabled(i, month)
          });
        }
        for (var _i2 = 1; _i2 <= 12; _i2++) {
          monthList2.push({
            value: _i2,
            disabled: checkMonthSelectorDisabled(year, _i2)
          });
        }
        return [yearList, monthList2];
      }, [rangeFromTo, year, month]),
      _useMemo2 = _slicedToArray$1(_useMemo, 2),
      yearSelectList = _useMemo2[0],
      monthSelectList = _useMemo2[1];
    var dateList = React.useMemo(function () {
      return createDateList(year, month, firstDayOfWeek, value, format);
    }, [year, month, firstDayOfWeek, format, value]);
    var monthList = React.useMemo(function () {
      return createMonthList(year, value, format);
    }, [year, value, format]);
    var createCalendarCell = React.useCallback(function (cellData) {
      return _objectSpread$1j(_objectSpread$1j({}, cellData), controllerOptions);
    }, [controllerOptions]);
    var toCurrent = React.useCallback(function () {
      var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var now = dayjs(valueIn).isValid() ? dayjs(valueIn) : dayjs(dayjs().format("YYYY-MM-DD"));
      setValue(now);
      setYear(now.year());
      setMonth(parseInt(now.format("M"), 10));
    }, []);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        toCurrent: toCurrent
      };
    }, [toCurrent]);
    var handleMonthChange = function handleMonthChange(newMonth) {
      setMonth(newMonth);
      onMonthChange({
        month: String(newMonth),
        year: String(year)
      });
    };
    var execCellEvent = React.useCallback(function (event, calendarCell, handleFunc) {
      if (handleFunc && typeof handleFunc === "function") {
        handleFunc({
          cell: createCalendarCell(calendarCell),
          e: event
        });
      }
    }, [createCalendarCell]);
    var clickCell = function clickCell(event, calendarCell) {
      setValue(dayjs(calendarCell.formattedDate));
      execCellEvent(event, calendarCell, onCellClick);
    };
    var doubleClickCell = function doubleClickCell(event, calendarCell) {
      execCellEvent(event, calendarCell, onCellDoubleClick);
    };
    var rightClickCell = function rightClickCell(event, calendarCell) {
      if (preventCellContextmenu) event.preventDefault();
      execCellEvent(event, calendarCell, onCellRightClick);
    };
    React.useEffect(function () {
      toCurrent(valueFromProps);
    }, [valueFromProps, toCurrent]);
    React.useEffect(function () {
      if (monthProps) {
        setMonth(Number(monthProps));
      }
    }, [monthProps]);
    React.useEffect(function () {
      if (yearProps) {
        setYear(Number(yearProps));
      }
    }, [yearProps]);
    React.useEffect(function () {
      setMode(modeFromProps);
    }, [modeFromProps]);
    React.useEffect(function () {
      setIsShowWeekend(isShowWeekendDefault);
    }, [isShowWeekendDefault]);
    useIsomorphicLayoutEffect(function () {
      onControllerChange(controllerOptions);
    }, [controllerOptions, onControllerChange]);
    var prefixCls = usePrefixClass();
    var currentDate = dayjs().format("YYYY-MM-DD");
    var currentMonth = dayjs().format("YYYY-MM");
    var controlSectionSize = theme === "card" ? "small" : "medium";
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls(blockName, [blockName, "", theme]).concat(" ", className),
      style: style
    }, visible && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "title"])
    }, function () {
      if (head && typeof head === "function") return head(controllerOptions);
      if (head && typeof head !== "function") return head;
    }()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, visibleForYear && /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$1j({
      autoWidth: true,
      size: controlSectionSize,
      value: year,
      disabled: disabled,
      options: yearSelectList.map(function (item) {
        return {
          label: t(local.yearSelection, {
            year: item.value
          }),
          value: item.value,
          disabled: item.disabled
        };
      }),
      onChange: function onChange(selectYear) {
        return setYear(selectYear);
      }
    }, selectPropsForYear))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, visibleForMonth && mode === "month" && /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$1j({
      autoWidth: true,
      size: controlSectionSize,
      value: month,
      options: monthSelectList.map(function (item) {
        return {
          label: t(local.monthSelection, {
            month: item.value
          }),
          value: item.value,
          disabled: item.disabled
        };
      }),
      disabled: disabled,
      onChange: handleMonthChange
    }, selectPropsForMonth))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"]),
      style: {
        height: "auto"
      }
    }, visibleForMode && /* @__PURE__ */React__default["default"].createElement(Radio.Group, _objectSpread$1j({
      variant: "default-filled",
      size: controlSectionSize,
      value: mode,
      disabled: disabled,
      onChange: function onChange(value2) {
        return setMode(value2);
      }
    }, radioGroupPropsForMode), /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
      value: "month"
    }, t(local.monthRadio)), /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
      value: "year"
    }, t(local.yearRadio)))), mode === "month" && theme === "full" && visibleForWeekendToggle && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, /* @__PURE__ */React__default["default"].createElement(CheckTag$1, _objectSpread$1j({
      className: "t-calendar__control-tag",
      checked: !isShowWeekend,
      disabled: disabled,
      size: controlSectionSize,
      onClick: function onClick() {
        setIsShowWeekend(!isShowWeekend);
      }
    }, isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps), "".concat(isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)))), theme === "full" && visibleForCurrent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1j({
      size: controlSectionSize,
      disabled: disabled,
      onClick: function onClick() {
        toCurrent();
      }
    }, mode === "year" ? currentMonthButtonProps : currentDayButtonProps), mode === "year" ? t(local.thisMonth) : t(local.today))))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "panel"], [blockName, "panel--".concat(mode)])
    }, /* @__PURE__ */React__default["default"].createElement("table", {
      className: prefixCls([blockName, "table"])
    }, colHeaderList.length > 0 && /* @__PURE__ */React__default["default"].createElement("thead", {
      className: prefixCls([blockName, "table-head"])
    }, /* @__PURE__ */React__default["default"].createElement("tr", {
      className: prefixCls([blockName, "table-head-row"])
    }, colHeaderList.map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement("th", {
        key: item.day,
        className: prefixCls([blockName, "table-head-cell"])
      }, week && typeof week === "function" ? week({
        day: item.day
      }) : item.text);
    }))), mode === "month" && /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: prefixCls([blockName, "table-body"])
    }, dateList.map(function (dateRow, dateRowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: String(dateRowIndex),
        className: prefixCls([blockName, "table-body-row"])
      }, dateRow.map(function (dateCell, dateCellIndex) {
        if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;
        var isNow = dateCell.formattedDate === currentDate;
        return /* @__PURE__ */React__default["default"].createElement(CalendarCellComp, {
          key: dateCellIndex,
          mode: mode,
          theme: theme,
          cell: cell,
          cellData: dateCell,
          cellAppend: cellAppend,
          fillWithZero: fillWithZero,
          isCurrent: dateCell.isCurrent,
          isNow: isNow,
          isDisabled: dateCell.belongTo !== 0,
          createCalendarCell: createCalendarCell,
          onCellClick: function onCellClick(event) {
            return clickCell(event, dateCell);
          },
          onCellDoubleClick: function onCellDoubleClick(event) {
            return doubleClickCell(event, dateCell);
          },
          onCellRightClick: function onCellRightClick(event) {
            return rightClickCell(event, dateCell);
          }
        });
      }));
    })), mode === "year" && /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: prefixCls([blockName, "table-body"])
    }, monthList.map(function (monthRow, monthRowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: String(monthRowIndex),
        className: prefixCls([blockName, "table-body-row"])
      }, monthRow.map(function (monthCell, monthCellIndex) {
        var isNow = monthCell.formattedDate.startsWith(currentMonth);
        return /* @__PURE__ */React__default["default"].createElement(CalendarCellComp, {
          key: monthCellIndex,
          mode: mode,
          theme: theme,
          cell: cell,
          cellData: monthCell,
          cellAppend: cellAppend,
          fillWithZero: fillWithZero,
          isCurrent: monthCell.isCurrent,
          isNow: isNow,
          createCalendarCell: createCalendarCell,
          onCellClick: function onCellClick(event) {
            return clickCell(event, monthCell);
          },
          onCellDoubleClick: function onCellDoubleClick(event) {
            return doubleClickCell(event, monthCell);
          },
          onCellRightClick: function onCellRightClick(event) {
            return rightClickCell(event, monthCell);
          }
        });
      }));
    })))));
  });
  Calendar$1.displayName = "Calendar";

  var Calendar = Calendar$1;

  function _createForOfIteratorHelper$3(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$3(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$3(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }
  function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function ownKeys$1i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1i(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getMapValue(name, formMapRef) {
    if (!formMapRef.current) return;
    var mapKeys = _toConsumableArray(formMapRef.current.keys());
    var key = mapKeys.find(function (key2) {
      return String(key2) === String(name);
    });
    return formMapRef.current.get(key);
  }
  function objectToArray(obj) {
    var result = [];
    function traverse(current) {
      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      if (isObject(current) && !isArray$1(current) && !isEmpty(current)) {
        Object.keys(current).forEach(function (key) {
          traverse(current[key], [].concat(_toConsumableArray(path), [key]));
        });
      } else {
        result.push(path);
      }
    }
    traverse(obj);
    return result;
  }
  function calcFieldValue(name, value) {
    var isFormList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (Array.isArray(name)) {
      if (isFormList) {
        var fieldValue = name.reduceRight(function (prev, curr) {
          var arr = [];
          if (/^\d+$/.test(String(curr))) arr[curr] = prev;
          return arr.length ? arr : _defineProperty$2({}, curr, prev);
        }, value);
        return _objectSpread$1i({}, fieldValue);
      }
      return name.reduceRight(function (prev, curr, currentIndex) {
        if (currentIndex === name.length - 1) {
          return _defineProperty$2({}, curr, value);
        }
        return _defineProperty$2({}, curr, prev);
      }, {});
    }
    return _defineProperty$2({}, name, value);
  }
  function travelMapFromObject(obj, formMapRef, callback) {
    var _iterator = _createForOfIteratorHelper$3(formMapRef.current.entries()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray$1(_step.value, 2),
          mapName = _step$value[0],
          formItemRef = _step$value[1];
        if (has$3(obj, mapName)) {
          callback(formItemRef, get(obj, mapName));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  var _excluded$o = ["name"];
  function _createForOfIteratorHelper$2(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$2(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$2(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$2(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0; } }
  function _arrayLikeToArray$2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function needValidate(name, fields) {
    if (!fields || !Array.isArray(fields)) return true;
    return fields.some(function (item) {
      return String(item) === String(name);
    });
  }
  function formatValidateResult(validateResultList) {
    var result = validateResultList.reduce(function (r, err) {
      return Object.assign(r || {}, err);
    }, {});
    Object.keys(result).forEach(function (key) {
      if (result[key] === true) {
        delete result[key];
      } else {
        result[key] = result[key].filter(function (fr) {
          return fr.result === false;
        });
      }
      if (result[key] && key.includes(",")) {
        var keyList = key.split(",");
        var fieldValue = calcFieldValue(keyList, result[key]);
        merge$3(result, fieldValue);
        delete result[key];
      }
    });
    return isEmpty(result) ? true : result;
  }
  function useInstance(props, formRef, formMapRef, floatingFormDataRef) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var scrollToFirstError = props.scrollToFirstError,
      _props$preventSubmitD = props.preventSubmitDefault,
      preventSubmitDefault = _props$preventSubmitD === void 0 ? true : _props$preventSubmitD,
      onSubmit = props.onSubmit,
      onReset = props.onReset;
    function getFirstError(r) {
      var _r$firstKey$;
      if (r === true) return;
      var _Object$keys = Object.keys(r),
        _Object$keys2 = _slicedToArray$1(_Object$keys, 1),
        firstKey = _Object$keys2[0];
      if (scrollToFirstError) {
        scrollTo(".".concat(classPrefix, "-form--has-error"));
      }
      return (_r$firstKey$ = r[firstKey][0]) === null || _r$firstKey$ === void 0 ? void 0 : _r$firstKey$.message;
    }
    function scrollTo(selector) {
      var _formRef$current$quer, _formRef$current;
      var dom = (_formRef$current$quer = (_formRef$current = formRef.current).querySelector) === null || _formRef$current$quer === void 0 ? void 0 : _formRef$current$quer.call(_formRef$current, selector);
      var behavior = scrollToFirstError;
      dom && dom.scrollIntoView({
        behavior: behavior
      });
    }
    function submit(e) {
      if (preventSubmitDefault) {
        var _e$preventDefault, _e$stopPropagation;
        e === null || e === void 0 || (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 || _e$preventDefault.call(e);
        e === null || e === void 0 || (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);
      }
      validate().then(function (r) {
        var firstError = getFirstError(r);
        var fields = getFieldsValue(true);
        onSubmit === null || onSubmit === void 0 || onSubmit({
          validateResult: r,
          firstError: firstError,
          e: e,
          fields: fields
        });
      });
    }
    function validate(_x) {
      return _validate.apply(this, arguments);
    }
    function _validate() {
      _validate = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(param) {
        var _ref, fields, _ref$trigger, trigger, showErrorMessage, list, validateList;
        return regenerator.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref = param || {}, fields = _ref.fields, _ref$trigger = _ref.trigger, trigger = _ref$trigger === void 0 ? "all" : _ref$trigger, showErrorMessage = _ref.showErrorMessage;
              list = _toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
                var _formItemRef$current16, _formItemRef$current17;
                return isFunction$1(formItemRef === null || formItemRef === void 0 || (_formItemRef$current16 = formItemRef.current) === null || _formItemRef$current16 === void 0 ? void 0 : _formItemRef$current16.validate) && needValidate(formItemRef === null || formItemRef === void 0 || (_formItemRef$current17 = formItemRef.current) === null || _formItemRef$current17 === void 0 ? void 0 : _formItemRef$current17.name, fields);
              }).map(function (formItemRef) {
                return formItemRef === null || formItemRef === void 0 ? void 0 : formItemRef.current.validate(trigger, showErrorMessage);
              });
              _context.next = 1;
              return Promise.all(list);
            case 1:
              validateList = _context.sent;
              return _context.abrupt("return", formatValidateResult(validateList));
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return _validate.apply(this, arguments);
    }
    function validateOnly(_x2) {
      return _validateOnly.apply(this, arguments);
    }
    function _validateOnly() {
      _validateOnly = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee2(param) {
        var _ref2, fields, _ref2$trigger, trigger, list, validateList;
        return regenerator.wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _ref2 = param || {}, fields = _ref2.fields, _ref2$trigger = _ref2.trigger, trigger = _ref2$trigger === void 0 ? "all" : _ref2$trigger;
              list = _toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
                var _formItemRef$current18, _formItemRef$current19;
                return isFunction$1(formItemRef === null || formItemRef === void 0 || (_formItemRef$current18 = formItemRef.current) === null || _formItemRef$current18 === void 0 ? void 0 : _formItemRef$current18.validateOnly) && needValidate(formItemRef === null || formItemRef === void 0 || (_formItemRef$current19 = formItemRef.current) === null || _formItemRef$current19 === void 0 ? void 0 : _formItemRef$current19.name, fields);
              }).map(function (formItemRef) {
                var _formItemRef$current$5, _formItemRef$current20;
                return formItemRef === null || formItemRef === void 0 || (_formItemRef$current$5 = (_formItemRef$current20 = formItemRef.current).validateOnly) === null || _formItemRef$current$5 === void 0 ? void 0 : _formItemRef$current$5.call(_formItemRef$current20, trigger);
              });
              _context2.next = 1;
              return Promise.all(list);
            case 1:
              validateList = _context2.sent;
              return _context2.abrupt("return", formatValidateResult(validateList));
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return _validateOnly.apply(this, arguments);
    }
    function getFieldValue(name) {
      var _formItemRef$current, _formItemRef$current$;
      if (!name) return null;
      var formItemRef = getMapValue(name, formMapRef);
      return formItemRef === null || formItemRef === void 0 || (_formItemRef$current = formItemRef.current) === null || _formItemRef$current === void 0 || (_formItemRef$current$ = _formItemRef$current.getValue) === null || _formItemRef$current$ === void 0 ? void 0 : _formItemRef$current$.call(_formItemRef$current);
    }
    function getFieldsValue(nameList) {
      var fieldsValue = {};
      if (nameList === true) {
        var _iterator = _createForOfIteratorHelper$2(_toConsumableArray(formMapRef.current.entries()).reverse()),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray$1(_step.value, 2),
              name = _step$value[0],
              formItemRef = _step$value[1];
            var fieldValue = null;
            if (formItemRef !== null && formItemRef !== void 0 && formItemRef.current.isFormList) {
              var _formItemRef$current$2, _formItemRef$current2;
              fieldValue = calcFieldValue(name, formItemRef === null || formItemRef === void 0 || (_formItemRef$current$2 = (_formItemRef$current2 = formItemRef.current).getValue) === null || _formItemRef$current$2 === void 0 ? void 0 : _formItemRef$current$2.call(_formItemRef$current2));
            } else {
              var _formItemRef$current$3, _formItemRef$current3;
              fieldValue = calcFieldValue(name, formItemRef === null || formItemRef === void 0 || (_formItemRef$current$3 = (_formItemRef$current3 = formItemRef.current).getValue) === null || _formItemRef$current$3 === void 0 ? void 0 : _formItemRef$current$3.call(_formItemRef$current3), !props.supportNumberKey);
            }
            merge$3(fieldsValue, fieldValue);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        if (!Array.isArray(nameList)) {
          log.error("Form", "`getFieldsValue` \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
          return {};
        }
        nameList.forEach(function (name) {
          var _formItemRef$current$4, _formItemRef$current4;
          var formItemRef = getMapValue(name, formMapRef);
          if (!formItemRef) return;
          var fieldValue = calcFieldValue(name, formItemRef === null || formItemRef === void 0 || (_formItemRef$current$4 = (_formItemRef$current4 = formItemRef.current).getValue) === null || _formItemRef$current$4 === void 0 ? void 0 : _formItemRef$current$4.call(_formItemRef$current4));
          merge$3(fieldsValue, fieldValue);
        });
      }
      return fieldsValue;
    }
    function setFieldsValue() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var nameLists = objectToArray(fields);
      nameLists.forEach(function (nameList) {
        var _formItemRef2;
        var fieldValue = get(fields, nameList);
        var formItemRef;
        if (nameList.length > 1) {
          var _iterator2 = _createForOfIteratorHelper$2(formMapRef.current.entries()),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _step2$value = _slicedToArray$1(_step2.value, 2),
                mapNameList = _step2$value[0],
                _formItemRef = _step2$value[1];
              if (isEqual(nameList, mapNameList)) {
                formItemRef = _formItemRef;
                break;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          formItemRef = formMapRef.current.get(nameList[0]);
        }
        if ((_formItemRef2 = formItemRef) !== null && _formItemRef2 !== void 0 && _formItemRef2.current) {
          var _formItemRef3, _formItemRef3$setValu;
          (_formItemRef3 = formItemRef) === null || _formItemRef3 === void 0 || (_formItemRef3 = _formItemRef3.current) === null || _formItemRef3 === void 0 || (_formItemRef3$setValu = _formItemRef3.setValue) === null || _formItemRef3$setValu === void 0 || _formItemRef3$setValu.call(_formItemRef3, fieldValue, fields);
        } else {
          set(floatingFormDataRef.current, nameList, fieldValue);
        }
      });
    }
    function setFields() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (!Array.isArray(fields)) throw new Error("setFields \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
      fields.forEach(function (field) {
        var _formItemRef$current5;
        var name = field.name,
          restFields = _objectWithoutProperties$2(field, _excluded$o);
        var formItemRef = getMapValue(name, formMapRef);
        formItemRef === null || formItemRef === void 0 || (_formItemRef$current5 = formItemRef.current) === null || _formItemRef$current5 === void 0 || _formItemRef$current5.setField(restFields, field);
      });
    }
    function reset(params) {
      if (typeof params === "undefined") {
        _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current6;
          formItemRef === null || formItemRef === void 0 || (_formItemRef$current6 = formItemRef.current) === null || _formItemRef$current6 === void 0 || _formItemRef$current6.resetField();
        });
      } else {
        var _params$type = params.type,
          type = _params$type === void 0 ? "initial" : _params$type,
          _params$fields = params.fields,
          fields = _params$fields === void 0 ? [] : _params$fields;
        fields.forEach(function (name) {
          var _formItemRef$current7;
          var formItemRef = getMapValue(name, formMapRef);
          formItemRef === null || formItemRef === void 0 || (_formItemRef$current7 = formItemRef.current) === null || _formItemRef$current7 === void 0 || _formItemRef$current7.resetField(type);
        });
      }
      onReset === null || onReset === void 0 || onReset({});
    }
    function clearValidate(fields) {
      if (typeof fields === "undefined") {
        _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current8;
          formItemRef === null || formItemRef === void 0 || (_formItemRef$current8 = formItemRef.current) === null || _formItemRef$current8 === void 0 || _formItemRef$current8.resetValidate();
        });
      } else {
        if (!Array.isArray(fields)) throw new Error("clearValidate \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
        fields.forEach(function (name) {
          var _formItemRef$current9;
          var formItemRef = getMapValue(name, formMapRef);
          formItemRef === null || formItemRef === void 0 || (_formItemRef$current9 = formItemRef.current) === null || _formItemRef$current9 === void 0 || _formItemRef$current9.resetValidate();
        });
      }
    }
    function setValidateMessage(message) {
      travelMapFromObject(message, formMapRef, function (formItemRef, fieldValue) {
        var _formItemRef$current0, _formItemRef$current1;
        formItemRef === null || formItemRef === void 0 || (_formItemRef$current0 = formItemRef.current) === null || _formItemRef$current0 === void 0 || (_formItemRef$current1 = _formItemRef$current0.setValidateMessage) === null || _formItemRef$current1 === void 0 || _formItemRef$current1.call(_formItemRef$current0, fieldValue);
      });
    }
    function getValidateMessage(fields) {
      var message = {};
      if (typeof fields === "undefined") {
        _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
          var _formItemRef$current10, _formItemRef$current11, _formItemRef$current12;
          var item = formItemRef === null || formItemRef === void 0 || (_formItemRef$current10 = formItemRef.current) === null || _formItemRef$current10 === void 0 || (_formItemRef$current11 = _formItemRef$current10.getValidateMessage) === null || _formItemRef$current11 === void 0 ? void 0 : _formItemRef$current11.call(_formItemRef$current10);
          if (isEmpty(item)) return;
          message[formItemRef === null || formItemRef === void 0 || (_formItemRef$current12 = formItemRef.current) === null || _formItemRef$current12 === void 0 ? void 0 : _formItemRef$current12.name] = item;
        });
      } else {
        if (!Array.isArray(fields)) throw new Error("getValidateMessage \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
        fields.forEach(function (name) {
          var _formItemRef$current13, _formItemRef$current14, _formItemRef$current15;
          var formItemRef = getMapValue(name, formMapRef);
          var item = formItemRef === null || formItemRef === void 0 || (_formItemRef$current13 = formItemRef.current) === null || _formItemRef$current13 === void 0 || (_formItemRef$current14 = _formItemRef$current13.getValidateMessage) === null || _formItemRef$current14 === void 0 ? void 0 : _formItemRef$current14.call(_formItemRef$current13);
          if (isEmpty(item)) return;
          message[formItemRef === null || formItemRef === void 0 || (_formItemRef$current15 = formItemRef.current) === null || _formItemRef$current15 === void 0 ? void 0 : _formItemRef$current15.name] = item;
        });
      }
      if (isEmpty(message)) return;
      return message;
    }
    return {
      submit: submit,
      reset: reset,
      validate: validate,
      validateOnly: validateOnly,
      clearValidate: clearValidate,
      setFields: setFields,
      setFieldsValue: setFieldsValue,
      setValidateMessage: setValidateMessage,
      getValidateMessage: getValidateMessage,
      getFieldValue: getFieldValue,
      getFieldsValue: getFieldsValue,
      currentElement: formRef.current,
      getCurrentElement: function getCurrentElement() {
        return formRef.current;
      }
    };
  }

  var HOOK_MARK = "TD_FORM_INTERNAL_HOOKS";
  var FormStore = /*#__PURE__*/_createClass(function FormStore(forceReRender) {
    var _this = this;
    _classCallCheck(this, FormStore);
    _defineProperty$2(this, "prevStore", {});
    _defineProperty$2(this, "store", {});
    _defineProperty$2(this, "taskQueue", []);
    _defineProperty$2(this, "flashQueue", function () {
      _this.taskQueue.forEach(function (task) {
        _this[task.name].apply(_this, _toConsumableArray(task.args));
      });
      _this.taskQueue = [];
    });
    _defineProperty$2(this, "getForm", function () {
      return {
        submit: function submit() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this.taskQueue.push({
            args: args,
            name: "submit"
          });
        },
        reset: function reset() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          _this.taskQueue.push({
            args: args,
            name: "reset"
          });
        },
        validate: null,
        validateOnly: null,
        clearValidate: function clearValidate() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          _this.taskQueue.push({
            args: args,
            name: "clearValidate"
          });
        },
        setFields: function setFields() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          _this.taskQueue.push({
            args: args,
            name: "setFields"
          });
        },
        setFieldsValue: function setFieldsValue() {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          _this.taskQueue.push({
            args: args,
            name: "setFieldsValue"
          });
        },
        setValidateMessage: function setValidateMessage() {
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }
          _this.taskQueue.push({
            args: args,
            name: "setValidateMessage"
          });
        },
        getValidateMessage: function getValidateMessage() {
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
          _this.taskQueue.push({
            args: args,
            name: "getValidateMessage"
          });
        },
        getFieldValue: null,
        getFieldsValue: null,
        _init: true,
        store: _this.store,
        getInternalHooks: _this.getInternalHooks
      };
    });
    _defineProperty$2(this, "getInternalHooks", function (key) {
      if (key === HOOK_MARK) {
        return {
          setForm: function setForm(formInstance) {
            Object.keys(formInstance).forEach(function (key2) {
              _this[key2] = formInstance[key2];
            });
          },
          flashQueue: _this.flashQueue,
          notifyWatch: _this.notifyWatch,
          registerWatch: _this.registerWatch,
          getPrevStore: function getPrevStore() {
            return _this.prevStore;
          },
          setPrevStore: function setPrevStore(store) {
            _this.prevStore = store;
          }
        };
      }
      log.warn("Form", "`getInternalHooks` is internal usage. Should not call directly.");
      return null;
    });
    _defineProperty$2(this, "watchList", []);
    _defineProperty$2(this, "registerWatch", function (callback) {
      _this.watchList.push(callback);
      return function () {
        _this.watchList = _this.watchList.filter(function (fn) {
          return fn !== callback;
        });
      };
    });
    _defineProperty$2(this, "notifyWatch", function () {
      var namePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (_this.watchList.length) {
        var _this$getFieldsValue;
        var values = (_this$getFieldsValue = _this.getFieldsValue) === null || _this$getFieldsValue === void 0 ? void 0 : _this$getFieldsValue.call(_this, [namePath]);
        _this.watchList.forEach(function (callback) {
          callback(values, namePath);
        });
      }
    });
    this.forceRootUpdate = forceReRender;
  });
  function useForm(form) {
    var formRef = React.useRef(/* @__PURE__ */Object.create({}));
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      forceUpdate = _useState2[1];
    if (!formRef.current._init) {
      if (form) {
        formRef.current = form;
        formRef.current.store = {};
      } else {
        var forceReRender = function forceReRender() {
          forceUpdate({});
        };
        var formStore = new FormStore(forceReRender);
        formRef.current = formStore.getForm();
      }
    }
    return [formRef.current];
  }

  function useWatch(name, form) {
    var _useState = React.useState(),
      _useState2 = _slicedToArray$1(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];
    var valueStr = React.useMemo(function () {
      return JSON.stringify(value);
    }, [value]);
    var valueStrRef = React.useRef(valueStr);
    var isValidForm = form && form._init;
    React.useEffect(function () {
      var _form$getInternalHook3, _form$getFieldsValue2;
      if (!isValidForm) return;
      var _form$getInternalHook = (_form$getInternalHook3 = form.getInternalHooks) === null || _form$getInternalHook3 === void 0 ? void 0 : _form$getInternalHook3.call(form, HOOK_MARK),
        _form$getInternalHook2 = _form$getInternalHook.registerWatch,
        registerWatch = _form$getInternalHook2 === void 0 ? noop : _form$getInternalHook2;
      var cancelRegister = registerWatch(function () {
        var _form$getFieldsValue;
        var allFieldsValue2 = (_form$getFieldsValue = form.getFieldsValue) === null || _form$getFieldsValue === void 0 ? void 0 : _form$getFieldsValue.call(form, true);
        var newValue = get(allFieldsValue2, name);
        var nextValueStr = JSON.stringify(newValue);
        if (valueStrRef.current !== nextValueStr) {
          valueStrRef.current = nextValueStr;
          setValue(nextValueStr);
        }
      });
      var allFieldsValue = (_form$getFieldsValue2 = form.getFieldsValue) === null || _form$getFieldsValue2 === void 0 ? void 0 : _form$getFieldsValue2.call(form, true);
      var initialValue = get(allFieldsValue, name);
      setValue(JSON.stringify(initialValue));
      return cancelRegister;
    }, []);
    return isUndefined(value) ? value : JSON.parse(value);
  }

  var FormContext = /*#__PURE__*/React__default["default"].createContext({
    form: void 0,
    labelWidth: "100px",
    labelAlign: "right",
    layout: "vertical",
    colon: false,
    initialData: {},
    requiredMark: void 0,
    requiredMarkPosition: void 0,
    scrollToFirstError: void 0,
    showErrorMessage: void 0,
    resetType: "empty",
    disabled: void 0,
    rules: void 0,
    errorMessage: void 0,
    statusIcon: void 0,
    onFormItemValueChange: void 0,
    formMapRef: void 0,
    floatingFormDataRef: void 0
  });
  var useFormContext = function useFormContext() {
    return React__default["default"].useContext(FormContext);
  };
  var FormListContext = /*#__PURE__*/React__default["default"].createContext({
    name: void 0,
    rules: void 0,
    formListMapRef: void 0,
    initialData: [],
    form: void 0
  });
  var useFormListContext = function useFormListContext() {
    return React__default["default"].useContext(FormListContext);
  };

  var ValidateStatus = /* @__PURE__ */function (ValidateStatus2) {
    ValidateStatus2["SUCCESS"] = "success";
    ValidateStatus2["WARNING"] = "warning";
    ValidateStatus2["ERROR"] = "error";
    ValidateStatus2["VALIDATING"] = "validating";
    return ValidateStatus2;
  }(ValidateStatus || {});

  var formDefaultProps = {
    colon: false,
    disabled: void 0,
    id: void 0,
    labelAlign: "right",
    labelWidth: "100px",
    layout: "vertical",
    preventSubmitDefault: true,
    requiredMark: void 0,
    resetType: "empty",
    showErrorMessage: true,
    statusIcon: void 0,
    submitWithWarningMessage: false,
    supportNumberKey: true
  };
  var formItemDefaultProps = {
    label: "",
    requiredMark: void 0,
    shouldUpdate: false,
    showErrorMessage: void 0,
    statusIcon: void 0,
    successBorder: false
  };

  var IMAGE_REGEXP = /(.png|.jpg|.jpeg|.jpe|.webp|.avif|.svg|.gif|.bmp)/i;
  var IMAGE_ALL_REGEXP = /(.png|.jpg|.jpeg|.jpe|.webp|.avif|.svg|.gif|.bmp|.dwg|.dxf|.svf|.tif|.tiff|.arw)/i;
  var FILE_PDF_REGEXP = /(.pdf)/i;
  var FILE_EXCEL_REGEXP = /(.xlsx|.xls|.csv|.xlc|.xlm|.xlt|.xlw)/i;
  var FILE_WORD_REGEXP = /(.dox|docx|.document|.wps|.wdb|.msword)/i;
  var FILE_PPT_REGEXP = /(.ppt|.pptx|.key)/i;
  var VIDEO_REGEXP = /(.avi|.mp4|.wmv|.mpg|.mpeg|.mov|.rm|.ram|.swf|.flv|.rmvb|.flash|.mid|.3gp)/i;
  var AUDIO_REGEXP = /(.mp2|.mp3|.mp4|.ogg|.3gpp|.ac3|.au)/i;
  var INPUT_FILE_MAP = {
    "audio/*": AUDIO_REGEXP,
    "video/*": VIDEO_REGEXP,
    "image/*": IMAGE_ALL_REGEXP,
    ".jpg": /image\/jpeg|\.jpg$/i,
    ".ico": /image\/vnd.microsoft.icon/i,
    ".doc": /application\/msword/i,
    ".docx": /application\/vnd.openxmlformats-officedocument.wordprocessingml.document/i,
    ".xls": /application\/vnd.ms-excel/i,
    ".xlsx": /application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet/i,
    ".ppt": /application\/vnd.ms-powerpoint/i,
    ".pptx": /application\/vnd.openxmlformats-officedocument.presentationml.presentation/i,
    ".vsd": /application\/vnd.visio/i,
    ".txt": /text\/plain/i,
    ".abw": /application\/x-abiword/i,
    ".avi": /video\/x-msvideo/i,
    ".azw": /application\/vnd.amazon.ebook/i,
    ".bin": /application\/octet-stream/i,
    ".cda": /application\/x-cdf/i,
    ".mpkg": /application\/vnd.apple.installer+xml/i,
    ".odp": /application\/vnd.oasis.opendocument.presentation/i,
    ".ods": /application\/vnd.oasis.opendocument.spreadsheet/i,
    ".odt": /application\/vnd.oasis.opendocument.text/i,
    ".oga": /audio\/ogg/i,
    ".ogv": /video\/ogg/i,
    ".ogx": /application\/ogg/i
  };
  var SIZE_MAP = {
    B: 1,
    KB: 1024,
    MB: 1048576,
    GB: 1073741824
  };
  function returnFileSize(number) {
    if (number < SIZE_MAP.KB) {
      return "".concat(number, " Bytes");
    }
    if (number >= SIZE_MAP.KB && number < SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.KB).toFixed(1), " KB");
    }
    if (number >= SIZE_MAP.MB && number < SIZE_MAP.GB) {
      return "".concat((number / SIZE_MAP.MB).toFixed(1), " MB");
    }
    if (number >= SIZE_MAP.GB) {
      return "".concat((number / SIZE_MAP.GB).toFixed(1), " GB");
    }
    return "";
  }
  function getCurrentDate() {
    var needTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    var date = "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate());
    var time = "".concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
    if (needTime) return [date, time].join(" ");
    return date;
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;
    if (!name) return "";
    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;
      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightCount && rightLength < rightCount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }
    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function getFileSizeText(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }
    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }
    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }
    return "";
  }
  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KBIndex = 1;
    var index = units.indexOf(unit);
    if (index === -1) {
      log.warn("Upload", "`sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KBIndex;
    }
    var num = SIZE_MAP[unit];
    return fileSize > sizeLimit * num;
  }
  function getFileUrlByFileRaw(fileRaw) {
    return new Promise(function (resolve) {
      if (!fileRaw) {
        resolve("");
        return;
      }
      var reader = new FileReader();
      reader.readAsDataURL(fileRaw);
      reader.onload = function (event) {
        var _event$target;
        resolve((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);
      };
    });
  }
  function validateFileType(accept, fileType, fileName) {
    var tmpFileType = fileType || fileName;
    if (!accept) return true;
    if (!tmpFileType) return false;
    var acceptList = accept.split(",").map(function (v) {
      return v.trim();
    });
    for (var i = 0, len = acceptList.length; i < len; i++) {
      var oneRule = acceptList[i];
      if (INPUT_FILE_MAP[oneRule] && INPUT_FILE_MAP[oneRule].test(tmpFileType)) {
        return true;
      }
      var regExp = new RegExp(oneRule, "i");
      if (regExp.test(tmpFileType)) {
        return true;
      }
    }
    return false;
  }
  function getFileList(files) {
    var accept = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var fileList = [];
    for (var i = 0; i < files.length; i++) {
      if (validateFileType(accept, files[i].type, files[i].name)) {
        fileList.push(files[i]);
      }
    }
    return fileList;
  }

  var linkDefaultProps = {
    hover: "underline",
    size: "medium",
    theme: "default"
  };

  var _excluded$n = ["children", "content", "className", "underline", "prefixIcon", "suffixIcon", "theme", "disabled", "hover", "onClick", "href", "size"];
  function ownKeys$1h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1h(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Link$1 = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, linkDefaultProps),
      children = _useDefaultProps.children,
      content = _useDefaultProps.content,
      className = _useDefaultProps.className,
      underline = _useDefaultProps.underline,
      prefixIcon = _useDefaultProps.prefixIcon,
      suffixIcon = _useDefaultProps.suffixIcon,
      theme = _useDefaultProps.theme,
      disabled = _useDefaultProps.disabled,
      hover = _useDefaultProps.hover,
      onClick = _useDefaultProps.onClick,
      href = _useDefaultProps.href,
      size = _useDefaultProps.size,
      otherProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$n);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var childNode = content || children;
    var handleClick = function handleClick(e) {
      if (disabled) {
        return;
      }
      onClick === null || onClick === void 0 || onClick(e);
    };
    return /* @__PURE__ */React__default["default"].createElement("a", _objectSpread$1h(_objectSpread$1h({}, otherProps), {}, {
      href: disabled || !href ? void 0 : href,
      ref: ref,
      className: classNames$1(className, ["".concat(classPrefix, "-link"), "".concat(classPrefix, "-link--theme-").concat(theme)], _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-l"), size === "large"), "".concat(classPrefix, "-is-disabled"), !!disabled), "".concat(classPrefix, "-is-underline"), !!underline), "".concat(classPrefix, "-link--hover-").concat(hover), !disabled)),
      onClick: handleClick
    }), prefixIcon && /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(["".concat(classPrefix, "-link__prefix-icon")])
    }, parseTNode(prefixIcon)), childNode, suffixIcon && /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(["".concat(classPrefix, "-link__suffix-icon")])
    }, parseTNode(suffixIcon)));
  });
  Link$1.displayName = "Link";

  var Link = Link$1;

  function NormalFile(props) {
    var _displayFiles$, _displayFiles$0$respo;
    var theme = props.theme,
      disabled = props.disabled,
      classPrefix = props.classPrefix,
      locale = props.locale;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon,
        TimeFilledIcon: TdTimeFilledIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
        CloseCircleFilledIcon: TdCloseCircleFilledIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
    var uploadPrefix = "".concat(classPrefix, "-upload");
    var renderProgress = function renderProgress(percent) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__single-progress")
      }, /* @__PURE__ */React__default["default"].createElement(Loading, null), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__single-percent")
      }, percent || 0, "%"));
    };
    var renderFilePreviewAsText = function renderFilePreviewAsText(files) {
      var _files$;
      if (theme !== "file") return null;
      if (!props.multiple && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "fail" && props.autoUpload) {
        return null;
      }
      return files.map(function (file, index) {
        var fileName = props.abridgeName && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__single-display-text ").concat(uploadPrefix, "__display-text--margin"),
          key: file.name + index + file.percent + file.status
        }, file.url ? /* @__PURE__ */React__default["default"].createElement(Link, {
          href: file.url,
          target: "_blank",
          hover: "color",
          size: "small",
          className: "".concat(uploadPrefix, "__single-name")
        }, fileName) : /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(uploadPrefix, "__single-name")
        }, fileName), file.status === "fail" && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__flow-status ").concat(uploadPrefix, "__file-fail")
        }, /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null)), file.status === "waiting" && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__flow-status ").concat(uploadPrefix, "__file-waiting")
        }, /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon, null)), file.status === "progress" && renderProgress(file.percent), !disabled && file.status !== "progress" && /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
          className: "".concat(uploadPrefix, "__icon-delete"),
          onClick: function onClick(e) {
            return props.onRemove({
              e: e,
              file: file,
              index: index
            });
          }
        }));
      });
    };
    var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
      var _props$abridgeName;
      var file = props.displayFiles[0];
      var inputTextClass = ["".concat(classPrefix, "-input__inner"), _defineProperty$2({}, "".concat(uploadPrefix, "__placeholder"), !props.displayFiles[0])];
      var disabledClass = disabled ? "".concat(classPrefix, "-is-disabled") : "";
      var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length && file !== null && file !== void 0 && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file === null || file === void 0 ? void 0 : file.name;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__single-input-preview ").concat(classPrefix, "-input ").concat(disabledClass)
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(inputTextClass)
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1("".concat(uploadPrefix, "__single-input-text"), _defineProperty$2({}, props.placeholderClass, props.placeholder && !(file !== null && file !== void 0 && file.name)))
      }, file !== null && file !== void 0 && file.name ? fileName : props.placeholder), (file === null || file === void 0 ? void 0 : file.status) === "progress" && renderProgress(file.percent), (file === null || file === void 0 ? void 0 : file.status) === "waiting" && /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon, {
        className: "".concat(uploadPrefix, "__status-icon ").concat(uploadPrefix, "__file-waiting")
      }), (file === null || file === void 0 ? void 0 : file.name) && file.status === "success" && /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
        className: "".concat(uploadPrefix, "__status-icon")
      }), (file === null || file === void 0 ? void 0 : file.name) && file.status === "fail" && /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, {
        className: "".concat(uploadPrefix, "__status-icon ").concat(uploadPrefix, "__file-fail")
      }), Boolean(!disabled && (file === null || file === void 0 ? void 0 : file.name)) && /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
        className: "".concat(uploadPrefix, "__single-input-clear"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            file: file,
            index: 0
          });
        }
      })));
    };
    var displayFiles = props.displayFiles,
      fileListDisplay = props.fileListDisplay;
    var fileListDisplayNode = parseTNode(fileListDisplay, {
      onRemove: props.onRemove,
      toUploadFiles: props.toUploadFiles,
      sizeOverLimitMessage: props.sizeOverLimitMessage,
      locale: props.locale,
      files: displayFiles
    });
    var classes = ["".concat(uploadPrefix, "__single"), "".concat(uploadPrefix, "__single-").concat(theme)];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes)
    }, theme === "file-input" && renderFilePreviewAsInput(), props.children, theme === "file" && props.placeholder && !displayFiles[0] && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1([props.tipsClasses, props.placeholderClass])
    }, props.placeholder), fileListDisplayNode === null ? null : fileListDisplayNode || renderFilePreviewAsText(displayFiles), !props.multiple && ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail" && theme === "file" ? /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(props.errorClasses)
    }, ((_displayFiles$0$respo = displayFiles[0].response) === null || _displayFiles$0$respo === void 0 ? void 0 : _displayFiles$0$respo.error) || locale.progress.failText) : null);
  }
  NormalFile.displayName = "NormalFile";

  function useDrag$1(props) {
    var accept = props.accept;
    var _useState = React.useState(null),
      _useState2 = _slicedToArray$1(_useState, 2),
      target = _useState2[0],
      setTarget = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      dragActive = _useState4[0],
      setDragActive = _useState4[1];
    var handleDrop = function handleDrop(event) {
      var _props$onDrop;
      event.preventDefault();
      setDragActive(false);
      var files = event.dataTransfer.files;
      var dragFiles = getFileList(files, accept);
      if (dragFiles.length) {
        var _props$onDragFileChan;
        (_props$onDragFileChan = props.onDragFileChange) === null || _props$onDragFileChan === void 0 || _props$onDragFileChan.call(props, dragFiles);
      }
      (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 || _props$onDrop.call(props, {
        e: event
      });
    };
    var handleDragenter = function handleDragenter(event) {
      var _props$onDragenter;
      event.preventDefault();
      setTarget(event.target);
      (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 || _props$onDragenter.call(props, {
        e: event
      });
      setDragActive(true);
    };
    var handleDragleave = function handleDragleave(event) {
      var _props$onDragleave;
      if (event.target !== target) return;
      event.preventDefault();
      (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 || _props$onDragleave.call(props, {
        e: event
      });
      setDragActive(false);
    };
    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };
    return {
      target: target,
      dragActive: dragActive,
      handleDrop: handleDrop,
      handleDragenter: handleDragenter,
      handleDragleave: handleDragleave,
      handleDragover: handleDragover
    };
  }

  function useImagePreviewUrl(imgUrl) {
    var _useState = React.useState(""),
      _useState2 = _slicedToArray$1(_useState, 2),
      previewUrl = _useState2[0],
      setPreviewUrl = _useState2[1];
    React.useEffect(function () {
      if (!imgUrl) return;
      if (typeof imgUrl === "string") {
        setPreviewUrl(imgUrl);
        return;
      }
      getFileUrlByFileRaw(imgUrl).then(function (url) {
        setPreviewUrl(url);
      }, function () {
        log.error("Image", "Image.src is not a valid file");
      });
    }, [imgUrl]);
    return {
      previewUrl: previewUrl
    };
  }

  var imageDefaultProps = {
    fit: "fill",
    gallery: false,
    lazy: false,
    overlayTrigger: "always",
    position: "center",
    shape: "square"
  };

  var spaceDefaultProps = {
    breakLine: false,
    direction: "horizontal",
    size: "medium"
  };

  function ownKeys$1g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1g(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SizeMap = {
    small: "8px",
    medium: "16px",
    large: "24px"
  };
  var defaultNeedPolyfill = getFlexGapPolyFill();
  var _toArray = function toArray(children) {
    var ret = [];
    React__default["default"].Children.forEach(children, function (child) {
      if (child === void 0 || child === null) {
        return;
      }
      if (Array.isArray(child)) {
        ret = ret.concat(_toArray(child));
      } else if (reactIs$1.exports.isFragment(child) && child.props) {
        ret = ret.concat(_toArray(child.props.children));
      } else {
        ret.push(child);
      }
    });
    return ret;
  };
  var EMPTY_NODE = ["", false, null, void 0];
  var Space$1 = /*#__PURE__*/React__default["default"].forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, spaceDefaultProps);
    var className = props.className,
      style = props.style,
      align = props.align,
      direction = props.direction,
      size = props.size,
      breakLine = props.breakLine,
      separator = props.separator,
      forceFlexGapPolyfill = props.forceFlexGapPolyfill;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var needPolyfill = Boolean(forceFlexGapPolyfill || defaultNeedPolyfill);
    var renderStyle = React.useMemo(function () {
      var renderGap = "";
      if (Array.isArray(size)) {
        renderGap = size.map(function (s) {
          if (typeof s === "number") {
            return "".concat(s, "px");
          }
          if (typeof s === "string") {
            return SizeMap[s] || s;
          }
          return s;
        }).join(" ");
      } else if (typeof size === "string") {
        renderGap = SizeMap[size] || size;
      } else if (typeof size === "number") {
        renderGap = "".concat(size, "px");
      }
      var tStyle = _objectSpread$1g({}, style);
      if (needPolyfill) {
        var _renderGap$split = renderGap.split(" "),
          _renderGap$split2 = _slicedToArray$1(_renderGap$split, 2),
          columnGap = _renderGap$split2[0],
          rowGap = _renderGap$split2[1];
        tStyle["--td-space-column-gap"] = columnGap;
        tStyle["--td-space-row-gap"] = rowGap || columnGap;
      } else {
        tStyle.gap = renderGap;
      }
      return tStyle;
    }, [style, size, needPolyfill]);
    var childrenNode = React__default["default"].useMemo(function () {
      var children = _toArray(props.children);
      var childCount = React__default["default"].Children.count(children);
      return React__default["default"].Children.map(children, function (child, index) {
        var showSeparator = index + 1 !== childCount && separator;
        return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, EMPTY_NODE.includes(child) ? null : /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-space-item")
        }, child), showSeparator && /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-space-item-separator")
        }, separator));
      });
    }, [props.children, classPrefix, separator]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: renderStyle,
      className: classNames$1("".concat(classPrefix, "-space"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-space-align-").concat(align), align), "".concat(classPrefix, "-space-").concat(direction), direction), "".concat(classPrefix, "-space--break-line"), breakLine), "".concat(classPrefix, "-space--polyfill"), needPolyfill))
    }, childrenNode);
  });
  Space$1.displayName = "Space";

  var Space = Space$1;

  var _excluded$m = ["className", "src", "style", "fit", "position", "shape", "placeholder", "loading", "error", "overlayTrigger", "lazy", "gallery", "overlayContent", "srcset", "fallback", "onLoad", "onError"],
    _excluded2$1 = ["alt", "referrerpolicy"];
  function ownKeys$1f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1f(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function isImageValid(src) {
    return new Promise(function (resolve) {
      var img = document.createElement("img");
      img.onerror = function () {
        return resolve(false);
      };
      img.onload = function () {
        return resolve(true);
      };
      img.src = src;
    });
  }
  var InternalImage = function InternalImage(originalProps, ref) {
    var props = useDefaultProps(originalProps, imageDefaultProps);
    var className = props.className,
      src = props.src,
      style = props.style,
      fit = props.fit,
      position = props.position,
      shape = props.shape,
      placeholder = props.placeholder,
      loading = props.loading,
      error = props.error,
      overlayTrigger = props.overlayTrigger,
      lazy = props.lazy,
      gallery = props.gallery,
      overlayContent = props.overlayContent,
      srcset = props.srcset,
      fallback = props.fallback,
      onLoad = props.onLoad,
      onError = props.onError,
      waitPassRest = _objectWithoutProperties$2(props, _excluded$m);
    var alt = waitPassRest.alt,
      referrerpolicy = waitPassRest.referrerpolicy,
      rest = _objectWithoutProperties$2(waitPassRest, _excluded2$1);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var imageRef = React.useRef(null);
    var _useLocaleReceiver = useLocaleReceiver("image"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useGlobalIcon = useGlobalIcon({
        ImageErrorIcon: TdImageErrorIcon,
        ImageIcon: TdImageIcon
      }),
      ImageErrorIcon = _useGlobalIcon.ImageErrorIcon,
      ImageIcon = _useGlobalIcon.ImageIcon;
    React__default["default"].useImperativeHandle(ref, function () {
      return imageRef.current;
    });
    var _useState = React.useState(src),
      _useState2 = _slicedToArray$1(_useState, 2),
      imageSrc = _useState2[0],
      setImageSrc = _useState2[1];
    React.useEffect(function () {
      var tmpUrl = isFunction$1(local.replaceImageSrc) ? local.replaceImageSrc(props) : src;
      if (tmpUrl === imageSrc && imageSrc) return;
      setImageSrc(tmpUrl);
    }, [src, local, props]);
    var _useImagePreviewUrl = useImagePreviewUrl(imageSrc),
      previewUrl = _useImagePreviewUrl.previewUrl;
    var _useState3 = React.useState(!lazy),
      _useState4 = _slicedToArray$1(_useState3, 2),
      shouldLoad = _useState4[0],
      setShouldLoad = _useState4[1];
    var handleLoadImage = function handleLoadImage() {
      setShouldLoad(true);
    };
    var _useState5 = React.useState(false),
      _useState6 = _slicedToArray$1(_useState5, 2),
      isLoaded = _useState6[0],
      setIsLoaded = _useState6[1];
    var handleLoad = function handleLoad(e) {
      setIsLoaded(true);
      onLoad === null || onLoad === void 0 || onLoad({
        e: e
      });
    };
    React.useEffect(function () {
      if (!lazy || !(imageRef !== null && imageRef !== void 0 && imageRef.current)) {
        return;
      }
      var observerRefValue = null;
      var io = observe(imageRef.current, null, handleLoadImage, 0);
      observerRefValue = imageRef.current;
      return function () {
        observerRefValue && io && io.unobserve(observerRefValue);
      };
    }, [lazy, imageRef]);
    var _useState7 = React.useState(false),
      _useState8 = _slicedToArray$1(_useState7, 2),
      hasError = _useState8[0],
      setHasError = _useState8[1];
    var isFirstError = React.useRef(false);
    var handleError = function handleError(e) {
      isFirstError.current = true;
      setHasError(true);
      if (fallback) {
        setImageSrc(fallback);
        setHasError(false);
      }
      onError === null || onError === void 0 || onError({
        e: e
      });
    };
    var imgRef = React.useRef(null);
    React.useEffect(function () {
      if (hasError && previewUrl) {
        setHasError(false);
      }
      previewUrl && isImageValid(previewUrl).then(function (isValid) {
        setTimeout(function () {
          if (!isValid && !isFirstError.current) {
            handleError(imgRef.current);
          }
        }, 0);
      });
    }, [previewUrl]);
    React.useEffect(function () {
      if (imgRef.current) {
        var _imgRef$current = imgRef.current,
          complete = _imgRef$current.complete,
          naturalWidth = _imgRef$current.naturalWidth,
          naturalHeight = _imgRef$current.naturalHeight;
        if (complete && naturalWidth !== 0 && naturalHeight !== 0) {
          handleLoad(imgRef.current);
        }
      }
    }, []);
    var hasMouseEvent = overlayTrigger === "hover";
    var _useState9 = React.useState(!hasMouseEvent),
      _useState0 = _slicedToArray$1(_useState9, 2),
      shouldShowOverlay = _useState0[0],
      setShouldShowOverlay = _useState0[1];
    var handleToggleOverlay = function handleToggleOverlay(overlay) {
      setShouldShowOverlay(overlay);
    };
    var renderOverlay = function renderOverlay() {
      if (!overlayContent) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(classPrefix, "-image__overlay-content"), !shouldShowOverlay && "".concat(classPrefix, "-image__overlay-content--hidden"))
      }, overlayContent);
    };
    var renderPlaceholder = function renderPlaceholder() {
      if (!placeholder) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-image__placeholder")
      }, placeholder);
    };
    var renderGalleryShadow = function renderGalleryShadow() {
      if (!gallery) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-image__gallery-shadow")
      });
    };
    var renderImage = function renderImage() {
      var url = typeof imageSrc === "string" ? imageSrc : previewUrl;
      return /* @__PURE__ */React__default["default"].createElement("img", {
        ref: imgRef,
        src: url,
        onError: handleError,
        onLoad: handleLoad,
        className: classNames$1("".concat(classPrefix, "-image"), "".concat(classPrefix, "-image--fit-").concat(fit), "".concat(classPrefix, "-image--position-").concat(position)),
        alt: alt,
        referrerPolicy: referrerpolicy
      });
    };
    var renderImageSrcset = function renderImageSrcset() {
      return /* @__PURE__ */React__default["default"].createElement("picture", null, Object.entries(props.srcset).map(function (_ref) {
        var _ref2 = _slicedToArray$1(_ref, 2),
          type = _ref2[0],
          url = _ref2[1];
        return /* @__PURE__ */React__default["default"].createElement("source", {
          key: url,
          type: type,
          srcSet: url
        });
      }), props.src && renderImage());
    };
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1f(_objectSpread$1f({
      ref: imageRef,
      className: classNames$1("".concat(classPrefix, "-image__wrapper"), "".concat(classPrefix, "-image__wrapper--shape-").concat(shape), gallery && "".concat(classPrefix, "-image__wrapper--gallery"), hasMouseEvent && "".concat(classPrefix, "-image__wrapper--need-hover"), className),
      style: style
    }, hasMouseEvent ? {
      onMouseEnter: function onMouseEnter() {
        return handleToggleOverlay(true);
      },
      onMouseLeave: function onMouseLeave() {
        return handleToggleOverlay(false);
      }
    } : null), rest), renderPlaceholder(), renderGalleryShadow(), !(hasError || !shouldLoad) && /* @__PURE__ */React__default["default"].createElement(React.Fragment, null, srcset && Object.keys(srcset).length ? renderImageSrcset() : renderImage(), !(hasError || !shouldLoad) && !isLoaded && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image__loading")
    }, loading || /* @__PURE__ */React__default["default"].createElement(Space, {
      direction: "vertical",
      size: 8,
      align: "center"
    }, /* @__PURE__ */React__default["default"].createElement(ImageIcon, {
      size: 24
    }), typeof loading === "string" ? loading : t(local.loadingText)))), hasError && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image__error")
    }, error || /* @__PURE__ */React__default["default"].createElement(Space, {
      direction: "vertical",
      size: 8,
      align: "center"
    }, /* @__PURE__ */React__default["default"].createElement(ImageErrorIcon, {
      size: 24
    }), typeof error === "string" ? error : t(local.errorText))), renderOverlay());
  };
  var Image$2 = /*#__PURE__*/React__default["default"].forwardRef(InternalImage);
  Image$2.displayName = "Image";

  var Image$1 = Image$2;

  function ownKeys$1e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1e(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ImageModalMiniContent = function ImageModalMiniContent(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer-mini__content")
    }, /* @__PURE__ */React__default["default"].createElement(ImageModalItem, {
      rotateZ: props.rotateZ,
      scale: props.scale,
      mirror: props.mirror,
      src: props.currentImage.mainImage,
      preSrc: props.currentImage.thumbnail,
      errorText: props.errorText,
      imageReferrerpolicy: props.imageReferrerpolicy,
      isSvg: props.currentImage.isSvg
    }));
  };
  var ImageModalMini = function ImageModalMini(props) {
    var visible = props.visible,
      title = props.title,
      scale = props.scale,
      currentImage = props.currentImage,
      draggable = props.draggable,
      tipText = props.tipText,
      onZoomOut = props.onZoomOut,
      onZoom = props.onZoom,
      onClose = props.onClose,
      onRotate = props.onRotate,
      onMirror = props.onMirror,
      onReset = props.onReset;
    var _useConfig2 = useConfig$2(),
      classPrefix = _useConfig2.classPrefix;
    var footer = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer-mini__footer")
    }, /* @__PURE__ */React__default["default"].createElement(ImageViewerUtils, {
      scale: scale,
      tipText: tipText,
      currentImage: currentImage,
      zIndex: props.zIndex + 1,
      onZoom: onZoom,
      onZoomOut: onZoomOut,
      onRotate: onRotate,
      onMirror: onMirror,
      onReset: onReset
    }));
    return /* @__PURE__ */React__default["default"].createElement(Dialog, {
      className: "".concat(classPrefix, "-image-viewer__dialog"),
      draggable: draggable,
      visible: visible,
      width: "min(90vw, 1000px)",
      placement: "center",
      mode: "modeless",
      closeOnOverlayClick: false,
      cancelBtn: null,
      confirmBtn: null,
      header: /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-image-viewer__dialog-title")
      }, title),
      footer: footer,
      onClose: onClose
    }, /* @__PURE__ */React__default["default"].createElement(ImageModalMiniContent, _objectSpread$1e({}, props)));
  };

  var useIconMap = function useIconMap() {
    var Icons = useGlobalIcon({
      ChevronDownIcon: TdChevronDownIcon,
      ChevronLeftIcon: TdChevronLeftIcon,
      ChevronRightIcon: TdChevronRightIcon,
      CloseIcon: TdCloseIcon,
      DownloadIcon: TdDownloadIcon,
      MirrorIcon: TdMirrorIcon,
      RotationIcon: TdRotationIcon,
      ZoomInIcon: TdZoomInIcon,
      ZoomOutIcon: TdZoomOutIcon
    });
    return {
      rotation: Icons.RotationIcon,
      "zoom-in": Icons.ZoomInIcon,
      mirror: Icons.MirrorIcon,
      "zoom-out": Icons.ZoomOutIcon,
      download: Icons.DownloadIcon,
      "chevron-left": Icons.ChevronLeftIcon,
      "chevron-right": Icons.ChevronRightIcon,
      "chevron-down": Icons.ChevronDownIcon,
      close: Icons.CloseIcon
    };
  };

  var useIndex = function useIndex(resProps, images) {
    var _useControlled = useControlled(resProps, "index", resProps.onIndexChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      index = _useControlled2[0],
      setIndex = _useControlled2[1];
    var next = React.useCallback(function () {
      var newIndex = index + 1;
      if (newIndex >= images.length) return index;
      setIndex(newIndex, {
        trigger: "next"
      });
    }, [setIndex, index, images.length]);
    var prev = React.useCallback(function () {
      var newIndex = index - 1 > 0 ? index - 1 : 0;
      setIndex(newIndex, {
        trigger: "prev"
      });
    }, [index, setIndex]);
    return {
      index: index,
      next: next,
      prev: prev,
      setIndex: setIndex
    };
  };

  var useMirror = function useMirror() {
    var _useState = React.useState(1),
      _useState2 = _slicedToArray$1(_useState, 2),
      mirror = _useState2[0],
      setMirror = _useState2[1];
    var onMirror = React.useCallback(function () {
      setMirror(function (mirror2) {
        return mirror2 > 0 ? -1 : 1;
      });
    }, []);
    var onResetMirror = React.useCallback(function () {
      return setMirror(1);
    }, []);
    return {
      mirror: mirror,
      onResetMirror: onResetMirror,
      onMirror: onMirror
    };
  };

  var usePosition = function usePosition(imgRef, options) {
    var _ref = options || {},
      _ref$initPosition = _ref.initPosition,
      initPosition = _ref$initPosition === void 0 ? [0, 0] : _ref$initPosition;
    var _useState = React.useState(initPosition),
      _useState2 = _slicedToArray$1(_useState, 2),
      position = _useState2[0],
      setPosition = _useState2[1];
    var lastScreenPositionRef = React.useRef(null);
    useMouseEvent(imgRef, {
      onDown: function onDown(e) {
        var screenX = e.screenX,
          screenY = e.screenY;
        lastScreenPositionRef.current = {
          x: screenX,
          y: screenY
        };
      },
      onMove: function onMove(e) {
        if (!lastScreenPositionRef.current) return;
        var screenX = e.screenX,
          screenY = e.screenY;
        var _lastScreenPositionRe = lastScreenPositionRef.current,
          lastX = _lastScreenPositionRe.x,
          lastY = _lastScreenPositionRe.y;
        setPosition(function (_ref2) {
          var _ref3 = _slicedToArray$1(_ref2, 2),
            x = _ref3[0],
            y = _ref3[1];
          return [x + screenX - lastX, y + screenY - lastY];
        });
        lastScreenPositionRef.current = {
          x: screenX,
          y: screenY
        };
      },
      onUp: function onUp() {
        lastScreenPositionRef.current = null;
      }
    });
    return {
      position: position
    };
  };

  var useRotate = function useRotate() {
    var rotRef = React.useRef(0);
    var _useState = React.useState(0),
      _useState2 = _slicedToArray$1(_useState, 2),
      rotateZ = _useState2[0],
      setRotateZ = _useState2[1];
    var onRotate = React.useCallback(function (ROTATE_COUNT) {
      setRotateZ(function (rotateZ2) {
        rotRef.current = rotateZ2 + ROTATE_COUNT;
        return rotateZ2 + ROTATE_COUNT;
      });
    }, []);
    var onResetRotate = React.useCallback(function () {
      var degreeToRotate = rotRef.current % 360;
      if (Math.abs(degreeToRotate) > 180) {
        degreeToRotate = (degreeToRotate + 360) % 360;
      }
      if (degreeToRotate !== 0) {
        setRotateZ(function (rotateZ2) {
          rotRef.current = rotateZ2 - degreeToRotate;
          return rotateZ2 - degreeToRotate;
        });
      }
    }, []);
    return {
      rotateZ: rotateZ,
      onResetRotate: onResetRotate,
      onRotate: onRotate
    };
  };

  var useScale = function useScale(imageScale, visible) {
    var _imageScale$max = imageScale.max,
      max = _imageScale$max === void 0 ? Infinity : _imageScale$max,
      _imageScale$min = imageScale.min,
      min = _imageScale$min === void 0 ? 0 : _imageScale$min,
      _imageScale$step = imageScale.step,
      step = _imageScale$step === void 0 ? 0.1 : _imageScale$step,
      _imageScale$defaultSc = imageScale.defaultScale,
      defaultScale = _imageScale$defaultSc === void 0 ? 1 : _imageScale$defaultSc;
    var calcDefaultScale = React.useCallback(function () {
      return Math.max(Math.min(defaultScale, max), min);
    }, [defaultScale, max, min]);
    var distance = React.useRef(0);
    var _useState = React.useState(calcDefaultScale()),
      _useState2 = _slicedToArray$1(_useState, 2),
      scale = _useState2[0],
      setScale = _useState2[1];
    var onZoom = React.useCallback(function () {
      setScale(function (scale2) {
        var newScale = scale2 + step;
        if (newScale < min) return min;
        if (newScale > max) return max;
        return newScale;
      });
    }, [max, min, step]);
    var onZoomOut = React.useCallback(function () {
      setScale(function (scale2) {
        var newScale = scale2 - step;
        if (newScale < min) return min;
        if (newScale > max) return max;
        return newScale;
      });
    }, [max, min, step]);
    var onResetScale = React.useCallback(function () {
      setScale(calcDefaultScale());
    }, [calcDefaultScale]);
    var onWheel = React.useCallback(function (e) {
      e.preventDefault();
      e.deltaY < 0 ? onZoom() : onZoomOut();
    }, [onZoom, onZoomOut]);
    var onTouchStart = React.useCallback(function (e) {
      if (e.touches.length !== 2) return;
      e.preventDefault();
      var _Array$from = Array.from(e.touches),
        _Array$from2 = _slicedToArray$1(_Array$from, 2),
        touch1 = _Array$from2[0],
        touch2 = _Array$from2[1];
      distance.current = Math.hypot(touch2.pageX - touch1.pageX, touch2.pageY - touch1.pageY);
    }, []);
    var onTouchMove = React.useCallback(function (e) {
      if (e.touches.length !== 2) return;
      e.preventDefault();
      var _Array$from3 = Array.from(e.touches),
        _Array$from4 = _slicedToArray$1(_Array$from3, 2),
        touch1 = _Array$from4[0],
        touch2 = _Array$from4[1];
      var currentDistance = Math.hypot(touch2.pageX - touch1.pageX, touch2.pageY - touch1.pageY);
      if (currentDistance > distance.current) {
        onZoom();
      } else {
        onZoomOut();
      }
      distance.current = currentDistance;
    }, [onZoom, onZoomOut]);
    var onTouchEnd = React.useCallback(function () {
      distance.current = 0;
    }, []);
    React.useEffect(function () {
      if (!visible) return;
      document.addEventListener("wheel", onWheel, {
        passive: false
      });
      document.addEventListener("touchstart", onTouchStart, {
        passive: false
      });
      document.addEventListener("touchmove", onTouchMove, {
        passive: false
      });
      document.addEventListener("touchend", onTouchEnd);
      return function () {
        document.removeEventListener("wheel", onWheel);
        document.removeEventListener("touchstart", onTouchStart);
        document.removeEventListener("touchmove", onTouchMove);
        document.removeEventListener("touchend", onTouchEnd);
      };
    }, [visible, onWheel, onTouchStart, onTouchMove, onTouchEnd]);
    return {
      scale: scale,
      onZoom: onZoom,
      onZoomOut: onZoomOut,
      onResetScale: onResetScale
    };
  };

  var downloadFile = function downloadFile(imgSrc) {
    var _imgSrc$split;
    var image = new Image();
    var name = (imgSrc === null || imgSrc === void 0 || (_imgSrc$split = imgSrc.split) === null || _imgSrc$split === void 0 ? void 0 : _imgSrc$split.call(imgSrc, "/").pop()) || Math.random().toString(32).slice(2);
    image.setAttribute("crossOrigin", "anonymous");
    image.onload = function () {
      var canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      var context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, image.width, image.height);
      canvas.toBlob(function (blob) {
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.download = name;
        a.href = url;
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      });
    };
    image.src = imgSrc;
  };

  var _excluded$l = ["closeOnOverlay", "showOverlay", "zIndex", "images", "isMini", "imageScale", "viewerScale", "closeBtn", "draggable", "visible", "title", "closeOnEscKeydown", "imageReferrerpolicy", "onOpen", "onClose", "onDownload"];
  var ImageError = function ImageError(_ref) {
    var errorText = _ref.errorText;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        ImageErrorIcon: TdImageErrorIcon
      }),
      ImageErrorIcon = _useGlobalIcon.ImageErrorIcon;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__img-error")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__img-error-content")
    }, /* @__PURE__ */React__default["default"].createElement(ImageErrorIcon, {
      size: "4em"
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__img-error-text")
    }, errorText)));
  };
  var ImageModalItem = function ImageModalItem(_ref2) {
    var rotateZ = _ref2.rotateZ,
      scale = _ref2.scale,
      src = _ref2.src,
      preSrc = _ref2.preSrc,
      mirror = _ref2.mirror,
      errorText = _ref2.errorText,
      imageReferrerpolicy = _ref2.imageReferrerpolicy,
      isSvg = _ref2.isSvg;
    var _useConfig2 = useConfig$2(),
      classPrefix = _useConfig2.classPrefix;
    var imgRef = React.useRef(null);
    var svgRef = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      loaded = _useState2[0],
      setLoaded = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];
    var imgStyle = {
      transform: "rotateZ(".concat(rotateZ, "deg) scale(").concat(scale, ")"),
      display: !preSrc || loaded ? "block" : "none"
    };
    var _useImagePreviewUrl = useImagePreviewUrl(preSrc),
      preSrcImagePreviewUrl = _useImagePreviewUrl.previewUrl;
    var _useImagePreviewUrl2 = useImagePreviewUrl(src),
      mainImagePreviewUrl = _useImagePreviewUrl2.previewUrl;
    var displayRef = React.useMemo(function () {
      if (isSvg) return svgRef;
      return imgRef;
    }, [isSvg]);
    var _usePosition = usePosition(displayRef),
      position = _usePosition.position;
    var preImgStyle = {
      transform: "rotateZ(".concat(rotateZ, "deg) scale(").concat(scale, ")"),
      display: !loaded ? "block" : "none"
    };
    var boxStyle = {
      transform: "translate(".concat(position[0], "px, ").concat(position[1], "px) scale(").concat(mirror, ", 1)")
    };
    var createSvgShadow = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(url) {
        var _element$classList;
        var response, svgText, element, shadowRoot, container, svgElement, svgViewBox, viewBoxValues, svgViewBoxWidth, svgViewBoxHeight, bbox, calculatedViewBox;
        return regenerator.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 1;
              return fetch(url);
            case 1:
              response = _context.sent;
              if (response.ok) {
                _context.next = 2;
                break;
              }
              setError(true);
              throw new Error("Failed to fetch SVG: ".concat(response.statusText));
            case 2:
              _context.next = 3;
              return response.text();
            case 3:
              svgText = _context.sent;
              element = svgRef.current;
              element.innerHTML = "";
              (_element$classList = element.classList) === null || _element$classList === void 0 || _element$classList.add("".concat(classPrefix, "-image-viewer__modal-image-svg"));
              shadowRoot = element.attachShadow({
                mode: "closed"
              });
              container = document.createElement("div");
              container.style.background = "transparent";
              container.innerHTML = svgText;
              shadowRoot.appendChild(container);
              svgElement = container.querySelector("svg");
              if (svgElement) {
                svgViewBox = svgElement.getAttribute("viewBox");
                if (svgViewBox) {
                  viewBoxValues = svgViewBox.split(/[\s,]/).filter(function (v) {
                    return v;
                  }).map(parseFloat);
                  svgViewBoxWidth = viewBoxValues[2];
                  svgViewBoxHeight = viewBoxValues[3];
                  container.style.width = "".concat(svgViewBoxWidth, "px");
                  container.style.height = "".concat(svgViewBoxHeight, "px");
                } else {
                  bbox = svgElement.getBBox();
                  calculatedViewBox = "".concat(bbox.x, " ").concat(bbox.y, " ").concat(bbox.width, " ").concat(bbox.height);
                  svgElement.setAttribute("viewBox", calculatedViewBox);
                  container.style.width = "".concat(bbox.width, "px");
                  container.style.height = "".concat(bbox.height, "px");
                }
              }
              setLoaded(true);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function createSvgShadow(_x) {
        return _ref3.apply(this, arguments);
      };
    }();
    React.useEffect(function () {
      setError(false);
    }, [preSrcImagePreviewUrl, mainImagePreviewUrl]);
    React.useEffect(function () {
      if (isSvg && mainImagePreviewUrl) {
        createSvgShadow(mainImagePreviewUrl);
      }
    }, [mainImagePreviewUrl]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-pic")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-box"),
      style: boxStyle
    }, error && /* @__PURE__ */React__default["default"].createElement(ImageError, {
      errorText: errorText
    }), !error && !!preSrc && preSrcImagePreviewUrl && /* @__PURE__ */React__default["default"].createElement("img", {
      className: "".concat(classPrefix, "-image-viewer__modal-image"),
      src: preSrcImagePreviewUrl,
      style: preImgStyle,
      referrerPolicy: imageReferrerpolicy,
      alt: "image",
      draggable: "false"
    }), !error && mainImagePreviewUrl && !isSvg && /* @__PURE__ */React__default["default"].createElement("img", {
      ref: imgRef,
      className: "".concat(classPrefix, "-image-viewer__modal-image"),
      src: mainImagePreviewUrl,
      style: imgStyle,
      onLoad: function onLoad() {
        return setLoaded(true);
      },
      onError: function onError() {
        return setError(true);
      },
      referrerPolicy: imageReferrerpolicy,
      alt: "image",
      draggable: "false"
    }), !error && !!mainImagePreviewUrl && isSvg && /* @__PURE__ */React__default["default"].createElement("div", {
      ref: svgRef,
      className: "".concat(classPrefix, "-image-viewer__modal-image"),
      style: imgStyle,
      "data-alt": "svg",
      draggable: "false"
    })));
  };
  var ROTATE_COUNT = 90;
  var ImageModalIcon = function ImageModalIcon(_ref4) {
    var onClick = _ref4.onClick,
      className = _ref4.className,
      disabled = _ref4.disabled,
      isRange = _ref4.isRange,
      name = _ref4.name,
      label = _ref4.label,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? "16px" : _ref4$size;
    var _useConfig3 = useConfig$2(),
      classPrefix = _useConfig3.classPrefix;
    var Icons = useIconMap();
    var Icon = Icons[name];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-image-viewer__modal-icon"), className, _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onClick: onClick
    }, name && /* @__PURE__ */React__default["default"].createElement(Icon, {
      size: size,
      className: isRange ? "is-range" : null
    }), label && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-image-viewer__modal-icon-label")
    }, label));
  };
  var ImageViewerUtils = function ImageViewerUtils(_ref5) {
    var scale = _ref5.scale,
      currentImage = _ref5.currentImage,
      tipText = _ref5.tipText,
      zIndex = _ref5.zIndex,
      onMirror = _ref5.onMirror,
      onRotate = _ref5.onRotate,
      onZoom = _ref5.onZoom,
      onZoomOut = _ref5.onZoomOut,
      onReset = _ref5.onReset,
      onDownload = _ref5.onDownload;
    var _useConfig4 = useConfig$2(),
      classPrefix = _useConfig4.classPrefix;
    var _useGlobalIcon2 = useGlobalIcon({
        MirrorIcon: TdMirrorIcon,
        RotationIcon: TdRotationIcon,
        ImageIcon: TdImageIcon
      }),
      MirrorIcon = _useGlobalIcon2.MirrorIcon,
      RotationIcon = _useGlobalIcon2.RotationIcon,
      ImageIcon = _useGlobalIcon2.ImageIcon;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__utils")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__utils-content")
    }, /* @__PURE__ */React__default["default"].createElement(TooltipLite, {
      className: "".concat(classPrefix, "-image-viewer__utils--tip"),
      content: tipText.mirror,
      showShadow: false,
      zIndex: zIndex
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-icon"),
      onClick: onMirror
    }, /* @__PURE__ */React__default["default"].createElement(MirrorIcon, {
      size: "medium"
    }))), /* @__PURE__ */React__default["default"].createElement(TooltipLite, {
      className: "".concat(classPrefix, "-image-viewer__utils--tip"),
      content: tipText.rotate,
      showShadow: false,
      zIndex: zIndex
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-icon"),
      onClick: function onClick() {
        return onRotate(-ROTATE_COUNT);
      }
    }, /* @__PURE__ */React__default["default"].createElement(RotationIcon, {
      size: "medium"
    }))), /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      size: "medium",
      name: "zoom-out",
      onClick: onZoomOut
    }), /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      className: "".concat(classPrefix, "-image-viewer__utils-scale"),
      size: "medium",
      label: "".concat(largeNumberToFixed(String(scale * 100)), "%")
    }), /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      size: "medium",
      name: "zoom-in",
      onClick: onZoom
    }), /* @__PURE__ */React__default["default"].createElement(TooltipLite, {
      className: "".concat(classPrefix, "-image-viewer__utils--tip"),
      content: tipText.originalSize,
      showShadow: false,
      zIndex: zIndex
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-icon"),
      onClick: onReset
    }, /* @__PURE__ */React__default["default"].createElement(ImageIcon, {
      size: "medium",
      name: "image"
    }))), currentImage.download && /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      size: "medium",
      name: "download",
      onClick: function onClick() {
        if (isFunction$1(onDownload)) {
          onDownload(currentImage.mainImage);
          return;
        }
        downloadFile(currentImage.mainImage);
      }
    })));
  };
  function OneImagePreview(_ref6) {
    var image = _ref6.image,
      classPrefix = _ref6.classPrefix,
      imageReferrerpolicy = _ref6.imageReferrerpolicy;
    var _useImagePreviewUrl3 = useImagePreviewUrl(image.thumbnail || image.mainImage),
      previewUrl = _useImagePreviewUrl3.previewUrl;
    return /* @__PURE__ */React__default["default"].createElement(Image$1, {
      alt: "",
      error: "",
      src: previewUrl,
      className: "".concat(classPrefix, "-image-viewer__header-img"),
      referrerpolicy: imageReferrerpolicy
    });
  }
  var ImageViewerHeader = function ImageViewerHeader(props) {
    var _useConfig5 = useConfig$2(),
      classPrefix = _useConfig5.classPrefix;
    var images = props.images,
      currentIndex = props.currentIndex,
      onImgClick = props.onImgClick,
      imageReferrerpolicy = props.imageReferrerpolicy;
    var _useState5 = React.useState(true),
      _useState6 = _slicedToArray$1(_useState5, 2),
      isExpand = _useState6[0],
      setIsExpand = _useState6[1];
    var transStyle = {
      transform: "translateX(calc(-".concat(currentIndex, " * (40px / 9 * 16 + 4px)))")
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-image-viewer__modal-header"), _defineProperty$2({}, "".concat(classPrefix, "-is-show"), isExpand))
    }, /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      name: "chevron-down",
      className: "".concat(classPrefix, "-image-viewer__header-pre-bt"),
      onClick: function onClick() {
        return setIsExpand(!isExpand);
      }
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__header-prev")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__header-trans"),
      style: transStyle
    }, images.map(function (image, index) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: index,
        className: classNames$1("".concat(classPrefix, "-image-viewer__header-box"), _defineProperty$2({}, "".concat(classPrefix, "-is-active"), index === currentIndex)),
        onClick: function onClick() {
          return onImgClick(index, {
            trigger: "current"
          });
        }
      }, /* @__PURE__ */React__default["default"].createElement(OneImagePreview, {
        image: image,
        classPrefix: classPrefix,
        imageReferrerpolicy: imageReferrerpolicy
      }));
    }))));
  };
  var ImageModal = function ImageModal(props) {
    var closeOnOverlay = props.closeOnOverlay,
      _props$showOverlay = props.showOverlay,
      showOverlay = _props$showOverlay === void 0 ? true : _props$showOverlay,
      zIndex = props.zIndex,
      images = props.images,
      isMini = props.isMini,
      imageScale = props.imageScale,
      viewerScale = props.viewerScale,
      closeBtn = props.closeBtn,
      draggable = props.draggable,
      visible = props.visible,
      title = props.title,
      closeOnEscKeydown = props.closeOnEscKeydown,
      imageReferrerpolicy = props.imageReferrerpolicy,
      onOpen = props.onOpen,
      onClose = props.onClose,
      onDownload = props.onDownload,
      resProps = _objectWithoutProperties$2(props, _excluded$l);
    var _useConfig6 = useConfig$2(),
      classPrefix = _useConfig6.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("imageViewer"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    if (resProps.index === void 0) delete resProps.index;
    var _useIndex = useIndex(resProps, images),
      index = _useIndex.index,
      next = _useIndex.next,
      prev = _useIndex.prev,
      setIndex = _useIndex.setIndex;
    var _useRotate = useRotate(),
      rotateZ = _useRotate.rotateZ,
      onResetRotate = _useRotate.onResetRotate,
      onRotate = _useRotate.onRotate;
    var _useScale = useScale(imageScale, visible),
      scale = _useScale.scale,
      onZoom = _useScale.onZoom,
      onZoomOut = _useScale.onZoomOut,
      onResetScale = _useScale.onResetScale;
    var _useMirror = useMirror(),
      mirror = _useMirror.mirror,
      onResetMirror = _useMirror.onResetMirror,
      onMirror = _useMirror.onMirror;
    var onReset = React.useCallback(function () {
      onResetScale();
      onResetRotate();
      onResetMirror();
    }, [onResetMirror, onResetScale, onResetRotate]);
    var onKeyDown = React.useCallback(function (event) {
      switch (event.key) {
        case "ArrowRight":
          return next();
        case "ArrowLeft":
          return prev();
        case "ArrowUp":
          return onZoom();
        case "ArrowDown":
          return onZoomOut();
        case "Escape":
          return closeOnEscKeydown && (onClose === null || onClose === void 0 ? void 0 : onClose({
            trigger: "esc",
            e: event
          }));
      }
    }, [next, onClose, prev, onZoom, onZoomOut, closeOnEscKeydown]);
    React.useEffect(function () {
      document.addEventListener("keydown", onKeyDown);
      return function () {
        return document.removeEventListener("keydown", onKeyDown);
      };
    }, [onKeyDown]);
    React.useEffect(function () {
      onReset();
    }, [index, onReset]);
    if (!isArray$1(images) || images.length < 1) return null;
    var currentImage = images[index];
    var tipText = {
      mirror: t(locale.mirrorTipText),
      rotate: t(locale.rotateTipText),
      originalSize: t(locale.originalSizeTipText)
    };
    var errorText = t(locale.errorText);
    if (isMini) {
      return /* @__PURE__ */React__default["default"].createElement(ImageModalMini, {
        visible: visible,
        draggable: draggable,
        index: index,
        images: images,
        imageScale: imageScale,
        viewerScale: viewerScale,
        rotateZ: rotateZ,
        zIndex: zIndex,
        currentImage: currentImage,
        mirror: mirror,
        scale: scale,
        title: title,
        errorText: errorText,
        tipText: tipText,
        imageReferrerpolicy: imageReferrerpolicy,
        prev: prev,
        next: next,
        onMirror: onMirror,
        onRotate: onRotate,
        onZoom: onZoom,
        onZoomOut: onZoomOut,
        onReset: onReset,
        onClose: onClose
      });
    }
    var closeNode = closeBtn;
    if (closeBtn === true) {
      closeNode = /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
        name: "close",
        size: "24px",
        className: "".concat(classPrefix, "-image-viewer__modal-close-bt "),
        onClick: function onClick(e) {
          return onClose && onClose({
            trigger: "close-btn",
            e: e
          });
        }
      });
    } else if (isFunction$1(closeBtn)) closeNode = closeBtn({
      onClose: onClose,
      onOpen: onOpen
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-image-viewer-preview-image"), _defineProperty$2({}, "".concat(classPrefix, "-is-hide"), !visible)),
      style: {
        zIndex: zIndex
      }
    }, !!showOverlay && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-mask"),
      onClick: function onClick(e) {
        return closeOnOverlay && (onClose === null || onClose === void 0 ? void 0 : onClose({
          trigger: "overlay",
          e: e
        }));
      }
    }), images.length > 1 && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(ImageViewerHeader, {
      images: images,
      currentIndex: index,
      onImgClick: setIndex,
      imageReferrerpolicy: imageReferrerpolicy
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-image-viewer__modal-index")
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), "".concat(index + 1, "/").concat(images.length)), /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      size: "24px",
      name: "chevron-left",
      className: "".concat(classPrefix, "-image-viewer__modal-prev-bt"),
      onClick: prev,
      disabled: index <= 0
    }), /* @__PURE__ */React__default["default"].createElement(ImageModalIcon, {
      size: "24px",
      name: "chevron-right",
      className: "".concat(classPrefix, "-image-viewer__modal-next-bt"),
      onClick: next,
      disabled: index >= images.length - 1
    })), /* @__PURE__ */React__default["default"].createElement(ImageViewerUtils, {
      scale: scale,
      tipText: tipText,
      currentImage: currentImage,
      zIndex: zIndex + 1,
      onZoom: onZoom,
      onZoomOut: onZoomOut,
      onDownload: onDownload,
      onRotate: onRotate,
      onMirror: onMirror,
      onReset: onReset
    }), closeNode, /* @__PURE__ */React__default["default"].createElement(ImageModalItem, {
      scale: scale,
      rotateZ: rotateZ,
      mirror: mirror,
      preSrc: currentImage.thumbnail,
      src: currentImage.mainImage,
      errorText: errorText,
      imageReferrerpolicy: imageReferrerpolicy,
      isSvg: currentImage.isSvg
    }));
  };

  var imageViewerDefaultProps = {
    closeBtn: true,
    closeOnEscKeydown: true,
    draggable: void 0,
    images: [],
    defaultIndex: 0,
    mode: "modal",
    navigationArrow: true,
    showOverlay: void 0,
    defaultVisible: false
  };

  var useImageScale = function useImageScale(imageScale) {
    var _imageScale$max, _imageScale$min, _imageScale$step;
    var result = {
      max: (_imageScale$max = imageScale === null || imageScale === void 0 ? void 0 : imageScale.max) !== null && _imageScale$max !== void 0 ? _imageScale$max : 2,
      min: (_imageScale$min = imageScale === null || imageScale === void 0 ? void 0 : imageScale.min) !== null && _imageScale$min !== void 0 ? _imageScale$min : 0.5,
      step: (_imageScale$step = imageScale === null || imageScale === void 0 ? void 0 : imageScale.step) !== null && _imageScale$step !== void 0 ? _imageScale$step : 0.5,
      defaultScale: imageScale === null || imageScale === void 0 ? void 0 : imageScale.defaultScale
    };
    if ((imageScale === null || imageScale === void 0 ? void 0 : imageScale.defaultScale) !== void 0) {
      if (imageScale.defaultScale > result.max) {
        result.defaultScale = result.max;
      }
      if (imageScale.defaultScale < result.min) {
        result.defaultScale = result.min;
      }
    }
    return result;
  };

  function ownKeys$1d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1d(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var isImageInfo = function isImageInfo(image) {
    return !!image && !isString(image) && !(image instanceof File);
  };
  var checkImages = function checkImages(images) {
    if (!isArray$1(images)) return [];
    return images.map(function (item) {
      if (isImageInfo(item)) {
        return _objectSpread$1d({
          download: true,
          thumbnail: item.mainImage
        }, item);
      }
      return {
        mainImage: item,
        thumbnail: item,
        download: true
      };
    });
  };
  var useList = function useList(images) {
    return React.useMemo(function () {
      return checkImages(images);
    }, [images]);
  };

  var useViewerScale = function useViewerScale(viewerScale) {
    var result = {
      minWidth: 1e3,
      minHeight: 1e3
    };
    if ((viewerScale === null || viewerScale === void 0 ? void 0 : viewerScale.minWidth) !== void 0) result.minWidth = viewerScale.minWidth;
    if ((viewerScale === null || viewerScale === void 0 ? void 0 : viewerScale.minHeight) !== void 0) result.minHeight = viewerScale.minHeight;
    return result;
  };

  var ImageViewer$1 = function ImageViewer(originalProps) {
    var props = useDefaultProps(originalProps, imageViewerDefaultProps);
    var attach = props.attach,
      mode = props.mode,
      trigger = props.trigger,
      images = props.images,
      title = props.title,
      imageScaleD = props.imageScale,
      viewerScaleD = props.viewerScale;
    var imageViewerAttach = useAttach("imageViewer", attach);
    var _useControlled = useControlled(props, "visible", function (visible2, context) {
        var _props$onClose;
        !visible2 && (props === null || props === void 0 || (_props$onClose = props.onClose) === null || _props$onClose === void 0 ? void 0 : _props$onClose.call(props, context));
      }),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      visible = _useControlled2[0],
      setVisible = _useControlled2[1];
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      visibled = _useState2[0],
      setVisibled = _useState2[1];
    var list = useList(images);
    var imageScale = useImageScale(imageScaleD);
    var viewerScale = useViewerScale(viewerScaleD);
    var isMini = mode === "modeless";
    var close = function close(context) {
      setVisible(false, context);
      setTimeout(function () {
        return setVisibled(false);
      }, 196);
    };
    var open = function open() {
      if (!images) return;
      setVisible(true, null);
      setVisibled(true);
    };
    var uiImage = isFunction$1(trigger) ? trigger({
      open: open,
      close: close,
      onOpen: open,
      onClose: close
    }) : trigger;
    var attachElement = React.useMemo(function () {
      if (!canUseDocument || !imageViewerAttach) return null;
      if (typeof imageViewerAttach === "string") {
        return document.querySelector(imageViewerAttach);
      }
      if (isFunction$1(imageViewerAttach)) {
        return imageViewerAttach();
      }
    }, [imageViewerAttach]);
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, uiImage, (visibled || visible) && /*#__PURE__*/ReactDOM.createPortal(/* @__PURE__ */React__default["default"].createElement(ImageModal, {
      title: title,
      visible: visible,
      images: list,
      isMini: isMini,
      imageScale: imageScale,
      viewerScale: viewerScale,
      zIndex: props.zIndex,
      defaultIndex: props.defaultIndex,
      index: props.index,
      onIndexChange: props.onIndexChange,
      onDownload: props.onDownload,
      draggable: props.draggable,
      closeOnOverlay: props.closeOnOverlay,
      closeBtn: props.closeBtn,
      showOverlay: props.showOverlay,
      closeOnEscKeydown: props.closeOnEscKeydown,
      onClose: close,
      onOpen: open,
      imageReferrerpolicy: props.imageReferrerpolicy
    }), attachElement));
  };
  ImageViewer$1.displayName = "ImageViewer";

  var ImageViewer = ImageViewer$1;

  function ownKeys$1c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1c(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DraggerFile = function DraggerFile(props) {
    var displayFiles = props.displayFiles,
      locale = props.locale,
      disabled = props.disabled,
      trigger = props.trigger,
      accept = props.accept;
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;
    var uploadPrefix = "".concat(props.classPrefix, "-upload");
    var drag = useDrag$1(_objectSpread$1c(_objectSpread$1c({}, props.dragEvents), {}, {
      accept: accept
    }));
    var dragActive = drag.dragActive;
    var draggerFileRef = React.useRef(null);
    var _useGlobalIcon = useGlobalIcon({
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon
      }),
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var firstFile = displayFiles[0];
    var firstFileStatus = firstFile === null || firstFile === void 0 ? void 0 : firstFile.status;
    var classes = React.useMemo(function () {
      return ["".concat(uploadPrefix, "__dragger"), _defineProperty$2({}, "".concat(uploadPrefix, "__dragger-center"), !firstFile), _defineProperty$2({}, "".concat(uploadPrefix, "__dragger-error"), firstFileStatus === "fail")];
    }, [firstFile, firstFileStatus, uploadPrefix]);
    var renderImage = function renderImage() {
      var _file$response;
      var file = displayFiles[0];
      var url = (file === null || file === void 0 ? void 0 : file.url) || (file === null || file === void 0 || (_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.url);
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-img-wrap")
      }, /* @__PURE__ */React__default["default"].createElement(ImageViewer, _objectSpread$1c({
        images: [url],
        trigger: function trigger(_ref3) {
          var open = _ref3.open;
          return /* @__PURE__ */React__default["default"].createElement(Image$1, {
            src: url || file.raw,
            onClick: open
          });
        }
      }, props.imageViewerProps)));
    };
    var renderUploading = function renderUploading() {
      var file = displayFiles[0];
      if ((file === null || file === void 0 ? void 0 : file.status) === "progress") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__single-progress")
        }, /* @__PURE__ */React__default["default"].createElement(Loading, null), /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(uploadPrefix, "__single-percent")
        }, file.percent, "%"));
      }
    };
    var renderMainPreview = function renderMainPreview() {
      var file = displayFiles[0];
      var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
      var fileInfo = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-text")
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__single-name")
      }, fileName), file.status === "progress" && renderUploading(), file.status === "success" && /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, null), file.status === "fail" && /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null)), /* @__PURE__ */React__default["default"].createElement("small", {
        className: "".concat(SIZE.small)
      }, locale.file.fileSizeText, "\uFF1A", getFileSizeText(file.size)), /* @__PURE__ */React__default["default"].createElement("small", {
        className: "".concat(SIZE.small)
      }, locale.file.fileOperationDateText, "\uFF1A", file.uploadTime || "-"));
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-progress")
      }, props.theme === "image" && renderImage(), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-progress-info")
      }, props.fileListDisplay ? parseContentTNode(props.fileListDisplay, {
        files: displayFiles
      }) : fileInfo, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-btns")
      }, ["progress", "waiting"].includes(file.status) && !disabled && /* @__PURE__ */React__default["default"].createElement(Link, {
        theme: "primary",
        hover: "color",
        disabled: disabled,
        className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
        onClick: function onClick(e) {
          var _props$cancelUpload;
          return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
            e: e,
            file: props.toUploadFiles[0] || props.files[0]
          });
        }
      }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), !props.autoUpload && file.status === "waiting" && /* @__PURE__ */React__default["default"].createElement(Link, {
        theme: "primary",
        hover: "color",
        disabled: disabled,
        onClick: function onClick() {
          var _props$uploadFiles;
          return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
        },
        className: "".concat(uploadPrefix, "__dragger-upload-btn")
      }, locale.triggerUploadText.normal)), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__dragger-btns")
      }, /* @__PURE__ */React__default["default"].createElement(Link, {
        theme: "primary",
        hover: "color",
        disabled: disabled,
        className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
        onClick: props.triggerUpload
      }, locale.triggerUploadText.reupload), /* @__PURE__ */React__default["default"].createElement(Link, {
        theme: "danger",
        hover: "color",
        disabled: disabled,
        className: "".concat(uploadPrefix, "__dragger-delete-btn"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: 0,
            file: file
          });
        }
      }, locale.triggerUploadText["delete"]))));
    };
    var renderDefaultDragElement = function renderDefaultDragElement() {
      var _locale$triggerUpload;
      var unActiveElement = /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "--highlight")
      }, (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.normal), /* @__PURE__ */React__default["default"].createElement("span", null, "\xA0\xA0/\xA0\xA0", locale.dragger.draggingText));
      var activeElement = /* @__PURE__ */React__default["default"].createElement("div", null, locale.dragger.dragDropText);
      return dragActive ? activeElement : unActiveElement;
    };
    var getContent = function getContent() {
      var file = displayFiles[0];
      if (file && (["progress", "success", "fail", "waiting"].includes(file.status) || !file.status)) {
        return renderMainPreview();
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__trigger"),
        onClick: props.triggerUpload
      }, props.children || renderDefaultDragElement());
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: draggerFileRef,
      className: classNames$1(classes),
      onDrop: drag.handleDrop,
      onDragEnter: drag.handleDragenter,
      onDragOver: drag.handleDragover,
      onDragLeave: drag.handleDragleave
    }, (parseContentTNode === null || parseContentTNode === void 0 ? void 0 : parseContentTNode(trigger, {
      files: displayFiles,
      dragActive: dragActive
    })) || getContent());
  };
  DraggerFile.displayName = "DraggerFile";

  var _excluded$k = ["className"];
  function ownKeys$1b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ImageCard = function ImageCard(props) {
    var _locale$triggerUpload;
    var displayFiles = props.displayFiles,
      locale = props.locale,
      classPrefix = props.classPrefix,
      multiple = props.multiple,
      _props$max = props.max,
      max = _props$max === void 0 ? 0 : _props$max,
      onRemove = props.onRemove,
      disabled = props.disabled,
      fileListDisplay = props.fileListDisplay,
      _props$imageProps = props.imageProps,
      imageProps = _props$imageProps === void 0 ? {} : _props$imageProps;
    var _useGlobalIcon = useGlobalIcon({
        AddIcon: TdAddIcon,
        BrowseIcon: TdBrowseIcon,
        DeleteIcon: TdDeleteIcon,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon
      }),
      BrowseIcon = _useGlobalIcon.BrowseIcon,
      DeleteIcon = _useGlobalIcon.DeleteIcon,
      AddIcon = _useGlobalIcon.AddIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var imageClassName = imageProps.className,
      restImageProps = _objectWithoutProperties$2(imageProps, _excluded$k);
    var showTrigger = React__default["default"].useMemo(function () {
      if (multiple) {
        return !max || displayFiles.length < max;
      }
      return !(displayFiles !== null && displayFiles !== void 0 && displayFiles[0]);
    }, [displayFiles, max, multiple]);
    var renderMainContent = function renderMainContent(file, index) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__card-content ").concat(classPrefix, "-upload__card-box")
      }, /* @__PURE__ */React__default["default"].createElement(Image$1, _objectSpread$1b(_objectSpread$1b({
        fit: "contain",
        className: classNames$1("".concat(classPrefix, "-upload__card-image"), imageClassName)
      }, restImageProps), {}, {
        src: file.url || file.raw
      })), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__card-mask")
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item"),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /* @__PURE__ */React__default["default"].createElement(ImageViewer, _objectSpread$1b({
        trigger: function trigger(_ref) {
          var open = _ref.open;
          return /* @__PURE__ */React__default["default"].createElement(BrowseIcon, {
            onClick: function onClick(e) {
              var _props$onPreview;
              (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 || _props$onPreview.call(props, {
                file: file,
                index: index,
                e: e
              });
              open();
            }
          });
        },
        images: displayFiles.map(function (t) {
          return t.url || t.raw;
        }),
        defaultIndex: index
      }, props.imageViewerProps))), !disabled && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item-divider")
      }), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item"),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon, {
        onClick: function onClick(e) {
          return onRemove === null || onRemove === void 0 ? void 0 : onRemove({
            e: e,
            file: file,
            index: index
          });
        }
      })))));
    };
    var renderProgressFile = function renderProgressFile(file, loadCard) {
      var _locale$progress;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1([loadCard, "".concat(classPrefix, "-upload__").concat(props.theme, "-").concat(file.status)])
      }, /* @__PURE__ */React__default["default"].createElement(Loading, {
        loading: true,
        size: "medium"
      }), /* @__PURE__ */React__default["default"].createElement("p", null, locale === null || locale === void 0 || (_locale$progress = locale.progress) === null || _locale$progress === void 0 ? void 0 : _locale$progress.uploadingText, props.showUploadProgress ? " ".concat(file.percent, "%") : ""));
    };
    var renderFailFile = function renderFailFile(file, index, loadCard) {
      var _file$response, _locale$progress2;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: loadCard
      }, /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null), /* @__PURE__ */React__default["default"].createElement("p", null, ((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.error) || (locale === null || locale === void 0 || (_locale$progress2 = locale.progress) === null || _locale$progress2 === void 0 ? void 0 : _locale$progress2.failText)), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__card-mask")
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__card-mask-item"),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon, {
        onClick: function onClick(e) {
          var _props$onRemove;
          return (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, {
            e: e,
            file: file,
            index: index
          });
        }
      }))));
    };
    var cardItemClasses = "".concat(classPrefix, "-upload__card-item ").concat(classPrefix, "-is-background");
    if (fileListDisplay) {
      return /* @__PURE__ */React__default["default"].createElement("div", null, parseTNode(fileListDisplay, {
        triggerUpload: props.triggerUpload,
        uploadFiles: props.uploadFiles,
        cancelUpload: props.cancelUpload,
        onPreview: props.onPreview,
        onRemove: props.onRemove,
        toUploadFiles: props.toUploadFiles,
        sizeOverLimitMessage: props.sizeOverLimitMessage,
        locale: props.locale,
        files: displayFiles
      }));
    }
    return /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-upload__card")
    }, displayFiles === null || displayFiles === void 0 ? void 0 : displayFiles.map(function (file, index) {
      var loadCard = "".concat(classPrefix, "-upload__card-container ").concat(classPrefix, "-upload__card-box");
      var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
      var fileNameClassName = "".concat(classPrefix, "-upload__card-name");
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: cardItemClasses,
        key: index
      }, file.status === "progress" && renderProgressFile(file, loadCard), file.status === "fail" && renderFailFile(file, index, loadCard), !["progress", "fail"].includes(file.status) && renderMainContent(file, index), fileName && props.showImageFileName && (file.url ? /* @__PURE__ */React__default["default"].createElement(Link, {
        href: file.url,
        className: fileNameClassName,
        target: "_blank",
        hover: "color",
        size: "small"
      }, fileName) : /* @__PURE__ */React__default["default"].createElement("span", {
        className: fileNameClassName
      }, fileName)));
    }), showTrigger && /* @__PURE__ */React__default["default"].createElement("li", {
      className: cardItemClasses,
      onClick: props.triggerUpload
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(["".concat(classPrefix, "-upload__image-add"), "".concat(classPrefix, "-upload__card-container"), "".concat(classPrefix, "-upload__card-box"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), props.disabled)])
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon, null), /* @__PURE__ */React__default["default"].createElement("p", {
      className: classNames$1(["".concat(classPrefix, "-size-s"), "".concat(classPrefix, "-upload__add-text")])
    }, locale === null || locale === void 0 || (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.image)))));
  };
  ImageCard.displayName = "ImageCard";

  function ownKeys$1a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ImageFlowList = function ImageFlowList(props) {
    var _props$draggable = props.draggable,
      draggable = _props$draggable === void 0 ? true : _props$draggable,
      accept = props.accept,
      showThumbnail = props.showThumbnail,
      cancelUploadButton = props.cancelUploadButton,
      uploadButton = props.uploadButton,
      onPreview = props.onPreview;
    var locale = props.locale,
      uploading = props.uploading,
      disabled = props.disabled,
      displayFiles = props.displayFiles,
      classPrefix = props.classPrefix;
    var uploadPrefix = "".concat(classPrefix, "-upload");
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      currentPreviewFile = _useState2[0],
      setCurrentPreviewFile = _useState2[1];
    var _useState3 = React.useState(0),
      _useState4 = _slicedToArray$1(_useState3, 2),
      previewIndex = _useState4[0],
      setPreviewIndex = _useState4[1];
    var _useGlobalIcon = useGlobalIcon({
        BrowseIcon: TdBrowseIcon,
        DeleteIcon: TdDeleteIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
        TimeFilledIcon: TdTimeFilledIcon,
        FileExcelIcon: TdFileExcelIcon,
        FilePdfIcon: TdFilePdfIcon,
        FileWordIcon: TdFileWordIcon,
        FilePowerpointIcon: TdFilePowerpointIcon,
        FileIcon: TdFileIcon,
        VideoIcon: TdVideoIcon
      }),
      BrowseIcon = _useGlobalIcon.BrowseIcon,
      DeleteIcon = _useGlobalIcon.DeleteIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
      TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
      FileExcelIcon = _useGlobalIcon.FileExcelIcon,
      FilePdfIcon = _useGlobalIcon.FilePdfIcon,
      FileWordIcon = _useGlobalIcon.FileWordIcon,
      FilePowerpointIcon = _useGlobalIcon.FilePowerpointIcon,
      FileIcon = _useGlobalIcon.FileIcon,
      VideoIcon = _useGlobalIcon.VideoIcon;
    var drag = useDrag$1(_objectSpread$1a(_objectSpread$1a({}, props.dragEvents), {}, {
      accept: accept
    }));
    var uploadText = React.useMemo(function () {
      if (uploading) return "".concat(locale.progress.uploadingText);
      return locale.triggerUploadText.normal;
    }, [locale, uploading]);
    var innerDragEvents = draggable ? {
      onDrop: drag.handleDrop,
      onDragEnter: drag.handleDragenter,
      onDragOver: drag.handleDragover,
      onDragLeave: drag.handleDragleave
    } : {};
    var browseIconClick = function browseIconClick(_ref) {
      var e = _ref.e,
        index = _ref.index,
        file = _ref.file,
        viewFiles = _ref.viewFiles;
      setPreviewIndex(index);
      setCurrentPreviewFile(viewFiles);
      onPreview === null || onPreview === void 0 || onPreview({
        file: file,
        index: index,
        e: e
      });
    };
    var previewIndexChange = function previewIndexChange(index) {
      setPreviewIndex(index);
    };
    var closePreview = function closePreview() {
      setCurrentPreviewFile([]);
    };
    var getStatusMap = function getStatusMap() {
      var _locale$progress, _locale$progress2, _locale$progress3, _locale$progress4;
      var iconMap = {
        success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, null),
        fail: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null),
        progress: /* @__PURE__ */React__default["default"].createElement(Loading, null),
        waiting: /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon, null)
      };
      var textMap = {
        success: (_locale$progress = locale.progress) === null || _locale$progress === void 0 ? void 0 : _locale$progress.successText,
        fail: (_locale$progress2 = locale.progress) === null || _locale$progress2 === void 0 ? void 0 : _locale$progress2.failText,
        progress: (_locale$progress3 = locale.progress) === null || _locale$progress3 === void 0 ? void 0 : _locale$progress3.uploadingText,
        waiting: (_locale$progress4 = locale.progress) === null || _locale$progress4 === void 0 ? void 0 : _locale$progress4.waitingText
      };
      return {
        iconMap: iconMap,
        textMap: textMap
      };
    };
    var renderEmpty = function renderEmpty() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__flow-empty")
      }, drag.dragActive ? locale.dragger.dragDropText : locale.dragger.clickAndDragText);
    };
    var renderImgItem = function renderImgItem(file, index) {
      var _file$response;
      var _getStatusMap = getStatusMap(),
        iconMap = _getStatusMap.iconMap,
        textMap = _getStatusMap.textMap;
      var fileName = props.abridgeName && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: "".concat(uploadPrefix, "__card-item"),
        key: file.name + index + file.percent + file.status
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(["".concat(uploadPrefix, "__card-content"), _defineProperty$2({}, "".concat(classPrefix, "-is-bordered"), file.status !== "waiting")])
      }, file.status === "progress" && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__card-status-wrap ").concat(uploadPrefix, "__").concat(props.theme, "-progress")
      }, iconMap[file.status], /* @__PURE__ */React__default["default"].createElement("p", null, textMap[file.status], props.showUploadProgress && " ".concat(file.percent, "%"))), file.status === "fail" && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__card-status-wrap ").concat(uploadPrefix, "__").concat(props.theme, "-fail")
      }, iconMap[file.status], /* @__PURE__ */React__default["default"].createElement("p", null, ((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.error) || textMap[file.status])), (["waiting", "success"].includes(file.status) || !file.status && file.url) && /* @__PURE__ */React__default["default"].createElement(Image$1, {
        className: "".concat(uploadPrefix, "__card-image"),
        fit: "contain",
        src: file.url || file.raw,
        error: "",
        loading: ""
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__card-mask")
      }, (file.url || file.raw) && !["progress", "fail"].includes(file.status) && /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__card-mask-item")
      }, /* @__PURE__ */React__default["default"].createElement(BrowseIcon, {
        onClick: function onClick(event) {
          var e = event.type ? event : event.e;
          browseIconClick({
            e: e,
            index: index,
            file: file,
            viewFiles: displayFiles
          });
        }
      }), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__card-mask-item-divider")
      })), !disabled && /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__card-mask-item ").concat(uploadPrefix, "__delete"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon, null)))), props.showImageFileName && /* @__PURE__ */React__default["default"].createElement("p", {
        className: classNames$1(["".concat(uploadPrefix, "__card-name"), "".concat(uploadPrefix, "__flow-status")])
      }, ["success", "waiting"].includes(file.status) && iconMap[file.status], fileName));
    };
    var renderStatus = function renderStatus(file) {
      var _file$response2;
      var _getStatusMap2 = getStatusMap(),
        iconMap = _getStatusMap2.iconMap,
        textMap = _getStatusMap2.textMap;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(uploadPrefix, "__flow-status")
      }, iconMap[file.status], /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(uploadPrefix, "__").concat(props.theme, "-").concat(file.status)
      }, (_file$response2 = file.response) !== null && _file$response2 !== void 0 && _file$response2.error ? file.response.error || textMap[file.status] : textMap[file.status], props.showUploadProgress && file.status === "progress" ? " ".concat(file.percent || 0, "%") : ""));
    };
    var renderNormalActionCol = function renderNormalActionCol(file, index) {
      var _locale$triggerUpload;
      return /* @__PURE__ */React__default["default"].createElement("td", null, /* @__PURE__ */React__default["default"].createElement(Link, {
        theme: "primary",
        hover: "color",
        className: "".concat(uploadPrefix, "__delete"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, locale === null || locale === void 0 || (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload["delete"]));
    };
    function getFileThumbnailIcon(fileType) {
      if (FILE_PDF_REGEXP.test(fileType)) {
        return /* @__PURE__ */React__default["default"].createElement(FilePdfIcon, null);
      }
      if (FILE_EXCEL_REGEXP.test(fileType)) {
        return /* @__PURE__ */React__default["default"].createElement(FileExcelIcon, null);
      }
      if (FILE_WORD_REGEXP.test(fileType)) {
        return /* @__PURE__ */React__default["default"].createElement(FileWordIcon, null);
      }
      if (FILE_PPT_REGEXP.test(fileType)) {
        return /* @__PURE__ */React__default["default"].createElement(FilePowerpointIcon, null);
      }
      if (VIDEO_REGEXP.test(fileType)) {
        return /* @__PURE__ */React__default["default"].createElement(VideoIcon, null);
      }
      return /* @__PURE__ */React__default["default"].createElement(FileIcon, null);
    }
    function renderFileThumbnail(file) {
      if (!file || !file.raw && file.url) return null;
      var fileType = file.raw.type;
      var className = "".concat(uploadPrefix, "__file-thumbnail");
      if (IMAGE_REGEXP.test(fileType) && (file.url || file.raw)) {
        return /* @__PURE__ */React__default["default"].createElement(Image$1, {
          className: className,
          src: file.url || file.raw,
          fit: "scale-down",
          error: "",
          loading: "",
          onClick: function onClick(e) {
            e.preventDefault();
            browseIconClick({
              e: e,
              index: 0,
              file: file,
              viewFiles: [file]
            });
          }
        });
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: className
      }, getFileThumbnailIcon(fileType));
    }
    var renderBatchActionCol = function renderBatchActionCol(index) {
      var _locale$triggerUpload2;
      return index === 0 ? /* @__PURE__ */React__default["default"].createElement("td", {
        rowSpan: displayFiles.length,
        className: "".concat(uploadPrefix, "__flow-table__batch-row")
      }, /* @__PURE__ */React__default["default"].createElement(Link, {
        theme: "primary",
        hover: "color",
        className: "".concat(uploadPrefix, "__delete"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            index: -1,
            file: void 0
          });
        }
      }, locale === null || locale === void 0 || (_locale$triggerUpload2 = locale.triggerUploadText) === null || _locale$triggerUpload2 === void 0 ? void 0 : _locale$triggerUpload2["delete"])) : null;
    };
    var renderFileList = function renderFileList() {
      var _locale$file, _locale$file2, _locale$file3, _locale$file4;
      if (props.fileListDisplay === null) return null;
      if (props.fileListDisplay) {
        return parseTNode(props.fileListDisplay, {
          cancelUpload: props.cancelUpload,
          uploadFiles: props.uploadFiles,
          onPreview: props.onPreview,
          onRemove: props.onRemove,
          toUploadFiles: props.toUploadFiles,
          sizeOverLimitMessage: props.sizeOverLimitMessage,
          locale: props.locale,
          files: displayFiles,
          dragEvents: innerDragEvents
        });
      }
      return /* @__PURE__ */React__default["default"].createElement("table", _objectSpread$1a({
        className: "".concat(uploadPrefix, "__flow-table")
      }, innerDragEvents), /* @__PURE__ */React__default["default"].createElement("thead", null, /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file = locale.file) === null || _locale$file === void 0 ? void 0 : _locale$file.fileNameText), /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file2 = locale.file) === null || _locale$file2 === void 0 ? void 0 : _locale$file2.fileSizeText), /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file3 = locale.file) === null || _locale$file3 === void 0 ? void 0 : _locale$file3.fileStatusText), disabled ? null : /* @__PURE__ */React__default["default"].createElement("th", null, (_locale$file4 = locale.file) === null || _locale$file4 === void 0 ? void 0 : _locale$file4.fileOperationText))), /* @__PURE__ */React__default["default"].createElement("tbody", null, !displayFiles.length && /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: 4
      }, renderEmpty())), displayFiles.map(function (file, index) {
        var _props$abridgeName;
        var showBatchUploadAction = props.isBatchUpload;
        var deleteNode = showBatchUploadAction && displayFiles.every(function (item) {
          return item.status === "success" || !item.status;
        }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
        var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
        var thumbnailNode = showThumbnail ? /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(uploadPrefix, "__file-info")
        }, renderFileThumbnail(file), fileName) : fileName;
        var fileNameNode = file.url ? /* @__PURE__ */React__default["default"].createElement(Link, {
          href: file.url,
          target: "_blank",
          hover: "color"
        }, thumbnailNode) : thumbnailNode;
        return /* @__PURE__ */React__default["default"].createElement("tr", {
          key: file.name + index
        }, /* @__PURE__ */React__default["default"].createElement("td", {
          className: "".concat(uploadPrefix, "__file-name")
        }, fileNameNode), /* @__PURE__ */React__default["default"].createElement("td", null, returnFileSize(file.size)), /* @__PURE__ */React__default["default"].createElement("td", null, renderStatus(file)), disabled ? null : deleteNode);
      })));
    };
    var renderImageList = function renderImageList() {
      if (props.fileListDisplay) {
        return parseTNode(props.fileListDisplay, _objectSpread$1a(_objectSpread$1a({}, props), {}, {
          files: displayFiles,
          dragEvents: innerDragEvents
        }));
      }
      return /* @__PURE__ */React__default["default"].createElement("ul", {
        className: "".concat(uploadPrefix, "__card clearfix")
      }, displayFiles.map(function (file, index) {
        return renderImgItem(file, index);
      }));
    };
    var renderCancelUploadButton = function renderCancelUploadButton() {
      if (cancelUploadButton === null) return null;
      if (isFunction$1(cancelUploadButton)) return parseTNode(cancelUploadButton);
      var cancelButtonProps = isObject(cancelUploadButton) ? cancelUploadButton : void 0;
      return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1a({
        theme: "default",
        disabled: disabled || !uploading,
        className: "".concat(uploadPrefix, "__cancel"),
        onClick: function onClick(e) {
          var _props$cancelUpload;
          return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
            e: e
          });
        }
      }, cancelButtonProps), locale === null || locale === void 0 ? void 0 : locale.cancelUploadText);
    };
    var renderUploadButton = function renderUploadButton() {
      if (uploadButton === null) return null;
      if (isFunction$1(uploadButton)) return parseTNode(uploadButton);
      var uploadButtonProps = isObject(uploadButton) ? uploadButton : void 0;
      return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$1a({
        disabled: disabled || uploading || !displayFiles.length,
        theme: "primary",
        loading: uploading,
        className: "".concat(uploadPrefix, "__continue"),
        onClick: function onClick() {
          var _props$uploadFiles;
          return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
        }
      }, uploadButtonProps), uploadText);
    };
    var cardClassName = "".concat(uploadPrefix, "__flow-card-area");
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__flow ").concat(uploadPrefix, "__flow-").concat(props.theme)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__flow-op")
    }, props.children, props.placeholder && /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(uploadPrefix, "__flow-placeholder ").concat(uploadPrefix, "__placeholder")
    }, props.placeholder)), props.theme === "image-flow" && /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1a({
      className: cardClassName
    }, innerDragEvents), displayFiles.length ? renderImageList() : renderEmpty()), props.theme === "file-flow" && (displayFiles.length ? renderFileList() : /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1a({
      className: cardClassName
    }, innerDragEvents), renderEmpty())), !props.autoUpload && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(uploadPrefix, "__flow-bottom")
    }, renderCancelUploadButton(), renderUploadButton()), /* @__PURE__ */React__default["default"].createElement(ImageViewer, _objectSpread$1a({
      images: currentPreviewFile.map(function (t) {
        return t.url || t.raw;
      }),
      visible: !!currentPreviewFile.length,
      onClose: closePreview,
      index: previewIndex,
      onIndexChange: previewIndexChange
    }, props.imageViewerProps)));
  };
  ImageFlowList.displayName = "ImageFlowList";

  function ownKeys$19(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$19(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$19(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$19(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function xhr(_ref) {
    var _files$;
    var _ref$method = _ref.method,
      method = _ref$method === void 0 ? "POST" : _ref$method,
      action = _ref.action,
      _ref$withCredentials = _ref.withCredentials,
      withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
      _ref$headers = _ref.headers,
      headers = _ref$headers === void 0 ? {} : _ref$headers,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data,
      file = _ref.file,
      _ref$files = _ref.files,
      files = _ref$files === void 0 ? [] : _ref$files,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? "file" : _ref$name,
      _ref$useMockProgress = _ref.useMockProgress,
      useMockProgress = _ref$useMockProgress === void 0 ? true : _ref$useMockProgress,
      _ref$mockProgressDura = _ref.mockProgressDuration,
      mockProgressDuration = _ref$mockProgressDura === void 0 ? 300 : _ref$mockProgressDura,
      formatRequest = _ref.formatRequest,
      onError = _ref.onError,
      onProgress = _ref.onProgress,
      onSuccess = _ref.onSuccess;
    var innerFiles = files || [];
    var percent = 0;
    var xhr2 = new XMLHttpRequest();
    if (withCredentials) {
      xhr2.withCredentials = true;
    }
    var timer1;
    var timer2;
    if (useMockProgress && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "progress") {
      var timer22 = setTimeout(function () {
        timer1 = setInterval(function () {
          if (percent + 10 < 100) {
            percent = Math.max(percent + 10, percent);
            if (files[0] && percent !== files[0].percent) {
              files[0].percent = percent;
              onProgress({
                percent: percent,
                file: file || innerFiles[0],
                files: innerFiles.map(function (file2) {
                  return _objectSpread$19(_objectSpread$19({}, file2), {}, {
                    percent: percent
                  });
                }),
                type: "mock",
                XMLHttpRequest: xhr2
              });
            }
          } else {
            clearInterval(timer1);
          }
        }, mockProgressDuration);
        clearTimeout(timer22);
      }, mockProgressDuration);
    }
    var requestData = {};
    if (data) {
      var extraData = isFunction$1(data) ? data(innerFiles) : data;
      Object.assign(requestData, extraData);
    }
    innerFiles.forEach(function (file2, index) {
      var fileField = innerFiles.length > 1 ? "".concat(name, "[").concat(index, "]") : name;
      requestData[fileField] = file2.raw;
    });
    if (innerFiles.length === 1) {
      requestData[name] = innerFiles[0].raw;
    } else {
      requestData[name] = innerFiles.map(function (file2) {
        return file2.raw;
      });
    }
    requestData.length = innerFiles.length;
    if (formatRequest) {
      requestData = formatRequest(requestData);
    }
    var formData = new FormData();
    Object.keys(requestData).forEach(function (key) {
      formData.append(key, requestData[key]);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });
    xhr2.onerror = function (event) {
      onError({
        event: event,
        file: file,
        files: innerFiles,
        XMLHttpRequest: xhr2
      });
      clearInterval(timer1);
      clearTimeout(timer2);
    };
    xhr2.ontimeout = function (event) {
      onError({
        event: event,
        file: file,
        files: innerFiles,
        XMLHttpRequest: xhr2
      });
    };
    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var _innerFiles$;
        var realPercent = 0;
        if (event.total > 0) {
          realPercent = Math.round(event.loaded / event.total * 100);
        }
        percent = Math.max(realPercent, percent);
        if (percent !== realPercent && ((_innerFiles$ = innerFiles[0]) === null || _innerFiles$ === void 0 ? void 0 : _innerFiles$.percent) !== percent) {
          var progressFiles = innerFiles.map(function (item) {
            return _objectSpread$19(_objectSpread$19({}, item), {}, {
              percent: percent
            });
          });
          onProgress({
            event: event,
            percent: percent,
            file: file || progressFiles[0],
            files: progressFiles,
            type: "real",
            XMLHttpRequest: xhr2
          });
        }
      };
    }
    xhr2.onload = function (event) {
      var response = {};
      response.XMLHttpRequest = xhr2;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;
      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response,
          XMLHttpRequest: xhr2
        });
      }
      var text = xhr2.responseText || xhr2.response;
      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
        log.error("Upload", "response does not a valid json");
      }
      clearInterval(timer1);
      clearTimeout(timer2);
      innerFiles.forEach(function (file2) {
        var _response;
        file2.percent = 100;
        file2.status = "success";
        file2.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();
      });
      if (_typeof$3(response) === "object") {
        response.XMLHttpRequest = xhr2;
      }
      onSuccess({
        event: event,
        file: file || innerFiles[0],
        files: _toConsumableArray(innerFiles),
        XMLHttpRequest: xhr2,
        response: response
      });
    };
    xhr2.send(formData);
    xhr2.upload.requestParams = requestData;
    xhr2.upload.requestHeaders = headers;
    return xhr2;
  }

  function ownKeys$18(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$18(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$18(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$18(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function handleBeforeUpload(file, params) {
    var sizeLimit = params.sizeLimit,
      beforeUpload = params.beforeUpload;
    var sizePromise = new Promise(function (resolve) {
      var result = null;
      if (sizeLimit) {
        var sizeLimitObj = isNumber(sizeLimit) ? {
          size: sizeLimit,
          unit: "KB"
        } : sizeLimit;
        var limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);
        if (limit) {
          result = sizeLimitObj;
        }
      }
      resolve(result);
    });
    var promiseList = [sizePromise, void 0];
    if (isFunction$1(beforeUpload)) {
      var r = beforeUpload(file);
      var p = r instanceof Promise ? r : new Promise(function (resolve) {
        return resolve(r);
      });
      promiseList[1] = p;
    }
    return new Promise(function (resolve) {
      Promise.all(promiseList).then(function (r) {
        resolve(r);
      });
    });
  }
  function handleError(options) {
    var event = options.event,
      files = options.files,
      response = options.response,
      XMLHttpRequest = options.XMLHttpRequest,
      formatResponse = options.formatResponse;
    var res = response;
    if (isFunction$1(formatResponse)) {
      res = formatResponse(response, {
        file: files[0],
        currentFiles: files
      });
    }
    files.forEach(function (file) {
      file.status = "fail";
      file.response = res;
    });
    return {
      response: res,
      event: event,
      files: files,
      XMLHttpRequest: XMLHttpRequest
    };
  }
  function handleSuccess(params) {
    var event = params.event,
      files = params.files,
      response = params.response,
      XMLHttpRequest = params.XMLHttpRequest;
    if ((files === null || files === void 0 ? void 0 : files.length) <= 0) {
      log.error("Upload", "Empty File in Success Callback");
    }
    files.forEach(function (file) {
      var _file$response;
      file.percent = 100;
      file.status = "success";
      (_file$response = file.response) === null || _file$response === void 0 || delete _file$response.error;
    });
    var res = response;
    files[0].url = res.url || files[0].url;
    return {
      response: res,
      event: event,
      files: files,
      XMLHttpRequest: XMLHttpRequest
    };
  }
  function handleRequestMethodResponse(res) {
    if (!res) {
      log.error("Upload", "`requestMethodResponse` is required.");
      return false;
    }
    if (!res.status) {
      log.error("Upload", "`requestMethodResponse.status` is missing, which value only can be `success` or `fail`");
      return false;
    }
    if (!["success", "fail"].includes(res.status)) {
      log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: 'success', response: { url: '' } }`");
      return false;
    }
    if (res.status === "success" && (!res.response || !res.response.url && !res.response.files)) {
      log.warn("Upload", "`requestMethodResponse.response.url` or `requestMethodResponse.response.files` is required if `status` is `success`");
    }
    return true;
  }
  function uploadOneRequest(params) {
    var action = params.action,
      toUploadFiles = params.toUploadFiles,
      requestMethod = params.requestMethod;
    return new Promise(function (resolve) {
      if (!action && !requestMethod) {
        log.error("Upload", "one of action and requestMethod must be exist.");
        resolve({});
        return;
      }
      if (!toUploadFiles || !toUploadFiles.length) {
        log.warn("Upload", "No files need to be uploaded");
        resolve({});
        return;
      }
      toUploadFiles.forEach(function (file) {
        file.status = "progress";
      });
      if (requestMethod) {
        requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then(function (res) {
          if (!handleRequestMethodResponse(res)) {
            resolve({});
            return;
          }
          var response = res.response || {};
          if (isFunction$1(params.formatResponse)) {
            response = params.formatResponse(response, {
              file: toUploadFiles[0],
              currentFiles: toUploadFiles
            });
          }
          if (res.status === "fail") {
            response.error = res.error || response.error;
          }
          var resultFiles = [];
          if (res.status === "success" && response.files) {
            resultFiles = response.files.map(function (file) {
              var fileInfo = toUploadFiles.find(function (toFile) {
                return file.name && toFile.name === file.name || file.raw && toFile.raw === file.raw;
              });
              return _objectSpread$18(_objectSpread$18(_objectSpread$18({}, fileInfo), file), {}, {
                status: res.status,
                response: response
              });
            });
          } else {
            toUploadFiles.forEach(function (file) {
              var _response;
              file.status = res.status;
              file.response = response;
              file.url = response.url;
              file.percent = res.status === "success" ? 100 : 0;
              file.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();
            });
            resultFiles = toUploadFiles;
          }
          var result = {
            response: response,
            file: resultFiles[0],
            files: resultFiles
          };
          if (res.status === "success") {
            var _params$onResponseSuc;
            (_params$onResponseSuc = params.onResponseSuccess) === null || _params$onResponseSuc === void 0 || _params$onResponseSuc.call(params, result);
          } else if (res.status === "fail") {
            var _params$onResponseErr;
            (_params$onResponseErr = params.onResponseError) === null || _params$onResponseErr === void 0 || _params$onResponseErr.call(params, result);
          }
          resolve({
            status: res.status,
            data: result
          });
        });
      } else {
        var _params$setXhrObject;
        var xhrReq = xhr({
          action: params.action,
          files: params.toUploadFiles,
          useMockProgress: params.useMockProgress,
          mockProgressDuration: params.mockProgressDuration,
          onError: function onError(p) {
            var _params$onResponseErr2;
            var r = handleError(_objectSpread$18(_objectSpread$18({}, p), {}, {
              formatResponse: params.formatResponse
            }));
            (_params$onResponseErr2 = params.onResponseError) === null || _params$onResponseErr2 === void 0 || _params$onResponseErr2.call(params, r);
            resolve({
              status: "fail",
              data: r
            });
          },
          onProgress: params.onResponseProgress,
          onSuccess: function onSuccess(p) {
            var formatResponse = params.formatResponse;
            var res = p.response;
            if (isFunction$1(formatResponse)) {
              res = formatResponse(p.response, {
                file: p.file,
                currentFiles: p.files
              });
            }
            if (res.error) {
              var _params$onResponseErr3;
              var r = handleError(_objectSpread$18(_objectSpread$18({}, p), {}, {
                response: res
              }));
              (_params$onResponseErr3 = params.onResponseError) === null || _params$onResponseErr3 === void 0 || _params$onResponseErr3.call(params, r);
              resolve({
                status: "fail",
                data: r
              });
            } else {
              var _params$onResponseSuc2;
              p.file.response = res;
              p.files[0].response = res;
              var _r = handleSuccess(_objectSpread$18(_objectSpread$18({}, p), {}, {
                response: res
              }));
              (_params$onResponseSuc2 = params.onResponseSuccess) === null || _params$onResponseSuc2 === void 0 || _params$onResponseSuc2.call(params, _r);
              resolve({
                status: "success",
                data: _r
              });
            }
          },
          formatRequest: params.formatRequest,
          data: params.data,
          name: params.name,
          headers: params.headers,
          withCredentials: params.withCredentials,
          method: params.method
        });
        (_params$setXhrObject = params.setXhrObject) === null || _params$setXhrObject === void 0 || _params$setXhrObject.call(params, {
          files: params.toUploadFiles,
          xhrReq: xhrReq
        });
      }
    });
  }
  function updateUploadedFiles(uploadFiles, resultFiles) {
    var existFiles = uploadFiles.filter(function (t) {
      return t.url;
    });
    var newFiles = existFiles;
    var _loop = function _loop() {
      var file = resultFiles[i];
      var index = uploadFiles.findIndex(function (item) {
        return item.raw && item.raw === file.raw || item.name && item.name === file.name;
      });
      var tmpFile = index >= 0 ? _objectSpread$18(_objectSpread$18({}, uploadFiles[index]), file) : file;
      newFiles.push(tmpFile);
    };
    for (var i = 0, len = resultFiles.length; i < len; i++) {
      _loop();
    }
    return newFiles;
  }
  function upload(params) {
    var uploadAllFilesInOneRequest = params.uploadAllFilesInOneRequest,
      toUploadFiles = params.toUploadFiles,
      uploadedFiles = params.uploadedFiles,
      isBatchUpload = params.isBatchUpload;
    var thisUploadFiles = toUploadFiles.filter(function (t) {
      return !t.response || t.response && !t.response.error;
    });
    return new Promise(function (resolve) {
      if (uploadAllFilesInOneRequest || !params.multiple) {
        uploadOneRequest(params).then(function (r) {
          if (r.status === "success") {
            r.data.files = isBatchUpload || !params.multiple ? r.data.files : updateUploadedFiles(uploadedFiles, r.data.files);
          }
          var failedFiles = r.status === "fail" ? r.data.files : [];
          resolve(_objectSpread$18(_objectSpread$18({}, r), {}, {
            failedFiles: failedFiles
          }));
        });
        return;
      }
      var list = thisUploadFiles.map(function (file) {
        return uploadOneRequest(_objectSpread$18(_objectSpread$18({}, params), {}, {
          toUploadFiles: [file]
        }));
      });
      Promise.all(list).then(function (arr) {
        var files = [];
        var failedFiles = [];
        arr.forEach(function (one) {
          if (one.status === "success") {
            files.push(one.data.files[0]);
          } else if (one.status === "fail") {
            failedFiles.push(one.data.files[0]);
          }
        });
        var tFiles = params.autoUpload ? uploadedFiles.concat(files) : uploadedFiles;
        var newFiles = isBatchUpload || !params.multiple ? files : tFiles;
        resolve({
          status: files.length ? "success" : "fail",
          data: {
            files: newFiles
          },
          failedFiles: failedFiles,
          list: arr
        });
      });
    });
  }
  function formatToUploadFile(files, format) {
    var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;
    var percent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    return files.map(function (fileRaw) {
      var file = fileRaw;
      if (isFunction$1(format)) {
        file = format(fileRaw);
      }
      var uploadFile = _objectSpread$18({
        raw: fileRaw,
        lastModified: fileRaw.lastModified,
        name: fileRaw.name,
        size: fileRaw.size,
        type: fileRaw.type,
        percent: percent,
        status: status
      }, file);
      return uploadFile;
    });
  }
  function validateFile(params) {
    var files = params.files,
      uploadValue = params.uploadValue,
      max = params.max,
      allowUploadDuplicateFile = params.allowUploadDuplicateFile;
    return new Promise(function (resolve) {
      var tmpFiles = files.filter(function (file) {
        var sameNameFile = uploadValue.find(function (t) {
          return t.name === file.name;
        });
        return allowUploadDuplicateFile || !sameNameFile;
      });
      var hasSameNameFile = false;
      if (tmpFiles.length < files.length) {
        hasSameNameFile = true;
      }
      if (!tmpFiles.length) {
        var tFiles = formatToUploadFile(files, params.format, params.autoUpload ? "progress" : "waiting");
        resolve({
          hasSameNameFile: hasSameNameFile,
          file: tFiles === null || tFiles === void 0 ? void 0 : tFiles[0],
          files: tFiles,
          validateResult: {
            type: "FILTER_FILE_SAME_NAME"
          }
        });
        return;
      }
      var lengthOverLimit = false;
      if (max && tmpFiles.length && !params.isBatchUpload) {
        var tmpFilesLenToBeAdded = tmpFiles.length;
        tmpFiles = tmpFiles.slice(0, max - uploadValue.length);
        if (tmpFilesLenToBeAdded + uploadValue.length > max) {
          lengthOverLimit = true;
        }
      }
      var formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload ? "progress" : "waiting");
      var allFileValidatePromise;
      if (params.beforeAllFilesUpload) {
        var _params$beforeAllFile;
        var r = (_params$beforeAllFile = params.beforeAllFilesUpload) === null || _params$beforeAllFile === void 0 ? void 0 : _params$beforeAllFile.call(params, formattedFiles);
        allFileValidatePromise = r instanceof Promise ? r : new Promise(function (resolve2) {
          return resolve2(r);
        });
      }
      var promiseList = formattedFiles.map(function (file) {
        return new Promise(function (resolve2) {
          handleBeforeUpload(file, {
            beforeUpload: params.beforeUpload,
            sizeLimit: params.sizeLimit
          }).then(function (_ref) {
            var _ref2 = _slicedToArray$1(_ref, 2),
              sizeResult = _ref2[0],
              customResult = _ref2[1];
            if (sizeResult) {
              resolve2({
                file: file,
                validateResult: {
                  type: "FILE_OVER_SIZE_LIMIT",
                  extra: sizeResult
                }
              });
            } else if (customResult === false) {
              resolve2({
                file: file,
                validateResult: {
                  type: "CUSTOM_BEFORE_UPLOAD"
                }
              });
            }
            resolve2({
              file: file
            });
          });
        });
      });
      Promise.all([allFileValidatePromise].concat(promiseList)).then(function (results) {
        var _results = _toArray$1(results),
          allFilesResult = _results[0],
          others = _results.slice(1);
        if (allFilesResult === false) {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            validateResult: {
              type: "BEFORE_ALL_FILES_UPLOAD"
            },
            files: formattedFiles
          });
        } else {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            fileValidateList: others,
            files: formattedFiles
          });
        }
      });
    });
  }
  function getFilesAndErrors(fileValidateList, getError) {
    var sizeLimitErrors = [];
    var beforeUploadErrorFiles = [];
    var toFiles = [];
    fileValidateList.forEach(function (oneFile) {
      var _oneFile$validateResu, _oneFile$validateResu2;
      if (((_oneFile$validateResu = oneFile.validateResult) === null || _oneFile$validateResu === void 0 ? void 0 : _oneFile$validateResu.type) === "CUSTOM_BEFORE_UPLOAD") {
        beforeUploadErrorFiles.push(oneFile.file);
        return;
      }
      if (((_oneFile$validateResu2 = oneFile.validateResult) === null || _oneFile$validateResu2 === void 0 ? void 0 : _oneFile$validateResu2.type) === "FILE_OVER_SIZE_LIMIT") {
        if (!oneFile.file.response) {
          oneFile.file.response = {};
        }
        oneFile.file.response.error = oneFile.file.response.error || getError(oneFile.validateResult.extra);
        sizeLimitErrors.push(oneFile);
        return;
      }
      toFiles.push(oneFile.file);
    });
    return {
      sizeLimitErrors: sizeLimitErrors,
      beforeUploadErrorFiles: beforeUploadErrorFiles,
      toFiles: toFiles
    };
  }
  function getTriggerTextField(p) {
    if (p.isBatchUpload && p.status) return "reupload";
    if (p.status === "fail") return "reupload";
    if (p.status === "progress") return "uploading";
    if (p.status === "success" || !p.autoUpload && p.status === "waiting") {
      return p.multiple ? "continueUpload" : "reupload";
    }
    return "fileInput";
  }
  function getDisplayFiles(params) {
    var multiple = params.multiple,
      uploadValue = params.uploadValue,
      toUploadFiles = params.toUploadFiles,
      autoUpload = params.autoUpload;
    var waitingUploadFiles = autoUpload ? toUploadFiles : toUploadFiles.filter(function (file) {
      return file.status !== "success";
    });
    if (multiple && !params.isBatchUpload) {
      if (!autoUpload) return uploadValue;
      return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];
    }
    return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];
  }

  function ownKeys$17(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$17(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$17(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$17(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useUpload(props) {
    var inputRef = React.useRef(null);
    var disabled = props.disabled,
      autoUpload = props.autoUpload,
      isBatchUpload = props.isBatchUpload;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("upload"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      globalLocale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useControlled = useControlled(props, "files", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      uploadValue = _useControlled2[0],
      setUploadValue = _useControlled2[1];
    var xhrReq = React.useRef([]);
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      toUploadFiles = _useState2[0],
      setToUploadFiles = _useState2[1];
    var _useState3 = React.useState(""),
      _useState4 = _slicedToArray$1(_useState3, 2),
      sizeOverLimitMessage = _useState4[0],
      setSizeOverLimitMessage = _useState4[1];
    var _useState5 = React.useState({}),
      _useState6 = _slicedToArray$1(_useState5, 2),
      update = _useState6[0],
      forceUpdate = _useState6[1];
    var locale = React.useMemo(function () {
      return merge$3({}, globalLocale, props.locale);
    }, [globalLocale, props.locale]);
    var tipsClasses = "".concat(classPrefix, "-upload__tips ").concat(classPrefix, "-size-s");
    var errorClasses = [tipsClasses].concat("".concat(classPrefix, "-upload__tips-error"));
    var placeholderClass = "".concat(classPrefix, "-upload__placeholder");
    var triggerUploadText = React.useMemo(function () {
      var _uploadValue$;
      var field = getTriggerTextField({
        isBatchUpload: isBatchUpload,
        multiple: props.multiple,
        status: uploadValue === null || uploadValue === void 0 || (_uploadValue$ = uploadValue[0]) === null || _uploadValue$ === void 0 ? void 0 : _uploadValue$.status,
        autoUpload: autoUpload
      });
      return locale.triggerUploadText[field];
    }, [locale.triggerUploadText, uploadValue, props.multiple, isBatchUpload, autoUpload]);
    var _useState7 = React.useState(false),
      _useState8 = _slicedToArray$1(_useState7, 2),
      uploading = _useState8[0],
      setUploading = _useState8[1];
    var _useState9 = React.useState(uploadValue || []),
      _useState0 = _slicedToArray$1(_useState9, 2),
      displayFiles = _useState0[0],
      setDisplayFiles = _useState0[1];
    React.useEffect(function () {
      var files = getDisplayFiles({
        multiple: props.multiple,
        toUploadFiles: toUploadFiles,
        uploadValue: uploadValue ? _toConsumableArray(uploadValue) : [],
        autoUpload: autoUpload,
        isBatchUpload: isBatchUpload
      });
      setDisplayFiles(files);
    }, [props.multiple, toUploadFiles, uploadValue, autoUpload, isBatchUpload, update]);
    var uploadFilePercent = function uploadFilePercent(params) {
      var file = params.file,
        percent = params.percent;
      if (autoUpload) {
        var index = toUploadFiles.findIndex(function (item) {
          return file.raw === item.raw;
        });
        var newFiles = _toConsumableArray(toUploadFiles);
        newFiles[index] = _objectSpread$17(_objectSpread$17({}, newFiles[index]), {}, {
          percent: percent
        });
        setToUploadFiles(newFiles);
      } else {
        var _index = uploadValue.findIndex(function (item) {
          return file.raw === item.raw;
        });
        uploadValue[_index] = _objectSpread$17(_objectSpread$17({}, uploadValue[_index]), {}, {
          percent: percent
        });
        forceUpdate({});
      }
    };
    var updateProgress = function updateProgress(p, toFiles, trigger) {
      if (props.autoUpload) {
        setToUploadFiles(_toConsumableArray(toFiles));
      } else {
        setUploadValue(_toConsumableArray(uploadValue), {
          e: p.event,
          trigger: trigger,
          index: uploadValue.length,
          file: p.files[0]
        });
      }
    };
    var _onResponseError = function onResponseError(p, toFiles) {
      var _props$onOneFileFail;
      if (!p || !p.files || !p.files[0]) return;
      if (toFiles) {
        updateProgress(p, toFiles, "progress-fail");
      }
      var response = p.response,
        event = p.event,
        files = p.files;
      (_props$onOneFileFail = props.onOneFileFail) === null || _props$onOneFileFail === void 0 || _props$onOneFileFail.call(props, {
        e: event,
        file: files === null || files === void 0 ? void 0 : files[0],
        currentFiles: files,
        failedFiles: files,
        response: response
      });
    };
    var _onResponseProgress = function onResponseProgress(p, toFiles) {
      var _props$onProgress;
      updateProgress(p, toFiles, "progress");
      (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 || _props$onProgress.call(props, {
        e: p.event,
        file: p.file,
        currentFiles: p.files,
        percent: p.percent,
        type: p.type,
        XMLHttpRequest: p.XMLHttpRequest
      });
    };
    var _onResponseSuccess = function onResponseSuccess(p, toFiles) {
      if (props.multiple && !props.uploadAllFilesInOneRequest) {
        var _props$onOneFileSucce;
        updateProgress(p, toFiles, "progress-success");
        (_props$onOneFileSucce = props.onOneFileSuccess) === null || _props$onOneFileSucce === void 0 || _props$onOneFileSucce.call(props, {
          e: p.event,
          file: p.files[0],
          response: p.response
        });
      }
    };
    function getSizeLimitError(sizeLimitObj) {
      var limit = sizeLimitObj;
      return limit.message ? t(limit.message, {
        sizeLimit: limit.size
      }) : "".concat(t(locale.sizeLimitMessage, {
        sizeLimit: limit.size
      }), " ").concat(limit.unit);
    }
    var handleNotAutoUpload = function handleNotAutoUpload(toFiles) {
      var tmpFiles = props.multiple && !isBatchUpload ? uploadValue.concat(toFiles) : toFiles;
      if (!tmpFiles.length) return;
      setUploadValue(tmpFiles, {
        trigger: "add",
        index: uploadValue.length,
        file: toFiles[0],
        files: toFiles
      });
      setToUploadFiles([]);
    };
    var onFileChange = function onFileChange(files) {
      var _props$onSelectChange;
      if (disabled) return;
      (_props$onSelectChange = props.onSelectChange) === null || _props$onSelectChange === void 0 || _props$onSelectChange.call(props, _toConsumableArray(files), {
        currentSelectedFiles: formatToUploadFile(_toConsumableArray(files), props.format)
      });
      validateFile({
        uploadValue: uploadValue,
        files: _toConsumableArray(files),
        allowUploadDuplicateFile: props.allowUploadDuplicateFile,
        max: props.multiple ? props.max : 0,
        sizeLimit: props.sizeLimit,
        isBatchUpload: isBatchUpload,
        autoUpload: autoUpload,
        format: props.format,
        beforeUpload: props.beforeUpload,
        beforeAllFilesUpload: props.beforeAllFilesUpload
      }).then(function (args) {
        var _args$validateResult;
        if (((_args$validateResult = args.validateResult) === null || _args$validateResult === void 0 ? void 0 : _args$validateResult.type) === "BEFORE_ALL_FILES_UPLOAD") {
          var _props$onValidate;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {
            type: "BEFORE_ALL_FILES_UPLOAD",
            files: args.files
          });
          return;
        }
        if (args.lengthOverLimit) {
          var _props$onValidate2;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, {
            type: "FILES_OVER_LENGTH_LIMIT",
            files: args.files
          });
          if (!args.files.length) return;
        }
        if (args.hasSameNameFile) {
          var _props$onValidate3;
          (_props$onValidate3 = props.onValidate) === null || _props$onValidate3 === void 0 || _props$onValidate3.call(props, {
            type: "FILTER_FILE_SAME_NAME",
            files: args.files
          });
        }
        if (args.fileValidateList instanceof Array) {
          var _props$onWaitingUploa;
          var _getFilesAndErrors = getFilesAndErrors(args.fileValidateList, getSizeLimitError),
            sizeLimitErrors = _getFilesAndErrors.sizeLimitErrors,
            beforeUploadErrorFiles = _getFilesAndErrors.beforeUploadErrorFiles,
            toFiles = _getFilesAndErrors.toFiles;
          var tmpWaitingFiles = autoUpload ? toFiles : toUploadFiles.concat(toFiles);
          (_props$onWaitingUploa = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa === void 0 || _props$onWaitingUploa.call(props, {
            files: tmpWaitingFiles,
            trigger: "validate"
          });
          if (sizeLimitErrors[0]) {
            var _props$onValidate4;
            setSizeOverLimitMessage(sizeLimitErrors[0].file.response.error);
            (_props$onValidate4 = props.onValidate) === null || _props$onValidate4 === void 0 || _props$onValidate4.call(props, {
              type: "FILE_OVER_SIZE_LIMIT",
              files: sizeLimitErrors.map(function (t2) {
                return t2.file;
              })
            });
          } else {
            setSizeOverLimitMessage("");
            if (beforeUploadErrorFiles.length) {
              var _props$onValidate5;
              (_props$onValidate5 = props.onValidate) === null || _props$onValidate5 === void 0 || _props$onValidate5.call(props, {
                type: "CUSTOM_BEFORE_UPLOAD",
                files: beforeUploadErrorFiles
              });
            }
          }
          if (autoUpload) {
            setToUploadFiles(tmpWaitingFiles);
            uploadFiles(tmpWaitingFiles);
          } else {
            handleNotAutoUpload(tmpWaitingFiles);
          }
        }
      });
      inputRef.current.value = null;
    };
    var onNormalFileChange = function onNormalFileChange(e) {
      var fileList = getFileList(e.target.files);
      onFileChange === null || onFileChange === void 0 || onFileChange(fileList);
    };
    function onDragFileChange(files) {
      onFileChange === null || onFileChange === void 0 || onFileChange(files);
    }
    var onPasteFileChange = function onPasteFileChange(e) {
      onFileChange === null || onFileChange === void 0 || onFileChange(_toConsumableArray(e.clipboardData.files));
    };
    function uploadFiles(toFiles) {
      var notUploadedFiles = uploadValue.filter(function (t2) {
        return t2.status !== "success";
      });
      var files = toFiles || notUploadedFiles;
      if (!files || !files.length) return;
      xhrReq.current = [];
      setUploading(true);
      var promises = files.map(/*#__PURE__*/function () {
        var _ref = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(file) {
          var result;
          return regenerator.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!props.beforeUpload) {
                  _context.next = 3;
                  break;
                }
                _context.next = 1;
                return Promise.resolve(props.beforeUpload(file.raw));
              case 1:
                result = _context.sent;
                if (!(result === false)) {
                  _context.next = 2;
                  break;
                }
                return _context.abrupt("return", Promise.reject(new Error("beforeUpload rejected")));
              case 2:
                return _context.abrupt("return", file);
              case 3:
                return _context.abrupt("return", Promise.resolve(file));
              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
      Promise.all(promises).then(function (validFiles) {
        var filteredFiles = validFiles.filter(Boolean);
        if (!filteredFiles.length) {
          setUploading(false);
          return;
        }
        upload({
          action: props.action,
          method: props.method,
          headers: props.headers,
          name: props.name,
          withCredentials: props.withCredentials,
          uploadedFiles: uploadValue,
          toUploadFiles: filteredFiles,
          multiple: props.multiple,
          isBatchUpload: isBatchUpload,
          autoUpload: autoUpload,
          uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,
          useMockProgress: props.useMockProgress,
          data: props.data,
          mockProgressDuration: props.mockProgressDuration,
          requestMethod: props.requestMethod,
          formatRequest: props.formatRequest,
          formatResponse: props.formatResponse,
          onResponseProgress: function onResponseProgress(p) {
            return _onResponseProgress(p, toFiles);
          },
          onResponseSuccess: function onResponseSuccess(p) {
            return _onResponseSuccess(p, toFiles);
          },
          onResponseError: function onResponseError(p) {
            return _onResponseError(p, toFiles);
          },
          setXhrObject: function setXhrObject(xhr) {
            var _xhr$files$;
            if ((_xhr$files$ = xhr.files[0]) !== null && _xhr$files$ !== void 0 && _xhr$files$.raw && xhrReq.current.find(function (item) {
              return item.files[0].raw === xhr.files[0].raw;
            })) return;
            xhrReq.current = xhrReq.current.concat(xhr);
          }
        }).then(function (_ref2) {
          var status = _ref2.status,
            data = _ref2.data,
            list = _ref2.list,
            failedFiles = _ref2.failedFiles;
          setUploading(false);
          if (status === "success") {
            var _props$onSuccess;
            setUploadValue(_toConsumableArray(data.files), {
              trigger: "add",
              file: data.files[0]
            });
            (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 || _props$onSuccess.call(props, {
              fileList: data.files,
              currentFiles: files,
              file: files[0],
              results: list === null || list === void 0 ? void 0 : list.map(function (t2) {
                return t2.data;
              }),
              response: data.response || list.map(function (t2) {
                return t2.data.response;
              }),
              XMLHttpRequest: data.XMLHttpRequest
            });
            xhrReq.current = [];
          } else if (failedFiles !== null && failedFiles !== void 0 && failedFiles[0]) {
            var _props$onFail;
            (_props$onFail = props.onFail) === null || _props$onFail === void 0 || _props$onFail.call(props, {
              e: data.event,
              file: failedFiles[0],
              failedFiles: failedFiles,
              currentFiles: files,
              response: data.response,
              XMLHttpRequest: data.XMLHttpRequest
            });
          }
          if (autoUpload) {
            var _props$onWaitingUploa2;
            setToUploadFiles(failedFiles);
            (_props$onWaitingUploa2 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa2 === void 0 || _props$onWaitingUploa2.call(props, {
              files: failedFiles,
              trigger: "uploaded"
            });
          }
        });
      })["catch"](function () {
        setUploading(false);
      });
    }
    function onRemove(p) {
      var _props$onRemove;
      setSizeOverLimitMessage("");
      var changePrams = {
        e: p.e,
        trigger: "remove",
        index: p.index,
        file: p.file
      };
      if (isBatchUpload || !props.multiple) {
        var _props$onWaitingUploa3;
        (_props$onWaitingUploa3 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa3 === void 0 || _props$onWaitingUploa3.call(props, {
          files: [],
          trigger: "remove"
        });
        setUploadValue([], changePrams);
        setToUploadFiles([]);
        xhrReq.current = [];
      } else if (!props.autoUpload) {
        uploadValue.splice(p.index, 1);
        setUploadValue(_toConsumableArray(uploadValue), changePrams);
      } else if (p.index < uploadValue.length) {
        uploadValue.splice(p.index, 1);
        setUploadValue(_toConsumableArray(uploadValue), changePrams);
      } else {
        var _props$onWaitingUploa4;
        var tmpFiles = _toConsumableArray(toUploadFiles);
        tmpFiles.splice(p.index - uploadValue.length, 1);
        setToUploadFiles(_toConsumableArray(tmpFiles));
        (_props$onWaitingUploa4 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa4 === void 0 || _props$onWaitingUploa4.call(props, {
          files: _toConsumableArray(tmpFiles),
          trigger: "remove"
        });
      }
      (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 || _props$onRemove.call(props, p);
    }
    var triggerUpload = function triggerUpload() {
      if (disabled || !inputRef.current) return;
      inputRef.current.click();
    };
    var cancelUpload = function cancelUpload(context) {
      var _xhrReq$current, _props$onCancelUpload;
      (_xhrReq$current = xhrReq.current) === null || _xhrReq$current === void 0 || _xhrReq$current.forEach(function (item) {
        var _item$xhrReq;
        (_item$xhrReq = item.xhrReq) === null || _item$xhrReq === void 0 || _item$xhrReq.abort();
      });
      setUploading(false);
      if (autoUpload) {
        setToUploadFiles([]);
      } else {
        setUploadValue(uploadValue.map(function (item) {
          if (item.status !== "success") {
            return _objectSpread$17(_objectSpread$17({}, item), {}, {
              status: "waiting"
            });
          }
          return item;
        }), {
          trigger: "abort"
        });
      }
      if (context !== null && context !== void 0 && context.file && !autoUpload) {
        onRemove === null || onRemove === void 0 || onRemove({
          file: context.file,
          e: context.e,
          index: 0
        });
      }
      (_props$onCancelUpload = props.onCancelUpload) === null || _props$onCancelUpload === void 0 || _props$onCancelUpload.call(props);
    };
    React.useEffect(function () {
      if (!Array.isArray(uploadValue)) {
        setUploadValue([], {
          trigger: "default"
        });
      }
    }, [uploadValue]);
    return {
      t: t,
      locale: locale,
      classPrefix: classPrefix,
      triggerUploadText: triggerUploadText,
      toUploadFiles: toUploadFiles,
      uploadValue: uploadValue,
      displayFiles: displayFiles,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      tipsClasses: tipsClasses,
      errorClasses: errorClasses,
      placeholderClass: placeholderClass,
      inputRef: inputRef,
      disabled: disabled,
      xhrReq: xhrReq,
      uploadFilePercent: uploadFilePercent,
      uploadFiles: uploadFiles,
      onFileChange: onFileChange,
      onNormalFileChange: onNormalFileChange,
      onDragFileChange: onDragFileChange,
      onPasteFileChange: onPasteFileChange,
      onRemove: onRemove,
      triggerUpload: triggerUpload,
      cancelUpload: cancelUpload
    };
  }

  var uploadDefaultProps = {
    allowUploadDuplicateFile: false,
    autoUpload: true,
    draggable: void 0,
    defaultFiles: [],
    isBatchUpload: false,
    max: 0,
    method: "POST",
    multiple: false,
    name: "file",
    showImageFileName: true,
    showThumbnail: false,
    showUploadProgress: true,
    theme: "file",
    uploadAllFilesInOneRequest: false,
    uploadPastedFiles: true,
    useMockProgress: true,
    withCredentials: false
  };

  function ownKeys$16(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$16(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$16(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$16(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CustomFile = function CustomFile(props) {
    var classPrefix = props.classPrefix,
      displayFiles = props.displayFiles,
      accept = props.accept;
    var drag = useDrag$1(_objectSpread$16(_objectSpread$16({}, props.dragEvents), {}, {
      accept: accept
    }));
    var dragActive = drag.dragActive;
    var dragEvents = props.draggable ? {
      onDrop: drag.handleDrop,
      onDragEnter: drag.handleDragenter,
      onDragOver: drag.handleDragover,
      onDragLeave: drag.handleDragleave
    } : {};
    var renderDragContent = function renderDragContent() {
      var childrenContent = parseTNode(props.childrenNode, {
        dragActive: dragActive,
        files: displayFiles
      });
      var triggerContent = parseTNode(props.trigger, {
        dragActive: dragActive,
        files: displayFiles
      });
      return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$16(_objectSpread$16({
        className: "".concat(classPrefix, "-upload__dragger ").concat(classPrefix, "-upload__dragger-center")
      }, dragEvents), {}, {
        onClick: props.triggerUpload
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger")
      }, parseTNode(props.dragContent, {
        dragActive: dragActive,
        files: displayFiles
      }) || triggerContent || childrenContent));
    };
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props.draggable ? renderDragContent() : /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__trigger"),
      onClick: props.triggerUpload
    }, props.childrenNode || props.children));
  };
  CustomFile.displayName = "CustomFile";

  function ownKeys$15(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$15(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$15(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$15(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function TdUpload(originalProps, ref) {
    var props = useDefaultProps(originalProps, uploadDefaultProps);
    var theme = props.theme,
      imageProps = props.imageProps;
    var _useUpload = useUpload(props),
      locale = _useUpload.locale,
      classPrefix = _useUpload.classPrefix,
      triggerUploadText = _useUpload.triggerUploadText,
      toUploadFiles = _useUpload.toUploadFiles,
      displayFiles = _useUpload.displayFiles,
      uploadValue = _useUpload.uploadValue,
      sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
      uploading = _useUpload.uploading,
      tipsClasses = _useUpload.tipsClasses,
      errorClasses = _useUpload.errorClasses,
      placeholderClass = _useUpload.placeholderClass,
      inputRef = _useUpload.inputRef,
      disabled = _useUpload.disabled,
      onRemove = _useUpload.onRemove,
      uploadFiles = _useUpload.uploadFiles,
      onNormalFileChange = _useUpload.onNormalFileChange,
      onDragFileChange = _useUpload.onDragFileChange,
      onPasteFileChange = _useUpload.onPasteFileChange,
      triggerUpload = _useUpload.triggerUpload,
      cancelUpload = _useUpload.cancelUpload,
      uploadFilePercent = _useUpload.uploadFilePercent;
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        upload: inputRef.current,
        uploading: uploading,
        uploadFilePercent: uploadFilePercent,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload
      };
    });
    var _useGlobalIcon = useGlobalIcon({
        UploadIcon: TdUploadIcon
      }),
      UploadIcon = _useGlobalIcon.UploadIcon;
    var renderTrigger = function renderTrigger() {
      var getDefaultTrigger = function getDefaultTrigger() {
        if (theme === "file-input") {
          return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$15({
            disabled: disabled,
            variant: "outline"
          }, props.triggerButtonProps), triggerUploadText);
        }
        return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$15({
          disabled: disabled,
          variant: "outline",
          icon: /* @__PURE__ */React__default["default"].createElement(UploadIcon, null)
        }, props.triggerButtonProps), triggerUploadText);
      };
      return parseTNode(props.trigger, {
        dragActive: false,
        files: uploadValue
      }) || props.children || getDefaultTrigger();
    };
    var triggerElement = renderTrigger();
    var commonDisplayFileProps = {
      accept: props.accept,
      files: uploadValue,
      toUploadFiles: toUploadFiles,
      displayFiles: displayFiles,
      theme: theme,
      abridgeName: props.abridgeName,
      placeholder: props.placeholder,
      disabled: props.disabled,
      tips: props.tips,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      classPrefix: classPrefix,
      tipsClasses: tipsClasses,
      errorClasses: errorClasses,
      placeholderClass: placeholderClass,
      locale: locale,
      autoUpload: props.autoUpload,
      showUploadProgress: props.showUploadProgress,
      fileListDisplay: props.fileListDisplay,
      imageViewerProps: props.imageViewerProps,
      onRemove: onRemove
    };
    var dragProps = {
      onDragFileChange: onDragFileChange,
      onDragenter: props.onDragenter,
      onDragleave: props.onDragleave,
      onDrop: props.onDrop
    };
    var getNormalFileNode = function getNormalFileNode() {
      return /* @__PURE__ */React__default["default"].createElement(NormalFile, _objectSpread$15(_objectSpread$15({}, commonDisplayFileProps), {}, {
        multiple: props.multiple
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger"),
        onClick: triggerUpload
      }, triggerElement));
    };
    var getSingleFileDraggerUploadNode = function getSingleFileDraggerUploadNode() {
      return /* @__PURE__ */React__default["default"].createElement(DraggerFile, _objectSpread$15(_objectSpread$15({}, commonDisplayFileProps), {}, {
        dragEvents: dragProps,
        trigger: props.trigger,
        cancelUpload: cancelUpload,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles
      }));
    };
    var getImageCardUploadNode = function getImageCardUploadNode() {
      return /* @__PURE__ */React__default["default"].createElement(ImageCard, _objectSpread$15(_objectSpread$15({}, commonDisplayFileProps), {}, {
        multiple: props.multiple,
        max: props.max,
        showUploadProgress: props.showUploadProgress,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload,
        onPreview: props.onPreview,
        showImageFileName: props.showImageFileName,
        imageProps: imageProps
      }));
    };
    var getFlowListNode = function getFlowListNode() {
      return /* @__PURE__ */React__default["default"].createElement(ImageFlowList, _objectSpread$15(_objectSpread$15({}, commonDisplayFileProps), {}, {
        isBatchUpload: props.isBatchUpload,
        draggable: props.draggable,
        dragEvents: dragProps,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload,
        onPreview: props.onPreview,
        showThumbnail: props.showThumbnail,
        showImageFileName: props.showImageFileName,
        uploadButton: props.uploadButton,
        cancelUploadButton: props.cancelUploadButton
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger"),
        onClick: triggerUpload
      }, triggerElement));
    };
    var getCustomFile = function getCustomFile() {
      return /* @__PURE__ */React__default["default"].createElement(CustomFile, _objectSpread$15(_objectSpread$15({}, commonDisplayFileProps), {}, {
        draggable: props.draggable,
        dragContent: props.dragContent,
        dragEvents: dragProps,
        triggerUpload: triggerUpload,
        childrenNode: props.children,
        trigger: props.trigger
      }), triggerElement);
    };
    var uploadClasses = [props.className, "".concat(classPrefix, "-upload"), _defineProperty$2({}, "".concat(classPrefix, "-upload--theme-").concat(props.theme), props.theme === "file-input")];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(uploadClasses),
      style: props.style,
      onPaste: props.uploadPastedFiles ? onPasteFileChange : void 0
    }, /* @__PURE__ */React__default["default"].createElement("input", {
      ref: inputRef,
      type: "file",
      disabled: disabled,
      onChange: onNormalFileChange,
      multiple: props.multiple,
      accept: props.accept,
      hidden: true
    }), ["file", "file-input"].includes(theme) && !props.draggable && getNormalFileNode(), ["file", "image"].includes(theme) && props.draggable && getSingleFileDraggerUploadNode(), theme === "image" && !props.draggable && getImageCardUploadNode(), ["image-flow", "file-flow"].includes(theme) && getFlowListNode(), theme === "custom" && getCustomFile(), props.tips && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1([tipsClasses, _defineProperty$2({}, "".concat(classPrefix, "-upload__tips-").concat(props.status), props.status)])
    }, props.tips), sizeOverLimitMessage && /* @__PURE__ */React__default["default"].createElement("small", {
      className: classNames$1(errorClasses)
    }, sizeOverLimitMessage));
  }
  var Upload$1 = /*#__PURE__*/React.forwardRef(TdUpload);
  Upload$1.displayName = "Upload";

  var rangeInputDefaultProps = {
    borderless: false,
    clearable: false,
    readonly: false,
    separator: "-",
    showClearIconOnEmpty: false,
    size: "medium",
    status: "default",
    defaultValue: []
  };

  var _excluded$j = ["className", "style", "activeIndex", "borderless", "disabled", "format", "inputProps", "label", "placeholder", "readonly", "separator", "status", "size", "tips", "suffix", "prefixIcon", "suffixIcon", "clearable", "showClearIconOnEmpty", "onClick", "onEnter", "onClear", "onFocus", "onBlur", "onMouseenter", "onMouseleave", "onChange"];
  function ownKeys$14(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$14(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$14(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$14(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function calcArrayValue(value) {
    return Array.isArray(value) ? value : [value, value];
  }
  var renderIcon = function renderIcon(classPrefix, type, icon) {
    var result = parseTNode(icon);
    var iconClassName = icon ? "".concat(classPrefix, "-range-input__").concat(type, "-icon") : "";
    return result ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-range-input__").concat(type, " ").concat(iconClassName)
    }, result) : null;
  };
  var RangeInput$1 = /*#__PURE__*/React__default["default"].forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        CloseCircleFilledIcon: TdCloseCircleFilledIcon
      }),
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
    var props = useDefaultProps(originalProps, rangeInputDefaultProps);
    var className = props.className,
      style = props.style,
      activeIndex = props.activeIndex,
      borderless = props.borderless,
      disabled = props.disabled,
      format = props.format,
      inputProps = props.inputProps,
      label = props.label,
      placeholder = props.placeholder,
      readonly = props.readonly,
      separator = props.separator,
      status = props.status,
      size = props.size,
      tips = props.tips,
      suffix = props.suffix,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      clearable = props.clearable,
      showClearIconOnEmpty = props.showClearIconOnEmpty,
      _onClick = props.onClick,
      onEnter = props.onEnter,
      onClear = props.onClear,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onMouseenter = props.onMouseenter,
      onMouseleave = props.onMouseleave,
      onChangeFromProps = props.onChange,
      restProps = _objectWithoutProperties$2(props, _excluded$j);
    var name = "".concat(classPrefix, "-range-input");
    var wrapperRef = React.useRef(null);
    var inputRefs = {
      firstInputRef: React.useRef(null),
      secondInputRef: React.useRef(null)
    };
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isFocused = _useState2[0],
      toggleIsFocused = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isHover = _useState4[0],
      toggleIsHover = _useState4[1];
    var _calcArrayValue = calcArrayValue(format),
      _calcArrayValue2 = _slicedToArray$1(_calcArrayValue, 2),
      firstFormat = _calcArrayValue2[0],
      secondFormat = _calcArrayValue2[1];
    var _calcArrayValue3 = calcArrayValue(placeholder),
      _calcArrayValue4 = _slicedToArray$1(_calcArrayValue3, 2),
      _calcArrayValue4$ = _calcArrayValue4[0],
      firstPlaceholder = _calcArrayValue4$ === void 0 ? "\u8BF7\u8F93\u5165\u5185\u5BB9" : _calcArrayValue4$,
      _calcArrayValue4$2 = _calcArrayValue4[1],
      secondPlaceholder = _calcArrayValue4$2 === void 0 ? "\u8BF7\u8F93\u5165\u5185\u5BB9" : _calcArrayValue4$2;
    var _calcArrayValue5 = calcArrayValue(inputProps),
      _calcArrayValue6 = _slicedToArray$1(_calcArrayValue5, 2),
      firstInputProps = _calcArrayValue6[0],
      secondInputProps = _calcArrayValue6[1];
    var _useControlled = useControlled(props, "value", onChangeFromProps),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      _onChange = _useControlled2[1];
    var _ref = value || [],
      _ref2 = _slicedToArray$1(_ref, 2),
      firstValue = _ref2[0],
      secondValue = _ref2[1];
    var isShowClearIcon = (clearable && (value === null || value === void 0 ? void 0 : value.length) && !disabled || showClearIconOnEmpty) && isHover;
    var suffixIconNew = suffixIcon;
    if (isShowClearIcon) {
      suffixIconNew = /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
        className: "".concat(name, "__suffix-clear"),
        onMouseDown: handleMouseDown,
        onClick: handleClear
      });
    }
    var labelContent = isFunction$1(label) ? label() : label;
    var prefixIconContent = renderIcon(classPrefix, "prefix", parseTNode(prefixIcon));
    var suffixContent = isFunction$1(suffix) ? suffix() : suffix;
    var suffixIconContent = renderIcon(classPrefix, "suffix", parseTNode(suffixIconNew));
    function handleMouseDown(e) {
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
    }
    function handleClear(e) {
      onClear === null || onClear === void 0 || onClear({
        e: e
      });
      _onChange === null || _onChange === void 0 || _onChange(["", ""], {
        e: e,
        trigger: "clear",
        position: "all"
      });
    }
    function handleEnter(rangeValue, context) {
      onEnter === null || onEnter === void 0 || onEnter(rangeValue, context);
    }
    function handleFocus(rangeValue, context) {
      onFocus === null || onFocus === void 0 || onFocus(rangeValue, context);
      toggleIsFocused(true);
    }
    function handleBlur(rangeValue, context) {
      onBlur === null || onBlur === void 0 || onBlur(rangeValue, context);
      toggleIsFocused(false);
    }
    function handleMouseEnter(e) {
      var _props$onMouseEnter;
      toggleIsHover(true);
      onMouseenter === null || onMouseenter === void 0 || onMouseenter({
        e: e
      });
      (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 || _props$onMouseEnter.call(props, {
        e: e
      });
    }
    function handleMouseLeave(e) {
      var _props$onMouseLeave;
      toggleIsHover(false);
      onMouseleave === null || onMouseleave === void 0 || onMouseleave({
        e: e
      });
      (_props$onMouseLeave = props.onMouseLeave) === null || _props$onMouseLeave === void 0 || _props$onMouseLeave.call(props, {
        e: e
      });
    }
    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapperRef.current,
        firstInputElement: inputRefs.firstInputRef.current,
        secondInputElement: inputRefs.secondInputRef.current,
        focus: function focus(options) {
          var _inputRefs$current;
          var _ref3 = options || {},
            _ref3$position = _ref3.position,
            position = _ref3$position === void 0 ? "first" : _ref3$position;
          (_inputRefs$current = inputRefs["".concat(position, "InputRef")].current) === null || _inputRefs$current === void 0 || _inputRefs$current.focus();
        },
        blur: function blur(options) {
          var _inputRefs$current2;
          var _ref4 = options || {},
            _ref4$position = _ref4.position,
            position = _ref4$position === void 0 ? "first" : _ref4$position;
          (_inputRefs$current2 = inputRefs["".concat(position, "InputRef")].current) === null || _inputRefs$current2 === void 0 || _inputRefs$current2.blur();
        },
        select: function select(options) {
          var _inputRefs$current3;
          var _ref5 = options || {},
            _ref5$position = _ref5.position,
            position = _ref5$position === void 0 ? "first" : _ref5$position;
          (_inputRefs$current3 = inputRefs["".concat(position, "InputRef")].current) === null || _inputRefs$current3 === void 0 || _inputRefs$current3.select();
        }
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$14(_objectSpread$14({
      ref: wrapperRef,
      style: style,
      className: classNames$1(name, className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-focused"), isFocused), "".concat(classPrefix, "-is-").concat(status), status), "".concat(classPrefix, "-size-l"), size === "large"), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(name, "--prefix"), prefixIconContent || labelContent), "".concat(name, "--suffix"), suffixContent || suffixIconContent), "".concat(name, "--borderless"), borderless))
    }, restProps), {}, {
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__inner")
    }, prefixIconContent, labelContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__prefix")
    }, labelContent) : null, /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$14({
      ref: inputRefs.firstInputRef,
      className: "".concat(name, "__inner-left"),
      inputClass: classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-is-focused"), activeIndex === 0)),
      placeholder: firstPlaceholder,
      disabled: disabled,
      readonly: readonly,
      format: firstFormat,
      value: firstValue,
      onClick: function onClick(_ref6) {
        var e = _ref6.e;
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e,
          position: "first"
        });
      },
      onClear: function onClear() {
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([], {
          position: "first",
          trigger: "input"
        });
      },
      onEnter: function onEnter(val, _ref7) {
        var e = _ref7.e;
        return handleEnter([val, secondValue], {
          e: e,
          position: "first"
        });
      },
      onFocus: function onFocus(val, _ref8) {
        var e = _ref8.e;
        return handleFocus([val, secondValue], {
          e: e,
          position: "first"
        });
      },
      onBlur: function onBlur(val, _ref9) {
        var e = _ref9.e;
        return handleBlur([val, secondValue], {
          e: e,
          position: "first"
        });
      },
      onChange: function onChange(val, _ref0) {
        var e = _ref0.e;
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([val, secondValue], {
          e: e,
          position: "first",
          trigger: "input"
        });
      }
    }, firstInputProps)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__inner-separator")
    }, separator), /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$14({
      ref: inputRefs.secondInputRef,
      className: "".concat(name, "__inner-right"),
      inputClass: classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-is-focused"), activeIndex === 1)),
      placeholder: secondPlaceholder,
      disabled: disabled,
      readonly: readonly,
      format: secondFormat,
      value: secondValue,
      onClick: function onClick(_ref1) {
        var e = _ref1.e;
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e,
          position: "second"
        });
      },
      onClear: function onClear() {
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([], {
          position: "second",
          trigger: "input"
        });
      },
      onEnter: function onEnter(val, _ref10) {
        var e = _ref10.e;
        return handleEnter([firstValue, val], {
          e: e,
          position: "second"
        });
      },
      onFocus: function onFocus(val, _ref11) {
        var e = _ref11.e;
        return handleFocus([firstValue, val], {
          e: e,
          position: "second"
        });
      },
      onBlur: function onBlur(val, _ref12) {
        var e = _ref12.e;
        return handleBlur([firstValue, val], {
          e: e,
          position: "second"
        });
      },
      onChange: function onChange(val, _ref13) {
        var e = _ref13.e;
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange([firstValue, val], {
          e: e,
          position: "second",
          trigger: "input"
        });
      }
    }, secondInputProps)), suffixContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__suffix")
    }, suffixContent) : null, suffixIconContent), tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__tips")
    }, tips));
  });
  RangeInput$1.displayName = "RangeInput";

  function ownKeys$13(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$13(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$13(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$13(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var getDefaultValue = function getDefaultValue(value, defaultValue) {
    if (isEmpty(value)) {
      return Array.isArray(defaultValue) ? defaultValue : [defaultValue, defaultValue];
    }
    if (Array.isArray(value)) return value;
    return [defaultValue, defaultValue];
  };
  var getJSX = function getJSX(value) {
    if (isString(value)) return value;
    if (isFunction$1(value)) return value();
    if (/*#__PURE__*/React__default["default"].isValidElement(value)) return value;
    return value;
  };
  var getLeafNodes = function getLeafNodes(nodes) {
    var resData = [];
    var _map = function map(nodes2) {
      nodes2.forEach(function (child) {
        if (child.children && child.children.length > 0) {
          return _map(child.children);
        }
        resData.push(child);
      });
    };
    _map(nodes);
    return resData;
  };
  var _filterCheckedTreeNodes = function filterCheckedTreeNodes(nodes, checkeds) {
    return nodes.filter(function (item) {
      return !checkeds.includes(item.value);
    }).map(function (item) {
      var newItem = _objectSpread$13({}, item);
      if (item.children && item.children.length > 0) {
        newItem.children = _filterCheckedTreeNodes(item.children, checkeds);
      }
      return newItem;
    }).filter(function (item) {
      return item.children && item.children.length !== 0 || !item.children;
    });
  };
  var getTargetNodes = function getTargetNodes(sourceNodes, data) {
    var source = getLeafNodes(sourceNodes).map(function (item) {
      return item.value;
    });
    return _filterCheckedTreeNodes(data, source);
  };

  var TransferList = function TransferList(props) {
    var className = props.className,
      style = props.style,
      data = props.data,
      _props$search = props.search,
      search = _props$search === void 0 ? false : _props$search,
      _props$checked = props.checked,
      checked = _props$checked === void 0 ? [] : _props$checked,
      empty = props.empty,
      title = props.title,
      footer = props.footer,
      content = props.content,
      onCheckbox = props.onCheckbox,
      onSearch = props.onSearch,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      pagination = props.pagination,
      transferItem = props.transferItem,
      treeNode = props.tree,
      showCheckAll = props.showCheckAll,
      listType = props.listType;
    var notDisabledData = !treeNode ? data.filter(function (item) {
      return !item.disabled;
    }) : getLeafNodes(data).filter(function (item) {
      return !item.disabled;
    });
    var _useState = React.useState(1),
      _useState2 = _slicedToArray$1(_useState, 2),
      currentPage = _useState2[0],
      setCurrentPage = _useState2[1];
    var _useMemo = React.useMemo(function () {
        var activeLen = checked.length;
        var notLen = notDisabledData.length;
        return [activeLen && activeLen < notLen, activeLen && activeLen === notLen];
      }, [checked, notDisabledData]),
      _useMemo2 = _slicedToArray$1(_useMemo, 2),
      indeterminate = _useMemo2[0],
      allChecked = _useMemo2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        SearchIcon: TdSearchIcon
      }),
      SearchIcon = _useGlobalIcon.SearchIcon;
    var CLASSPREFIX = "".concat(classPrefix, "-transfer__list");
    var _useLocaleReceiver = useLocaleReceiver("transfer"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var handleCheckbox = function handleCheckbox(vals) {
      if (isFunction$1(onCheckbox)) onCheckbox(vals);
    };
    var handleAllCheckbox = function handleAllCheckbox(checked2) {
      if (isFunction$1(onCheckbox)) onCheckbox(checked2 ? notDisabledData.map(function (item) {
        return item.value;
      }) : []);
    };
    var HeaderCmp = function HeaderCmp() {
      var total = treeNode ? getLeafNodes(data).length : data.length;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-header")
      }, /* @__PURE__ */React__default["default"].createElement("div", null, showCheckAll ? /* @__PURE__ */React__default["default"].createElement(Checkbox, {
        indeterminate: indeterminate,
        checked: allChecked,
        disabled: disabled,
        onChange: handleAllCheckbox
      }) : null, /* @__PURE__ */React__default["default"].createElement("span", null, t(local.title, {
        checked: checked.length,
        total: total
      }))), /* @__PURE__ */React__default["default"].createElement("span", null, title));
    };
    var SearchCmp = function SearchCmp() {
      return search ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__search-wrapper")
      }, /* @__PURE__ */React__default["default"].createElement(Input, {
        placeholder: local.placeholder,
        suffixIcon: /* @__PURE__ */React__default["default"].createElement(SearchIcon, null),
        onChange: onSearch
      })) : null;
    };
    var viewData = React.useMemo(function () {
      if (!isEmpty(pagination)) {
        var pageSize = pagination.pageSize || 10;
        var start = (currentPage - 1) * pageSize;
        return data.slice(start, start + pageSize);
      }
      return data;
    }, [currentPage, data, pagination]);
    var EmptyCmp = function EmptyCmp() {
      return isString(empty) ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__empty")
      }, /* @__PURE__ */React__default["default"].createElement("span", null, empty || "\u6682\u65E0\u6570\u636E")) : empty;
    };
    var contentCmp = function contentCmp() {
      if (typeof treeNode === "function") {
        return treeNode({
          data: viewData,
          value: checked,
          onChange: handleCheckbox
        });
      }
      if (typeof content === "function") {
        return content({
          data: viewData
        });
      }
      return /* @__PURE__ */React__default["default"].createElement(Checkbox.Group, {
        value: checked,
        onChange: handleCheckbox,
        disabled: disabled
      }, viewData.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
          key: item.value,
          value: item.value,
          disabled: item.disabled,
          className: "".concat(CLASSPREFIX, "-item")
        }, /* @__PURE__ */React__default["default"].createElement("span", null, transferItem ? parseContentTNode(transferItem, {
          data: item,
          index: index,
          type: listType
        }) : item.label));
      }));
    };
    var BodyCmp = function BodyCmp() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(CLASSPREFIX, "-body"), _defineProperty$2({}, "".concat(CLASSPREFIX, "--with-search"), search))
      }, SearchCmp(), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-content narrow-scrollbar")
      }, viewData.length ? contentCmp() : EmptyCmp()));
    };
    var PaginationCmp = function PaginationCmp() {
      var handleCurrentPagination = function handleCurrentPagination(current) {
        setCurrentPage(current);
        if (isFunction$1(pagination.onPageChange)) {
          pagination.onPageChange(current);
        }
      };
      return pagination ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-pagination")
      }, /* @__PURE__ */React__default["default"].createElement(Pagination, {
        size: "small",
        theme: "simple",
        pageSizeOptions: [],
        total: data.length,
        totalContent: false,
        onCurrentChange: handleCurrentPagination,
        pageSize: pagination.pageSize
      })) : null;
    };
    var footerCmp = function footerCmp() {
      return !isEmpty(footer) ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__footer")
      }, footer) : null;
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: classNames$1(CLASSPREFIX, className)
    }, HeaderCmp(), BodyCmp(), PaginationCmp(), footerCmp());
  };

  var transferDefaultProps = {
    defaultChecked: [],
    data: [],
    direction: "both",
    search: false,
    showCheckAll: true,
    targetSort: "original",
    title: [],
    defaultValue: []
  };

  function ownKeys$12(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$12(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$12(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$12(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Transfer$1 = function Transfer(originalProps) {
    var props = useDefaultProps(originalProps, transferDefaultProps);
    var data = props.data,
      search = props.search,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      onCheckedChange = props.onCheckedChange,
      value = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      empty = props.empty,
      disabled = props.disabled,
      pagination = props.pagination,
      title = props.title,
      operation = props.operation,
      footer = props.footer,
      transferItem = props.transferItem,
      content = props.content,
      tree = props.tree,
      showCheckAll = props.showCheckAll,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? "both" : _props$direction;
    var _useState = React.useState(function () {
        return {
          source: data.filter(function (item) {
            return !defaultValue.includes(item.value);
          }),
          target: data.filter(function (item) {
            return defaultValue.includes(item.value);
          })
        };
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
    var _useState3 = React.useState(function () {
        return {
          source: state.source.filter(function (item) {
            return !item.disabled && defaultChecked.includes(item.value);
          }).map(function (item) {
            return item.value;
          }),
          target: state.target.filter(function (item) {
            return !item.disabled && defaultChecked.includes(item.value);
          }).map(function (item) {
            return item.value;
          })
        };
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      checkeds = _useState4[0],
      setCheckeds = _useState4[1];
    var _useState5 = React.useState({
        source: "",
        target: ""
      }),
      _useState6 = _slicedToArray$1(_useState5, 2),
      searchState = _useState6[0],
      setSearchState = _useState6[1];
    var isTargetControlled = "value" in props;
    var isCheckedControlled = "checked" in props;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        ChevronLeftIcon: TdChevronLeftIcon,
        ChevronRightIcon: TdChevronRightIcon
      }),
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon;
    var transferClassName = "".concat(classPrefix, "-transfer");
    var _useLocaleReceiver = useLocaleReceiver("transfer"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useMemo = React.useMemo(function () {
        var source = state.source,
          target = state.target;
        var searchSource = searchState.source,
          searchTarget = searchState.target;
        return [source.filter(function (item) {
          return !searchSource || item.label.indexOf(searchState.source) > -1;
        }), target.filter(function (item) {
          return !searchTarget || item.label.indexOf(searchState.target) > -1;
        })];
      }, [searchState, state]),
      _useMemo2 = _slicedToArray$1(_useMemo, 2),
      sourceData = _useMemo2[0],
      targetData = _useMemo2[1];
    var _getDefaultValue$map = getDefaultValue(empty, t(local.empty)).map(function (item) {
        return getJSX(item);
      }),
      _getDefaultValue$map2 = _slicedToArray$1(_getDefaultValue$map, 2),
      SourceEmptyCmp = _getDefaultValue$map2[0],
      TargetEmptyCmp = _getDefaultValue$map2[1];
    var sourceDisabled = isArray$1(disabled) ? disabled[0] : disabled;
    var targetDisabled = isArray$1(disabled) ? disabled[1] : disabled;
    var _getDefaultValue = getDefaultValue(pagination),
      _getDefaultValue2 = _slicedToArray$1(_getDefaultValue, 2),
      sourcePagination = _getDefaultValue2[0],
      targetPagination = _getDefaultValue2[1];
    var _getDefaultValue$map3 = getDefaultValue(title).map(function (item) {
        return getJSX(item);
      }),
      _getDefaultValue$map4 = _slicedToArray$1(_getDefaultValue$map3, 2),
      sourceTitle = _getDefaultValue$map4[0],
      targetTitle = _getDefaultValue$map4[1];
    var _getDefaultValue$map5 = getDefaultValue(operation, [function () {
        return /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null);
      }, function () {
        return /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null);
      }]).map(function (item) {
        return getJSX(item);
      }),
      _getDefaultValue$map6 = _slicedToArray$1(_getDefaultValue$map5, 2),
      leftOperation = _getDefaultValue$map6[0],
      rightOperation = _getDefaultValue$map6[1];
    var _getDefaultValue$map7 = getDefaultValue(footer).map(function (item) {
        return getJSX(item);
      }),
      _getDefaultValue$map8 = _slicedToArray$1(_getDefaultValue$map7, 2),
      sourceFooter = _getDefaultValue$map8[0],
      targetFooter = _getDefaultValue$map8[1];
    var _getDefaultValue3 = getDefaultValue(content),
      _getDefaultValue4 = _slicedToArray$1(_getDefaultValue3, 2),
      sourceContent = _getDefaultValue4[0],
      targetContent = _getDefaultValue4[1];
    var _useMemo3 = React.useMemo(function () {
        var _showCheckAll$, _showCheckAll$2;
        return Array.isArray(showCheckAll) ? [(_showCheckAll$ = showCheckAll[0]) !== null && _showCheckAll$ !== void 0 ? _showCheckAll$ : true, (_showCheckAll$2 = showCheckAll[1]) !== null && _showCheckAll$2 !== void 0 ? _showCheckAll$2 : true] : [showCheckAll, showCheckAll];
      }, [showCheckAll]),
      _useMemo4 = _slicedToArray$1(_useMemo3, 2),
      showCheckAllSource = _useMemo4[0],
      showCheckAllTarget = _useMemo4[1];
    var transformSource = function transformSource() {
      var source = state.source,
        target = state.target;
      var sourceCheckeds = source.filter(function (item) {
        return checkeds.source.includes(item.value);
      });
      var newSource = difference$1(source, sourceCheckeds);
      var newTarget = [].concat(_toConsumableArray(target), _toConsumableArray(sourceCheckeds));
      var newTargetValue = newTarget.map(function (t2) {
        return t2.value;
      });
      if (tree) {
        newSource = _filterCheckedTreeNodes(source, checkeds.source);
        newTarget = getTargetNodes(newSource, data);
        newTargetValue = getLeafNodes(newTarget).map(function (t2) {
          return t2.value;
        });
      }
      if (isTargetControlled) {
        onChange === null || onChange === void 0 || onChange(newTargetValue, {
          type: "source",
          movedValue: sourceCheckeds.map(function (s) {
            return s.value;
          })
        });
      } else {
        setState(_objectSpread$12(_objectSpread$12({}, state), {}, {
          source: newSource,
          target: _toConsumableArray(newTarget)
        }));
        setCheckeds(_objectSpread$12(_objectSpread$12({}, checkeds), {}, {
          source: []
        }));
      }
    };
    var transformTarget = function transformTarget() {
      var source = state.source,
        target = state.target;
      var targetCheckeds = target.filter(function (item) {
        return checkeds.target.includes(item.value);
      });
      var newSource = [].concat(_toConsumableArray(source), _toConsumableArray(targetCheckeds));
      var newTarget = difference$1(target, targetCheckeds);
      var newTargetValue = newTarget.map(function (t2) {
        return t2.value;
      });
      if (tree) {
        newTarget = _filterCheckedTreeNodes(target, checkeds.target);
        newSource = getTargetNodes(newTarget, data);
        newTargetValue = getLeafNodes(newTarget).map(function (t2) {
          return t2.value;
        });
      }
      if (isTargetControlled) {
        onChange === null || onChange === void 0 || onChange(newTargetValue, {
          type: "target",
          movedValue: targetCheckeds.map(function (s) {
            return s.value;
          })
        });
      } else {
        setState(_objectSpread$12(_objectSpread$12({}, state), {}, {
          source: newSource,
          target: newTarget
        }));
        setCheckeds(_objectSpread$12(_objectSpread$12({}, checkeds), {}, {
          target: []
        }));
      }
    };
    var OperationsCmp = function OperationsCmp() {
      var isSourceDisabled = sourceDisabled || !checkeds.source.length;
      var isTargetDisabled = targetDisabled || !checkeds.target.length;
      var isToRightShow = direction !== "left";
      var isToLeftShow = direction !== "right";
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(transferClassName, "__operations")
      }, isToRightShow && /* @__PURE__ */React__default["default"].createElement(Button, {
        size: "small",
        key: isSourceDisabled ? "right-outline" : "right-base",
        variant: "outline",
        disabled: isSourceDisabled,
        onClick: transformSource
      }, leftOperation), isToLeftShow && /* @__PURE__ */React__default["default"].createElement(Button, {
        size: "small",
        key: isSourceDisabled ? "left-outline" : "left-base",
        variant: "outline",
        disabled: isTargetDisabled,
        onClick: transformTarget
      }, rightOperation));
    };
    var handleCheckChange = function handleCheckChange(value2, type) {
      var sourceChecked = checkeds.source,
        targetChecked = checkeds.target;
      var inverseMap = {
        source: "target",
        target: "source"
      };
      isCheckedControlled ? onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange({
        type: type,
        checked: value2.concat(checkeds[inverseMap[type]]),
        sourceChecked: sourceChecked,
        targetChecked: targetChecked
      }) : setCheckeds(_objectSpread$12(_objectSpread$12({}, checkeds), {}, _defineProperty$2({}, type, value2)));
    };
    React.useEffect(function () {
      if (isTargetControlled && Array.isArray(value)) {
        var newTarget = data.filter(function (item) {
          return value.includes(item.value);
        });
        var newSource = difference$1(data, newTarget);
        if (tree) {
          newSource = _filterCheckedTreeNodes(data, value);
          newTarget = getTargetNodes(newSource, data);
        }
        setState({
          source: _toConsumableArray(newSource),
          target: _toConsumableArray(newTarget)
        });
        setCheckeds({
          source: [],
          target: []
        });
      }
    }, [value, data, isTargetControlled, tree]);
    React.useEffect(function () {
      var source = state.source,
        target = state.target;
      if (isCheckedControlled && Array.isArray(checked)) {
        var newSourceChecked = source.filter(function (item) {
          return !item.disabled && checked.includes(item.value);
        }).map(function (item) {
          return item.value;
        });
        var newTargetChecked = target.filter(function (item) {
          return !item.disabled && checked.includes(item.value);
        }).map(function (item) {
          return item.value;
        });
        setCheckeds({
          source: newSourceChecked,
          target: newTargetChecked
        });
      }
    }, [checked, state, isCheckedControlled]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(transferClassName, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(transferClassName, "__search"), search), "".concat(transferClassName, "__pagination"), pagination), "".concat(transferClassName, "__footer"), footer), "".concat(transferClassName, "--with-tree"), tree))
    }, /* @__PURE__ */React__default["default"].createElement(TransferList, {
      className: "".concat(transferClassName, "__list-source"),
      listType: "source",
      data: sourceData,
      search: search,
      checked: checkeds.source,
      empty: SourceEmptyCmp,
      disabled: sourceDisabled,
      pagination: sourcePagination,
      title: sourceTitle,
      footer: sourceFooter,
      transferItem: transferItem,
      content: sourceContent,
      onCheckbox: function onCheckbox(value2) {
        return handleCheckChange(value2, "source");
      },
      onSearch: function onSearch(val) {
        return setSearchState(_objectSpread$12(_objectSpread$12({}, searchState), {}, {
          source: val
        }));
      },
      tree: tree,
      showCheckAll: showCheckAllSource
    }), OperationsCmp(), /* @__PURE__ */React__default["default"].createElement(TransferList, {
      className: "".concat(transferClassName, "__list-target"),
      listType: "target",
      data: targetData,
      search: search,
      checked: checkeds.target,
      empty: TargetEmptyCmp,
      disabled: targetDisabled,
      pagination: targetPagination,
      title: targetTitle,
      footer: targetFooter,
      transferItem: transferItem,
      content: targetContent,
      onCheckbox: function onCheckbox(value2) {
        return handleCheckChange(value2, "target");
      },
      onSearch: function onSearch(val) {
        return setSearchState(_objectSpread$12(_objectSpread$12({}, searchState), {}, {
          target: val
        }));
      },
      tree: tree,
      showCheckAll: showCheckAllTarget
    }));
  };
  Transfer$1.displayName = "Transfer";

  var isoWeeksInYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      return function (e, n) {
        n.prototype.isoWeeksInYear = function () {
          var e = this.isLeapYear(),
            n = this.endOf("y").day();
          return 4 === n || e && 5 === n ? 53 : 52;
        };
      };
    });
  })(isoWeeksInYear$1);
  var isoWeeksInYear = isoWeeksInYear$1.exports;

  var isLeapYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.isLeapYear = function () {
          return this.$y % 4 == 0 && this.$y % 100 != 0 || this.$y % 400 == 0;
        };
      };
    });
  })(isLeapYear$1);
  var isLeapYear = isLeapYear$1.exports;

  var customParseFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        },
        t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
        n = /\d\d/,
        r = /\d\d?/,
        i = /\d*[^-_:/,()\s\d]+/,
        o = {},
        s = function s(e) {
          return (e = +e) + (e > 68 ? 1900 : 2e3);
        };
      var a = function a(e) {
          return function (t) {
            this[e] = +t;
          };
        },
        f = [/[+-]\d\d:?(\d\d)?|Z/, function (e) {
          (this.zone || (this.zone = {})).offset = function (e) {
            if (!e) return 0;
            if ("Z" === e) return 0;
            var t = e.match(/([+-]|\d\d)/g),
              n = 60 * t[1] + (+t[2] || 0);
            return 0 === n ? 0 : "+" === t[0] ? -n : n;
          }(e);
        }],
        h = function h(e) {
          var t = o[e];
          return t && (t.indexOf ? t : t.s.concat(t.f));
        },
        u = function u(e, t) {
          var n,
            r = o.meridiem;
          if (r) {
            for (var i = 1; i <= 24; i += 1) if (e.indexOf(r(i, 0, t)) > -1) {
              n = i > 12;
              break;
            }
          } else n = e === (t ? "pm" : "PM");
          return n;
        },
        d = {
          A: [i, function (e) {
            this.afternoon = u(e, !1);
          }],
          a: [i, function (e) {
            this.afternoon = u(e, !0);
          }],
          S: [/\d/, function (e) {
            this.milliseconds = 100 * +e;
          }],
          SS: [n, function (e) {
            this.milliseconds = 10 * +e;
          }],
          SSS: [/\d{3}/, function (e) {
            this.milliseconds = +e;
          }],
          s: [r, a("seconds")],
          ss: [r, a("seconds")],
          m: [r, a("minutes")],
          mm: [r, a("minutes")],
          H: [r, a("hours")],
          h: [r, a("hours")],
          HH: [r, a("hours")],
          hh: [r, a("hours")],
          D: [r, a("day")],
          DD: [n, a("day")],
          Do: [i, function (e) {
            var t = o.ordinal,
              n = e.match(/\d+/);
            if (this.day = n[0], t) for (var r = 1; r <= 31; r += 1) t(r).replace(/\[|\]/g, "") === e && (this.day = r);
          }],
          M: [r, a("month")],
          MM: [n, a("month")],
          MMM: [i, function (e) {
            var t = h("months"),
              n = (h("monthsShort") || t.map(function (e) {
                return e.slice(0, 3);
              })).indexOf(e) + 1;
            if (n < 1) throw new Error();
            this.month = n % 12 || n;
          }],
          MMMM: [i, function (e) {
            var t = h("months").indexOf(e) + 1;
            if (t < 1) throw new Error();
            this.month = t % 12 || t;
          }],
          Y: [/[+-]?\d+/, a("year")],
          YY: [n, function (e) {
            this.year = s(e);
          }],
          YYYY: [/\d{4}/, a("year")],
          Z: f,
          ZZ: f
        };
      function c(n) {
        var r, i;
        r = n, i = o && o.formats;
        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
            var o = r && r.toUpperCase();
            return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, n) {
              return t || n.slice(1);
            });
          })).match(t), a = s.length, f = 0; f < a; f += 1) {
          var h = s[f],
            u = d[h],
            c = u && u[0],
            l = u && u[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : h.replace(/^\[|\]$/g, "");
        }
        return function (e) {
          for (var t = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                f = i.parser,
                h = e.slice(r),
                u = o.exec(h)[0];
              f.call(t, u), e = e.replace(u, "");
            }
          }
          return function (e) {
            var t = e.afternoon;
            if (void 0 !== t) {
              var n = e.hours;
              t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
            }
          }(t), t;
        };
      }
      return function (e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype,
          i = r.parse;
        r.parse = function (e) {
          var t = e.date,
            r = e.utc,
            s = e.args;
          this.$u = r;
          var a = s[1];
          if ("string" == typeof a) {
            var f = !0 === s[2],
              h = !0 === s[3],
              u = f || h,
              d = s[2];
            h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (e, t, n) {
              try {
                if (["x", "X"].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                var r = c(t)(e),
                  i = r.year,
                  o = r.month,
                  s = r.day,
                  a = r.hours,
                  f = r.minutes,
                  h = r.seconds,
                  u = r.milliseconds,
                  d = r.zone,
                  l = new Date(),
                  m = s || (i || o ? 1 : l.getDate()),
                  M = i || l.getFullYear(),
                  Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                  v = f || 0,
                  D = h || 0,
                  g = u || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (e) {
                return new Date("");
              }
            }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);
            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }
            m === l && (this.$d = new Date(""));
          } else i.call(this, e);
        };
      };
    });
  })(customParseFormat$1);
  var customParseFormat = customParseFormat$1.exports;

  dayjs.extend(isoWeeksInYear);
  dayjs.extend(isLeapYear);
  dayjs.extend(customParseFormat);
  var TIME_FORMAT$1 = "HH:mm:ss";
  function extractTimeFormat() {
    var dateFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return dateFormat.replace(/\W?Y{2,4}|\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, "").trim();
  }
  function parseToDayjs(value, format, timeOfDay, dayjsLocale) {
    if (value === "" || value === null) return dayjs();
    var dateText = value;
    if (/[w|W]/g.test(format)) {
      if (!isString(dateText)) {
        dateText = dayjs(dateText).locale(dayjsLocale || "zh-cn").format(format);
      }
      var yearStr = dateText.split(/[-/.\s]/)[0];
      var weekStr = dateText.split(/[-/.\s]/)[1];
      var weekFormatStr = format.split(/[-/.\s]/)[1];
      var firstWeek = dayjs(yearStr, "YYYY").locale(dayjsLocale || "zh-cn").startOf("year");
      if (firstWeek.day() > 4 || firstWeek.day() === 0) firstWeek = firstWeek.add(1, "week");
      var weekCounts = dayjs(yearStr, "YYYY").locale(dayjsLocale || "zh-cn").isoWeeksInYear();
      for (var i = 0; i <= weekCounts; i += 1) {
        var nextWeek = firstWeek.add(i, "week");
        if (timeOfDay === "start") nextWeek = nextWeek.subtract(5, "day");
        if (nextWeek.format(weekFormatStr) === weekStr) {
          return nextWeek;
        }
      }
    }
    if (/Q/g.test(format)) {
      if (!isString(dateText)) {
        dateText = dayjs(dateText).locale(dayjsLocale || "zh-cn").format(format);
      }
      var _yearStr = dateText.split(/[-/.\s]/)[0];
      var quarterStr = dateText.split(/[-/.\s]/)[1];
      var quarterFormatStr = format.split(/[-/.\s]/)[1];
      var firstQuarter = dayjs(_yearStr, "YYYY").startOf("year");
      for (var _i = 0; _i < 4; _i += 1) {
        var nextQuarter = firstQuarter.add(_i, "quarter");
        if (nextQuarter.format(quarterFormatStr) === quarterStr) {
          return nextQuarter;
        }
      }
    }
    var result = dayjs(dateText, format).isValid() ? dayjs(dateText, format) : dayjs(dateText);
    if (!result.isValid()) {
      log.error("DatePicker", "Check whether the format\u3001value format is valid.\n value: '".concat(value, "', format: '").concat(format, "'"));
      return dayjs();
    }
    return result;
  }
  function formatRange(_ref) {
    var newDate = _ref.newDate,
      format = _ref.format,
      dayjsLocale = _ref.dayjsLocale,
      targetFormat = _ref.targetFormat,
      autoSwap = _ref.autoSwap;
    if (!newDate || !Array.isArray(newDate)) return [];
    var dayjsDateList = newDate.map(function (d) {
      return d && parseToDayjs(d, format).locale(dayjsLocale);
    });
    if (autoSwap && dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
      dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];
    }
    if (dayjsDateList.some(function (r) {
      return r && !r.isValid();
    })) {
      log.error("DatePicker", "Check whether the value\u3001format\u3001valueType format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "' valueType: '").concat(targetFormat, "'"));
      return [];
    }
    if (targetFormat === "time-stamp") return dayjsDateList.map(function (da) {
      return da && da.toDate().getTime();
    });
    if (targetFormat === "Date") return dayjsDateList.map(function (da) {
      return da && da.toDate();
    });
    return dayjsDateList.map(function (da) {
      return da && da.format(targetFormat || format);
    });
  }
  function formatSingle(_ref2) {
    var newDate = _ref2.newDate,
      format = _ref2.format,
      targetFormat = _ref2.targetFormat,
      dayjsLocale = _ref2.dayjsLocale;
    if (!newDate) return "";
    var dayJsDate = parseToDayjs(newDate, format).locale(dayjsLocale);
    if (!dayJsDate.isValid()) {
      log.error("DatePicker", "Check whether the format\u3001value format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "'"));
      return "";
    }
    if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
    if (targetFormat === "Date") return dayJsDate.toDate();
    return dayJsDate.format(targetFormat || format);
  }
  function isValidDate(value, format) {
    if (Array.isArray(value)) {
      return value.every(function (v) {
        if (v === "") return true;
        return dayjs(v, format).isValid() || dayjs(v).isValid();
      });
    }
    if (value === "") return true;
    return dayjs(value, format).isValid() || dayjs(value).isValid();
  }
  function formatDate(newDate, _ref3) {
    var format = _ref3.format,
      targetFormat = _ref3.targetFormat,
      _ref3$dayjsLocale = _ref3.dayjsLocale,
      dayjsLocale = _ref3$dayjsLocale === void 0 ? "zh-cn" : _ref3$dayjsLocale,
      autoSwap = _ref3.autoSwap;
    var result;
    if (Array.isArray(newDate)) {
      result = formatRange({
        newDate: newDate,
        format: format,
        dayjsLocale: dayjsLocale,
        targetFormat: targetFormat,
        autoSwap: autoSwap
      });
    } else {
      result = formatSingle({
        newDate: newDate,
        format: format,
        dayjsLocale: dayjsLocale,
        targetFormat: targetFormat
      });
    }
    return result;
  }
  function calcFormatTime(time, timeFormat) {
    if (time && timeFormat) {
      var timeArr = time.split(":");
      var timeFormatArr = timeFormat.split(":");
      return timeArr.slice(0, timeFormatArr.length).join(":");
    }
    return time;
  }
  function formatTime(value, format, timeFormat, defaultTime) {
    var _result;
    var result = Array.isArray(value) ? value : [value];
    defaultTime = Array.isArray(defaultTime) ? defaultTime : [defaultTime, defaultTime];
    result = result.map(function (v, i) {
      if (v) {
        var formattedResult = dayjs(v, typeof v === "string" ? format : void 0).format(timeFormat);
        return !dayjs(formattedResult, timeFormat).isValid() && defaultTime[i] ? defaultTime[i] : formattedResult;
      }
      return calcFormatTime(defaultTime[i], timeFormat);
    });
    result = result.length ? result : defaultTime.map(function (t) {
      return calcFormatTime(t, timeFormat);
    });
    return Array.isArray(value) ? result : (_result = result) === null || _result === void 0 ? void 0 : _result[0];
  }
  function getDefaultFormat(_ref4) {
    var _ref4$mode = _ref4.mode,
      mode = _ref4$mode === void 0 ? "date" : _ref4$mode,
      format = _ref4.format,
      valueType = _ref4.valueType,
      enableTimePicker = _ref4.enableTimePicker;
    if (mode === "year") {
      return {
        format: format || "YYYY",
        valueType: valueType || format || "YYYY",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "month") {
      return {
        format: format || "YYYY-MM",
        valueType: valueType || format || "YYYY-MM",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "quarter") {
      return {
        format: format || "YYYY-[Q]Q",
        valueType: valueType || format || "YYYY-[Q]Q",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "week") {
      return {
        format: format || "gggg-wo",
        valueType: valueType || format || "gggg-wo",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "date") {
      return {
        format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        valueType: valueType || format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        timeFormat: extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT$1
      };
    }
    log.error("DatePicker", "Invalid mode: ".concat(mode));
    return {};
  }
  function initYearMonthTime(_ref5) {
    var value = _ref5.value,
      _ref5$mode = _ref5.mode,
      mode = _ref5$mode === void 0 ? "date" : _ref5$mode,
      format = _ref5.format,
      _ref5$timeFormat = _ref5.timeFormat,
      timeFormat = _ref5$timeFormat === void 0 ? "HH:mm:ss" : _ref5$timeFormat,
      enableTimePicker = _ref5.enableTimePicker;
    var defaultYearMonthTime = {
      year: [dayjs().year(), dayjs().year()],
      month: [dayjs().month(), dayjs().month()],
      time: [dayjs().format(timeFormat), dayjs().format(timeFormat)]
    };
    if (mode === "year") {
      defaultYearMonthTime.year[1] += 10;
    } else if (mode === "month" || mode === "quarter") {
      defaultYearMonthTime.year[1] += 1;
    } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
      if (defaultYearMonthTime.month[0] === 11) {
        defaultYearMonthTime.year[1] += 1;
        defaultYearMonthTime.month[1] = 0;
      } else {
        defaultYearMonthTime.month[1] += 1;
      }
    }
    if (!value || !Array.isArray(value) || !value.length) {
      return defaultYearMonthTime;
    }
    return {
      year: value.map(function (v) {
        return parseToDayjs(v, format).year();
      }),
      month: value.map(function (v) {
        return parseToDayjs(v, format).month();
      }),
      time: value.map(function (v) {
        return parseToDayjs(v, format).format(timeFormat);
      })
    };
  }

  function _objectDestructuringEmpty(t) {
    if (null == t) throw new TypeError("Cannot destructure " + t);
  }

  var isBetween = {exports: {}};

  (function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
            o = t(i),
            r = "(" === (f = f || "()")[0],
            u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  })(isBetween);
  var dayJsIsBetween = isBetween.exports;

  var weekOfYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "week",
        t = "year";
      return function (i, n, r) {
        var f = n.prototype;
        f.week = function (i) {
          if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
          var n = this.$locale().yearStart || 1;
          if (11 === this.month() && this.date() > 25) {
            var f = r(this).startOf(t).add(1, t).date(n),
              s = r(this).endOf(e);
            if (f.isBefore(s)) return 1;
          }
          var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"),
            o = this.diff(a, e, !0);
          return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function (e) {
          return void 0 === e && (e = null), this.week(e);
        };
      };
    });
  })(weekOfYear$1);
  var weekOfYear = weekOfYear$1.exports;

  var weekYear$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.weekYear = function () {
          var e = this.month(),
            t = this.week(),
            n = this.year();
          return 1 === t && 11 === e ? n + 1 : 0 === e && t >= 52 ? n - 1 : n;
        };
      };
    });
  })(weekYear$1);
  var weekYear = weekYear$1.exports;

  var localeData$1 = {exports: {}};

  (function (module, exports) {
    !function (n, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      return function (n, e, t) {
        var r = e.prototype,
          o = function o(n) {
            return n && (n.indexOf ? n : n.s);
          },
          u = function u(n, e, t, r, _u) {
            var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f = a || s.map(function (n) {
                return n.slice(0, r);
              });
            if (!_u) return f;
            var d = i.weekStart;
            return f.map(function (n, e) {
              return f[(e + (d || 0)) % 7];
            });
          },
          i = function i() {
            return t.Ls[t.locale()];
          },
          a = function a(n, e) {
            return n.formats[e] || function (n) {
              return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (n, e, t) {
                return e || t.slice(1);
              });
            }(n.formats[e.toUpperCase()]);
          },
          s = function s() {
            var n = this;
            return {
              months: function months(e) {
                return e ? e.format("MMMM") : u(n, "months");
              },
              monthsShort: function monthsShort(e) {
                return e ? e.format("MMM") : u(n, "monthsShort", "months", 3);
              },
              firstDayOfWeek: function firstDayOfWeek() {
                return n.$locale().weekStart || 0;
              },
              weekdays: function weekdays(e) {
                return e ? e.format("dddd") : u(n, "weekdays");
              },
              weekdaysMin: function weekdaysMin(e) {
                return e ? e.format("dd") : u(n, "weekdaysMin", "weekdays", 2);
              },
              weekdaysShort: function weekdaysShort(e) {
                return e ? e.format("ddd") : u(n, "weekdaysShort", "weekdays", 3);
              },
              longDateFormat: function longDateFormat(e) {
                return a(n.$locale(), e);
              },
              meridiem: this.$locale().meridiem,
              ordinal: this.$locale().ordinal
            };
          };
        r.localeData = function () {
          return s.bind(this)();
        }, t.localeData = function () {
          var n = i();
          return {
            firstDayOfWeek: function firstDayOfWeek() {
              return n.weekStart || 0;
            },
            weekdays: function weekdays() {
              return t.weekdays();
            },
            weekdaysShort: function weekdaysShort() {
              return t.weekdaysShort();
            },
            weekdaysMin: function weekdaysMin() {
              return t.weekdaysMin();
            },
            months: function months() {
              return t.months();
            },
            monthsShort: function monthsShort() {
              return t.monthsShort();
            },
            longDateFormat: function longDateFormat(e) {
              return a(n, e);
            },
            meridiem: n.meridiem,
            ordinal: n.ordinal
          };
        }, t.months = function () {
          return u(i(), "months");
        }, t.monthsShort = function () {
          return u(i(), "monthsShort", "months", 3);
        }, t.weekdays = function (n) {
          return u(i(), "weekdays", null, null, n);
        }, t.weekdaysShort = function (n) {
          return u(i(), "weekdaysShort", "weekdays", 3, n);
        }, t.weekdaysMin = function (n) {
          return u(i(), "weekdaysMin", "weekdays", 2, n);
        };
      };
    });
  })(localeData$1);
  var localeData = localeData$1.exports;

  var quarterOfYear$1 = {exports: {}};

  (function (module, exports) {
    !function (t, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      var t = "month",
        n = "quarter";
      return function (e, i) {
        var r = i.prototype;
        r.quarter = function (t) {
          return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));
        };
        var s = r.add;
        r.add = function (e, i) {
          return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };
        var u = r.startOf;
        r.startOf = function (e, i) {
          var r = this.$utils(),
            s = !!r.u(i) || i;
          if (r.p(e) === n) {
            var o = this.quarter() - 1;
            return s ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
          }
          return u.bind(this)(e, i);
        };
      };
    });
  })(quarterOfYear$1);
  var quarterOfYear = quarterOfYear$1.exports;

  var advancedFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        var r = t.prototype,
          n = r.format;
        r.format = function (e) {
          var t = this,
            r = this.$locale();
          if (!this.isValid()) return n.bind(this)(e);
          var s = this.$utils(),
            a = (e || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function (e) {
              switch (e) {
                case "Q":
                  return Math.ceil((t.$M + 1) / 3);
                case "Do":
                  return r.ordinal(t.$D);
                case "gggg":
                  return t.weekYear();
                case "GGGG":
                  return t.isoWeekYear();
                case "wo":
                  return r.ordinal(t.week(), "W");
                case "w":
                case "ww":
                  return s.s(t.week(), "w" === e ? 1 : 2, "0");
                case "W":
                case "WW":
                  return s.s(t.isoWeek(), "W" === e ? 1 : 2, "0");
                case "k":
                case "kk":
                  return s.s(String(0 === t.$H ? 24 : t.$H), "k" === e ? 1 : 2, "0");
                case "X":
                  return Math.floor(t.$d.getTime() / 1e3);
                case "x":
                  return t.$d.getTime();
                case "z":
                  return "[" + t.offsetName() + "]";
                case "zzz":
                  return "[" + t.offsetName("long") + "]";
                default:
                  return e;
              }
            });
          return n.bind(this)(a);
        };
      };
    });
  })(advancedFormat$1);
  var advancedFormat = advancedFormat$1.exports;

  function ownKeys$11(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$11(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$11(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$11(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(weekOfYear);
  dayjs.extend(weekYear);
  dayjs.extend(localeData);
  dayjs.extend(quarterOfYear);
  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  dayjs.extend(dayJsIsBetween);
  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }
  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
      month = _ref.month;
    return new Date(year, month, 1);
  }
  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
      month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }
  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
      month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }
  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }
  function isSameQuarter(date1, date2) {
    return isSameYear(date1, date2) && dayjs(date1).quarter() === dayjs(date2).quarter();
  }
  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }
  function isSameWeek(date1, date2) {
    var dayjsLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "zh-cn";
    return isSameMonth(date1, date2) && dayjs(date1).locale(dayjsLocale).week() === dayjs(date2).locale(dayjsLocale).week();
  }
  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }
  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }
  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var dayjsLocale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "zh-cn";
    var func = {
      isSameYear: isSameYear,
      isSameQuarter: isSameQuarter,
      isSameMonth: isSameMonth,
      isSameWeek: isSameWeek,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2, dayjsLocale);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function subtractMonth(date, num) {
    return dayjs(date).subtract(num, "month").toDate();
  }
  function addMonth(date, num) {
    return dayjs(date).add(num, "month").toDate();
  }
  function getWeeks(_ref4, _ref5) {
    var year = _ref4.year,
      month = _ref4.month;
    var firstDayOfWeek = _ref5.firstDayOfWeek,
      _ref5$showWeekOfYear = _ref5.showWeekOfYear,
      showWeekOfYear = _ref5$showWeekOfYear === void 0 ? false : _ref5$showWeekOfYear,
      _ref5$disableDate = _ref5.disableDate,
      disableDate = _ref5$disableDate === void 0 ? function () {
        return false;
      } : _ref5$disableDate,
      minDate = _ref5.minDate,
      maxDate = _ref5.maxDate,
      _ref5$dayjsLocale = _ref5.dayjsLocale,
      dayjsLocale = _ref5$dayjsLocale === void 0 ? "zh-cn" : _ref5$dayjsLocale,
      _ref5$cancelRangeSele = _ref5.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _ref5$cancelRangeSele === void 0 ? false : _ref5$cancelRangeSele;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();
    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: isFunction$1(disableDate) && disableDate(currentDay) || !cancelRangeSelectLimit && outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month",
        dayjsObj: dayjs(currentDay).locale(dayjsLocale)
      });
    }
    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);
      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: isFunction$1(disableDate) && disableDate(prependDay) || !cancelRangeSelectLimit && outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month",
          dayjsObj: dayjs(prependDay).locale(dayjsLocale)
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }
    var LEN = 42;
    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: isFunction$1(disableDate) && disableDate(appendDay) || !cancelRangeSelectLimit && outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month",
        dayjsObj: dayjs(appendDay).locale(dayjsLocale)
      });
    }
    var dataList = chunk(daysArr, 7);
    if (showWeekOfYear) {
      dataList.forEach(function (d) {
        d.unshift(_objectSpread$11(_objectSpread$11({}, d[0]), {}, {
          active: false,
          value: d[0].value,
          text: dayjs(d[0].value).locale(dayjsLocale).week(),
          dayjsObj: dayjs(d[0].value).locale(dayjsLocale)
        }));
      });
    }
    return dataList;
  }
  function getQuarters(year, _ref6) {
    var _ref6$disableDate = _ref6.disableDate,
      disableDate = _ref6$disableDate === void 0 ? function () {
        return false;
      } : _ref6$disableDate,
      minDate = _ref6.minDate,
      maxDate = _ref6.maxDate,
      quarterLocal = _ref6.quarterLocal,
      _ref6$dayjsLocale = _ref6.dayjsLocale,
      dayjsLocale = _ref6$dayjsLocale === void 0 ? "zh-cn" : _ref6$dayjsLocale,
      _ref6$cancelRangeSele = _ref6.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _ref6$cancelRangeSele === void 0 ? false : _ref6$cancelRangeSele;
    var quarterArr = [];
    var today = getToday();
    for (var i = 1; i <= 4; i++) {
      var date = dayjs(new Date(year, 0)).quarter(i).toDate();
      quarterArr.push({
        value: date,
        now: isSame(date, today, "quarter"),
        disabled: isFunction$1(disableDate) && disableDate(date) || !cancelRangeSelectLimit && outOfRanges(date, minDate, maxDate),
        active: false,
        text: quarterLocal[i - 1],
        dayjsObj: dayjs(date).locale(dayjsLocale)
      });
    }
    return chunk(quarterArr, 4);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
      disableDate = _ref7$disableDate === void 0 ? function () {
        return false;
      } : _ref7$disableDate,
      minDate = _ref7.minDate,
      maxDate = _ref7.maxDate,
      _ref7$dayjsLocale = _ref7.dayjsLocale,
      dayjsLocale = _ref7$dayjsLocale === void 0 ? "zh-cn" : _ref7$dayjsLocale,
      _ref7$cancelRangeSele = _ref7.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _ref7$cancelRangeSele === void 0 ? false : _ref7$cancelRangeSele;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();
    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 0);
      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: isFunction$1(disableDate) && disableDate(date) || !cancelRangeSelectLimit && outOfRanges(date, minDate, maxDate),
        active: false,
        text: "".concat(date.getFullYear()),
        dayjsObj: dayjs(date).locale(dayjsLocale)
      });
    }
    return chunk(yearArr, 3);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
      disableDate = _params$disableDate === void 0 ? function () {
        return false;
      } : _params$disableDate,
      minDate = params.minDate,
      maxDate = params.maxDate,
      monthLocal = params.monthLocal,
      _params$dayjsLocale = params.dayjsLocale,
      dayjsLocale = _params$dayjsLocale === void 0 ? "zh-cn" : _params$dayjsLocale,
      _params$cancelRangeSe = params.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _params$cancelRangeSe === void 0 ? false : _params$cancelRangeSe;
    var MonthArr = [];
    var today = getToday();
    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: isFunction$1(disableDate) && disableDate(date) || !cancelRangeSelectLimit && outOfRanges(date, minDate, maxDate),
        active: false,
        text: monthLocal[date.getMonth()],
        dayjsObj: dayjs(date).locale(dayjsLocale)
      });
    }
    return chunk(MonthArr, 3);
  }
  function flagActive(data, _ref8) {
    var args = _extends$1({}, (_objectDestructuringEmpty(_ref8), _ref8));
    var start = args.start,
      end = args.end,
      hoverStart = args.hoverStart,
      hoverEnd = args.hoverEnd,
      _args$type = args.type,
      type = _args$type === void 0 ? "date" : _args$type,
      _args$isRange = args.isRange,
      isRange = _args$isRange === void 0 ? false : _args$isRange,
      value = args.value,
      _args$multiple = args.multiple,
      multiple = _args$multiple === void 0 ? false : _args$multiple;
    if (type === "week") return data;
    if (!isRange) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          if (multiple) {
            var _value$some;
            _item.active = value === null || value === void 0 || (_value$some = value.some) === null || _value$some === void 0 ? void 0 : _value$some.call(value, function (val) {
              return isSame(dayjs(val).toDate(), _item.value, type) && !_item.additional;
            });
          } else {
            _item.active = start && isSame(item.value, start, type) && !_item.additional;
          }
          return _item;
        });
      });
    }
    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = start && isSame(start, date, type);
        var isHoverStart = hoverStart && isSame(hoverStart, date, type);
        var isEnd = end && isSame(end, date, type);
        var isHoverEnd = hoverEnd && isSame(hoverEnd, date, type);
        _item.active = (isStart || isEnd) && !_item.additional;
        if (start && end) {
          _item.highlight = dayjs(date).isBetween(start, end, type, "[]") && !_item.additional;
          _item.startOfRange = isStart;
          _item.endOfRange = isEnd;
        }
        if (hoverStart && hoverEnd) {
          _item.hoverHighlight = dayjs(date).isBetween(hoverStart, hoverEnd, type, "[]") && !_item.additional;
          _item.hoverStartOfRange = isHoverStart;
          _item.hoverEndOfRange = isHoverEnd;
        }
        return _item;
      });
    });
  }
  function extractTimeObj() {
    var timeFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var matchedMeridiem = timeFormat.match(/[ap]m/i) || [""];
    var timeReg = /\d{1,2}(:\d{1,2})?(:\d{1,2})?(:\d{1,3})?/;
    var matchedTimeStr = timeFormat.match(timeReg) || ["0:0:0:0"];
    var _matchedTimeStr$0$spl = matchedTimeStr[0].split(":"),
      _matchedTimeStr$0$spl2 = _slicedToArray$1(_matchedTimeStr$0$spl, 4),
      _matchedTimeStr$0$spl3 = _matchedTimeStr$0$spl2[0],
      hours = _matchedTimeStr$0$spl3 === void 0 ? 0 : _matchedTimeStr$0$spl3,
      _matchedTimeStr$0$spl4 = _matchedTimeStr$0$spl2[1],
      minutes = _matchedTimeStr$0$spl4 === void 0 ? 0 : _matchedTimeStr$0$spl4,
      _matchedTimeStr$0$spl5 = _matchedTimeStr$0$spl2[2],
      seconds = _matchedTimeStr$0$spl5 === void 0 ? 0 : _matchedTimeStr$0$spl5,
      _matchedTimeStr$0$spl6 = _matchedTimeStr$0$spl2[3],
      milliseconds = _matchedTimeStr$0$spl6 === void 0 ? 0 : _matchedTimeStr$0$spl6;
    return {
      hours: +hours,
      minutes: +minutes,
      seconds: +seconds,
      milliseconds: +milliseconds,
      meridiem: matchedMeridiem[0]
    };
  }
  function isEnabledDate(_ref9) {
    var value = _ref9.value,
      disableDate = _ref9.disableDate,
      mode = _ref9.mode,
      format = _ref9.format;
    if (!disableDate) return true;
    var availableMode = mode === "quarter" ? "date" : mode;
    var isEnabled = true;
    if (isFunction$1(disableDate)) {
      return !disableDate(value);
    }
    if (Array.isArray(disableDate)) {
      var formattedDisabledDate = disableDate.map(function (item) {
        return parseToDayjs(item, format);
      });
      var isIncludes = formattedDisabledDate.some(function (item) {
        return item.isSame(dayjs(value));
      });
      return !isIncludes;
    }
    var from = disableDate.from,
      to = disableDate.to,
      before = disableDate.before,
      after = disableDate.after;
    if (from && to) {
      var compareMin = dayjs(from).startOf("day");
      var compareMax = dayjs(to).endOf("day");
      return !dayjs(value).isBetween(compareMin, compareMax, availableMode, "[]");
    }
    var min = before ? new Date(dayjs(before).startOf("day").format()) : null;
    var max = after ? new Date(dayjs(after).endOf("day").format()) : null;
    if (max && min) {
      var _compareMin = dayjs(new Date(min));
      var _compareMax = dayjs(new Date(max));
      isEnabled = dayjs(value).isBetween(_compareMin, _compareMax, availableMode, "[]");
    } else if (min) {
      var _compareMin2 = dayjs(new Date(min));
      isEnabled = !dayjs(value).isBefore(_compareMin2, availableMode);
    } else if (max) {
      var _compareMax2 = dayjs(new Date(max));
      isEnabled = !dayjs(value).isAfter(_compareMax2, availableMode);
    }
    return isEnabled;
  }
  function covertToDate(value, valueType) {
    return valueType === "time-stamp" ? new Date(value) : dayjs(value, valueType).toDate();
  }

  function ownKeys$10(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$10(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$10(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$10(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var RangeInputPopup$1 = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var name = "".concat(classPrefix, "-range-input-popup");
    var className = props.className,
      style = props.style,
      inputValue = props.inputValue,
      panel = props.panel,
      popupProps = props.popupProps,
      rangeInputProps = props.rangeInputProps,
      popupVisible = props.popupVisible,
      onInputChange = props.onInputChange,
      disabled = props.disabled,
      status = props.status,
      tips = props.tips;
    var _useOverlayInnerStyle = useOverlayInnerStyle(props),
      tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
      innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
      onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
    var popupClasses = classNames$1([name, _defineProperty$2({}, "".concat(name, "--visible"), popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible)]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(name, className, popupClasses)
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$10(_objectSpread$10({
      hideEmptyPopup: true,
      content: panel,
      trigger: "click",
      placement: "bottom-left",
      visible: popupVisible !== null && popupVisible !== void 0 ? popupVisible : innerPopupVisible,
      onVisibleChange: onInnerPopupVisibleChange,
      disabled: disabled
    }, popupProps), {}, {
      overlayInnerStyle: tOverlayInnerStyle
    }), /* @__PURE__ */React__default["default"].createElement(RangeInput$1, _objectSpread$10({
      disabled: disabled,
      status: status,
      tips: tips,
      value: inputValue,
      onChange: onInputChange
    }, rangeInputProps))));
  });
  RangeInputPopup$1.displayName = "RangeInputPopup";

  var RangeInput = RangeInput$1;
  var RangeInputPopup = RangeInputPopup$1;

  var datePickerDefaultProps = {
    allowInput: false,
    borderless: false,
    clearable: false,
    defaultTime: "00:00:00",
    enableTimePicker: false,
    format: void 0,
    mode: "date",
    multiple: false,
    needConfirm: true,
    placeholder: void 0,
    presetsPlacement: "bottom",
    size: "medium",
    status: "default",
    defaultValue: ""
  };
  var dateRangePickerDefaultProps = {
    allowInput: false,
    borderless: false,
    cancelRangeSelectLimit: false,
    clearable: false,
    defaultTime: ["00:00:00", "23:59:59"],
    enableTimePicker: false,
    mode: "date",
    needConfirm: true,
    panelPreselection: true,
    presetsPlacement: "bottom",
    size: "medium",
    status: "default",
    defaultValue: []
  };

  function useRange$1(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat;
    if (props.enableTimePicker) {
      if (!extractTimeFormat(format)) log.error("DatePicker", "format: ".concat(format, " is invalid\uFF0Ctime selection must include time formatting HH:mm:ss"));
    }
    if (!Array.isArray(value)) {
      log.error("DatePicker", "typeof value: ".concat(value, " must be Array!"));
    } else if (!isValidDate(value, format)) {
      log.error("DatePicker", "value: ".concat(value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(format));
    }
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isFirstValueSelected = _useState2[0],
      setIsFirstValueSelected = _useState2[1];
    var _useState3 = React.useState(function () {
        return initYearMonthTime({
          value: value,
          mode: props.mode,
          format: format,
          enableTimePicker: props.enableTimePicker
        }).time;
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      time = _useState4[0],
      setTime = _useState4[1];
    var _useState5 = React.useState(function () {
        return initYearMonthTime({
          value: value,
          mode: props.mode,
          format: format,
          enableTimePicker: props.enableTimePicker
        }).month;
      }),
      _useState6 = _slicedToArray$1(_useState5, 2),
      month = _useState6[0],
      setMonth = _useState6[1];
    var _useState7 = React.useState(function () {
        return initYearMonthTime({
          value: value,
          mode: props.mode,
          format: format
        }).year;
      }),
      _useState8 = _slicedToArray$1(_useState7, 2),
      year = _useState8[0],
      setYear = _useState8[1];
    var _useState9 = React.useState(function () {
        return formatDate(value, {
          format: format
        });
      }),
      _useState0 = _slicedToArray$1(_useState9, 2),
      cacheValue = _useState0[0],
      setCacheValue = _useState0[1];
    React.useEffect(function () {
      if (!value) {
        setCacheValue([]);
        return;
      }
      if (!isValidDate(value, format)) return;
      setCacheValue(formatDate(value, {
        format: format
      }));
      setTime(formatTime(value, format, timeFormat, props.defaultTime));
    }, [value]);
    return {
      value: value,
      onChange: onChange,
      year: year,
      setYear: setYear,
      month: month,
      setMonth: setMonth,
      time: time,
      setTime: setTime,
      isFirstValueSelected: isFirstValueSelected,
      setIsFirstValueSelected: setIsFirstValueSelected,
      cacheValue: cacheValue,
      setCacheValue: setCacheValue
    };
  }

  function ownKeys$$(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$$(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$$(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$$(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var PARTIAL_MAP = {
    first: "start",
    second: "end"
  };
  function useRange(props) {
    var _props$separator, _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps2, _props$popupProps3;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;
    var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: TdCalendarIcon
      }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;
    var name = "".concat(classPrefix, "-date-range-picker");
    var isMountedRef = React.useRef(false);
    var inputRef = React.useRef(null);
    var _useRangeValue = useRange$1(props),
      value = _useRangeValue.value,
      onChange = _useRangeValue.onChange,
      time = _useRangeValue.time,
      setTime = _useRangeValue.setTime,
      month = _useRangeValue.month,
      setMonth = _useRangeValue.setMonth,
      year = _useRangeValue.year,
      setYear = _useRangeValue.setYear,
      cacheValue = _useRangeValue.cacheValue,
      setCacheValue = _useRangeValue.setCacheValue,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected,
      setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected;
    var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat,
      valueType = _getDefaultFormat.valueType;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];
    var _useState5 = React.useState(0),
      _useState6 = _slicedToArray$1(_useState5, 2),
      activeIndex = _useState6[0],
      setActiveIndex = _useState6[1];
    var _useState7 = React.useState(function () {
        return formatDate(value, {
          format: format
        });
      }),
      _useState8 = _slicedToArray$1(_useState7, 2),
      inputValue = _useState8[0],
      setInputValue = _useState8[1];
    var handlePopupInvisible = function handlePopupInvisible() {
      var _props$popupProps, _props$popupProps$onV;
      setPopupVisible(false);
      (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 || (_props$popupProps$onV = _props$popupProps.onVisibleChange) === null || _props$popupProps$onV === void 0 || _props$popupProps$onV.call(_props$popupProps, false, {});
    };
    var rangeInputProps = _objectSpread$$(_objectSpread$$({}, props.rangeInputProps), {}, {
      ref: inputRef,
      borderless: props.borderless,
      size: props.size,
      separator: (_props$separator = props.separator) !== null && _props$separator !== void 0 ? _props$separator : globalDatePickerConfig.rangeSeparator,
      clearable: props.clearable,
      prefixIcon: props.prefixIcon,
      readonly: !props.allowInput,
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
      activeIndex: popupVisible ? activeIndex : void 0,
      suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null),
      label: props.label,
      className: classNames$1(_defineProperty$2({}, "".concat(name, "__input--placeholder"), isHoverCell)),
      onClick: function onClick(_ref) {
        var position = _ref.position;
        setActiveIndex(position === "first" ? 0 : 1);
      },
      onClear: function onClear(_ref2) {
        var _props$onClear;
        var e = _ref2.e;
        e.stopPropagation();
        handlePopupInvisible();
        onChange([], {
          dayjsValue: [],
          trigger: "clear"
        });
        (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, {
          e: e
        });
      },
      onBlur: function onBlur(newVal, _ref3) {
        var _props$onBlur;
        var e = _ref3.e,
          position = _ref3.position;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
          value: newVal,
          partial: PARTIAL_MAP[position],
          e: e
        });
      },
      onFocus: function onFocus(newVal, _ref4) {
        var _props$onFocus;
        var e = _ref4.e,
          position = _ref4.position;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
          value: newVal,
          partial: PARTIAL_MAP[position],
          e: e
        });
        setActiveIndex(position === "first" ? 0 : 1);
      },
      onChange: function onChange(newVal, _ref5) {
        var _props$onInput;
        var e = _ref5.e,
          position = _ref5.position;
        var index = position === "first" ? 0 : 1;
        (_props$onInput = props.onInput) === null || _props$onInput === void 0 || _props$onInput.call(props, {
          input: newVal[index],
          value: value,
          partial: PARTIAL_MAP[position],
          e: e
        });
        setInputValue(newVal);
        if (!isValidDate(newVal, format)) return;
        setCacheValue(newVal);
        var newYear = [];
        var newMonth = [];
        var newTime = [];
        newVal.forEach(function (v) {
          newYear.push(parseToDayjs(v, format).year());
          newMonth.push(parseToDayjs(v, format).month());
          newTime.push(parseToDayjs(v, format).format(timeFormat));
        });
        setYear(newYear);
        setMonth(newMonth);
        setTime(newTime);
      },
      onEnter: function onEnter(newVal) {
        if (!isValidDate(newVal, format) && !isValidDate(value, format)) return;
        handlePopupInvisible();
        if (isValidDate(newVal, format)) {
          onChange(formatDate(newVal, {
            format: format,
            targetFormat: valueType,
            autoSwap: true
          }), {
            dayjsValue: newVal.map(function (v) {
              return parseToDayjs(v, format);
            }),
            trigger: "enter"
          });
        } else if (isValidDate(value, format)) {
          setInputValue(formatDate(value, {
            format: format
          }));
        } else {
          setInputValue([]);
        }
      }
    });
    var popupProps = _objectSpread$$(_objectSpread$$({
      expandAnimation: true
    }, props.popupProps), {}, {
      trigger: "mousedown",
      overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
        width: "auto"
      },
      overlayClassName: classNames$1((_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 ? void 0 : _props$popupProps3.overlayClassName, "".concat(name, "__panel-container")),
      onVisibleChange: function onVisibleChange(visible, context) {
        var _props$popupProps4, _props$popupProps4$on;
        if (props.disabled) return;
        (_props$popupProps4 = props.popupProps) === null || _props$popupProps4 === void 0 || (_props$popupProps4$on = _props$popupProps4.onVisibleChange) === null || _props$popupProps4$on === void 0 || _props$popupProps4$on.call(_props$popupProps4, visible, context);
        if (context.trigger === "trigger-element-mousedown") {
          var indexMap = {
            0: "first",
            1: "second"
          };
          inputRef.current.focus({
            position: indexMap[activeIndex]
          });
          return setPopupVisible(true);
        }
        setPopupVisible(visible);
      }
    });
    React.useEffect(function () {
      if (!value) {
        setInputValue([]);
        return;
      }
      if (!isValidDate(value, format)) return;
      setInputValue(formatDate(value, {
        format: format
      }));
    }, [value]);
    React.useEffect(function () {
      if (!popupVisible) return;
      if (!isMountedRef.current) {
        isMountedRef.current = true;
        return;
      }
      var indexMap = {
        0: "first",
        1: "second"
      };
      inputRef.current.focus({
        position: indexMap[activeIndex]
      });
    }, [activeIndex]);
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      rangeInputProps: rangeInputProps,
      popupProps: popupProps,
      isHoverCell: isHoverCell,
      onChange: onChange,
      setYear: setYear,
      setMonth: setMonth,
      setTime: setTime,
      setIsHoverCell: setIsHoverCell,
      setInputValue: setInputValue,
      setPopupVisible: setPopupVisible,
      activeIndex: activeIndex,
      setActiveIndex: setActiveIndex,
      isFirstValueSelected: isFirstValueSelected,
      setIsFirstValueSelected: setIsFirstValueSelected,
      cacheValue: cacheValue,
      setCacheValue: setCacheValue
    };
  }

  var useDatePickerLocalConfig = function useDatePickerLocalConfig() {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    return {
      months: t(local.months),
      nextYear: t(local.nextYear),
      preYear: t(local.preYear),
      nextMonth: t(local.nextMonth),
      preMonth: t(local.preMonth),
      preDecade: t(local.preDecade),
      nextDecade: t(local.nextDecade),
      now: t(local.now)
    };
  };
  var DatePickerHeader = function DatePickerHeader(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var mode = props.mode,
      year = props.year,
      month = props.month,
      onMonthChange = props.onMonthChange,
      onYearChange = props.onYearChange,
      onJumperClick = props.onJumperClick,
      partial = props.partial,
      _props$internalYear = props.internalYear,
      internalYear = _props$internalYear === void 0 ? [] : _props$internalYear;
    var _useDatePickerLocalCo = useDatePickerLocalConfig(),
      now = _useDatePickerLocalCo.now,
      months = _useDatePickerLocalCo.months,
      preMonth = _useDatePickerLocalCo.preMonth,
      preYear = _useDatePickerLocalCo.preYear,
      nextMonth = _useDatePickerLocalCo.nextMonth,
      nextYear = _useDatePickerLocalCo.nextYear,
      preDecade = _useDatePickerLocalCo.preDecade,
      nextDecade = _useDatePickerLocalCo.nextDecade;
    var scrollAnchorRef = React.useRef("default");
    var monthOptions = months.map(function (item, index) {
      return {
        label: item,
        value: index
      };
    });
    var initOptions = React.useCallback(function (year2) {
      var options = [];
      if (mode === "year") {
        var extraYear = year2 % 10;
        var minYear = year2 - extraYear - 100;
        var maxYear = year2 - extraYear + 100;
        for (var i = minYear; i <= maxYear; i += 10) {
          options.push({
            label: "".concat(i, " - ").concat(i + 9),
            value: i + 9
          });
        }
      } else {
        options.push({
          label: "".concat(year2),
          value: year2
        });
        for (var _i = 1; _i <= 10; _i++) {
          options.push({
            label: "".concat(year2 + _i),
            value: year2 + _i
          });
          options.unshift({
            label: "".concat(year2 - _i),
            value: year2 - _i
          });
        }
      }
      return options;
    }, [mode]);
    var _useState = React.useState(function () {
        return initOptions(year);
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      yearOptions = _useState2[0],
      setYearOptions = _useState2[1];
    var nearestYear = React.useMemo(function () {
      var _yearOptions$find;
      var extraYear = partial === "end" && mode === "year" && internalYear[1] - internalYear[0] <= 9 ? 9 : 0;
      return ((_yearOptions$find = yearOptions.find(function (option) {
        return option.value - (year + extraYear) <= 9 && option.value - (year + extraYear) >= 0;
      })) === null || _yearOptions$find === void 0 ? void 0 : _yearOptions$find.value) || year;
    }, [yearOptions, year, mode, partial, internalYear]);
    React.useEffect(function () {
      var yearRange = initOptions(year);
      setYearOptions(yearRange);
    }, [initOptions, year]);
    function loadMoreYear(year2, type) {
      var options = [];
      if (mode === "year") {
        var extraYear = year2 % 10;
        if (type === "add") {
          for (var i = year2 - extraYear + 10; i <= year2 - extraYear + 50; i += 10) {
            options.push({
              label: "".concat(i, " - ").concat(i + 9),
              value: i
            });
          }
        } else {
          for (var _i2 = year2 - extraYear - 1; _i2 > year2 - extraYear - 50; _i2 -= 10) {
            options.unshift({
              label: "".concat(_i2 - 9, " - ").concat(_i2),
              value: _i2
            });
          }
        }
      } else if (type === "add") {
        for (var _i3 = year2 + 1; _i3 <= year2 + 10; _i3++) {
          options.push({
            label: "".concat(_i3),
            value: _i3
          });
        }
      } else {
        for (var _i4 = year2 - 1; _i4 > year2 - 10; _i4--) {
          options.unshift({
            label: "".concat(_i4),
            value: _i4
          });
        }
      }
      return options;
    }
    var labelMap = {
      year: {
        prev: preDecade,
        current: now,
        next: nextDecade
      },
      month: {
        prev: preYear,
        current: now,
        next: nextYear
      },
      date: {
        prev: preMonth,
        current: now,
        next: nextMonth
      }
    };
    var headerClassName = "".concat(classPrefix, "-date-picker__header");
    var showMonthPicker = mode === "date" || mode === "week";
    function handlePanelTopClick(e) {
      var _e$stopPropagation, _e$nativeEvent, _e$nativeEvent$stopIm;
      e === null || e === void 0 || (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);
      e === null || e === void 0 || (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 || (_e$nativeEvent$stopIm = _e$nativeEvent.stopImmediatePropagation) === null || _e$nativeEvent$stopIm === void 0 || _e$nativeEvent$stopIm.call(_e$nativeEvent);
      var firstYear = yearOptions[0].value;
      var options = loadMoreYear(firstYear, "reduce");
      setYearOptions([].concat(_toConsumableArray(options), _toConsumableArray(yearOptions)));
    }
    function handlePanelBottomClick(e) {
      var _e$stopPropagation2, _e$nativeEvent2;
      e === null || e === void 0 || (_e$stopPropagation2 = e.stopPropagation) === null || _e$stopPropagation2 === void 0 || _e$stopPropagation2.call(e);
      e === null || e === void 0 || (_e$nativeEvent2 = e.nativeEvent) === null || _e$nativeEvent2 === void 0 || _e$nativeEvent2.stopImmediatePropagation();
      var lastYear = yearOptions.slice(-1)[0].value;
      var options = loadMoreYear(lastYear, "add");
      setYearOptions([].concat(_toConsumableArray(yearOptions), _toConsumableArray(options)));
    }
    function handleScroll(_ref) {
      var e = _ref.e;
      if (e.target.scrollTop === 0) {
        handlePanelTopClick();
        scrollAnchorRef.current = "top";
      } else if (e.target.scrollTop === e.target.scrollHeight - e.target.clientHeight) {
        handlePanelBottomClick();
        scrollAnchorRef.current = "bottom";
      }
    }
    function handleUpdateScrollTop(content) {
      if (scrollAnchorRef.current === "top") {
        content.scrollTop = 30 * 10;
      } else if (scrollAnchorRef.current === "bottom") {
        content.scrollTop = content.scrollHeight - 30 * 10;
      } else {
        var firstSelectedNode = content.querySelector(".".concat(classPrefix, "-is-selected"));
        if (firstSelectedNode) {
          var _getComputedStyle = getComputedStyle(firstSelectedNode),
            paddingBottom = _getComputedStyle.paddingBottom;
          var _getComputedStyle2 = getComputedStyle(content),
            marginBottom = _getComputedStyle2.marginBottom;
          var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
          var updateValue = firstSelectedNode.offsetTop - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
          content.scrollTop = updateValue;
        }
      }
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: headerClassName
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(headerClassName, "-controller")
    }, showMonthPicker && /* @__PURE__ */React__default["default"].createElement(Select, {
      className: "".concat(headerClassName, "-controller-month"),
      value: month,
      options: monthOptions,
      onChange: function onChange(val) {
        return onMonthChange(val);
      },
      popupProps: {
        attach: function attach(triggerElement) {
          return triggerElement.parentNode;
        },
        overlayClassName: "".concat(headerClassName, "-controller-month-popup")
      }
    }), /* @__PURE__ */React__default["default"].createElement(Select, {
      className: "".concat(headerClassName, "-controller-year"),
      value: mode === "year" ? nearestYear : year,
      options: yearOptions,
      onChange: function onChange(val) {
        return onYearChange(val);
      },
      onPopupVisibleChange: function onPopupVisibleChange(visible) {
        if (!visible) scrollAnchorRef.current = "default";
      },
      popupProps: {
        onScroll: handleScroll,
        updateScrollTop: handleUpdateScrollTop,
        attach: function attach(triggerElement) {
          return triggerElement.parentNode;
        },
        overlayClassName: "".concat(headerClassName, "-controller-year-popup")
      },
      panelTopContent: /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select-option"),
        onClick: handlePanelTopClick
      }, "..."),
      panelBottomContent: /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select-option"),
        onClick: handlePanelBottomClick
      }, "...")
    })), /* @__PURE__ */React__default["default"].createElement(PaginationMini, {
      tips: labelMap[mode],
      size: "small",
      onChange: onJumperClick
    }));
  };
  DatePickerHeader.displayName = "DatePickerHeader";
  var DateHeader = /*#__PURE__*/React__default["default"].memo(DatePickerHeader);

  var isoWeek$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "day";
      return function (t, i, s) {
        var a = function a(t) {
            return t.add(4 - t.isoWeekday(), e);
          },
          d = i.prototype;
        d.isoWeekYear = function () {
          return a(this).year();
        }, d.isoWeek = function (t) {
          if (!this.$utils().u(t)) return this.add(7 * (t - this.isoWeek()), e);
          var i,
            d,
            n,
            o,
            r = a(this),
            u = (i = this.isoWeekYear(), d = this.$u, n = (d ? s.utc : s)().year(i).startOf("year"), o = 4 - n.isoWeekday(), n.isoWeekday() > 4 && (o += 7), n.add(o, e));
          return r.diff(u, "week") + 1;
        }, d.isoWeekday = function (e) {
          return this.$utils().u(e) ? this.day() || 7 : this.day(this.day() % 7 ? e : e - 7);
        };
        var n = d.startOf;
        d.startOf = function (e, t) {
          var i = this.$utils(),
            s = !!i.u(t) || t;
          return "isoweek" === i.p(e) ? s ? this.date(this.date() - (this.isoWeekday() - 1)).startOf("day") : this.date(this.date() - 1 - (this.isoWeekday() - 1) + 7).endOf("day") : n.bind(this)(e, t);
        };
      };
    });
  })(isoWeek$1);
  var isoWeek = isoWeek$1.exports;

  var DatePickerCell = function DatePickerCell(props) {
    var _classNames;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var cellClass = classNames$1("".concat(classPrefix, "-date-picker__cell"), (_classNames = {}, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--now"), props.now), "".concat(classPrefix, "-date-picker__cell--active"), props.active), "".concat(classPrefix, "-date-picker__cell--disabled"), props.disabled), "".concat(classPrefix, "-date-picker__cell--highlight"), props.highlight), "".concat(classPrefix, "-date-picker__cell--hover-highlight"), props.hoverHighlight), "".concat(classPrefix, "-date-picker__cell--active-start"), props.startOfRange), "".concat(classPrefix, "-date-picker__cell--active-end"), props.endOfRange), "".concat(classPrefix, "-date-picker__cell--hover-start"), props.hoverStartOfRange), "".concat(classPrefix, "-date-picker__cell--hover-end"), props.hoverEndOfRange), "".concat(classPrefix, "-date-picker__cell--additional"), props.additional), _defineProperty$2(_defineProperty$2(_defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--first-day-of-month"), props.firstDayOfMonth), "".concat(classPrefix, "-date-picker__cell--last-day-of-month"), props.lastDayOfMonth), "".concat(classPrefix, "-date-picker__cell--week-of-year"), props.weekOfYear)));
    function handleClick(e) {
      var _props$onClick;
      if (props.disabled) return;
      if (props.time) {
        var _extractTimeObj = extractTimeObj(props.time),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        props.value.setHours(nextHours);
        props.value.setMinutes(minutes);
        props.value.setSeconds(seconds);
        props.value.setMilliseconds(milliseconds);
      }
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, props.value, {
        e: e
      });
    }
    function handleMouseEnter() {
      var _props$onMouseEnter;
      if (props.disabled) return;
      if (props.time) {
        var _extractTimeObj2 = extractTimeObj(props.time),
          hours = _extractTimeObj2.hours,
          minutes = _extractTimeObj2.minutes,
          seconds = _extractTimeObj2.seconds,
          milliseconds = _extractTimeObj2.milliseconds,
          meridiem = _extractTimeObj2.meridiem;
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        props.value.setHours(nextHours);
        props.value.setMinutes(minutes);
        props.value.setSeconds(seconds);
        props.value.setMilliseconds(milliseconds);
      }
      (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 || _props$onMouseEnter.call(props, props.value);
    }
    return /* @__PURE__ */React__default["default"].createElement("td", {
      className: cellClass,
      onClick: handleClick,
      onMouseEnter: handleMouseEnter
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__cell-inner")
    }, props.text));
  };
  DatePickerCell.displayName = "DatePickerCell";

  function ownKeys$_(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$_(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$_(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$_(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(isoWeek);
  var DatePickerTable = function DatePickerTable(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var value = props.value,
      format = props.format,
      mode = props.mode,
      data = props.data,
      time = props.time,
      onCellClick = props.onCellClick,
      onCellMouseEnter = props.onCellMouseEnter,
      onCellMouseLeave = props.onCellMouseLeave,
      firstDayOfWeek = props.firstDayOfWeek;
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var weekdays = t(local.weekdays);
    var weekAbbreviation = t(local.weekAbbreviation);
    var weekArr = [];
    var wi = firstDayOfWeek - 1;
    var len = weekdays.length;
    while (weekArr.length < len) {
      weekArr.push(weekdays[wi]);
      wi = (wi + len + 1) % len;
    }
    if (mode === "week") weekArr.unshift(weekAbbreviation);
    var showThead = mode === "date" || mode === "week";
    var valueYearWeek = React.useMemo(function () {
      if (mode !== "week" || !value) return {};
      if (Array.isArray(value)) {
        var _startObj$year, _startObj$locale, _startObj$locale$week, _endObj$year, _endObj$locale, _endObj$locale$week;
        if (!value.length) return {};
        var _value$map = value.map(function (v) {
            return v && parseToDayjs(v, format);
          }),
          _value$map2 = _slicedToArray$1(_value$map, 2),
          startObj = _value$map2[0],
          endObj = _value$map2[1];
        var startYear = startObj === null || startObj === void 0 || (_startObj$year = startObj.year) === null || _startObj$year === void 0 ? void 0 : _startObj$year.call(startObj);
        var startWeek = startObj === null || startObj === void 0 || (_startObj$locale = startObj.locale) === null || _startObj$locale === void 0 || (_startObj$locale = _startObj$locale.call(startObj, local.dayjsLocale)) === null || _startObj$locale === void 0 || (_startObj$locale$week = _startObj$locale.week) === null || _startObj$locale$week === void 0 ? void 0 : _startObj$locale$week.call(_startObj$locale);
        var endYear = endObj === null || endObj === void 0 || (_endObj$year = endObj.year) === null || _endObj$year === void 0 ? void 0 : _endObj$year.call(endObj);
        var endWeek = endObj === null || endObj === void 0 || (_endObj$locale = endObj.locale) === null || _endObj$locale === void 0 || (_endObj$locale = _endObj$locale.call(endObj, local.dayjsLocale)) === null || _endObj$locale === void 0 || (_endObj$locale$week = _endObj$locale.week) === null || _endObj$locale$week === void 0 ? void 0 : _endObj$locale$week.call(_endObj$locale);
        return {
          startYear: startYear,
          startWeek: startWeek,
          endYear: endYear,
          endWeek: endWeek
        };
      }
      var valueObj = parseToDayjs(value, format).locale(local.dayjsLocale);
      return {
        year: valueObj.year(),
        week: valueObj.week()
      };
    }, [mode, value, format]);
    var weekRowClass = function weekRowClass(value2, targetDayjs) {
      if (mode !== "week" || !value2) return {};
      if (Array.isArray(value2)) {
        if (!value2.length) return {};
        var targetYear = targetDayjs.isoWeekYear();
        var targetWeek = targetDayjs.isoWeek();
        var isActive = targetYear === valueYearWeek.startYear && targetWeek === valueYearWeek.startWeek || targetYear === valueYearWeek.endYear && targetWeek === valueYearWeek.endWeek;
        var isRange = (targetYear > valueYearWeek.startYear || targetYear === valueYearWeek.startYear && targetWeek > valueYearWeek.startWeek) && (targetYear < valueYearWeek.endYear || targetYear === valueYearWeek.endYear && targetWeek < valueYearWeek.endWeek);
        return _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--active"), isActive), "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--range"), isRange);
      }
      return _defineProperty$2({}, "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--active"), valueYearWeek.year === targetDayjs.year() && valueYearWeek.week === targetDayjs.week());
    };
    var multipleWeekRowClass = function multipleWeekRowClass(value2, targetDayjs) {
      if (mode !== "week" || Array.isArray(value2) && !value2.length) return {};
      var isSomeYearWeek = value2.map(function (v) {
        return parseToDayjs(v, format);
      }).some(function (item) {
        return item.isoWeek() === targetDayjs.isoWeek() && item.isoWeekYear() === targetDayjs.isoWeekYear();
      });
      return _defineProperty$2({}, "".concat(classPrefix, "-date-picker__table-").concat(mode, "-row--active"), isSomeYearWeek);
    };
    var activeRowCss = props.multiple ? multipleWeekRowClass : weekRowClass;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__table"),
      onMouseLeave: function onMouseLeave(e) {
        return onCellMouseLeave === null || onCellMouseLeave === void 0 ? void 0 : onCellMouseLeave({
          e: e
        });
      }
    }, /* @__PURE__ */React__default["default"].createElement("table", null, showThead && /* @__PURE__ */React__default["default"].createElement("thead", null, /* @__PURE__ */React__default["default"].createElement("tr", null, weekArr.map(function (value2, i) {
      return /* @__PURE__ */React__default["default"].createElement("th", {
        key: i
      }, value2);
    }))), /* @__PURE__ */React__default["default"].createElement("tbody", null, data.map(function (row, i) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: i,
        className: classNames$1("".concat(classPrefix, "-date-picker__table-").concat(mode, "-row"), _objectSpread$_({}, activeRowCss(value, row[0].dayjsObj)))
      }, row.map(function (col, j) {
        return /* @__PURE__ */React__default["default"].createElement(DatePickerCell, _objectSpread$_(_objectSpread$_({}, col), {}, {
          key: j,
          time: time,
          onClick: onCellClick,
          onMouseEnter: onCellMouseEnter
        }));
      }));
    }))));
  };
  DatePickerTable.displayName = "DatePickerTable";

  var AM = "am";
  var PM = "pm";
  var MERIDIEM_LIST = [AM, PM];
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var DEFAULT_STEPS = [1, 1, 1];
  var DEFAULT_FORMAT = "HH:mm:ss";
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["milliSecond"] = "millisecond";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});
  var TIME_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
  var TWELVE_HOUR_FORMAT = /[h]{1}/;

  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  function validateInputValue(value, format) {
    return dayjs(value, format).format(format) === value;
  }
  function formatInputValue(value, format) {
    return dayjs(value, format).format(format);
  }
  function closestLookup(availableArr, calcVal, step) {
    if (step <= 1) return calcVal;
    return availableArr.sort(function (a, b) {
      return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
    })[0];
  }
  function getPickerCols(format) {
    var renderCol = [];
    var meridiem = EPickerCols.meridiem,
      hour = EPickerCols.hour,
      minute = EPickerCols.minute,
      second = EPickerCols.second,
      milliSecond = EPickerCols.milliSecond;
    var match = format.match(TIME_FORMAT);
    match.forEach(function (m) {
      switch (m) {
        case "H":
        case "HH":
        case "h":
        case "hh":
          renderCol.push(hour);
          break;
        case "a":
        case "A":
          renderCol.push(meridiem);
          break;
        case "m":
        case "mm":
          renderCol.push(minute);
          break;
        case "s":
        case "ss":
          renderCol.push(second);
          break;
        case "SSS":
          renderCol.push(milliSecond);
          break;
      }
    });
    return renderCol;
  }

  var useTimePickerTextConfig = function useTimePickerTextConfig() {
    var _useLocaleReceiver = useLocaleReceiver("timePicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    return {
      nowTime: t(local.now),
      confirm: t(local.confirm),
      am: t(local.anteMeridiem),
      pm: t(local.postMeridiem),
      placeholder: t(local.placeholder),
      rangePlaceholder: [t(local.placeholder), t(local.placeholder)]
    };
  };

  var usePropRef = function usePropRef(prop) {
    var ref = React.useRef(prop);
    React.useEffect(function () {
      ref.current = prop;
    }, [prop]);
    return ref;
  };

  var timeArr = [EPickerCols.hour, EPickerCols.minute, EPickerCols.second, EPickerCols.milliSecond];
  var panelOffset = {
    top: 15,
    bottom: 21
  };
  dayjs.extend(customParseFormat);
  var SinglePanel$1 = function SinglePanel(props) {
    var steps = props.steps,
      format = props.format,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      value = props.value,
      _props$hideDisabledTi = props.hideDisabledTime,
      hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
      disableTime = props.disableTime,
      _props$position = props.position,
      position = _props$position === void 0 ? "start" : _props$position,
      triggerScroll = props.triggerScroll,
      resetTriggerScroll = props.resetTriggerScroll,
      isVisible = props.isVisible;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var TEXT_CONFIG = useTimePickerTextConfig();
    var panelClassName = "".concat(classPrefix, "-time-picker__panel");
    var _useState = React.useState([]),
      _useState2 = _slicedToArray$1(_useState, 2),
      cols = _useState2[0],
      setCols = _useState2[1];
    var colsRef = React.useRef([]);
    var maskRef = React.useRef(null);
    var dayjsValue = React.useMemo(function () {
      var isStepsSet = !!steps.filter(function (v) {
        return Number(v) > 1;
      }).length;
      if (value) return dayjs(value, format);
      if (isStepsSet) return dayjs().hour(0).minute(0).second(0);
      return dayjs();
    }, [value, format, steps]);
    React.useEffect(function () {
      colsRef.current = colsRef.current.slice(0, cols.length);
    }, [cols]);
    React.useEffect(function () {
      var renderCol = getPickerCols(format);
      setCols(renderCol);
    }, [format]);
    var getItemHeight = React.useCallback(function () {
      var _maskRef$current;
      var maskDom = maskRef === null || maskRef === void 0 || (_maskRef$current = maskRef.current) === null || _maskRef$current === void 0 ? void 0 : _maskRef$current.querySelector("div");
      if (!maskDom) {
        return {
          offsetHeight: 0,
          margin: 0
        };
      }
      return {
        offsetHeight: maskDom.offsetHeight,
        margin: parseInt(getComputedStyle(maskDom).marginTop, 10)
      };
    }, []);
    var timeItemCanUsed = React.useCallback(function (col, el) {
      var colIdx = timeArr.indexOf(col);
      if (colIdx !== -1) {
        var _ref;
        var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second(), dayjsValue.millisecond()];
        params[colIdx] = Number(el);
        return !((_ref = disableTime && (disableTime === null || disableTime === void 0 ? void 0 : disableTime.apply(void 0, params.concat([{
          partial: position
        }])))) !== null && _ref !== void 0 && (_ref = _ref[col]) !== null && _ref !== void 0 && _ref.includes(Number(el)));
      }
      return true;
    }, [position, disableTime, dayjsValue]);
    var getColList = React.useCallback(function (col) {
      var count = 0;
      if (timeArr.includes(col)) {
        var colIdx = timeArr.indexOf(col);
        var colStep = steps[colIdx] || 1;
        if (col === EPickerCols.hour) count = TWELVE_HOUR_FORMAT.test(format) ? 11 : 23;else if (col === EPickerCols.milliSecond) count = 999;else count = 59;
        var colList = range$1(0, count + 1, Number(colStep)).map(function (v) {
          return padStart(String(v), 2, "0");
        }) || [];
        return hideDisabledTime && !!disableTime ? colList.filter(function (t) {
          var _disableTime;
          var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second(), dayjsValue.millisecond()];
          params[colIdx] = Number(t);
          return !(disableTime !== null && disableTime !== void 0 && (_disableTime = disableTime.apply(void 0, params.concat([{
            partial: position
          }]))) !== null && _disableTime !== void 0 && (_disableTime = _disableTime[col]) !== null && _disableTime !== void 0 && _disableTime.includes(Number(t)));
        }) : colList;
      }
      return MERIDIEM_LIST;
    }, [steps, format, hideDisabledTime, dayjsValue, disableTime, position]);
    var getScrollDistance = React.useCallback(function (col, time) {
      if (col === EPickerCols.hour && /[h]{1}/.test(format)) time = time % 12;
      var itemIdx = getColList(col).indexOf(padStart(String(time), 2, "0"));
      var _getItemHeight = getItemHeight(),
        offsetHeight = _getItemHeight.offsetHeight,
        margin = _getItemHeight.margin;
      var timeItemTotalHeight = offsetHeight + margin;
      var distance = Math.abs(Math.max(0, itemIdx) * timeItemTotalHeight);
      return distance;
    }, [getItemHeight, getColList, format]);
    var isVisibleRef = usePropRef(isVisible);
    var handleScroll = useDebounce(function (col, idx, e) {
      var _colsRef$current$idx;
      if (!isVisibleRef.current) {
        return;
      }
      var val;
      var formattedVal;
      var scrollTop = ((_colsRef$current$idx = colsRef.current[idx]) === null || _colsRef$current$idx === void 0 ? void 0 : _colsRef$current$idx.scrollTop) + panelOffset.top;
      var _getItemHeight2 = getItemHeight(),
        offsetHeight = _getItemHeight2.offsetHeight,
        margin = _getItemHeight2.margin;
      var timeItemTotalHeight = offsetHeight + margin;
      var colStep = Math.abs(Math.round(scrollTop / timeItemTotalHeight + 0.5));
      var meridiem = MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase();
      if (Number.isNaN(colStep)) colStep = 1;
      if (timeArr.includes(col)) {
        var max = 59;
        if (col === EPickerCols.hour) max = /[h]{1}/.test(format) ? 11 : 23;else if (col === EPickerCols.milliSecond) max = 999;
        var colIdx = timeArr.indexOf(col);
        var availableArr = range$1(0, max + 1, Number(steps[colIdx]) || 1);
        val = closestLookup(availableArr, Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]), Number(steps[colIdx]) || 1);
        if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];
        if (col === EPickerCols.hour && cols.includes(EPickerCols.meridiem) && dayjsValue.hour() >= 12) {
          val = Number(val) + 12;
        }
      } else val = meridiem;
      var distance = getScrollDistance(col, val);
      if (!dayjs(dayjsValue).isValid() || value && !dayjs(value, format, true).isValid()) {
        return;
      }
      if (timeArr.includes(col)) {
        var _dayjsValue$col;
        if (timeItemCanUsed(col, val)) formattedVal = (_dayjsValue$col = dayjsValue[col]) === null || _dayjsValue$col === void 0 ? void 0 : _dayjsValue$col.call(dayjsValue, val).format(format);else formattedVal = dayjsValue.format(format);
      } else {
        var currentHour = dayjsValue.hour();
        if (meridiem === AM && currentHour >= 12) {
          formattedVal = dayjsValue.hour(currentHour - 12).format(format);
        } else if (meridiem === PM && currentHour < 12) {
          formattedVal = dayjsValue.hour(currentHour + 12).format(format);
        } else {
          formattedVal = dayjsValue.format(format);
        }
      }
      if (formattedVal !== value) {
        onChange(formattedVal, e);
      }
      if (distance !== scrollTop) {
        var _scrollCtrl$scrollTo;
        var scrollCtrl = colsRef.current[cols.indexOf(col)];
        if (!scrollCtrl || scrollCtrl.scrollTop === distance) return;
        (_scrollCtrl$scrollTo = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo === void 0 || _scrollCtrl$scrollTo.call(scrollCtrl, {
          top: distance,
          behavior: "smooth"
        });
      }
    }, 50);
    var scrollToTime = React.useCallback(function (col, time, idx) {
      var _scrollCtrl$scrollTo2;
      var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
      var distance = getScrollDistance(col, time);
      var scrollCtrl = colsRef.current[idx];
      if (!scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;
      (_scrollCtrl$scrollTo2 = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo2 === void 0 || _scrollCtrl$scrollTo2.call(scrollCtrl, {
        top: distance,
        behavior: behavior
      });
    }, [getScrollDistance]);
    var updateTimeScrollPos = React.useCallback(function () {
      var isAutoScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var behavior = value && !isAutoScroll ? "smooth" : "auto";
      var isStepsSet = !!steps.filter(function (v) {
        return Number(v) > 1;
      }).length;
      cols.forEach(function (col, idx) {
        if (!isStepsSet || isStepsSet && value) {
          var _dayjsValue$col2;
          scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$col2 = dayjsValue[col]) === null || _dayjsValue$col2 === void 0 ? void 0 : _dayjsValue$col2.call(dayjsValue) : dayjsValue.format("a"), idx, behavior);
        } else {
          var _getColList;
          scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
        }
      });
      resetTriggerScroll();
    }, [cols, scrollToTime, dayjsValue, value, steps, getColList, resetTriggerScroll]);
    var handleTimeItemClick = function handleTimeItemClick(col, el, idx, e) {
      if (!timeItemCanUsed(col, el)) return;
      if (timeArr.includes(col)) {
        if (col === EPickerCols.hour && dayjsValue.format("a") === PM && cols.includes(EPickerCols.meridiem)) {
          el = Number(el) + 12;
        }
        scrollToTime(col, el, idx, "smooth");
        setTimeout(function () {
          var _dayjsValue$col3;
          onChange((_dayjsValue$col3 = dayjsValue[col]) === null || _dayjsValue$col3 === void 0 ? void 0 : _dayjsValue$col3.call(dayjsValue, el).format(format), e);
        }, 100);
      } else {
        var currentHour = dayjsValue.hour();
        if (el === AM && currentHour >= 12) {
          onChange(dayjsValue.hour(currentHour - 12).format(format), e);
        } else if (el === PM && currentHour < 12) {
          onChange(dayjsValue.hour(currentHour + 12).format(format), e);
        }
      }
    };
    React.useEffect(function () {
      if (value) updateTimeScrollPos(true);
    }, [value, updateTimeScrollPos]);
    React.useEffect(function () {
      if (triggerScroll) updateTimeScrollPos(true);
    }, [triggerScroll, updateTimeScrollPos]);
    var isCurrent = React.useCallback(function (col, colItem) {
      var _dayjsValue$col4;
      var colVal;
      if (col === EPickerCols.meridiem) {
        var currentMeridiem = dayjsValue.format("a");
        return currentMeridiem === colItem;
      }
      colVal = (_dayjsValue$col4 = dayjsValue[col]) === null || _dayjsValue$col4 === void 0 ? void 0 : _dayjsValue$col4.call(dayjsValue);
      if (col === EPickerCols.hour && /[h]{1}/.test(format)) {
        colVal %= 12;
      }
      return colVal === Number(colItem);
    }, [format, dayjsValue]);
    function renderScrollCtrl() {
      return cols.map(function (col, idx) {
        return /* @__PURE__ */React__default["default"].createElement("ul", {
          key: "".concat(col, "_").concat(idx),
          ref: function ref(el) {
            colsRef.current[idx] = el;
          },
          className: "".concat(panelClassName, "-body-scroll"),
          onScroll: function onScroll(e) {
            return handleScroll(col, idx, e);
          },
          style: {
            "--timePickerPanelOffsetTop": panelOffset.top,
            "--timePickerPanelOffsetBottom": panelOffset.bottom
          }
        }, getColList(col).map(function (el) {
          return /* @__PURE__ */React__default["default"].createElement("li", {
            key: el,
            className: classNames$1("".concat(panelClassName, "-body-scroll-item"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), !timeItemCanUsed(col, el)), "".concat(classPrefix, "-is-current"), isCurrent(col, el))),
            onClick: function onClick(e) {
              return handleTimeItemClick(col, el, idx, e);
            }
          }, timeArr.includes(col) ? TWELVE_HOUR_FORMAT.test(format) && col === EPickerCols.hour && el === "00" ? "12" : el : TEXT_CONFIG[el]);
        }));
      });
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-body")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-body-active-mask"),
      ref: maskRef
    }, cols.map(function (col, idx) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: "".concat(col, "_").concat(idx)
      });
    })), renderScrollCtrl());
  };

  function ownKeys$Z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$Z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$Z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$Z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TimePickerPanel$1 = function TimePickerPanel(props) {
    var _props$format = props.format,
      format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
      handleConfirmClick = props.handleConfirmClick,
      isFooterDisplay = props.isFooterDisplay,
      onChange = props.onChange,
      value = props.value,
      _props$isShowPanel = props.isShowPanel,
      isShowPanel = _props$isShowPanel === void 0 ? true : _props$isShowPanel,
      _props$presets = props.presets,
      presets = _props$presets === void 0 ? null : _props$presets;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      triggerScroll = _useState2[0],
      toggleTriggerScroll = _useState2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var TEXT_CONFIG = useTimePickerTextConfig();
    var panelClassName = "".concat(classPrefix, "-time-picker__panel");
    var showNowTimeBtn = !!steps.filter(function (v) {
      return Number(v) > 1;
    }).length;
    var defaultValue = React.useMemo(function () {
      var formattedValue = dayjs(value, format);
      if (value && formattedValue.isValid()) {
        return formattedValue.format(format);
      }
      return dayjs().hour(0).minute(0).second(0).format(format);
    }, [value, format]);
    React.useEffect(function () {
      if (isShowPanel) toggleTriggerScroll(true);
    }, [isShowPanel]);
    var resetTriggerScroll = React.useCallback(function () {
      toggleTriggerScroll(false);
    }, [toggleTriggerScroll]);
    var handlePresetClick = function handlePresetClick(presetValue) {
      var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
      if (typeof props.activeIndex === "number") {
        if (Array.isArray(presetVal)) {
          var _props$onChange;
          (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, presetVal[props.activeIndex]);
        } else {
          log.error("TimePicker", "preset: ".concat(presets, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        }
      } else {
        var _props$onChange2;
        (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 || _props$onChange2.call(props, presetVal);
      }
    };
    var renderFooter = function renderFooter() {
      if (presets) {
        return Object.keys(presets).map(function (preset) {
          return /* @__PURE__ */React__default["default"].createElement(Button, {
            key: preset,
            theme: "primary",
            size: "small",
            variant: "text",
            onClick: function onClick() {
              handlePresetClick(presets[preset]);
            }
          }, preset);
        });
      }
      return !showNowTimeBtn ? /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        size: "small",
        onClick: function onClick() {
          onChange === null || onChange === void 0 || onChange(dayjs().format(format));
        }
      }, TEXT_CONFIG.nowTime) : null;
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: panelClassName
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-body")
    }, /* @__PURE__ */React__default["default"].createElement(SinglePanel$1, _objectSpread$Z(_objectSpread$Z({}, props), {}, {
      onChange: onChange,
      format: format,
      steps: steps,
      value: dayjs(value, format).isValid() ? value : defaultValue,
      triggerScroll: triggerScroll,
      isVisible: isShowPanel,
      resetTriggerScroll: resetTriggerScroll
    }))), isFooterDisplay ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-footer")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      size: "small",
      theme: "primary",
      variant: "base",
      disabled: !props.value,
      onClick: function onClick() {
        handleConfirmClick === null || handleConfirmClick === void 0 || handleConfirmClick(defaultValue);
      }
    }, TEXT_CONFIG.confirm), renderFooter()) : null);
  };

  var timePickerDefaultProps = {
    allowInput: false,
    borderless: false,
    clearable: false,
    format: "HH:mm:ss",
    hideDisabledTime: true,
    size: "medium",
    steps: [1, 1, 1]
  };
  var timeRangePickerDefaultProps = {
    allowInput: false,
    autoSwap: true,
    borderless: false,
    clearable: false,
    format: "HH:mm:ss",
    hideDisabledTime: true,
    size: "medium",
    steps: [1, 1, 1]
  };

  function ownKeys$Y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$Y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$Y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$Y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function handlePositionTrans(income) {
    return income === "first" ? "start" : "end";
  }
  var TimeRangePicker$1 = function TimeRangePicker(originalProps) {
    var props = useDefaultProps(originalProps, timeRangePickerDefaultProps);
    var TEXT_CONFIG = useTimePickerTextConfig();
    var allowInput = props.allowInput,
      borderless = props.borderless,
      clearable = props.clearable,
      disabled = props.disabled,
      format = props.format,
      hideDisabledTime = props.hideDisabledTime,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? TEXT_CONFIG.rangePlaceholder : _props$placeholder,
      size = props.size,
      steps = props.steps,
      disableTime = props.disableTime,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      _props$onInput = props.onInput,
      onInput = _props$onInput === void 0 ? noop : _props$onInput,
      style = props.style,
      className = props.className,
      presets = props.presets,
      label = props.label;
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        TimeIcon: TdTimeIcon
      }),
      TimeIcon = _useGlobalIcon.TimeIcon;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isPanelShowed = _useState2[0],
      setPanelShow = _useState2[1];
    var _useState3 = React.useState(void 0),
      _useState4 = _slicedToArray$1(_useState3, 2),
      currentPanelIdx = _useState4[0],
      setCurrentPanelIdx = _useState4[1];
    var _useState5 = React.useState(["", ""]),
      _useState6 = _slicedToArray$1(_useState5, 2),
      currentValue = _useState6[0],
      setCurrentValue = _useState6[1];
    var name = "".concat(classPrefix, "-time-picker");
    var inputClasses = classNames$1("".concat(name, "__group"), _defineProperty$2({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));
    var handleShowPopup = function handleShowPopup(visible, _ref) {
      var trigger = _ref.trigger;
      if (trigger === "trigger-element-click") {
        setPanelShow(true);
        return;
      }
      setPanelShow(visible);
    };
    function handlePickerValue(pickValue, currentValue2) {
      var _currentValue2$, _currentValue2$2;
      if (Array.isArray(pickValue)) return pickValue;
      return currentPanelIdx === 0 ? [pickValue, (_currentValue2$ = currentValue2[1]) !== null && _currentValue2$ !== void 0 ? _currentValue2$ : pickValue] : [(_currentValue2$2 = currentValue2[0]) !== null && _currentValue2$2 !== void 0 ? _currentValue2$2 : pickValue, pickValue];
    }
    var handleOnPick = function handleOnPick(pickValue, e) {
      var _props$onPick;
      var context;
      if (isArray$1(pickValue)) {
        context = {
          e: e
        };
      } else if (currentPanelIdx.value === 0) {
        context = {
          e: e,
          position: "start"
        };
      } else {
        context = {
          e: e,
          position: "end"
        };
      }
      (_props$onPick = props.onPick) === null || _props$onPick === void 0 || _props$onPick.call(props, pickValue, context);
    };
    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      onChange(void 0);
      setCurrentValue(TIME_PICKER_EMPTY);
    };
    var handleClick = function handleClick(_ref2) {
      var position = _ref2.position;
      setCurrentPanelIdx(position === "first" ? 0 : 1);
    };
    var handleTimeChange = function handleTimeChange(newValue, context) {
      var nextCurrentValue = handlePickerValue(newValue, currentValue);
      setCurrentValue(nextCurrentValue);
      handleOnPick(nextCurrentValue, context);
    };
    var autoSwapTime = function autoSwapTime(valueBeforeConfirm) {
      var _valueBeforeConfirm = _slicedToArray$1(valueBeforeConfirm, 2),
        startTime = _valueBeforeConfirm[0],
        endTime = _valueBeforeConfirm[1];
      var startDayjs = dayjs(startTime, props.format);
      var endDayjs = dayjs(endTime, props.format);
      if (startDayjs.isAfter(endDayjs, "second")) return [endTime, startTime];
      return [startTime, endTime];
    };
    var handleInputBlur = function handleInputBlur(value2, _ref3) {
      var e = _ref3.e;
      if (allowInput) {
        var isValidTime = validateInputValue(currentValue[currentPanelIdx], format);
        if (isValidTime) {
          var _currentValue$, _currentValue$2;
          var formattedVal = formatInputValue(currentValue[currentPanelIdx], format);
          currentPanelIdx === 0 ? setCurrentValue([formattedVal, (_currentValue$ = currentValue[1]) !== null && _currentValue$ !== void 0 ? _currentValue$ : formattedVal]) : setCurrentValue([(_currentValue$2 = currentValue[0]) !== null && _currentValue$2 !== void 0 ? _currentValue$2 : formattedVal, formattedVal]);
        }
      }
      onBlur({
        value: value2,
        e: e
      });
    };
    var handleInputChange = function handleInputChange(inputVal, _ref4) {
      var e = _ref4.e,
        position = _ref4.position;
      setCurrentValue(inputVal);
      onInput({
        value: value,
        e: e,
        position: handlePositionTrans(position)
      });
    };
    var handleClickConfirm = function handleClickConfirm() {
      var isValidTime = !currentValue.find(function (v) {
        return !validateInputValue(v, format);
      });
      if (isValidTime) onChange(props.autoSwap ? autoSwapTime(currentValue) : currentValue);
      setPanelShow(false);
    };
    var handleFocus = function handleFocus(value2, _ref5) {
      var e = _ref5.e,
        position = _ref5.position;
      onFocus({
        value: value2,
        e: e,
        position: handlePositionTrans(position)
      });
    };
    React.useEffect(function () {
      setCurrentValue(isPanelShowed ? value !== null && value !== void 0 ? value : TIME_PICKER_EMPTY : TIME_PICKER_EMPTY);
      if (!isPanelShowed) setCurrentPanelIdx(void 0);
    }, [isPanelShowed]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(RangeInputPopup, {
      style: style,
      disabled: disabled,
      popupVisible: isPanelShowed,
      onPopupVisibleChange: handleShowPopup,
      popupProps: _objectSpread$Y({
        overlayInnerStyle: {
          width: "auto",
          padding: 0
        }
      }, props.popupProps),
      onInputChange: handleInputChange,
      inputValue: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : TIME_PICKER_EMPTY,
      rangeInputProps: _objectSpread$Y({
        size: size,
        borderless: borderless,
        clearable: clearable,
        className: inputClasses,
        value: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
        placeholder: placeholder,
        suffixIcon: /* @__PURE__ */React__default["default"].createElement(TimeIcon, null),
        onClear: handleClear,
        onClick: handleClick,
        onFocus: handleFocus,
        onBlur: handleInputBlur,
        readonly: !allowInput,
        activeIndex: currentPanelIdx,
        label: label
      }, props.rangeInputProps),
      tips: props.tips,
      status: props.status,
      panel: /* @__PURE__ */React__default["default"].createElement(TimePickerPanel$1, {
        steps: steps,
        format: format,
        disableTime: disableTime,
        isShowPanel: isPanelShowed,
        hideDisabledTime: hideDisabledTime,
        isFooterDisplay: true,
        value: currentValue[currentPanelIdx || 0],
        onChange: handleTimeChange,
        handleConfirmClick: handleClickConfirm,
        position: currentPanelIdx === 0 ? "start" : "end",
        activeIndex: currentPanelIdx,
        presets: presets
      })
    }));
  };
  TimeRangePicker$1.displayName = "TimeRangePicker";

  function ownKeys$X(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$X(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$X(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$X(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(customParseFormat);
  var TimePicker$1 = forwardRefWithStatics(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, timePickerDefaultProps);
    var TEXT_CONFIG = useTimePickerTextConfig();
    var allowInput = props.allowInput,
      borderless = props.borderless,
      className = props.className,
      clearable = props.clearable,
      disabled = props.disabled,
      style = props.style,
      _props$format = props.format,
      format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
      _props$hideDisabledTi = props.hideDisabledTime,
      hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
      _props$steps = props.steps,
      steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? TEXT_CONFIG.placeholder : _props$placeholder,
      disableTime = props.disableTime,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      _props$onOpen = props.onOpen,
      onOpen = _props$onOpen === void 0 ? noop : _props$onOpen,
      _props$onInput = props.onInput,
      onInput = _props$onInput === void 0 ? noop : _props$onInput,
      _props$onPick = props.onPick,
      onPick = _props$onPick === void 0 ? noop : _props$onPick,
      _props$onClear = props.onClear,
      onClear = _props$onClear === void 0 ? noop : _props$onClear;
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isPanelShowed = _useState2[0],
      setPanelShow = _useState2[1];
    var _useState3 = React.useState(""),
      _useState4 = _slicedToArray$1(_useState3, 2),
      currentValue = _useState4[0],
      setCurrentValue = _useState4[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        TimeIcon: TdTimeIcon
      }),
      TimeIcon = _useGlobalIcon.TimeIcon;
    var name = "".concat(classPrefix, "-time-picker");
    var inputClasses = classNames$1("".concat(name, "__group"), _defineProperty$2({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));
    var effectVisibleCurrentValue = function effectVisibleCurrentValue(visible) {
      setPanelShow(visible);
      setCurrentValue(visible ? value !== null && value !== void 0 ? value : "" : "");
    };
    var handleShowPopup = function handleShowPopup(visible, context) {
      effectVisibleCurrentValue(visible);
      visible ? onOpen(context) : onClose(context);
    };
    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      setCurrentValue("");
      onChange(null);
      onClear(context);
    };
    var handleInputChange = function handleInputChange(value2, context) {
      setCurrentValue(value2);
      if (allowInput) {
        onInput({
          value: value2,
          e: context.e
        });
      }
    };
    var handleInputBlur = function handleInputBlur(value2, ctx) {
      if (allowInput) {
        var isValidTime = validateInputValue(currentValue, format);
        if (isValidTime) {
          onChange(formatInputValue(currentValue, format));
        }
      }
      onBlur(_objectSpread$X({
        value: String(value2)
      }, ctx));
    };
    var handleClickConfirm = function handleClickConfirm() {
      var isValidTime = validateInputValue(currentValue, format);
      if (isValidTime) onChange(currentValue);
      effectVisibleCurrentValue(false);
    };
    var handlePanelChange = function handlePanelChange(v, ctx) {
      setCurrentValue(v);
      onPick === null || onPick === void 0 || onPick(v, ctx);
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, className),
      ref: ref,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(SelectInput, {
      onFocus: onFocus,
      onClear: handleClear,
      disabled: disabled,
      clearable: clearable,
      allowInput: allowInput,
      className: inputClasses,
      borderless: borderless,
      suffixIcon: /* @__PURE__ */React__default["default"].createElement(TimeIcon, null),
      popupVisible: isPanelShowed,
      onInputChange: handleInputChange,
      onBlur: handleInputBlur,
      onPopupVisibleChange: handleShowPopup,
      placeholder: !value ? placeholder : void 0,
      value: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
      inputValue: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
      inputProps: _objectSpread$X(_objectSpread$X({}, props.inputProps), {}, {
        size: props.size
      }),
      popupProps: _objectSpread$X({
        overlayInnerStyle: {
          width: "auto",
          padding: 0
        }
      }, props.popupProps),
      tips: props.tips,
      status: props.status,
      label: props.label,
      panel: /* @__PURE__ */React__default["default"].createElement(TimePickerPanel$1, {
        steps: steps,
        format: format,
        value: currentValue,
        isFooterDisplay: true,
        isShowPanel: isPanelShowed,
        disableTime: disableTime,
        onChange: handlePanelChange,
        onPick: props.onPick,
        hideDisabledTime: hideDisabledTime,
        handleConfirmClick: handleClickConfirm,
        presets: props.presets
      })
    }));
  }, {
    TimeRangePicker: TimeRangePicker$1,
    TimePickerPanel: TimePickerPanel$1
  });
  TimePicker$1.displayName = "TimePicker";

  var TimePicker = TimePicker$1;
  var TimeRangePicker = TimeRangePicker$1;
  var TimePickerPanel = TimePickerPanel$1;

  function ownKeys$W(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$W(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$W(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$W(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function PanelContent(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var panelName = "".concat(classPrefix, "-date-picker__panel");
    var value = props.value,
      year = props.year,
      month = props.month,
      mode = props.mode,
      format = props.format,
      enableTimePicker = props.enableTimePicker,
      timePickerProps = props.timePickerProps,
      firstDayOfWeek = props.firstDayOfWeek,
      _props$partial = props.partial,
      partial = _props$partial === void 0 ? "start" : _props$partial,
      time = props.time,
      tableData = props.tableData,
      internalYear = props.internalYear,
      onJumperClick = props.onJumperClick,
      _onCellClick = props.onCellClick,
      _onCellMouseEnter = props.onCellMouseEnter,
      onCellMouseLeave = props.onCellMouseLeave,
      onTimePickerChange = props.onTimePickerChange;
    var onMonthChange = useEventCallback(props.onMonthChange);
    var onYearChange = useEventCallback(props.onYearChange);
    var _getDefaultFormat = getDefaultFormat({
        mode: mode,
        format: format,
        enableTimePicker: enableTimePicker
      }),
      timeFormat = _getDefaultFormat.timeFormat;
    var showTimePicker = enableTimePicker && mode === "date";
    var defaultTime = "00:00:00";
    var onMonthChangeInner = React.useCallback(function (val) {
      onMonthChange === null || onMonthChange === void 0 || onMonthChange(val, {
        partial: partial
      });
    }, [partial, onMonthChange]);
    var onYearChangeInner = React.useCallback(function (val) {
      onYearChange === null || onYearChange === void 0 || onYearChange(val, {
        partial: partial
      });
    }, [partial, onYearChange]);
    var onJumperClickInner = React.useCallback(function (_ref) {
      var trigger = _ref.trigger;
      onJumperClick === null || onJumperClick === void 0 || onJumperClick({
        trigger: trigger,
        partial: partial
      });
    }, [partial, onJumperClick]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-").concat(mode)
    }, /* @__PURE__ */React__default["default"].createElement(DateHeader, {
      mode: mode,
      year: year,
      month: month,
      internalYear: internalYear,
      partial: partial,
      onMonthChange: onMonthChangeInner,
      onYearChange: onYearChangeInner,
      onJumperClick: onJumperClickInner
    }), /* @__PURE__ */React__default["default"].createElement(DatePickerTable, {
      mode: mode,
      data: tableData,
      value: value,
      time: time,
      format: format,
      firstDayOfWeek: firstDayOfWeek,
      multiple: props.multiple,
      onCellClick: function onCellClick(date, _ref2) {
        var e = _ref2.e;
        return _onCellClick === null || _onCellClick === void 0 ? void 0 : _onCellClick(date, {
          e: e,
          partial: partial
        });
      },
      onCellMouseEnter: function onCellMouseEnter(date) {
        return _onCellMouseEnter === null || _onCellMouseEnter === void 0 ? void 0 : _onCellMouseEnter(date, {
          partial: partial
        });
      },
      onCellMouseLeave: onCellMouseLeave
    })), showTimePicker && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-time")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-time-viewer")
    }, time || defaultTime), /* @__PURE__ */React__default["default"].createElement(TimePickerPanel, _objectSpread$W({
      key: partial,
      position: partial,
      format: timeFormat,
      value: time || defaultTime,
      onChange: onTimePickerChange,
      isShowPanel: props.popupVisible
    }, timePickerProps))));
  }

  var DatePickerFooter = function DatePickerFooter(props) {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var confirmText = t(local.confirm);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var enableTimePicker = props.enableTimePicker,
      onConfirmClick = props.onConfirmClick,
      _props$presetsPlaceme = props.presetsPlacement,
      presetsPlacement = _props$presetsPlaceme === void 0 ? "bottom" : _props$presetsPlaceme,
      presets = props.presets,
      onPresetClick = props.onPresetClick,
      selectedValue = props.selectedValue,
      needConfirm = props.needConfirm;
    var footerClass = classNames$1("".concat(classPrefix, "-date-picker__footer"), "".concat(classPrefix, "-date-picker__footer--").concat(presetsPlacement));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: footerClass
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__presets")
    }, presets && Object.keys(presets).map(function (key) {
      return /* @__PURE__ */React__default["default"].createElement(Button, {
        key: key,
        size: "small",
        variant: "text",
        onClick: function onClick(e) {
          return onPresetClick(presets[key], {
            e: e,
            preset: _defineProperty$2({}, key, presets[key])
          });
        }
      }, key);
    })), enableTimePicker && needConfirm && /* @__PURE__ */React__default["default"].createElement(Button, {
      disabled: !selectedValue,
      size: "small",
      theme: "primary",
      onClick: function onClick(e) {
        return onConfirmClick({
          e: e
        });
      }
    }, confirmText));
  };
  DatePickerFooter.displayName = "DatePickerFooter";

  function ExtraContent(props) {
    var presets = props.presets,
      enableTimePicker = props.enableTimePicker,
      presetsPlacement = props.presetsPlacement,
      onPresetClick = props.onPresetClick,
      onConfirmClick = props.onConfirmClick,
      selectedValue = props.selectedValue,
      needConfirm = props.needConfirm;
    var showPanelFooter = enableTimePicker && needConfirm || presets;
    return showPanelFooter ? /* @__PURE__ */React__default["default"].createElement(DatePickerFooter, {
      presets: presets,
      onPresetClick: onPresetClick,
      enableTimePicker: enableTimePicker,
      onConfirmClick: onConfirmClick,
      presetsPlacement: presetsPlacement,
      selectedValue: selectedValue,
      needConfirm: needConfirm
    }) : null;
  }

  function useTableData(props) {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var monthLocal = t(local.months);
    var quarterLocal = t(local.quarters);
    var start = props.start,
      end = props.end,
      hoverStart = props.hoverStart,
      hoverEnd = props.hoverEnd,
      year = props.year,
      month = props.month,
      mode = props.mode,
      firstDayOfWeek = props.firstDayOfWeek,
      disableDate = props.disableDate,
      minDate = props.minDate,
      maxDate = props.maxDate,
      isRange = props.isRange,
      value = props.value,
      multiple = props.multiple;
    var data = [];
    var options = {
      minDate: minDate,
      maxDate: maxDate,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      monthLocal: monthLocal,
      quarterLocal: quarterLocal,
      showWeekOfYear: mode === "week",
      dayjsLocale: local.dayjsLocale,
      cancelRangeSelectLimit: props.cancelRangeSelectLimit
    };
    if (mode === "date") {
      data = getWeeks({
        year: year,
        month: month
      }, options);
    } else if (mode === "week") {
      data = getWeeks({
        year: year,
        month: month
      }, options);
    } else if (mode === "quarter") {
      data = getQuarters(year, options);
    } else if (mode === "month") {
      data = getMonths(year, options);
    } else if (mode === "year") {
      data = getYears(year, options);
    }
    return flagActive(data, {
      start: start,
      end: end,
      hoverStart: hoverStart,
      hoverEnd: hoverEnd,
      type: mode,
      isRange: isRange,
      value: value,
      multiple: multiple
    });
  }

  function useDisableDate(props) {
    var _disableDate = props.disableDate,
      format = props.format,
      mode = props.mode,
      start = props.start,
      end = props.end;
    return {
      disableDate: function disableDate(value) {
        return !isEnabledDate({
          disableDate: _disableDate,
          format: format,
          mode: mode,
          value: value
        });
      },
      minDate: isObject(_disableDate) && "before" in _disableDate ? new Date(dayjs(_disableDate.before).startOf("day").format()) : start,
      maxDate: isObject(_disableDate) && "after" in _disableDate ? new Date(dayjs(_disableDate.after).endOf("day").format()) : end
    };
  }

  function dateCorrection(partialIndex, preYear, preMonth, onlyYearSelect) {
    var nextYear = preYear;
    var nextMonth = preMonth;
    if (partialIndex === 0) {
      if (nextYear[1] <= nextYear[0]) {
        if (onlyYearSelect) nextYear[1] = nextYear[0] + 1;else {
          nextYear[1] = nextYear[0];
          if (nextMonth[1] <= nextMonth[0]) {
            nextMonth[1] = nextMonth[0] + 1;
            if (nextMonth[1] === 12) {
              nextMonth[1] = 0;
              nextYear = [nextYear[0], nextYear[1] + 1];
            }
          }
        }
      }
    }
    if (partialIndex === 1) {
      if (nextYear[0] >= nextYear[1]) {
        if (onlyYearSelect) nextYear[0] = nextYear[1] - 1;else {
          nextYear[0] = nextYear[1];
          if (nextMonth[0] >= nextMonth[1]) {
            nextMonth[0] = nextMonth[1] - 1;
            if (nextMonth[0] === -1) {
              nextMonth[0] = 11;
              nextYear = [nextYear[0] - 1, nextYear[1]];
            }
          }
        }
      }
    }
    return {
      nextYear: nextYear,
      nextMonth: nextMonth
    };
  }
  function parseToDateTime(value, format, times) {
    if (isNil(value)) {
      return null;
    }
    var dayjs = parseToDayjs(value, format);
    if (times) {
      var _times = _slicedToArray$1(times, 4),
        _times$ = _times[0],
        hour = _times$ === void 0 ? 0 : _times$,
        _times$2 = _times[1],
        minute = _times$2 === void 0 ? 0 : _times$2,
        _times$3 = _times[2],
        second = _times$3 === void 0 ? 0 : _times$3,
        _times$4 = _times[3],
        millisecond = _times$4 === void 0 ? 0 : _times$4;
      dayjs = dayjs.hour(hour).minute(minute).second(second).millisecond(millisecond);
    }
    return dayjs.toDate();
  }

  function ownKeys$V(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$V(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$V(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$V(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var RangePanel = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;
    var panelName = "".concat(classPrefix, "-date-range-picker__panel");
    var props = useDefaultProps(originalProps, {
      mode: "date",
      panelPreselection: true,
      enableTimePicker: false,
      presetsPlacement: "bottom",
      needConfirm: true
    });
    var _props$value = props.value,
      value = _props$value === void 0 ? [] : _props$value,
      _props$hoverValue = props.hoverValue,
      hoverValue = _props$hoverValue === void 0 ? [] : _props$hoverValue,
      mode = props.mode,
      presets = props.presets,
      enableTimePicker = props.enableTimePicker,
      presetsPlacement = props.presetsPlacement,
      disableDateFromProps = props.disableDate,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
      isFirstValueSelected = props.isFirstValueSelected,
      needConfirm = props.needConfirm,
      style = props.style,
      className = props.className,
      activeIndex = props.activeIndex,
      year = props.year,
      month = props.month,
      _props$time = props.time,
      time = _props$time === void 0 ? [] : _props$time,
      panelPreselection = props.panelPreselection,
      onPresetClick = props.onPresetClick,
      cancelRangeSelectLimit = props.cancelRangeSelectLimit,
      _onClick = props.onClick,
      onConfirmClick = props.onConfirmClick,
      disableTime = props.disableTime;
    var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      }),
      format = _getDefaultFormat.format;
    var disableDateOptions = useDisableDate({
      disableDate: disableDateFromProps,
      mode: mode,
      format: format,
      start: isFirstValueSelected && activeIndex === 1 ? new Date(parseToDayjs(value[0], format, "start").toDate().setHours(0, 0, 0)) : void 0,
      end: isFirstValueSelected && activeIndex === 0 ? new Date(parseToDayjs(value[1], format).toDate().setHours(23, 59, 59)) : void 0
    });
    var disableTimeOptions = function disableTimeOptions(h, m, s, ms) {
      if (!isFunction$1(disableTime)) {
        return {};
      }
      var _ref = value || [],
        _ref2 = _slicedToArray$1(_ref, 2),
        startTime = _ref2[0],
        endTime = _ref2[1];
      return disableTime([parseToDateTime(startTime, format), parseToDateTime(endTime, format, [h, m, s, ms])], {
        partial: activeIndex === 0 ? "start" : "end"
      });
    };
    var _year = _slicedToArray$1(year, 2),
      startYear = _year[0],
      endYear = _year[1];
    var _month = _slicedToArray$1(month, 2),
      startMonth = _month[0],
      endMonth = _month[1];
    var hidePreselection = !panelPreselection && value.length === 2;
    var startTableData = useTableData(_objectSpread$V({
      isRange: true,
      start: value[0] ? parseToDayjs(value[0], format).toDate() : void 0,
      end: value[1] ? parseToDayjs(value[1], format).toDate() : void 0,
      hoverStart: !hidePreselection && hoverValue[0] ? parseToDayjs(hoverValue[0], format).toDate() : void 0,
      hoverEnd: !hidePreselection && hoverValue[1] ? parseToDayjs(hoverValue[1], format).toDate() : void 0,
      year: startYear,
      month: startMonth,
      mode: mode,
      firstDayOfWeek: firstDayOfWeek,
      cancelRangeSelectLimit: cancelRangeSelectLimit
    }, disableDateOptions));
    var endTableData = useTableData(_objectSpread$V({
      isRange: true,
      start: value[0] ? parseToDayjs(value[0], format).toDate() : void 0,
      end: value[1] ? parseToDayjs(value[1], format).toDate() : void 0,
      hoverStart: !hidePreselection && hoverValue[0] ? parseToDayjs(hoverValue[0], format).toDate() : void 0,
      hoverEnd: !hidePreselection && hoverValue[1] ? parseToDayjs(hoverValue[1], format).toDate() : void 0,
      year: mode === "year" && endYear - startYear <= 9 ? endYear + 9 : endYear,
      month: endMonth,
      mode: mode,
      firstDayOfWeek: firstDayOfWeek,
      cancelRangeSelectLimit: cancelRangeSelectLimit
    }, disableDateOptions));
    var panelContentProps = {
      mode: mode,
      format: format,
      firstDayOfWeek: firstDayOfWeek,
      popupVisible: props.popupVisible,
      enableTimePicker: props.enableTimePicker,
      timePickerProps: _objectSpread$V({
        disableTime: disableTimeOptions
      }, props.timePickerProps),
      onMonthChange: props.onMonthChange,
      onYearChange: props.onYearChange,
      onJumperClick: props.onJumperClick,
      onCellClick: props.onCellClick,
      onCellMouseEnter: props.onCellMouseEnter,
      onCellMouseLeave: props.onCellMouseLeave,
      onTimePickerChange: props.onTimePickerChange
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(panelName, className, _defineProperty$2({}, "".concat(panelName, "--direction-row"), ["left", "right"].includes(presetsPlacement))),
      onClick: function onClick(e) {
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e
        });
      }
    }, ["top", "left"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, {
      presets: presets,
      selectedValue: value[activeIndex],
      enableTimePicker: enableTimePicker,
      onPresetClick: onPresetClick,
      onConfirmClick: onConfirmClick,
      presetsPlacement: presetsPlacement,
      needConfirm: needConfirm
    }) : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelName, "-content-wrapper")
    }, !enableTimePicker ? [/* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$V({
      key: "startPanel",
      partial: "start",
      year: startYear,
      month: startMonth,
      time: time[activeIndex],
      tableData: startTableData,
      value: value
    }, panelContentProps)), /* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$V({
      key: "endPanel",
      partial: "end",
      year: endYear,
      month: endMonth,
      time: time[activeIndex],
      value: value,
      tableData: endTableData,
      internalYear: year
    }, panelContentProps))] : /* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$V({
      key: "start",
      partial: activeIndex ? "end" : "start",
      year: activeIndex ? endYear : startYear,
      month: activeIndex ? endMonth : startMonth,
      time: activeIndex ? time[1] : time[0],
      value: value,
      tableData: activeIndex ? endTableData : startTableData
    }, panelContentProps))), ["bottom", "right"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, {
      presets: presets,
      selectedValue: value[activeIndex],
      enableTimePicker: enableTimePicker,
      onPresetClick: onPresetClick,
      onConfirmClick: onConfirmClick,
      presetsPlacement: presetsPlacement,
      needConfirm: needConfirm
    }) : null);
  });
  RangePanel.displayName = "RangePanel";

  function ownKeys$U(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$U(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$U(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$U(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DateRangePicker$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;
    var props = useDefaultProps(originalProps, dateRangePickerDefaultProps);
    var className = props.className,
      style = props.style,
      disabled = props.disabled,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      panelPreselection = props.panelPreselection,
      cancelRangeSelectLimit = props.cancelRangeSelectLimit,
      onPick = props.onPick,
      disableTime = props.disableTime;
    var _useRange = useRange(props),
      inputValue = _useRange.inputValue,
      popupVisible = _useRange.popupVisible,
      rangeInputProps = _useRange.rangeInputProps,
      popupProps = _useRange.popupProps,
      value = _useRange.value,
      year = _useRange.year,
      month = _useRange.month,
      time = _useRange.time,
      activeIndex = _useRange.activeIndex,
      isHoverCell = _useRange.isHoverCell,
      setActiveIndex = _useRange.setActiveIndex,
      onChange = _useRange.onChange,
      setIsHoverCell = _useRange.setIsHoverCell,
      setInputValue = _useRange.setInputValue,
      setPopupVisible = _useRange.setPopupVisible,
      setTime = _useRange.setTime,
      setYear = _useRange.setYear,
      setMonth = _useRange.setMonth,
      isFirstValueSelected = _useRange.isFirstValueSelected,
      setIsFirstValueSelected = _useRange.setIsFirstValueSelected,
      cacheValue = _useRange.cacheValue,
      setCacheValue = _useRange.setCacheValue;
    var _getDefaultFormat = getDefaultFormat({
        mode: mode,
        enableTimePicker: enableTimePicker,
        format: props.format,
        valueType: props.valueType
      }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat,
      valueType = _getDefaultFormat.valueType;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];
    var handlePopupInvisible = function handlePopupInvisible() {
      var _props$popupProps, _props$popupProps$onV;
      setPopupVisible(false);
      (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 || (_props$popupProps$onV = _props$popupProps.onVisibleChange) === null || _props$popupProps$onV === void 0 || _props$popupProps$onV.call(_props$popupProps, false, {});
    };
    React.useEffect(function () {
      if (popupVisible) {
        setIsSelected(false);
        setCacheValue(formatDate(value || [], {
          format: format
        }));
        setTime(formatTime(value || [dayjs().format(timeFormat), dayjs().format(timeFormat)], format, timeFormat, props.defaultTime));
        if (!value.length) {
          var _initYearMonthTime = initYearMonthTime({
              value: value,
              mode: mode,
              format: format,
              enableTimePicker: enableTimePicker
            }),
            defaultYear = _initYearMonthTime.year,
            defaultMonth = _initYearMonthTime.month;
          setYear(defaultYear);
          setMonth(defaultMonth);
        } else if (value.length === 2 && !enableTimePicker) {
          var nextMonth = value.map(function (v) {
            return parseToDayjs(v, format).month();
          });
          if (year[0] === year[1] && nextMonth[0] === nextMonth[1]) {
            nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
          }
          setYear(value.map(function (v) {
            return parseToDayjs(v, format).year();
          }));
          setMonth(nextMonth);
        } else {
          setYear(value.map(function (v) {
            return parseToDayjs(v, format).year();
          }));
          setMonth(value.map(function (v) {
            return parseToDayjs(v, format).month();
          }));
        }
      } else {
        setActiveIndex(0);
        setIsHoverCell(false);
        setIsFirstValueSelected(false);
        setInputValue(formatDate(value || [], {
          format: format
        }));
      }
    }, [popupVisible]);
    function onCellMouseEnter(date) {
      setIsHoverCell(true);
      var nextValue = _toConsumableArray(inputValue);
      nextValue[activeIndex] = formatDate(date, {
        format: format
      });
      setInputValue(nextValue);
    }
    function onCellMouseLeave() {
      setIsHoverCell(false);
      setInputValue(cacheValue);
    }
    function onCellClick(date, _ref) {
      var e = _ref.e;
      onPick === null || onPick === void 0 || onPick(date, {
        e: e,
        partial: activeIndex ? "end" : "start"
      });
      setIsHoverCell(false);
      setIsSelected(true);
      var nextValue = _toConsumableArray(inputValue);
      nextValue[activeIndex] = formatDate(date, {
        format: format
      });
      setCacheValue(nextValue);
      setInputValue(nextValue);
      if (enableTimePicker) return;
      var notValidIndex = nextValue.findIndex(function (v) {
        return !v || !isValidDate(v, format);
      });
      if (notValidIndex === -1 && nextValue.length === 2) {
        if (!isFirstValueSelected && parseToDayjs(nextValue[0], format).isAfter(parseToDayjs(nextValue[1], format))) {
          nextValue[activeIndex ? 0 : 1] = "";
          setCacheValue(nextValue);
          setInputValue(nextValue);
        } else {
          onChange(formatDate(nextValue, {
            format: format,
            targetFormat: valueType,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, format);
            }),
            trigger: "pick"
          });
        }
      }
      if (!isFirstValueSelected || !activeIndex) {
        var nextIndex = notValidIndex;
        if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
        setActiveIndex(nextIndex);
        setIsFirstValueSelected(!!nextValue[0]);
      } else {
        handlePopupInvisible();
      }
    }
    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger,
        partial = _ref2.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year[partialIndex], month[partialIndex]);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = _toConsumableArray(year);
      nextYear[partialIndex] = next.getFullYear();
      var nextMonth = _toConsumableArray(month);
      nextMonth[partialIndex] = next.getMonth();
      var onlyYearSelect = ["year", "quarter", "month"].includes(mode);
      var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
      nextYear = correctedDate.nextYear;
      nextMonth = correctedDate.nextMonth;
      setYear(nextYear);
      setMonth(nextMonth);
    }
    function onTimePickerChange(val) {
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextInputValue = _toConsumableArray(inputValue);
      var changedInputValue = inputValue[activeIndex];
      var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      nextInputValue[activeIndex] = nextDate;
      var nextTime = _toConsumableArray(time);
      nextTime[activeIndex] = val;
      setTime(nextTime);
      setIsSelected(true);
      setInputValue(formatDate(nextInputValue, {
        format: format
      }));
      setCacheValue(formatDate(nextInputValue, {
        format: format
      }));
    }
    function onConfirmClick(_ref3) {
      var _props$onConfirm;
      var e = _ref3.e;
      var nextValue = _toConsumableArray(inputValue);
      props === null || props === void 0 || (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
        e: e,
        date: nextValue,
        partial: activeIndex ? "end" : "start"
      });
      var notValidIndex = nextValue.findIndex(function (v) {
        return !v || !isValidDate(v, format);
      });
      if (notValidIndex === -1 && nextValue.length === 2) {
        if (!isFirstValueSelected && parseToDayjs(nextValue[0], format).isAfter(parseToDayjs(nextValue[1], format))) {
          nextValue[activeIndex ? 0 : 1] = "";
          setCacheValue(nextValue);
          setInputValue(nextValue);
        } else {
          onChange(formatDate(nextValue, {
            format: format,
            targetFormat: valueType,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, format);
            }),
            trigger: "confirm"
          });
        }
      }
      if (!isFirstValueSelected || !activeIndex) {
        var nextIndex = notValidIndex;
        if (nextIndex === -1) nextIndex = activeIndex ? 0 : 1;
        setActiveIndex(nextIndex);
        setIsFirstValueSelected(!!nextValue[0]);
      } else if (nextValue.length === 2) {
        handlePopupInvisible();
      }
    }
    function onPresetClick(preset, context) {
      var presetValue = preset;
      if (typeof preset === "function") {
        presetValue = preset();
      }
      if (!Array.isArray(presetValue)) {
        log.error("DateRangePicker", "preset: ".concat(preset, " must be Array!"));
      } else {
        var _props$onPresetClick;
        var formattedPreset = formatDate(presetValue, {
          format: format
        });
        setInputValue(formattedPreset);
        setCacheValue(formattedPreset);
        setTime(formatTime(formattedPreset, format, timeFormat, props.defaultTime));
        var newYear = formattedPreset.map(function (v) {
          return parseToDayjs(v, format).year();
        });
        var newMonth = formattedPreset.map(function (v) {
          return parseToDayjs(v, format).month();
        });
        setYear(newYear);
        setMonth(newMonth);
        setIsSelected(true);
        setIsFirstValueSelected(true);
        handlePopupInvisible();
        onChange(formattedPreset, {
          dayjsValue: formattedPreset.map(function (p) {
            return parseToDayjs(p, format);
          }),
          trigger: "preset"
        });
        (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
      }
    }
    function onYearChange(nextVal, _ref4) {
      var partial = _ref4.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;
      var nextYear = _toConsumableArray(year);
      var nextMonth = _toConsumableArray(month);
      nextYear[partialIndex] = nextVal;
      var onlyYearSelect = ["year", "quarter", "month"].includes(mode);
      var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
      nextYear = correctedDate.nextYear;
      nextMonth = correctedDate.nextMonth;
      setYear(nextYear);
      !onlyYearSelect && setMonth(nextMonth);
    }
    function onMonthChange(nextVal, _ref5) {
      var partial = _ref5.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;
      setMonth(function (currentMonth) {
        var nextMonth = _toConsumableArray(currentMonth);
        nextMonth[partialIndex] = nextVal;
        if (year[0] === year[1]) {
          if (partialIndex === 0) {
            if (nextMonth[1] <= nextMonth[0]) {
              nextMonth[1] = nextMonth[0] + 1;
              if (nextMonth[1] === 12) {
                nextMonth[1] = 0;
                setYear(function (currentYear) {
                  return [currentYear[0], currentYear[1] + 1];
                });
              }
            }
          }
          if (partialIndex === 1) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
            if (nextMonth[0] >= nextMonth[1]) {
              nextMonth[0] -= 1;
              if (nextMonth[0] === -1) {
                nextMonth[0] = 11;
                setYear(function (currentYear) {
                  return [currentYear[0] - 1, currentYear[1]];
                });
              }
            }
          }
        }
        return nextMonth;
      });
    }
    var panelProps = {
      hoverValue: isHoverCell ? inputValue : [],
      value: isSelected ? cacheValue : value,
      isFirstValueSelected: isFirstValueSelected,
      panelPreselection: panelPreselection,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      activeIndex: activeIndex,
      popupVisible: popupVisible,
      cancelRangeSelectLimit: cancelRangeSelectLimit,
      onCellClick: onCellClick,
      onCellMouseEnter: onCellMouseEnter,
      onCellMouseLeave: onCellMouseLeave,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      disableTime: disableTime
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-date-range-picker"), className),
      style: style,
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement(RangeInputPopup, {
      disabled: disabled,
      status: props.status,
      tips: props.tips,
      inputValue: inputValue,
      popupProps: popupProps,
      rangeInputProps: rangeInputProps,
      popupVisible: popupVisible,
      panel: /* @__PURE__ */React__default["default"].createElement(RangePanel, _objectSpread$U({}, panelProps))
    }));
  });
  DateRangePicker$1.displayName = "DateRangePicker";

  var ctrlKeyMap = /* @__PURE__ */new Map();
  ctrlKeyMap.set(Checkbox$1, "checked");
  ctrlKeyMap.set(CheckTag$1, "checked");
  ctrlKeyMap.set(Upload$1, "files");
  var initialDataMap = /* @__PURE__ */new Map();
  [Tree$1, Upload$1, Transfer$1, TagInput$1, RangeInput$1, CheckboxGroup$2, DateRangePicker$1, TimeRangePicker$1].forEach(function (component) {
    initialDataMap.set(component, []);
  });
  [Checkbox$1].forEach(function (component) {
    initialDataMap.set(component, false);
  });
  function useFormItemInitialData(name) {
    var hadReadFloatingFormData = false;
    var _useFormContext = useFormContext(),
      floatingFormDataRef = _useFormContext.floatingFormDataRef,
      formContextInitialData = _useFormContext.initialData;
    var _useFormListContext = useFormListContext(),
      formListName = _useFormListContext.name,
      formListInitialData = _useFormListContext.initialData;
    React.useEffect(function () {
      if (hadReadFloatingFormData) {
        var nameList = formListName ? [formListName, name].flat() : name;
        unset(floatingFormDataRef.current, nameList);
      }
    }, [hadReadFloatingFormData, floatingFormDataRef, formListName, name]);
    function getDefaultInitialData(_ref) {
      var children = _ref.children,
        initialData = _ref.initialData;
      if (name && floatingFormDataRef !== null && floatingFormDataRef !== void 0 && floatingFormDataRef.current && !isEmpty(floatingFormDataRef.current)) {
        var nameList = formListName ? [formListName, name].flat() : name;
        var defaultInitialData = get(floatingFormDataRef.current, nameList);
        if (typeof defaultInitialData !== "undefined") {
          hadReadFloatingFormData = true;
          return defaultInitialData;
        }
      }
      if (typeof initialData !== "undefined") {
        return initialData;
      }
      if (name && formListInitialData.length) {
        var _defaultInitialData = get(formListInitialData, name);
        if (typeof _defaultInitialData !== "undefined") return _defaultInitialData;
      }
      if (name && formContextInitialData) {
        var _defaultInitialData2 = get(formContextInitialData, name);
        if (typeof _defaultInitialData2 !== "undefined") return _defaultInitialData2;
      }
      if (typeof children !== "function") {
        var childList = React__default["default"].Children.toArray(children);
        var lastChild = childList[childList.length - 1];
        if (lastChild && /*#__PURE__*/React__default["default"].isValidElement(lastChild)) {
          var _lastChild$props;
          var isMultiple = lastChild === null || lastChild === void 0 || (_lastChild$props = lastChild.props) === null || _lastChild$props === void 0 ? void 0 : _lastChild$props.multiple;
          return isMultiple ? [] : initialDataMap.get(lastChild.type);
        }
      }
    }
    return {
      getDefaultInitialData: getDefaultInitialData
    };
  }

  function useFormItemStyle(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var className = props.className,
      help = props.help,
      tips = props.tips,
      snakeName = props.snakeName,
      status = props.status,
      successBorder = props.successBorder,
      errorList = props.errorList,
      successList = props.successList,
      layout = props.layout,
      verifyStatus = props.verifyStatus,
      label = props.label,
      labelWidth = props.labelWidth,
      labelAlign = props.labelAlign,
      requiredMark = props.requiredMark,
      requiredMarkPosition = props.requiredMarkPosition,
      showErrorMessage = props.showErrorMessage,
      innerRules = props.innerRules;
    var renderStatus = status || verifyStatus;
    var helpNode = help && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-input__help")
    }, parseTNode(help));
    var needRequiredMark = requiredMark || (requiredMark !== null && requiredMark !== void 0 ? requiredMark : innerRules.filter(function (rule) {
      return rule.required;
    }).length > 0);
    var extraNode = React.useMemo(function () {
      var _errorList$;
      var extra = tips ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-input__extra"),
        title: tips
      }, tips) : null;
      if (showErrorMessage && errorList !== null && errorList !== void 0 && (_errorList$ = errorList[0]) !== null && _errorList$ !== void 0 && _errorList$.message) {
        extra = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-input__extra"),
          title: errorList[0].message
        }, errorList[0].message);
      } else if (successList.length) {
        extra = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-input__extra"),
          title: successList[0].message
        }, successList[0].message);
      }
      return extra;
    }, [showErrorMessage, errorList, successList, tips, classPrefix]);
    var formSnakeName = snakeName.split(",").join("_");
    var formItemClass = classNames$1("".concat(classPrefix, "-form__item"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-form-item__").concat(formSnakeName), formSnakeName), "".concat(classPrefix, "-form__item-with-help"), helpNode), "".concat(classPrefix, "-form__item-with-extra"), extraNode));
    var formItemLabelClass = classNames$1("".concat(classPrefix, "-form__label"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-form__label--required"), needRequiredMark), "".concat(classPrefix, "-form__label--required-right"), needRequiredMark && requiredMarkPosition === "right"), "".concat(classPrefix, "-form__label--top"), labelAlign === "top" || !labelWidth), "".concat(classPrefix, "-form__label--left"), labelAlign === "left" && labelWidth), "".concat(classPrefix, "-form__label--right"), labelAlign === "right" && labelWidth));
    var contentClass = function contentClass() {
      var controlCls = "".concat(classPrefix, "-form__controls");
      if (!showErrorMessage) return controlCls;
      var isSuccess = renderStatus === ValidateStatus.SUCCESS;
      if (isSuccess) {
        return classNames$1(controlCls, "".concat(classPrefix, "-is-success"), _defineProperty$2({}, "".concat(classPrefix, "-form--success-border"), successBorder));
      }
      return classNames$1(controlCls, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-warning"), renderStatus === "warning"), "".concat(classPrefix, "-is-error"), ["fail", "error"].includes(renderStatus)), "".concat(classPrefix, "-form--has-error"), renderStatus === ValidateStatus.ERROR || renderStatus === ValidateStatus.WARNING));
    };
    var labelStyle = {};
    var contentStyle = {};
    if (label && labelWidth && labelAlign !== "top") {
      if (typeof labelWidth === "number") {
        labelStyle = {
          width: "".concat(labelWidth, "px")
        };
        contentStyle = {
          marginLeft: layout !== "inline" ? "".concat(labelWidth, "px") : ""
        };
      } else {
        labelStyle = {
          width: labelWidth
        };
        contentStyle = {
          marginLeft: layout !== "inline" ? labelWidth : ""
        };
      }
    }
    return {
      formItemClass: formItemClass,
      formItemLabelClass: formItemLabelClass,
      contentClass: contentClass,
      labelStyle: labelStyle,
      contentStyle: contentStyle,
      helpNode: helpNode,
      extraNode: extraNode
    };
  }

  function ownKeys$T(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$T(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$T(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$T(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var FormItem = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useLocaleReceiver = useLocaleReceiver("form"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalFormConfig = _useConfig.form;
    var _useGlobalIcon = useGlobalIcon({
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        CloseCircleFilledIcon: TdCloseCircleFilledIcon,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon
      }),
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var _useFormContext = useFormContext(),
      form = _useFormContext.form,
      colon = _useFormContext.colon,
      layout = _useFormContext.layout,
      requiredMarkFromContext = _useFormContext.requiredMark,
      requiredMarkPosition = _useFormContext.requiredMarkPosition,
      labelAlignFromContext = _useFormContext.labelAlign,
      labelWidthFromContext = _useFormContext.labelWidth,
      showErrorMessageFromContext = _useFormContext.showErrorMessage,
      disabledFromContext = _useFormContext.disabled,
      resetTypeFromContext = _useFormContext.resetType,
      rulesFromContext = _useFormContext.rules,
      statusIconFromContext = _useFormContext.statusIcon,
      errorMessage = _useFormContext.errorMessage,
      formMapRef = _useFormContext.formMapRef,
      onFormItemValueChange = _useFormContext.onFormItemValueChange;
    var _useFormListContext = useFormListContext(),
      formListName = _useFormListContext.name,
      formListRules = _useFormListContext.rules,
      formListMapRef = _useFormListContext.formListMapRef,
      formOfFormList = _useFormListContext.form;
    var props = useDefaultProps(originalProps, formItemDefaultProps);
    var children = props.children,
      style = props.style,
      label = props.label,
      name = props.name,
      status = props.status,
      tips = props.tips,
      help = props.help,
      valueFormat = props.valueFormat,
      initialData = props.initialData,
      className = props.className,
      shouldUpdate = props.shouldUpdate,
      successBorder = props.successBorder,
      _props$statusIcon = props.statusIcon,
      statusIcon = _props$statusIcon === void 0 ? statusIconFromContext : _props$statusIcon,
      _props$rules = props.rules,
      innerRules = _props$rules === void 0 ? getInnerRules(name, rulesFromContext, formListName, formListRules) : _props$rules,
      _props$labelWidth = props.labelWidth,
      labelWidth = _props$labelWidth === void 0 ? labelWidthFromContext : _props$labelWidth,
      _props$labelAlign = props.labelAlign,
      labelAlign = _props$labelAlign === void 0 ? labelAlignFromContext : _props$labelAlign,
      _props$requiredMark = props.requiredMark,
      requiredMark = _props$requiredMark === void 0 ? requiredMarkFromContext : _props$requiredMark;
    var _useFormItemInitialDa = useFormItemInitialData(name),
      getDefaultInitialData = _useFormItemInitialDa.getDefaultInitialData;
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      forceUpdate = _useState2[1];
    var _useState3 = React.useState(void 0),
      _useState4 = _slicedToArray$1(_useState3, 2),
      freeShowErrorMessage = _useState4[0],
      setFreeShowErrorMessage = _useState4[1];
    var _useState5 = React.useState([]),
      _useState6 = _slicedToArray$1(_useState5, 2),
      errorList = _useState6[0],
      setErrorList = _useState6[1];
    var _useState7 = React.useState([]),
      _useState8 = _slicedToArray$1(_useState7, 2),
      successList = _useState8[0],
      setSuccessList = _useState8[1];
    var _useState9 = React.useState("validating"),
      _useState0 = _slicedToArray$1(_useState9, 2),
      verifyStatus = _useState0[0],
      setVerifyStatus = _useState0[1];
    var _useState1 = React.useState(false),
      _useState10 = _slicedToArray$1(_useState1, 2),
      resetValidating = _useState10[0],
      setResetValidating = _useState10[1];
    var _useState11 = React.useState(false),
      _useState12 = _slicedToArray$1(_useState11, 2),
      needResetField = _useState12[0],
      setNeedResetField = _useState12[1];
    var _useState13 = React.useState(function () {
        var fieldName = flattenDeep([formListName, name]);
        var storeValue = get(form === null || form === void 0 ? void 0 : form.store, fieldName);
        return storeValue !== null && storeValue !== void 0 ? storeValue : getDefaultInitialData({
          children: children,
          initialData: initialData
        });
      }),
      _useState14 = _slicedToArray$1(_useState13, 2),
      formValue = _useState14[0],
      setFormValue = _useState14[1];
    var formItemRef = React.useRef(null);
    var innerFormItemsRef = React.useRef([]);
    var shouldEmitChangeRef = React.useRef(false);
    var isUpdatedRef = React.useRef(false);
    var shouldValidate = React.useRef(false);
    var valueRef = React.useRef(formValue);
    var errorListMapRef = React.useRef(/* @__PURE__ */new Map());
    var isSameForm = React.useMemo(function () {
      return isEqual(form, formOfFormList);
    }, [form, formOfFormList]);
    var snakeName = [].concat(isSameForm ? formListName : void 0, name).filter(function (item) {
      return item !== void 0;
    }).toString();
    var errorMessages = React.useMemo(function () {
      return errorMessage !== null && errorMessage !== void 0 ? errorMessage : globalFormConfig.errorMessage;
    }, [errorMessage, globalFormConfig]);
    var showErrorMessage = React.useMemo(function () {
      if (typeof freeShowErrorMessage === "boolean") return freeShowErrorMessage;
      if (typeof props.showErrorMessage === "boolean") return props.showErrorMessage;
      return showErrorMessageFromContext;
    }, [freeShowErrorMessage, props.showErrorMessage, showErrorMessageFromContext]);
    var _useFormItemStyle = useFormItemStyle({
        className: className,
        help: help,
        tips: tips,
        snakeName: snakeName,
        status: status,
        successBorder: successBorder,
        errorList: errorList,
        successList: successList,
        layout: layout,
        verifyStatus: verifyStatus,
        label: label,
        labelWidth: labelWidth,
        labelAlign: labelAlign,
        requiredMark: requiredMark,
        requiredMarkPosition: requiredMarkPosition,
        showErrorMessage: showErrorMessage,
        innerRules: innerRules
      }),
      formItemClass = _useFormItemStyle.formItemClass,
      formItemLabelClass = _useFormItemStyle.formItemLabelClass,
      contentClass = _useFormItemStyle.contentClass,
      labelStyle = _useFormItemStyle.labelStyle,
      contentStyle = _useFormItemStyle.contentStyle,
      helpNode = _useFormItemStyle.helpNode,
      extraNode = _useFormItemStyle.extraNode;
    var updateFormValue = function updateFormValue(newVal) {
      var _form$getInternalHook, _form$getFieldsValue;
      var validate2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var shouldEmitChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _ref = (form === null || form === void 0 || (_form$getInternalHook = form.getInternalHooks) === null || _form$getInternalHook === void 0 ? void 0 : _form$getInternalHook.call(form, HOOK_MARK)) || {},
        setPrevStore = _ref.setPrevStore;
      setPrevStore === null || setPrevStore === void 0 || setPrevStore(form === null || form === void 0 || (_form$getFieldsValue = form.getFieldsValue) === null || _form$getFieldsValue === void 0 ? void 0 : _form$getFieldsValue.call(form, true));
      shouldEmitChangeRef.current = shouldEmitChange;
      isUpdatedRef.current = true;
      shouldValidate.current = validate2;
      valueRef.current = newVal;
      var fieldName = [].concat(name);
      var fieldValue = formValue;
      if (formListName) {
        fieldName = [].concat(formListName, name);
        fieldValue = get(form === null || form === void 0 ? void 0 : form.store, fieldName);
      }
      fieldName = fieldName.filter(function (item) {
        return item !== void 0;
      });
      if (!fieldName) return;
      if (isEqual(fieldValue, newVal)) return;
      set(form === null || form === void 0 ? void 0 : form.store, fieldName, newVal);
      setFormValue(newVal);
    };
    function getInnerRules(name2, formRules, formListName2, formListRules2) {
      if (Array.isArray(name2)) {
        return get(formRules === null || formRules === void 0 ? void 0 : formRules[formListName2], name2) || get(formListRules2, name2) || get(formRules, name2.join(".")) || [];
      }
      return (formRules === null || formRules === void 0 ? void 0 : formRules[name2]) || formListRules2 || [];
    }
    var renderSuffixIcon = function renderSuffixIcon() {
      if (statusIcon === false) return null;
      var resultIcon = function resultIcon(iconSlot) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix, "-form__status")
        }, iconSlot);
      };
      var getDefaultIcon = function getDefaultIcon() {
        var iconMap = {
          success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
            size: "25px"
          }),
          error: /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
            size: "25px"
          }),
          warning: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, {
            size: "25px"
          })
        };
        if (verifyStatus === ValidateStatus.SUCCESS) {
          return resultIcon(iconMap[verifyStatus]);
        }
        if (errorList && errorList[0]) {
          var type = errorList[0].type || "error";
          return resultIcon(iconMap[type]);
        }
        return null;
      };
      if (/*#__PURE__*/React__default["default"].isValidElement(statusIcon)) {
        return resultIcon(/*#__PURE__*/React__default["default"].cloneElement(statusIcon, _objectSpread$T({
          style: {
            color: "unset"
          }
        }, statusIcon.props)));
      }
      if (statusIcon === true) {
        return getDefaultIcon();
      }
      return null;
    };
    function analysisValidateResult(_x) {
      return _analysisValidateResult.apply(this, arguments);
    }
    function _analysisValidateResult() {
      _analysisValidateResult = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(trigger) {
        var _result$rules;
        var result;
        return regenerator.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              result = {
                successList: [],
                errorList: [],
                rules: [],
                resultList: [],
                allowSetValue: false
              };
              result.rules = trigger === "all" ? innerRules : innerRules.filter(function (item) {
                return (item.trigger || "change") === trigger;
              });
              if ((_result$rules = result.rules) !== null && _result$rules !== void 0 && _result$rules.length) {
                _context.next = 1;
                break;
              }
              setResetValidating(false);
              return _context.abrupt("return", result);
            case 1:
              result.allowSetValue = true;
              _context.next = 2;
              return validate(formValue, result.rules);
            case 2:
              result.resultList = _context.sent;
              result.errorList = result.resultList.filter(function (item) {
                return item.result !== true;
              }).map(function (item) {
                Object.keys(item).forEach(function (key) {
                  if (!item.message && errorMessages[key]) {
                    item.message = parseMessage(errorMessages[key], {
                      validate: item[key],
                      name: isString(label) ? label : String(name)
                    });
                  }
                });
                return item;
              });
              result.successList = result.resultList.filter(function (item) {
                return item.result === true && item.message && item.type === "success";
              });
              return _context.abrupt("return", result);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return _analysisValidateResult.apply(this, arguments);
    }
    function validate$1() {
      return _validate.apply(this, arguments);
    }
    function _validate() {
      _validate = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee2() {
        var trigger,
          showErrorMessage2,
          _yield$analysisValida,
          innerSuccessList,
          innerErrorList,
          validateRules,
          resultList,
          allowSetValue,
          cacheErrorList,
          status2,
          _innerErrorList$,
          _cacheErrorList$,
          _args2 = arguments;
        return regenerator.wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              trigger = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : "all";
              showErrorMessage2 = _args2.length > 1 ? _args2[1] : undefined;
              if (!innerFormItemsRef.current.length) {
                _context2.next = 1;
                break;
              }
              return _context2.abrupt("return", innerFormItemsRef.current.map(function (innerFormItem) {
                return innerFormItem === null || innerFormItem === void 0 ? void 0 : innerFormItem.validate(trigger, showErrorMessage2);
              }));
            case 1:
              setResetValidating(true);
              setFreeShowErrorMessage(showErrorMessage2);
              _context2.next = 2;
              return analysisValidateResult(trigger);
            case 2:
              _yield$analysisValida = _context2.sent;
              innerSuccessList = _yield$analysisValida.successList;
              innerErrorList = _yield$analysisValida.errorList;
              validateRules = _yield$analysisValida.rules;
              resultList = _yield$analysisValida.resultList;
              allowSetValue = _yield$analysisValida.allowSetValue;
              if (innerErrorList.length && trigger !== "all") {
                errorListMapRef.current.set(trigger, innerErrorList);
              } else {
                errorListMapRef.current["delete"](trigger);
              }
              if (!innerErrorList.length && trigger === "all") {
                errorListMapRef.current.clear();
              }
              cacheErrorList = _toConsumableArray(errorListMapRef.current.values()).flat();
              if (allowSetValue) {
                setSuccessList(innerSuccessList);
                setErrorList(cacheErrorList.length ? cacheErrorList : innerErrorList);
              }
              if (validateRules.length) {
                status2 = ValidateStatus.SUCCESS;
                if (innerErrorList.length || cacheErrorList.length) {
                  status2 = (innerErrorList === null || innerErrorList === void 0 || (_innerErrorList$ = innerErrorList[0]) === null || _innerErrorList$ === void 0 ? void 0 : _innerErrorList$.type) || (cacheErrorList === null || cacheErrorList === void 0 || (_cacheErrorList$ = cacheErrorList[0]) === null || _cacheErrorList$ === void 0 ? void 0 : _cacheErrorList$.type) || ValidateStatus.ERROR;
                }
                setVerifyStatus(status2);
              } else {
                setVerifyStatus(ValidateStatus.VALIDATING);
              }
              if (needResetField) {
                resetHandler();
              }
              setResetValidating(false);
              return _context2.abrupt("return", _defineProperty$2({}, snakeName, innerErrorList.length === 0 ? true : resultList));
            case 3:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return _validate.apply(this, arguments);
    }
    function validateOnly() {
      return _validateOnly.apply(this, arguments);
    }
    function _validateOnly() {
      _validateOnly = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee3() {
        var trigger,
          _yield$analysisValida2,
          innerErrorList,
          resultList,
          _args3 = arguments;
        return regenerator.wrap(function (_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              trigger = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : "all";
              _context3.next = 1;
              return analysisValidateResult(trigger);
            case 1:
              _yield$analysisValida2 = _context3.sent;
              innerErrorList = _yield$analysisValida2.errorList;
              resultList = _yield$analysisValida2.resultList;
              return _context3.abrupt("return", _defineProperty$2({}, snakeName, innerErrorList.length === 0 ? true : resultList));
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return _validateOnly.apply(this, arguments);
    }
    function handleItemBlur() {
      var filterRules = innerRules.filter(function (item) {
        return item.trigger === "blur";
      });
      filterRules.length && validate$1("blur");
    }
    function getResetValue(resetType) {
      if (resetType === "initial") {
        return getDefaultInitialData({
          children: children,
          initialData: initialData
        });
      }
      var emptyValue;
      if (Array.isArray(formValue)) {
        emptyValue = [];
      } else if (isObject(formValue)) {
        emptyValue = {};
      } else if (isString(formValue)) {
        emptyValue = "";
      }
      return emptyValue;
    }
    function resetField(type) {
      if (typeof name === "undefined") return;
      var resetType = type || resetTypeFromContext;
      var resetValue = getResetValue(resetType);
      updateFormValue(resetValue, false);
      if (resetValidating) {
        setNeedResetField(true);
      } else {
        resetHandler();
      }
    }
    function resetHandler() {
      setNeedResetField(false);
      setErrorList([]);
      setSuccessList([]);
      setVerifyStatus(ValidateStatus.VALIDATING);
    }
    function setField(field) {
      var value = field.value,
        status2 = field.status,
        validateMessage = field.validateMessage;
      if (typeof status2 !== "undefined") {
        setErrorList(validateMessage ? [validateMessage] : []);
        setSuccessList(validateMessage ? [validateMessage] : []);
        setNeedResetField(false);
        setVerifyStatus(status2);
      }
      if (typeof value !== "undefined") {
        updateFormValue(value, typeof status2 === "undefined" ? true : false, true);
      }
    }
    function setValidateMessage(validateMessage) {
      var _validateMessage$;
      if (!validateMessage || !Array.isArray(validateMessage)) return;
      if (validateMessage.length === 0) {
        setErrorList([]);
        setVerifyStatus(ValidateStatus.SUCCESS);
        return;
      }
      setErrorList(validateMessage);
      var status2 = (validateMessage === null || validateMessage === void 0 || (_validateMessage$ = validateMessage[0]) === null || _validateMessage$ === void 0 ? void 0 : _validateMessage$.type) || ValidateStatus.ERROR;
      setVerifyStatus(status2);
    }
    function getValidateMessage() {
      return errorList;
    }
    React.useEffect(function () {
      var _form$getInternalHook2;
      if (!shouldUpdate || !form) return;
      var _ref2 = (form === null || form === void 0 || (_form$getInternalHook2 = form.getInternalHooks) === null || _form$getInternalHook2 === void 0 ? void 0 : _form$getInternalHook2.call(form, HOOK_MARK)) || {},
        getPrevStore = _ref2.getPrevStore,
        registerWatch = _ref2.registerWatch;
      var cancelRegister = registerWatch === null || registerWatch === void 0 ? void 0 : registerWatch(function () {
        var _form$getFieldsValue2;
        var currStore = (form === null || form === void 0 || (_form$getFieldsValue2 = form.getFieldsValue) === null || _form$getFieldsValue2 === void 0 ? void 0 : _form$getFieldsValue2.call(form, true)) || {};
        var updateFlag = shouldUpdate;
        if (isFunction$1(shouldUpdate)) updateFlag = shouldUpdate(getPrevStore === null || getPrevStore === void 0 ? void 0 : getPrevStore(), currStore);
        if (updateFlag) forceUpdate({});
      });
      return cancelRegister;
    }, [shouldUpdate, form]);
    React.useEffect(function () {
      if (typeof name === "undefined") return;
      if (formListName && isSameForm) {
        formListMapRef.current.set(name, formItemRef);
        return function () {
          formListMapRef.current["delete"](name);
          unset(form === null || form === void 0 ? void 0 : form.store, name);
        };
      }
      if (!formMapRef) return;
      formMapRef.current.set(name, formItemRef);
      return function () {
        formMapRef.current["delete"](name);
        unset(form === null || form === void 0 ? void 0 : form.store, name);
      };
    }, [snakeName, formListName]);
    React.useEffect(function () {
      var _form$getInternalHook3, _form$getInternalHook4;
      form === null || form === void 0 || (_form$getInternalHook3 = form.getInternalHooks) === null || _form$getInternalHook3 === void 0 || (_form$getInternalHook3 = _form$getInternalHook3.call(form, HOOK_MARK)) === null || _form$getInternalHook3 === void 0 || (_form$getInternalHook4 = _form$getInternalHook3.notifyWatch) === null || _form$getInternalHook4 === void 0 || _form$getInternalHook4.call(_form$getInternalHook3, name);
      if (!shouldValidate.current) return;
      if (typeof name !== "undefined" && shouldEmitChangeRef.current) {
        if (formListName && isSameForm) {
          var formListValue = merge$3([], calcFieldValue(name, formValue));
          var fieldValue = calcFieldValue(formListName, formListValue);
          onFormItemValueChange === null || onFormItemValueChange === void 0 || onFormItemValueChange(_objectSpread$T({}, fieldValue));
        } else {
          var _fieldValue = calcFieldValue(name, formValue);
          onFormItemValueChange === null || onFormItemValueChange === void 0 || onFormItemValueChange(_objectSpread$T({}, _fieldValue));
        }
      }
      var filterRules = innerRules.filter(function (item) {
        return (item.trigger || "change") === "change";
      });
      filterRules.length && validate$1("change");
    }, [formValue, snakeName]);
    var instance = {
      name: name,
      value: formValue,
      isUpdated: isUpdatedRef.current,
      getValue: function getValue() {
        return valueRef.current;
      },
      setValue: function setValue(newVal) {
        return updateFormValue(newVal, true, true);
      },
      setField: setField,
      validate: validate$1,
      validateOnly: validateOnly,
      resetField: resetField,
      setValidateMessage: setValidateMessage,
      getValidateMessage: getValidateMessage,
      resetValidate: resetHandler
    };
    React.useImperativeHandle(ref, function () {
      return instance;
    });
    React.useImperativeHandle(formItemRef, function () {
      return instance;
    });
    if (isFunction$1(children)) return children(form);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: formItemClass,
      style: style
    }, label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: formItemLabelClass,
      style: labelStyle
    }, /* @__PURE__ */React__default["default"].createElement("label", {
      htmlFor: props === null || props === void 0 ? void 0 : props["for"]
    }, label), colon && t(locale.colonText)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: contentClass(),
      style: contentStyle
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-form__controls-content")
    }, React__default["default"].Children.map(children, function (child, index) {
      if (!child) return null;
      var ctrlKey = "value";
      if (/*#__PURE__*/React__default["default"].isValidElement(child)) {
        if (child.type === FormItem) {
          return /*#__PURE__*/React__default["default"].cloneElement(child, {
            ref: function ref(el) {
              if (!el) return;
              innerFormItemsRef.current[index] = el;
            }
          });
        }
        if (_typeof$3(child.type) === "object") {
          ctrlKey = ctrlKeyMap.get(child.type) || "value";
        }
        var childProps = child.props;
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$T(_objectSpread$T({
          disabled: disabledFromContext
        }, childProps), {}, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, ctrlKey, formValue), "onChange", function onChange(value) {
          var _childProps$onChange, _childProps$onChange$;
          var newValue = valueFormat ? valueFormat(value) : value;
          updateFormValue(newValue, true, true);
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          childProps === null || childProps === void 0 || (_childProps$onChange = childProps.onChange) === null || _childProps$onChange === void 0 || (_childProps$onChange$ = _childProps$onChange.call) === null || _childProps$onChange$ === void 0 || _childProps$onChange$.call.apply(_childProps$onChange$, [_childProps$onChange, null, value].concat(args));
        }), "onBlur", function onBlur(value) {
          var _childProps$onBlur, _childProps$onBlur$ca;
          handleItemBlur();
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          childProps === null || childProps === void 0 || (_childProps$onBlur = childProps.onBlur) === null || _childProps$onBlur === void 0 || (_childProps$onBlur$ca = _childProps$onBlur.call) === null || _childProps$onBlur$ca === void 0 || _childProps$onBlur$ca.call.apply(_childProps$onBlur$ca, [_childProps$onBlur, null, value].concat(args));
        })));
      }
      return child;
    }), renderSuffixIcon()), helpNode, extraNode));
  });
  FormItem.displayName = "FormItem";

  function ownKeys$S(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$S(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$S(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$S(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var key$1 = 0;
  var FormList = function FormList(props) {
    var _useFormContext = useFormContext(),
      formMapRef = _useFormContext.formMapRef,
      form = _useFormContext.form,
      onFormItemValueChange = _useFormContext.onFormItemValueChange,
      initialDataFromForm = _useFormContext.initialData,
      resetTypeFromContext = _useFormContext.resetType;
    var name = props.name,
      rules = props.rules,
      children = props.children;
    var initialData = props.initialData || get(initialDataFromForm, name) || [];
    var _useState = React.useState(initialData),
      _useState2 = _slicedToArray$1(_useState, 2),
      formListValue = _useState2[0],
      setFormListValue = _useState2[1];
    var _useState3 = React.useState(function () {
        return initialData.map(function (data, index) {
          return {
            data: _objectSpread$S({}, data),
            key: key$1 += 1,
            name: index,
            isListField: true
          };
        });
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      fields = _useState4[0],
      setFields = _useState4[1];
    var formListMapRef = React.useRef(/* @__PURE__ */new Map());
    var formListRef = React.useRef(null);
    var fieldsTaskQueueRef = React.useRef([]);
    var snakeName = [].concat(name).filter(function (item) {
      return item !== void 0;
    }).toString();
    var isMounted = React.useRef(false);
    React.useEffect(function () {
      return function () {
        isMounted.current = false;
      };
    }, []);
    var operation = {
      add: function add(defaultValue, insertIndex) {
        var cloneFields = _toConsumableArray(fields);
        var index = insertIndex !== null && insertIndex !== void 0 ? insertIndex : cloneFields.length;
        cloneFields.splice(index, 0, {
          key: key$1 += 1,
          name: index,
          isListField: true
        });
        cloneFields.forEach(function (field, index2) {
          return Object.assign(field, {
            name: index2
          });
        });
        setFields(cloneFields);
        var nextFormListValue = _toConsumableArray(formListValue);
        if (typeof defaultValue !== "undefined") {
          nextFormListValue[index] = defaultValue;
          setFormListValue(nextFormListValue);
        }
        set(form === null || form === void 0 ? void 0 : form.store, flattenDeep([name, index]), nextFormListValue);
        var fieldValue = calcFieldValue(name, nextFormListValue);
        requestAnimationFrame(function () {
          onFormItemValueChange === null || onFormItemValueChange === void 0 || onFormItemValueChange(_objectSpread$S({}, fieldValue));
        });
      },
      remove: function remove(index) {
        var nextFields = fields.filter(function (item) {
          if (Array.isArray(index)) return !index.includes(item.name);
          return item.name !== index;
        }).map(function (field, i) {
          return _objectSpread$S(_objectSpread$S({}, field), {}, {
            name: i
          });
        });
        setFields(nextFields);
        var nextFormListValue = formListValue.filter(function (_, idx) {
          return idx !== index;
        });
        setFormListValue(nextFormListValue);
        unset(form === null || form === void 0 ? void 0 : form.store, flattenDeep([name, index]));
        var fieldValue = calcFieldValue(name, nextFormListValue);
        requestAnimationFrame(function () {
          onFormItemValueChange === null || onFormItemValueChange === void 0 || onFormItemValueChange(_objectSpread$S({}, fieldValue));
        });
      },
      move: function move(from, to) {
        var cloneFields = _toConsumableArray(fields);
        var fromItem = _objectSpread$S({}, cloneFields[from]);
        var toItem = _objectSpread$S({}, cloneFields[to]);
        cloneFields[to] = fromItem;
        cloneFields[from] = toItem;
        set(form === null || form === void 0 ? void 0 : form.store, name, []);
        setFields(cloneFields);
      }
    };
    function setListFields(fieldData, callback, originData) {
      setFields(fieldData.map(function (_, index) {
        return {
          key: key$1 += 1,
          name: index,
          isListField: true
        };
      }));
      fieldsTaskQueueRef.current.push({
        callback: callback,
        fieldData: fieldData,
        originData: originData
      });
    }
    React.useEffect(function () {
      if (!name || !formMapRef) return;
      formMapRef.current.set(name, formListRef);
      return function () {
        formMapRef.current["delete"](name);
      };
    }, [snakeName]);
    React.useEffect(function () {
      _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
        if (!formItemRef.current) return;
        var _formItemRef$current = formItemRef.current,
          name2 = _formItemRef$current.name,
          isUpdated = _formItemRef$current.isUpdated;
        if (isUpdated) return;
        var data = get(formListValue, name2);
        formItemRef.current.setField({
          value: data,
          status: "not"
        });
      });
    }, [formListValue]);
    React.useEffect(function () {
      var _form$getInternalHook, _form$getInternalHook2;
      if (!isMounted.current) {
        isMounted.current = true;
        return;
      }
      form === null || form === void 0 || (_form$getInternalHook = form.getInternalHooks) === null || _form$getInternalHook === void 0 || (_form$getInternalHook = _form$getInternalHook.call(form, HOOK_MARK)) === null || _form$getInternalHook === void 0 || (_form$getInternalHook2 = _form$getInternalHook.notifyWatch) === null || _form$getInternalHook2 === void 0 || _form$getInternalHook2.call(_form$getInternalHook, name);
      Promise.resolve().then(function () {
        if (!fieldsTaskQueueRef.current.length) return;
        var currentQueue = fieldsTaskQueueRef.current.pop();
        var fieldData = currentQueue.fieldData,
          callback = currentQueue.callback,
          originData = currentQueue.originData;
        _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
          if (!formItemRef.current) return;
          var itemName = formItemRef.current.name;
          var data = get(fieldData, itemName);
          callback(formItemRef, data);
        });
        if (!formMapRef || !formMapRef.current) return;
        _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
          if (!formItemRef.current) return;
          var _formItemRef$current2 = formItemRef.current,
            itemName = _formItemRef$current2.name,
            isFormList = _formItemRef$current2.isFormList;
          if (String(itemName) === String(name) || !isFormList) return;
          var data = get(originData, itemName);
          if (data) callback(formItemRef, data);
        });
      });
    }, [form, snakeName, fields, formMapRef]);
    React.useImperativeHandle(formListRef, function () {
      return {
        name: name,
        isFormList: true,
        getValue: function getValue() {
          var formListValue2 = [];
          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            if (!formItemRef.current) return;
            var _formItemRef$current3 = formItemRef.current,
              name2 = _formItemRef$current3.name,
              getValue = _formItemRef$current3.getValue;
            var fieldValue = calcFieldValue(name2, getValue());
            merge$3(formListValue2, fieldValue);
          });
          return formListValue2;
        },
        validate: function validate() {
          var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "all";
          var resultList = [];
          var validates = _toConsumableArray(formListMapRef.current.values()).map(function (formItemRef) {
            var _formItemRef$current4, _formItemRef$current5;
            return formItemRef === null || formItemRef === void 0 || (_formItemRef$current4 = formItemRef.current) === null || _formItemRef$current4 === void 0 || (_formItemRef$current5 = _formItemRef$current4.validate) === null || _formItemRef$current5 === void 0 ? void 0 : _formItemRef$current5.call(_formItemRef$current4, trigger);
          });
          return new Promise(function (resolve) {
            Promise.all(validates).then(function (validateResult) {
              validateResult.forEach(function (result) {
                var errorValue = Object.values(result)[0];
                merge$3(resultList, errorValue);
              });
              var errorItems = validateResult.filter(function (item) {
                return Object.values(item)[0] !== true;
              });
              if (errorItems.length) {
                resolve(_defineProperty$2({}, snakeName, resultList));
              } else {
                resolve(_defineProperty$2({}, snakeName, true));
              }
            });
          });
        },
        setValue: function setValue(fieldData, originData) {
          setListFields(fieldData, function (formItemRef, data) {
            var _formItemRef$current6, _formItemRef$current7;
            formItemRef === null || formItemRef === void 0 || (_formItemRef$current6 = formItemRef.current) === null || _formItemRef$current6 === void 0 || (_formItemRef$current7 = _formItemRef$current6.setValue) === null || _formItemRef$current7 === void 0 || _formItemRef$current7.call(_formItemRef$current6, data);
          }, originData);
        },
        setField: function setField(fieldData, originData) {
          var value = fieldData.value,
            status = fieldData.status;
          setListFields(value, function (formItemRef, data) {
            var _formItemRef$current8, _formItemRef$current9;
            formItemRef === null || formItemRef === void 0 || (_formItemRef$current8 = formItemRef.current) === null || _formItemRef$current8 === void 0 || (_formItemRef$current9 = _formItemRef$current8.setField) === null || _formItemRef$current9 === void 0 || _formItemRef$current9.call(_formItemRef$current8, {
              value: data,
              status: status
            });
          }, originData);
        },
        resetField: function resetField(type) {
          var resetType = type || resetTypeFromContext;
          if (resetType === "initial") {
            setFormListValue(initialData);
            var newFields = initialData.map(function (data, index) {
              return {
                data: _objectSpread$S({}, data),
                key: key$1 += 1,
                name: index,
                isListField: true
              };
            });
            setFields(newFields);
            set(form === null || form === void 0 ? void 0 : form.store, flattenDeep([name]), initialData);
            requestAnimationFrame(function () {
              _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
                if (!formItemRef.current) return;
                var itemName = formItemRef.current.name;
                var itemValue = get(initialData, itemName);
                if (itemValue !== void 0) {
                  formItemRef.current.setField({
                    value: itemValue,
                    status: "not"
                  });
                }
              });
            });
          } else {
            _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
              var _formItemRef$current0, _formItemRef$current1;
              formItemRef === null || formItemRef === void 0 || (_formItemRef$current0 = formItemRef.current) === null || _formItemRef$current0 === void 0 || (_formItemRef$current1 = _formItemRef$current0.resetField) === null || _formItemRef$current1 === void 0 || _formItemRef$current1.call(_formItemRef$current0);
            });
            fieldsTaskQueueRef.current = [];
            setFormListValue([]);
            setFields([]);
            unset(form === null || form === void 0 ? void 0 : form.store, flattenDeep([name]));
          }
        },
        setValidateMessage: function setValidateMessage(fieldData) {
          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            var _formItemRef$current10, _formItemRef$current11;
            if (!formItemRef.current) return;
            var name2 = formItemRef.current.name;
            var data = get(fieldData, name2);
            formItemRef === null || formItemRef === void 0 || (_formItemRef$current10 = formItemRef.current) === null || _formItemRef$current10 === void 0 || (_formItemRef$current11 = _formItemRef$current10.setValidateMessage) === null || _formItemRef$current11 === void 0 || _formItemRef$current11.call(_formItemRef$current10, data);
          });
        },
        resetValidate: function resetValidate() {
          _toConsumableArray(formListMapRef.current.values()).forEach(function (formItemRef) {
            var _formItemRef$current12, _formItemRef$current13;
            formItemRef === null || formItemRef === void 0 || (_formItemRef$current12 = formItemRef.current) === null || _formItemRef$current12 === void 0 || (_formItemRef$current13 = _formItemRef$current12.resetValidate) === null || _formItemRef$current13 === void 0 || _formItemRef$current13.call(_formItemRef$current12);
          });
        }
      };
    });
    if (typeof children !== "function") {
      log.error("Form", "FormList's children must be a function!");
      return null;
    }
    return /* @__PURE__ */React__default["default"].createElement(FormListContext.Provider, {
      value: {
        name: name,
        rules: rules,
        formListMapRef: formListMapRef,
        initialData: initialData,
        form: form
      }
    }, children(fields, operation));
  };
  FormList.displayName = "FormList";

  function ownKeys$R(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$R(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$R(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$R(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Form$1 = forwardRefWithStatics(function (originalProps, ref) {
    var _form$getInternalHook, _form$getInternalHook2;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalFormConfig = _useConfig.form;
    var props = useDefaultProps(originalProps, formDefaultProps);
    var style = props.style,
      className = props.className,
      labelWidth = props.labelWidth,
      statusIcon = props.statusIcon,
      labelAlign = props.labelAlign,
      layout = props.layout,
      colon = props.colon,
      initialData = props.initialData,
      _props$requiredMark = props.requiredMark,
      requiredMark = _props$requiredMark === void 0 ? globalFormConfig.requiredMark : _props$requiredMark,
      _props$requiredMarkPo = props.requiredMarkPosition,
      requiredMarkPosition = _props$requiredMarkPo === void 0 ? globalFormConfig.requiredMarkPosition : _props$requiredMarkPo,
      scrollToFirstError = props.scrollToFirstError,
      showErrorMessage = props.showErrorMessage,
      resetType = props.resetType,
      rules = props.rules,
      _props$errorMessage = props.errorMessage,
      errorMessage = _props$errorMessage === void 0 ? globalFormConfig.errorMessage : _props$errorMessage,
      preventSubmitDefault = props.preventSubmitDefault,
      disabled = props.disabled,
      children = props.children,
      id = props.id,
      onReset = props.onReset,
      _props$onValuesChange = props.onValuesChange,
      onValuesChange = _props$onValuesChange === void 0 ? noop : _props$onValuesChange;
    var formClass = classNames$1("".concat(classPrefix, "-form"), className, _defineProperty$2({}, "".concat(classPrefix, "-form-inline"), layout === "inline"));
    var _useForm = useForm(props.form),
      _useForm2 = _slicedToArray$1(_useForm, 1),
      form = _useForm2[0];
    var formRef = React.useRef(null);
    var formMapRef = React.useRef(/* @__PURE__ */new Map());
    var floatingFormDataRef = React.useRef({});
    var formInstance = useInstance(props, formRef, formMapRef, floatingFormDataRef);
    React.useImperativeHandle(ref, function () {
      return formInstance;
    });
    Object.assign(form, _objectSpread$R({}, formInstance));
    form === null || form === void 0 || (_form$getInternalHook = form.getInternalHooks) === null || _form$getInternalHook === void 0 || (_form$getInternalHook = _form$getInternalHook.call(form, HOOK_MARK)) === null || _form$getInternalHook === void 0 || (_form$getInternalHook2 = _form$getInternalHook.setForm) === null || _form$getInternalHook2 === void 0 || _form$getInternalHook2.call(_form$getInternalHook, formInstance);
    React__default["default"].useEffect(function () {
      var _form$getInternalHook3, _form$getInternalHook4;
      form === null || form === void 0 || (_form$getInternalHook3 = form.getInternalHooks) === null || _form$getInternalHook3 === void 0 || (_form$getInternalHook3 = _form$getInternalHook3.call(form, HOOK_MARK)) === null || _form$getInternalHook3 === void 0 || (_form$getInternalHook4 = _form$getInternalHook3.flashQueue) === null || _form$getInternalHook4 === void 0 || _form$getInternalHook4.call(_form$getInternalHook3);
    }, [form]);
    function onResetHandler(e) {
      var _form$getInternalHook5, _form$getInternalHook6;
      _toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
        formItemRef === null || formItemRef === void 0 || formItemRef.current.resetField();
      });
      form === null || form === void 0 || (_form$getInternalHook5 = form.getInternalHooks) === null || _form$getInternalHook5 === void 0 || (_form$getInternalHook5 = _form$getInternalHook5.call(form, HOOK_MARK)) === null || _form$getInternalHook5 === void 0 || (_form$getInternalHook6 = _form$getInternalHook5.notifyWatch) === null || _form$getInternalHook6 === void 0 || _form$getInternalHook6.call(_form$getInternalHook5, []);
      form.store = {};
      onReset === null || onReset === void 0 || onReset({
        e: e
      });
    }
    function onFormItemValueChange(changedValue) {
      var allFields = formInstance.getFieldsValue(true);
      onValuesChange(changedValue, allFields);
    }
    function onKeyDownHandler(e) {
      if (e.target.tagName.toLowerCase() !== "input") return;
      if (preventSubmitDefault && e.key === "Enter") {
        var _e$preventDefault, _e$stopPropagation;
        (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 || _e$preventDefault.call(e);
        (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);
      }
    }
    return /* @__PURE__ */React__default["default"].createElement(FormContext.Provider, {
      value: {
        form: form,
        labelWidth: labelWidth,
        statusIcon: statusIcon,
        labelAlign: labelAlign,
        layout: layout,
        colon: colon,
        initialData: initialData,
        requiredMark: requiredMark,
        requiredMarkPosition: requiredMarkPosition,
        errorMessage: errorMessage,
        showErrorMessage: showErrorMessage,
        scrollToFirstError: scrollToFirstError,
        resetType: resetType,
        rules: rules,
        disabled: disabled,
        formMapRef: formMapRef,
        floatingFormDataRef: floatingFormDataRef,
        onFormItemValueChange: onFormItemValueChange
      }
    }, /* @__PURE__ */React__default["default"].createElement("form", {
      ref: formRef,
      id: id,
      style: style,
      className: formClass,
      onSubmit: formInstance.submit,
      onReset: onResetHandler,
      onKeyDown: onKeyDownHandler
    }, children));
  }, {
    useForm: useForm,
    useWatch: useWatch,
    FormItem: FormItem,
    FormList: FormList
  });
  Form$1.displayName = "Form";

  var Form = Form$1;

  var drawerDefaultProps = {
    closeOnEscKeydown: void 0,
    closeOnOverlayClick: void 0,
    closeBtn: true,
    destroyOnClose: false,
    footer: true,
    header: true,
    lazy: true,
    mode: "overlay",
    placement: "right",
    preventScrollThrough: true,
    showInAttachedElement: false,
    showOverlay: true,
    size: void 0,
    sizeDraggable: false,
    visible: false
  };

  function getSizeDraggable(sizeDraggable, limit) {
    if (typeof sizeDraggable === "boolean") {
      return {
        allowSizeDraggable: sizeDraggable,
        max: limit.max,
        min: limit.min
      };
    }
    return {
      allowSizeDraggable: true,
      max: sizeDraggable.max,
      min: sizeDraggable.min
    };
  }
  function calcSizeRange(size, min, max) {
    return Math.min(Math.max(size, min), max);
  }
  function calcMoveSize(placement, opts) {
    var x = opts.x,
      y = opts.y,
      max = opts.max,
      min = opts.min,
      maxWidth = opts.maxWidth,
      maxHeight = opts.maxHeight;
    var moveSize;
    switch (placement) {
      case "right":
        moveSize = calcSizeRange(maxWidth - x, min, max);
        break;
      case "left":
        moveSize = calcSizeRange(x, min, max);
        break;
      case "top":
        moveSize = calcSizeRange(y, min, max);
        break;
      case "bottom":
        moveSize = calcSizeRange(maxHeight - y, min, max);
        break;
      default:
        return moveSize;
    }
    return moveSize;
  }

  var useDrag = function useDrag(placement, sizeDraggable, onSizeDragEnd) {
    var _useState = React.useState(null),
      _useState2 = _slicedToArray$1(_useState, 2),
      dragSizeValue = _useState2[0],
      changeDragSizeValue = _useState2[1];
    var dragSizeRef = React.useRef(0);
    var handleMousemove = React.useCallback(function (e) {
      if (sizeDraggable === false) return;
      var x = e.x,
        y = e.y;
      var maxHeight = document.documentElement.clientHeight;
      var maxWidth = document.documentElement.clientWidth;
      var offsetHeight = 8;
      var offsetWidth = 8;
      var max = placement === "left" || placement === "right" ? maxWidth : maxHeight;
      var min = placement === "left" || placement === "right" ? offsetWidth : offsetHeight;
      var _getSizeDraggable = getSizeDraggable(sizeDraggable, {
          max: max,
          min: min
        }),
        limitMax = _getSizeDraggable.max,
        limitMin = _getSizeDraggable.min;
      var moveSize = calcMoveSize(placement, {
        x: x,
        y: y,
        maxWidth: maxWidth,
        maxHeight: maxHeight,
        max: limitMax,
        min: limitMin
      });
      if (typeof moveSize === "undefined") return;
      changeDragSizeValue("".concat(moveSize, "px"));
      dragSizeRef.current = moveSize;
    }, [placement, sizeDraggable]);
    var draggableLineStyles = React.useMemo(function () {
      var isHorizontal = ["right", "left"].includes(placement);
      var oppositeMap = {
        left: "right",
        right: "left",
        top: "bottom",
        bottom: "top"
      };
      return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({
        zIndex: 1,
        position: "absolute",
        background: "transparent"
      }, oppositeMap[placement], 0), "width", isHorizontal ? "16px" : "100%"), "height", isHorizontal ? "100%" : "16px"), "cursor", isHorizontal ? "col-resize" : "row-resize");
    }, [placement]);
    var handleMouseup = React.useCallback(function (e) {
      document.removeEventListener("mouseup", handleMouseup, true);
      document.removeEventListener("mousemove", handleMousemove, true);
      onSizeDragEnd === null || onSizeDragEnd === void 0 || onSizeDragEnd({
        e: e,
        size: dragSizeRef.current
      });
    }, [handleMousemove, onSizeDragEnd]);
    var enableDrag = React.useCallback(function () {
      document.addEventListener("mouseup", handleMouseup, true);
      document.addEventListener("mousemove", handleMousemove, true);
    }, [handleMousemove, handleMouseup]);
    return {
      dragSizeValue: dragSizeValue,
      enableDrag: enableDrag,
      draggableLineStyles: draggableLineStyles
    };
  };

  var key = 1;
  function useLockStyle(props) {
    var preventScrollThrough = props.preventScrollThrough,
      mode = props.mode,
      visible = props.visible,
      showInAttachedElement = props.showInAttachedElement,
      placement = props.placement,
      sizeValue = props.sizeValue,
      drawerWrapper = props.drawerWrapper;
    var lockStyleRef = React.useRef(null);
    var timerRef = React.useRef(null);
    var clearStyleFunc = React.useCallback(function () {
      clearTimeout(timerRef.current);
      timerRef.current = setTimeout(function () {
        var _lockStyleRef$current, _lockStyleRef$current2;
        (_lockStyleRef$current = lockStyleRef.current.parentNode) === null || _lockStyleRef$current === void 0 || (_lockStyleRef$current2 = _lockStyleRef$current.removeChild) === null || _lockStyleRef$current2 === void 0 || _lockStyleRef$current2.call(_lockStyleRef$current, lockStyleRef.current);
      }, 150);
    }, []);
    var marginString = React.useMemo(function () {
      return {
        top: "margin: ".concat(sizeValue, " 0 0 0"),
        left: "margin: 0 0 0 ".concat(sizeValue),
        right: "margin: 0 0 0 -".concat(sizeValue),
        bottom: "margin: -".concat(sizeValue, " 0 0 0")
      }[placement];
    }, [placement, sizeValue]);
    useIsomorphicLayoutEffect(function () {
      if (typeof document === "undefined") return;
      if (!lockStyleRef.current) {
        lockStyleRef.current = document.createElement("style");
      }
      var scrollbarWidth = hasBodyScrollbar() ? getScrollbarWidth() : 0;
      lockStyleRef.current.dataset.id = "td_drawer_".concat(+new Date(), "_").concat(key += 1);
      lockStyleRef.current.innerHTML = "\n      html body {\n        overflow-y: hidden;\n        transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;\n        ".concat(mode === "push" ? "" : "width: calc(100% - ".concat(scrollbarWidth, "px);"), "\n      }\n    ");
    }, [mode]);
    useIsomorphicLayoutEffect(function () {
      if (drawerWrapper && mode === "push") {
        if (visible) {
          drawerWrapper.parentNode.style.cssText += " \n            transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;\n            ".concat(marginString, ";}\n          ");
        } else {
          drawerWrapper.parentNode.style.cssText = drawerWrapper.parentNode.style.cssText.replace(/margin:.+;/, "");
        }
      }
    }, [mode, marginString, drawerWrapper, visible]);
    useIsomorphicLayoutEffect(function () {
      if (typeof document === "undefined") return;
      if (!preventScrollThrough || showInAttachedElement) return;
      if (visible) {
        document.head.appendChild(lockStyleRef.current);
      } else {
        clearStyleFunc();
      }
    }, [preventScrollThrough, visible, showInAttachedElement, clearStyleFunc]);
    React.useEffect(function () {
      return clearStyleFunc;
    }, [clearStyleFunc]);
  }

  var _excluded$i = ["body", "children", "header", "footer"];
  function ownKeys$Q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$Q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$Q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$Q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CloseTriggerType = {
    CLICK_OVERLAY: "overlay",
    CLICK_CLOSE_BTN: "close-btn",
    CLICK_CANCEL_BTN: "cancel",
    KEYDOWN_ESC: "esc"
  };
  var Drawer$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useLocaleReceiver = useLocaleReceiver("drawer"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: TdCloseIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon;
    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);
    var props = useDefaultProps(originalProps, drawerDefaultProps);
    var body = props.body,
      children = props.children,
      header = props.header,
      footer = props.footer,
      restProps = _objectWithoutProperties$2(props, _excluded$i);
    var _useSetState = useSetState(_objectSpread$Q({
        isPlugin: false
      }, restProps)),
      _useSetState2 = _slicedToArray$1(_useSetState, 2),
      state = _useSetState2[0],
      setState = _useSetState2[1];
    var className = state.className,
      style = state.style,
      visible = state.visible,
      attach = state.attach,
      showOverlay = state.showOverlay,
      propsSize = state.size,
      placement = state.placement,
      onBeforeOpen = state.onBeforeOpen,
      onBeforeClose = state.onBeforeClose,
      onCancel = state.onCancel,
      onConfirm = state.onConfirm,
      onClose = state.onClose,
      onCloseBtnClick = state.onCloseBtnClick,
      onOverlayClick = state.onOverlayClick,
      onEscKeydown = state.onEscKeydown,
      onSizeDragEnd = state.onSizeDragEnd,
      showInAttachedElement = state.showInAttachedElement,
      closeOnOverlayClick = state.closeOnOverlayClick,
      closeOnEscKeydown = state.closeOnEscKeydown,
      closeBtn = state.closeBtn,
      _state$cancelBtn = state.cancelBtn,
      cancelBtn = _state$cancelBtn === void 0 ? cancelText : _state$cancelBtn,
      _state$confirmBtn = state.confirmBtn,
      confirmBtn = _state$confirmBtn === void 0 ? confirmText : _state$confirmBtn,
      zIndex = state.zIndex,
      destroyOnClose = state.destroyOnClose,
      sizeDraggable = state.sizeDraggable,
      forceRender = state.forceRender,
      isPlugin = state.isPlugin,
      lazy = state.lazy;
    var size = propsSize !== null && propsSize !== void 0 ? propsSize : local.size;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var drawerAttach = useAttach("drawer", attach);
    var maskRef = React.useRef(null);
    var containerRef = React.useRef(null);
    var drawerWrapperRef = React.useRef(null);
    var prefixCls = "".concat(classPrefix, "-drawer");
    var closeIcon = /*#__PURE__*/React.isValidElement(closeBtn) ? closeBtn : /* @__PURE__ */React__default["default"].createElement(CloseIcon, null);
    var _useDrag = useDrag(placement, sizeDraggable, onSizeDragEnd),
      dragSizeValue = _useDrag.dragSizeValue,
      enableDrag = _useDrag.enableDrag,
      draggableLineStyles = _useDrag.draggableLineStyles;
    var _useState = React.useState(visible),
      _useState2 = _slicedToArray$1(_useState, 2),
      animationStart = _useState2[0],
      setAnimationStart = _useState2[1];
    var sizeValue = React.useMemo(function () {
      var sizeMap = {
        small: "300px",
        medium: "500px",
        large: "760px"
      };
      return dragSizeValue || sizeMap[size] || size;
    }, [dragSizeValue, size]);
    useLockStyle(_objectSpread$Q(_objectSpread$Q({}, state), {}, {
      sizeValue: sizeValue,
      drawerWrapper: drawerWrapperRef.current
    }));
    React.useImperativeHandle(ref, function () {
      return {
        show: function show() {
          setState({
            visible: true
          });
        },
        hide: function hide() {
          setState({
            visible: false
          });
        },
        destroy: function destroy() {
          setState({
            visible: false,
            destroyOnClose: true
          });
        },
        update: function update(options) {
          setState(function (prevState) {
            return _objectSpread$Q(_objectSpread$Q({}, prevState), options);
          });
        }
      };
    });
    React.useEffect(function () {
      if (visible) {
        var _containerRef$current, _containerRef$current2;
        (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 || (_containerRef$current2 = _containerRef$current.focus) === null || _containerRef$current2 === void 0 || _containerRef$current2.call(_containerRef$current);
      }
    }, [visible]);
    useDeepEffect(function () {
      if (isPlugin) return;
      setState(function (prevState) {
        return _objectSpread$Q(_objectSpread$Q({}, prevState), props);
      });
    }, [props, setState]);
    function onMaskClick(e) {
      onOverlayClick === null || onOverlayClick === void 0 || onOverlayClick({
        e: e
      });
      (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick) && (onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_OVERLAY
      }));
    }
    function onClickCloseBtn(e) {
      onCloseBtnClick === null || onCloseBtnClick === void 0 || onCloseBtnClick({
        e: e
      });
      onClose === null || onClose === void 0 || onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_CLOSE_BTN
      });
    }
    function onKeyDownEsc(e) {
      if (e.key !== "Escape") return;
      onEscKeydown === null || onEscKeydown === void 0 || onEscKeydown({
        e: e
      });
      (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) && (onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.KEYDOWN_ESC
      }));
    }
    function onCancelClick(e) {
      onCancel === null || onCancel === void 0 || onCancel({
        e: e
      });
      onClose === null || onClose === void 0 || onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_CANCEL_BTN
      });
    }
    function onConfirmClick(e) {
      onConfirm === null || onConfirm === void 0 || onConfirm({
        e: e
      });
    }
    var contentWrapperStyle = React.useMemo(function () {
      return {
        transform: visible && animationStart ? "translateX(0)" : void 0,
        width: ["left", "right"].includes(placement) ? sizeValue : "",
        height: ["top", "bottom"].includes(placement) ? sizeValue : ""
      };
    }, [visible, placement, sizeValue, animationStart]);
    var renderDrawerButton = function renderDrawerButton(btn, defaultProps) {
      var result = null;
      if (isString(btn)) {
        result = /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$Q({}, defaultProps), btn);
      } else if (/*#__PURE__*/React.isValidElement(btn)) {
        result = btn;
      } else if (isObject(btn)) {
        result = /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$Q(_objectSpread$Q({}, defaultProps), btn));
      } else if (isFunction$1(btn)) {
        result = btn();
      }
      return result;
    };
    var renderFooter = function renderFooter() {
      var defaultFooter = function defaultFooter() {
        var renderCancelBtn = renderDrawerButton(cancelBtn, {
          theme: "default",
          onClick: function onClick(e) {
            return onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick(e);
          },
          className: "".concat(prefixCls, "__cancel")
        });
        var renderConfirmBtn = renderDrawerButton(confirmBtn, {
          theme: "primary",
          onClick: function onClick(e) {
            return onConfirmClick === null || onConfirmClick === void 0 ? void 0 : onConfirmClick(e);
          },
          className: "".concat(prefixCls, "__confirm")
        });
        var footerStyle = {
          display: "flex",
          justifyContent: placement === "right" ? "flex-start" : "flex-end"
        };
        return /* @__PURE__ */React__default["default"].createElement("div", {
          style: footerStyle
        }, placement === "right" ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderConfirmBtn, " ", renderCancelBtn) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderCancelBtn, " ", renderConfirmBtn));
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, parseTNode(footer, null, defaultFooter()));
    };
    var renderOverlay = showOverlay && /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      "in": visible,
      timeout: 200,
      classNames: "".concat(prefixCls, "-fade"),
      nodeRef: maskRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: maskRef,
      className: "".concat(prefixCls, "__mask"),
      onClick: onMaskClick
    }));
    var renderCloseBtn = closeBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: onClickCloseBtn,
      className: "".concat(prefixCls, "__close-btn")
    }, closeIcon);
    var renderHeader = header && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__header")
    }, header);
    var renderBody = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__body")
    }, body || children);
    return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
      "in": visible,
      nodeRef: drawerWrapperRef,
      mountOnEnter: isUndefined(forceRender) ? lazy : !forceRender,
      unmountOnExit: destroyOnClose,
      timeout: {
        appear: 10,
        enter: 10,
        exit: 300
      },
      onEnter: function onEnter() {
        return onBeforeOpen === null || onBeforeOpen === void 0 ? void 0 : onBeforeOpen();
      },
      onEntered: function onEntered() {
        return setAnimationStart(true);
      },
      onExit: function onExit() {
        return onBeforeClose === null || onBeforeClose === void 0 ? void 0 : onBeforeClose();
      },
      onExited: function onExited() {
        return setAnimationStart(false);
      }
    }, /* @__PURE__ */React__default["default"].createElement(Portal, {
      attach: drawerAttach,
      ref: drawerWrapperRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: containerRef,
      className: classNames$1(prefixCls, className, "".concat(prefixCls, "--").concat(placement), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefixCls, "--open"), visible), "".concat(prefixCls, "--attach"), showInAttachedElement), "".concat(prefixCls, "--without-mask"), !showOverlay)),
      style: _objectSpread$Q({
        zIndex: zIndex
      }, style),
      tabIndex: -1,
      onKeyDown: onKeyDownEsc
    }, renderOverlay, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(prefixCls, "__content-wrapper"), "".concat(prefixCls, "__content-wrapper--").concat(placement)),
      style: contentWrapperStyle
    }, renderCloseBtn, renderHeader, renderBody, !!footer && renderFooter(), sizeDraggable && /* @__PURE__ */React__default["default"].createElement("div", {
      style: draggableLineStyles,
      onMouseDown: enableDrag
    })))));
  });
  Drawer$1.displayName = "Drawer";

  function ownKeys$P(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$P(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$P(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$P(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var createDrawer = function createDrawer(props) {
    var drawerRef = /*#__PURE__*/React__default["default"].createRef();
    var _props$visible = props.visible,
      visible = _props$visible === void 0 ? false : _props$visible;
    var fragment = document.createDocumentFragment();
    var dGlobalConfig = ConfigProvider.getGlobalConfig();
    render$1(/* @__PURE__ */React__default["default"].createElement(PluginContainer, {
      globalConfig: dGlobalConfig
    }, /* @__PURE__ */React__default["default"].createElement(Drawer$1, _objectSpread$P(_objectSpread$P({}, props), {}, {
      visible: visible,
      ref: drawerRef,
      isPlugin: true
    }))), fragment);
    var container = getAttach$1(props.attach);
    if (container) {
      requestAnimationFrame(function () {
        var _drawerRef$current;
        (_drawerRef$current = drawerRef.current) === null || _drawerRef$current === void 0 || _drawerRef$current.show();
      });
      container.appendChild(fragment);
    } else {
      log.error("Drawer", "attach is not exist");
    }
    var drawerNode = {
      show: function show() {
        requestAnimationFrame(function () {
          var _drawerRef$current2;
          (_drawerRef$current2 = drawerRef.current) === null || _drawerRef$current2 === void 0 || _drawerRef$current2.show();
        });
      },
      hide: function hide() {
        requestAnimationFrame(function () {
          var _drawerRef$current3;
          (_drawerRef$current3 = drawerRef.current) === null || _drawerRef$current3 === void 0 || _drawerRef$current3.destroy();
        });
      },
      update: function update(updateOptions) {
        requestAnimationFrame(function () {
          var _drawerRef$current4;
          (_drawerRef$current4 = drawerRef.current) === null || _drawerRef$current4 === void 0 || _drawerRef$current4.update(updateOptions);
        });
      },
      destroy: function destroy() {
        requestAnimationFrame(function () {
          var _drawerRef$current5;
          (_drawerRef$current5 = drawerRef.current) === null || _drawerRef$current5 === void 0 || _drawerRef$current5.destroy();
        });
      }
    };
    return drawerNode;
  };
  var DrawerPlugin$1 = createDrawer;

  var Drawer = Drawer$1;
  var drawer = DrawerPlugin$1;
  var DrawerPlugin = DrawerPlugin$1;

  var _excluded$h = ["from", "to", "direction"];
  var getBackgroundColor = function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }
    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }
      return "linear-gradient( ".concat(color.join(","), " )");
    }
    var from = color.from,
      to = color.to,
      _color$direction = color.direction,
      direction = _color$direction === void 0 ? "to right" : _color$direction,
      rest = _objectWithoutProperties$2(color, _excluded$h);
    var keys = Object.keys(rest);
    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }
    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  };

  var progressDefaultProps = {
    label: true,
    percentage: 0,
    size: "medium",
    theme: "line"
  };

  var Progress$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        CheckCircleIcon: CheckIcon$1,
        CloseCircleIcon: TdCloseIcon,
        ErrorCircleIcon: TdErrorIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon$1,
        CloseCircleFilledIcon: TdCloseCircleFilledIcon,
        ErrorCircleFilledIcon: TdErrorCircleFilledIcon
      }),
      CheckCircleIcon = _useGlobalIcon.CheckCircleIcon,
      CloseCircleIcon = _useGlobalIcon.CloseCircleIcon,
      ErrorCircleIcon = _useGlobalIcon.ErrorCircleIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var _useDefaultProps = useDefaultProps(props, progressDefaultProps),
      theme = _useDefaultProps.theme,
      percentage = _useDefaultProps.percentage,
      label = _useDefaultProps.label,
      _useDefaultProps$colo = _useDefaultProps.color,
      color = _useDefaultProps$colo === void 0 ? "" : _useDefaultProps$colo,
      trackColor = _useDefaultProps.trackColor,
      strokeWidth = _useDefaultProps.strokeWidth,
      size = _useDefaultProps.size,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      customizeStatus = _useDefaultProps.status;
    var status = !customizeStatus && percentage >= 100 ? "success" : customizeStatus;
    var iconMap = {
      success: CheckCircleFilledIcon,
      error: CloseCircleFilledIcon,
      warning: ErrorCircleFilledIcon
    };
    var getInfoContent = function getInfoContent() {
      if (!label) {
        return "";
      }
      var info;
      if (typeof label === "boolean") {
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, "".concat(percentage, "%"));
        if (["success", "error", "warning"].includes(status)) {
          var Icon = iconMap[status];
          info = /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(classPrefix, "-progress__info")
          }, /* @__PURE__ */React__default["default"].createElement(Icon, {
            className: "".concat(classPrefix, "-progress__icon")
          }));
        }
      } else {
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, label);
      }
      return info;
    };
    var statusClassName = "".concat(classPrefix, "-progress--status--").concat(status);
    var progressDom;
    if (theme === "circle") {
      iconMap = {
        success: CheckCircleIcon,
        error: CloseCircleIcon,
        warning: ErrorCircleIcon
      };
      var getDiameter = function getDiameter() {
        var diameter2 = 112;
        if (!size) {
          return diameter2;
        }
        switch (size) {
          default:
            diameter2 = Number(size);
            break;
          case "small":
            diameter2 = 72;
            break;
          case "medium":
            diameter2 = 112;
            break;
          case "large":
            diameter2 = 160;
            break;
        }
        return diameter2;
      };
      var getCircleStokeWidth = function getCircleStokeWidth() {
        if (!strokeWidth) {
          if (size === "small") {
            return 4;
          }
        }
        if (typeof strokeWidth !== "number" || Number.isNaN(strokeWidth)) {
          return 6;
        }
        return strokeWidth;
      };
      var circleStokeWidth = getCircleStokeWidth();
      var diameter = getDiameter();
      var radius = diameter / 2;
      var innerRadius = radius - circleStokeWidth;
      var perimeter = Math.PI * 2 * radius;
      var percent = percentage / 100;
      var strokeDasharray = "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      var fontSizeRatio = innerRadius * 0.27;
      var circleBoxStyle = {
        width: diameter,
        height: diameter,
        fontSize: 4 + fontSizeRatio
      };
      var circlePathStyle = {
        stroke: color,
        strokeLinecap: circleStokeWidth < 30 ? "round" : "buff"
      };
      var circleCenterInViewBox = radius + circleStokeWidth / 2;
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress--circle"), _defineProperty$2({}, "".concat(statusClassName), status)),
        style: circleBoxStyle
      }, getInfoContent(), /* @__PURE__ */React__default["default"].createElement("svg", {
        width: diameter,
        height: diameter,
        viewBox: "0 0 ".concat(diameter + circleStokeWidth, " ").concat(diameter + circleStokeWidth)
      }, /* @__PURE__ */React__default["default"].createElement("circle", {
        cx: circleCenterInViewBox,
        cy: circleCenterInViewBox,
        r: radius,
        strokeWidth: circleStokeWidth,
        stroke: trackColor || "var(--td-bg-color-component)",
        fill: "none"
      }), percentage > 0 && /* @__PURE__ */React__default["default"].createElement("circle", {
        cx: circleCenterInViewBox,
        cy: circleCenterInViewBox,
        r: radius,
        strokeWidth: circleStokeWidth,
        fill: "none",
        transform: "matrix(0,-1,1,0,0,".concat(diameter + circleStokeWidth, ")"),
        strokeDasharray: strokeDasharray,
        className: "".concat(classPrefix, "-progress__circle-inner"),
        style: circlePathStyle
      })));
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: className
      }, progressDom);
    }
    var getHeight = function getHeight() {
      if (strokeWidth) {
        return typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
      }
    };
    var trackStyle = {
      height: getHeight(),
      backgroundColor: trackColor,
      borderRadius: getHeight()
    };
    var barStyle = {
      width: "".concat(percentage, "%"),
      background: getBackgroundColor(color),
      borderRadius: getHeight()
    };
    if (theme === "plump") {
      var PLUMP_SEPARATE = 10;
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress__bar"), "".concat(classPrefix, "-progress--plump"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(statusClassName), status), "".concat(classPrefix, "-progress--over-ten"), percentage > PLUMP_SEPARATE), "".concat(classPrefix, "-progress--under-ten"), percentage <= PLUMP_SEPARATE)),
        style: trackStyle
      }, percentage > PLUMP_SEPARATE ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      }, label && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__info"),
        style: {
          color: "#fff"
        }
      }, "".concat(percentage, "%"))) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      }), getInfoContent()));
    } else {
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress--thin"), _defineProperty$2({}, "".concat(statusClassName), status))
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__bar"),
        style: trackStyle
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      })), getInfoContent());
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: style
    }, progressDom);
  });
  Progress$1.displayName = "Progress";

  var Progress = Progress$1;

  function ownKeys$O(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$O(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$O(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$O(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Popcontent = function Popcontent(props) {
    var content = props.content,
      cancelBtn = props.cancelBtn,
      confirmBtn = props.confirmBtn,
      icon = props.icon,
      theme = props.theme,
      _props$onCancel = props.onCancel,
      onCancel = _props$onCancel === void 0 ? noop : _props$onCancel,
      _props$onConfirm = props.onConfirm,
      onConfirm = _props$onConfirm === void 0 ? noop : _props$onConfirm,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        InfoCircleFilledIcon: TdInfoCircleFilledIcon
      }),
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon;
    var hideCancel = cancelBtn === null || cancelBtn === void 0;
    var hideConfirm = confirmBtn === null || confirmBtn === void 0;
    function renderIcon() {
      var color = "#0052D9";
      var defaultIcon = /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, null);
      switch (theme) {
        case "warning":
          color = "#FFAA00";
          break;
        case "danger":
          color = "#FF3E00";
          break;
      }
      var iconComponent = null;
      if (/*#__PURE__*/React__default["default"].isValidElement(icon)) {
        iconComponent = /*#__PURE__*/React__default["default"].cloneElement(icon, _objectSpread$O({
          style: {
            color: color
          }
        }, icon.props));
      } else if (defaultIcon) {
        iconComponent = /*#__PURE__*/React__default["default"].cloneElement(defaultIcon, {
          style: {
            color: color
          }
        });
      }
      return iconComponent;
    }
    function renderCancel() {
      if (/*#__PURE__*/React__default["default"].isValidElement(cancelBtn)) {
        return /*#__PURE__*/React__default["default"].cloneElement(cancelBtn, {
          onClick: function onClick(e) {
            var _cancelBtn$props, _cancelBtn$props$onCl;
            onClose({
              e: e,
              trigger: "cancel"
            });
            (_cancelBtn$props = cancelBtn.props) === null || _cancelBtn$props === void 0 || (_cancelBtn$props$onCl = _cancelBtn$props.onClick) === null || _cancelBtn$props$onCl === void 0 || _cancelBtn$props$onCl.call(_cancelBtn$props, e);
          }
        });
      }
      if (hideCancel) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$O({
        size: "small",
        theme: "default",
        variant: "base",
        onClick: function onClick(e) {
          onClose({
            e: e,
            trigger: "cancel"
          });
          onCancel({
            e: e
          });
        }
      }, _typeof$3(cancelBtn) === "object" ? _objectSpread$O({}, cancelBtn) : {}), _typeof$3(cancelBtn) === "object" ? cancelBtn === null || cancelBtn === void 0 ? void 0 : cancelBtn.children : isString(cancelBtn) && cancelBtn);
    }
    function renderConfirm() {
      if (/*#__PURE__*/React__default["default"].isValidElement(confirmBtn)) {
        return /*#__PURE__*/React__default["default"].cloneElement(confirmBtn, {
          onClick: function onClick(e) {
            var _confirmBtn$props, _confirmBtn$props$onC;
            onClose({
              e: e,
              trigger: "confirm"
            });
            (_confirmBtn$props = confirmBtn.props) === null || _confirmBtn$props === void 0 || (_confirmBtn$props$onC = _confirmBtn$props.onClick) === null || _confirmBtn$props$onC === void 0 || _confirmBtn$props$onC.call(_confirmBtn$props, e);
          }
        });
      }
      if (hideConfirm) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$O({
        size: "small",
        theme: "primary",
        onClick: function onClick(e) {
          onClose({
            e: e,
            trigger: "confirm"
          });
          onConfirm({
            e: e
          });
        }
      }, _typeof$3(confirmBtn) === "object" ? _objectSpread$O({}, confirmBtn) : {}), _typeof$3(confirmBtn) === "object" ? confirmBtn === null || confirmBtn === void 0 ? void 0 : confirmBtn.children : isString(confirmBtn) && confirmBtn);
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__content ").concat(props.className),
      style: props.style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__body")
    }, renderIcon(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__inner")
    }, content)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__buttons")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("".concat(classPrefix, "-popconfirm__cancel"))
    }, renderCancel()), /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("".concat(classPrefix, "-popconfirm__confirm"))
    }, renderConfirm())));
  };
  Popcontent.displayName = "Popcontent";

  var popconfirmDefaultProps = {
    destroyOnClose: true,
    placement: "top",
    showArrow: true,
    theme: "default"
  };

  function ownKeys$N(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$N(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$N(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$N(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Popconfirm$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("popconfirm"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var cancelContent = typeof local.cancel === "string" ? local.cancel : local.cancel.content;
    var confirmContent = typeof local.confirm === "string" ? local.confirm : local.confirm.content;
    var props = useDefaultProps(originalProps, popconfirmDefaultProps);
    var _props$cancelBtn = props.cancelBtn,
      cancelBtn = _props$cancelBtn === void 0 ? t(cancelContent) : _props$cancelBtn,
      _props$confirmBtn = props.confirmBtn,
      confirmBtn = _props$confirmBtn === void 0 ? t(confirmContent) : _props$confirmBtn;
    var _useControlled = useControlled(props, "visible", props.onVisibleChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      visible = _useControlled2[0],
      setVisible = _useControlled2[1];
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$N(_objectSpread$N({
      ref: ref
    }, props), {}, {
      visible: visible,
      trigger: "click",
      onVisibleChange: function onVisibleChange(visible2, context) {
        return setVisible(visible2, context);
      },
      overlayClassName: classNames$1("".concat(classPrefix, "-popconfirm")),
      content: /* @__PURE__ */React__default["default"].createElement(Popcontent, _objectSpread$N(_objectSpread$N({
        cancelBtn: cancelBtn,
        confirmBtn: confirmBtn
      }, props), {}, {
        onClose: function onClose(context) {
          return setVisible(false, context);
        }
      }))
    }, props.popupProps));
  });
  Popconfirm$1.displayName = "Popconfirm";

  var Popconfirm = Popconfirm$1;

  var TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var hiddenTextarea;
  function calcTextareaHeight(targetElement) {
    var _hiddenTextarea;
    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }
    var _calculateNodeSize = calculateNodeSize(targetElement),
      paddingSize = _calculateNodeSize.paddingSize,
      borderSize = _calculateNodeSize.borderSize,
      boxSizing = _calculateNodeSize.boxSizing,
      sizingStyle = _calculateNodeSize.sizingStyle;
    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};
    var isBorderbox = boxSizing === "border-box";
    var isContentbox = boxSizing === "content-box";
    if (isBorderbox) {
      height += borderSize;
    } else if (isContentbox) {
      height -= paddingSize;
    }
    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    (_hiddenTextarea = hiddenTextarea) === null || _hiddenTextarea === void 0 || (_hiddenTextarea = _hiddenTextarea.parentNode) === null || _hiddenTextarea === void 0 || _hiddenTextarea.removeChild(hiddenTextarea);
    hiddenTextarea = null;
    var calcHeight = function calcHeight(rows) {
      var rowsHeight = singleRowHeight * rows;
      if (isBorderbox) {
        rowsHeight = rowsHeight + paddingSize + borderSize;
      }
      return rowsHeight;
    };
    if (!isNull(minRows)) {
      var minHeight = calcHeight(minRows);
      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }
    if (!isNull(maxRows)) {
      height = Math.min(calcHeight(maxRows), height);
    }
    result.height = "".concat(height, "px");
    return result;
  }

  var textareaDefaultProps = {
    allowInputOverMax: false,
    autofocus: false,
    autosize: false,
    placeholder: void 0,
    readonly: false
  };

  var _excluded$g = ["disabled", "maxlength", "maxcharacter", "className", "readonly", "autofocus", "style", "onKeydown", "onKeypress", "onKeyup", "autosize", "status", "tips", "allowInputOverMax", "rows"];
  function ownKeys$M(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$M(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$M(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$M(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_TEXTAREA_STYLE = {
    height: "auto",
    minHeight: "auto"
  };
  var Textarea$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, textareaDefaultProps);
    var disabled = props.disabled,
      maxlength = props.maxlength,
      maxcharacter = props.maxcharacter,
      className = props.className,
      readonly = props.readonly,
      autofocus = props.autofocus,
      style = props.style,
      _props$onKeydown = props.onKeydown,
      onKeydown = _props$onKeydown === void 0 ? noop : _props$onKeydown,
      _props$onKeypress = props.onKeypress,
      onKeypress = _props$onKeypress === void 0 ? noop : _props$onKeypress,
      _props$onKeyup = props.onKeyup,
      onKeyup = _props$onKeyup === void 0 ? noop : _props$onKeyup,
      autosize = props.autosize,
      status = props.status,
      tips = props.tips,
      allowInputOverMax = props.allowInputOverMax,
      rows = props.rows,
      otherProps = _objectWithoutProperties$2(props, _excluded$g);
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      _useControlled2$ = _useControlled2[0],
      value = _useControlled2$ === void 0 ? "" : _useControlled2$,
      setValue = _useControlled2[1];
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isOvermax = _useState4[0],
      setIsOvermax = _useState4[1];
    var _useState5 = React.useState(DEFAULT_TEXTAREA_STYLE),
      _useState6 = _slicedToArray$1(_useState5, 2),
      textareaStyle = _useState6[0],
      setTextareaStyle = _useState6[1];
    var composingRef = React.useRef(false);
    var _useState7 = React.useState(""),
      _useState8 = _slicedToArray$1(_useState7, 2),
      composingValue = _useState8[0],
      setComposingValue = _useState8[1];
    var hasMaxcharacter = typeof maxcharacter !== "undefined";
    var textareaRef = React.useRef(null);
    var wrapperRef = React.useRef(null);
    var currentLength = React.useMemo(function () {
      return getUnicodeLength(value);
    }, [value]);
    var characterLength = React.useMemo(function () {
      var characterInfo = getCharacterLength(String(value), allowInputOverMax ? Infinity : maxcharacter);
      if (_typeof$3(characterInfo) === "object") return characterInfo.length;
      return characterInfo;
    }, [value, allowInputOverMax, maxcharacter]);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var textareaPropsNames = Object.keys(otherProps).filter(function (key) {
      return !/^on[A-Z]/.test(key);
    });
    var textareaProps = textareaPropsNames.reduce(function (textareaProps2, key) {
      return Object.assign(textareaProps2, _defineProperty$2({}, key, props[key]));
    }, {});
    var eventPropsNames = Object.keys(otherProps).filter(function (key) {
      return /^on[A-Z]/.test(key);
    });
    var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
      Object.assign(eventProps2, _defineProperty$2({}, key, function (e) {
        if (disabled) return;
        if (key === "onFocus") setIsFocused(true);
        if (key === "onBlur") setIsFocused(false);
        props[key](e.currentTarget.value, {
          e: e
        });
      }));
      return eventProps2;
    }, {});
    var textareaClassNames = classNames$1("".concat(classPrefix, "-textarea__inner"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-").concat(status), status), "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-focused"), isFocused), "".concat(classPrefix, "-resize-none"), _typeof$3(autosize) === "object"));
    var adjustTextareaHeight = useEventCallback(function () {
      if (autosize === true) {
        setTextareaStyle(calcTextareaHeight(textareaRef.current));
      } else if (_typeof$3(autosize) === "object") {
        setTextareaStyle(calcTextareaHeight(textareaRef.current, autosize === null || autosize === void 0 ? void 0 : autosize.minRows, autosize === null || autosize === void 0 ? void 0 : autosize.maxRows));
      }
    });
    var handleAutoFocus = useEventCallback(function () {
      requestAnimationFrame(function () {
        if (autofocus && textareaRef.current) {
          var textarea = textareaRef.current;
          textarea.focus();
          textarea.selectionStart = textarea.value.length;
          textarea.selectionEnd = textarea.value.length;
        }
      });
    });
    function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;
      if (composingRef.current) {
        setComposingValue(val);
      } else {
        if (!allowInputOverMax) {
          val = limitUnicodeMaxLength(val, maxlength);
          if (maxcharacter && maxcharacter >= 0) {
            var stringInfo = getCharacterLength(val, maxcharacter);
            val = _typeof$3(stringInfo) === "object" && stringInfo.characters;
          }
        }
        setComposingValue(val);
        setValue(val, {
          e: e
        });
      }
    }
    function handleCompositionStart() {
      composingRef.current = true;
    }
    function handleCompositionEnd(e) {
      if (composingRef.current) {
        composingRef.current = false;
        inputValueChangeHandle(e);
      }
    }
    var renderLimitText = function renderLimitText(current, max) {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-textarea__limit")
      }, isOvermax && allowInputOverMax ? /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-textarea__tips--warning")
      }, " ", current) : "".concat(current), "/".concat(max));
    };
    useIsomorphicLayoutEffect(function () {
      if (autosize === false) {
        setTextareaStyle(DEFAULT_TEXTAREA_STYLE);
      } else {
        adjustTextareaHeight();
      }
    }, [value, autosize, adjustTextareaHeight]);
    React.useEffect(function () {
      handleAutoFocus();
      adjustTextareaHeight();
    }, [handleAutoFocus, adjustTextareaHeight]);
    React.useEffect(function () {
      if (allowInputOverMax) {
        setIsOvermax(!!(maxlength && currentLength > maxlength) || !!(maxcharacter && characterLength > maxcharacter));
      }
    }, [allowInputOverMax, characterLength, currentLength, maxcharacter, maxlength]);
    React.useImperativeHandle(ref, function () {
      return {
        currentElement: wrapperRef.current,
        textareaElement: textareaRef.current
      };
    });
    var textTips = tips && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-textarea__tips"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-textarea__tips--normal"), !status), "".concat(classPrefix, "-textarea__tips--").concat(status), status))
    }, tips);
    var limitText = hasMaxcharacter && renderLimitText(characterLength, maxcharacter) || !hasMaxcharacter && maxlength && renderLimitText(currentLength, maxlength);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      ref: wrapperRef,
      className: classNames$1("".concat(classPrefix, "-textarea"), className)
    }, /* @__PURE__ */React__default["default"].createElement("textarea", _objectSpread$M(_objectSpread$M(_objectSpread$M({}, textareaProps), eventProps), {}, {
      rows: rows,
      value: composingRef.current ? composingValue : value,
      style: textareaStyle,
      className: textareaClassNames,
      readOnly: readonly,
      autoFocus: autofocus,
      disabled: disabled,
      onChange: inputValueChangeHandle,
      onKeyDown: function onKeyDown(e) {
        return onKeydown(e.currentTarget.value, {
          e: e
        });
      },
      onKeyPress: function onKeyPress(e) {
        return onKeypress(e.currentTarget.value, {
          e: e
        });
      },
      onKeyUp: function onKeyUp(e) {
        return onKeyup(e.currentTarget.value, {
          e: e
        });
      },
      onCompositionStart: handleCompositionStart,
      onCompositionEnd: handleCompositionEnd,
      ref: textareaRef
    })), textTips || limitText ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-textarea__info_wrapper"), _defineProperty$2({}, "".concat(classPrefix, "-textarea__info_wrapper_align"), !textTips))
    }, textTips, limitText) : null);
  });
  Textarea$1.displayName = "Textarea";

  var Textarea = Textarea$1;

  var BreadcrumbContext = /*#__PURE__*/React.createContext({
    maxItemWidthInContext: "",
    separator: null
  });

  var breadcrumbDefaultProps = {
    maxItemWidth: void 0
  };
  var breadcrumbItemDefaultProps = {
    maxWidth: void 0,
    replace: false,
    target: "_self"
  };

  var _excluded$f = ["children", "separator", "disabled", "maxItemWidth", "maxWidth", "icon", "href", "to", "target", "router", "replace", "className", "content", "onClick", "tooltipProps", "readOnly"];
  function ownKeys$L(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$L(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$L(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$L(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var BreadcrumbItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var commonClassNames = useCommonClassName();
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: TdChevronRightIcon
      }),
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var _useDefaultProps = useDefaultProps(props, breadcrumbItemDefaultProps),
      children = _useDefaultProps.children,
      separator = _useDefaultProps.separator,
      disabled = _useDefaultProps.disabled,
      maxItemWidth = _useDefaultProps.maxItemWidth,
      maxWidth = _useDefaultProps.maxWidth,
      icon = _useDefaultProps.icon,
      href = _useDefaultProps.href,
      to = _useDefaultProps.to,
      target = _useDefaultProps.target,
      router = _useDefaultProps.router,
      replace = _useDefaultProps.replace,
      className = _useDefaultProps.className,
      content = _useDefaultProps.content,
      onClick = _useDefaultProps.onClick,
      tooltipProps = _useDefaultProps.tooltipProps,
      readonly = _useDefaultProps.readOnly,
      restProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$f);
    var _useContext = React.useContext(BreadcrumbContext),
      maxItemWidthInContext = _useContext.maxItemWidthInContext,
      separatorInContext = _useContext.separator;
    var breadcrumbText = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isCutOff = _useState2[0],
      setIsCutOff = _useState2[1];
    var breadcrumbItemClassNames = classNames$1("".concat(classPrefix, "-breadcrumb__item"));
    var textWrapperClassName = "".concat(classPrefix, "-breadcrumb__inner");
    var textClassName = "".concat(classPrefix, "-breadcrumb__inner-text");
    var textClassNames = classNames$1(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-breadcrumb--text-overflow"), !readonly), commonClassNames.STATUS.disabled, disabled));
    var separatorClassName = "".concat(classPrefix, "-breadcrumb__separator");
    var linkClassName = "".concat(classPrefix, "-link");
    var maxWidthForItem = React.useMemo(function () {
      return {
        maxWidth: maxWidth || maxItemWidth || maxItemWidthInContext || "120px"
      };
    }, [maxItemWidth, maxWidth, maxItemWidthInContext]);
    React.useEffect(function () {
      if (!breadcrumbText.current) return;
      return setIsCutOff(isNodeOverflow(breadcrumbText.current));
    }, [breadcrumbText]);
    var textContent = /* @__PURE__ */React__default["default"].createElement("span", {
      className: textWrapperClassName,
      style: maxWidthForItem
    }, isFunction$1(icon) ? icon() : icon, /* @__PURE__ */React__default["default"].createElement("span", {
      ref: breadcrumbText,
      className: textClassName
    }, children || content));
    var itemContent = /* @__PURE__ */React__default["default"].createElement("span", {
      className: textClassNames
    }, textContent);
    if ((href || to) && !disabled) {
      var handleRouting = function handleRouting() {
        if (href || !router) return;
        replace ? router.replace(to) : router.push(to);
      };
      itemContent = /* @__PURE__ */React__default["default"].createElement("a", {
        className: classNames$1(textClassNames, linkClassName),
        href: href,
        target: target,
        onClick: handleRouting
      }, textContent);
    }
    var separatorInProps = parseTNode(separator);
    var separatorContent = separatorInProps || separatorInContext || /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, {
      style: {
        opacity: ".5"
      }
    });
    var handleClick = function handleClick(e) {
      if (disabled) return;
      onClick === null || onClick === void 0 || onClick(e);
    };
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$L({
      className: classNames$1(breadcrumbItemClassNames, className),
      ref: ref,
      onClick: handleClick
    }, restProps), isCutOff ? /* @__PURE__ */React__default["default"].createElement(TooltipLite, _objectSpread$L({
      content: children || content
    }, tooltipProps), itemContent) : itemContent, /* @__PURE__ */React__default["default"].createElement("span", {
      className: separatorClassName
    }, separatorContent));
  });
  BreadcrumbItem.displayName = "BreadcrumbItem";

  var _excluded$e = ["children", "options", "separator", "maxItemWidth", "className", "maxItems", "itemsAfterCollapse", "itemsBeforeCollapse", "ellipsis"];
  function ownKeys$K(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$K(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$K(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$K(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Breadcrumb$1 = forwardRefWithStatics(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, breadcrumbDefaultProps),
      children = _useDefaultProps.children,
      options = _useDefaultProps.options,
      separator = _useDefaultProps.separator,
      maxItemWidth = _useDefaultProps.maxItemWidth,
      className = _useDefaultProps.className,
      maxItems = _useDefaultProps.maxItems,
      itemsAfterCollapse = _useDefaultProps.itemsAfterCollapse,
      itemsBeforeCollapse = _useDefaultProps.itemsBeforeCollapse,
      ellipsis = _useDefaultProps.ellipsis,
      restProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$e);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var renderOptionsToItems = React.useCallback(function (options2) {
      if (!options2 || !options2.length) {
        return void 0;
      }
      return options2.map(function (option, index) {
        var targetProps = {};
        if (option.target) {
          targetProps.target = option.target;
        }
        return /* @__PURE__ */React__default["default"].createElement(BreadcrumbItem, _objectSpread$K(_objectSpread$K({}, targetProps), {}, {
          key: index,
          maxWidth: option.maxWidth,
          disabled: option.disabled,
          href: option.href,
          to: option.to,
          router: option.router,
          replace: option.replace,
          separator: separator,
          maxItemWidth: maxItemWidth,
          icon: option.icon,
          content: option.content
        }), option.content || option.children);
      });
    }, [maxItemWidth, separator]);
    var renderEllipsis = React.useCallback(function (items) {
      if (!ellipsis) {
        return /* @__PURE__ */React__default["default"].createElement(EllipsisIcon$1, null);
      }
      if (isFunction$1(ellipsis)) {
        return ellipsis({
          items: items,
          separator: separator
        });
      }
      return ellipsis;
    }, [ellipsis, separator]);
    var content = React.useMemo(function () {
      var _items;
      var items = renderOptionsToItems(options) || React.Children.toArray(children);
      var itemsCount = ((_items = items) === null || _items === void 0 ? void 0 : _items.length) || 0;
      if (!items || !maxItems) {
        return items;
      }
      if (maxItems >= itemsCount) {
        return items;
      }
      if (maxItems && (!itemsBeforeCollapse || !itemsAfterCollapse)) {
        log.error("Breadcrumb", "\u9700\u8981\u8BBE\u7F6E itemsBeforeCollapse \u548C itemsAfterCollapse \u5C5E\u6027\u6765\u63A7\u5236\u7701\u7565\u53F7\u524D\u540E\u7684\u663E\u793A\u9879\u6570\u3002");
        return items;
      }
      if (maxItems && maxItems < (itemsAfterCollapse || 0) + (itemsBeforeCollapse || 0)) {
        log.error("Breadcrumb", "maxItems={".concat(maxItems, "} \u5FC5\u987B\u5927\u4E8E\u6216\u7B49\u4E8E itemsBeforeCollapse={").concat(itemsBeforeCollapse, "} + itemsAfterCollapse={").concat(itemsAfterCollapse, "}"));
        return items;
      }
      var startCount = itemsBeforeCollapse;
      var endCount = itemsAfterCollapse;
      var collapsedItems = items.slice(startCount, itemsCount - endCount);
      var beforeItems = items.slice(0, startCount);
      var afterItems = items.slice(itemsCount - endCount);
      var ellipsis2 = renderEllipsis(collapsedItems.map(function (item) {
        return item.props;
      }));
      items = [].concat(_toConsumableArray(beforeItems), [/* @__PURE__ */React__default["default"].createElement(BreadcrumbItem, {
        key: "ellipsis",
        readOnly: true
      }, ellipsis2)], _toConsumableArray(afterItems));
      return items;
    }, [renderOptionsToItems, options, children, maxItems, itemsBeforeCollapse, itemsAfterCollapse, renderEllipsis]);
    return /* @__PURE__ */React__default["default"].createElement(BreadcrumbContext.Provider, {
      value: {
        maxItemWidthInContext: maxItemWidth,
        separator: separator
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$K({
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-breadcrumb"), className)
    }, restProps), content));
  }, {
    BreadcrumbItem: BreadcrumbItem
  });
  Breadcrumb$1.displayName = "Breadcrumb";

  var Breadcrumb = Breadcrumb$1;

  var dropdownDefaultProps = {
    direction: "right",
    hideAfterItemClick: true,
    maxColumnWidth: 100,
    maxHeight: 300,
    minColumnWidth: 10,
    placement: "bottom-left",
    trigger: "hover"
  };
  var dropdownItemDefaultProps = {
    active: false,
    disabled: false,
    divider: false,
    theme: "default"
  };

  function ownKeys$J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$J(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, dropdownItemDefaultProps),
      children = _useDefaultProps.children,
      className = _useDefaultProps.className,
      active = _useDefaultProps.active,
      disabled = _useDefaultProps.disabled,
      value = _useDefaultProps.value,
      theme = _useDefaultProps.theme,
      prefixIcon = _useDefaultProps.prefixIcon,
      maxColumnWidth = _useDefaultProps.maxColumnWidth,
      minColumnWidth = _useDefaultProps.minColumnWidth,
      onClick = _useDefaultProps.onClick,
      style = _useDefaultProps.style,
      isSubmenu = _useDefaultProps.isSubmenu;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2),
      dropdownItemDom = _useDomRefCallback2[0],
      setRefCurrent = _useDomRefCallback2[1];
    useRipple(isSubmenu || disabled ? null : (ref === null || ref === void 0 ? void 0 : ref.current) || dropdownItemDom);
    var handleItemClick = function handleItemClick(e) {
      if (disabled) return;
      onClick === null || onClick === void 0 || onClick(value, {
        e: e
      });
    };
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1(className, "".concat(classPrefix, "-dropdown__item--theme-").concat(theme), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-dropdown__item--active"), active), "".concat(classPrefix, "-dropdown__item--disabled"), disabled)),
      onClick: handleItemClick,
      style: _objectSpread$J({
        maxWidth: pxCompat(maxColumnWidth),
        minWidth: pxCompat(minColumnWidth)
      }, style),
      ref: ref || setRefCurrent
    }, prefixIcon ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-dropdown__item-icon")
    }, prefixIcon) : null, children));
  });
  DropdownItem.displayName = "DropdownItem";

  function ownKeys$I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$I(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DropdownMenu = function DropdownMenu(props) {
    var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 160 : _props$maxColumnWidth,
      direction = props.direction,
      panelTopContent = props.panelTopContent,
      panelBottomContent = props.panelBottomContent;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var dropdownClass = "".concat(classPrefix, "-dropdown");
    var dropdownMenuClass = "".concat(dropdownClass, "__menu");
    var _useState = React.useState(null),
      _useState2 = _slicedToArray$1(_useState, 2),
      panelTopContentHeight = _useState2[0],
      setPanelTopContentHeight = _useState2[1];
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: TdChevronRightIcon
      }),
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var menuRef = React.useRef(null);
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isOverMaxHeight = _useState4[0],
      setIsOverMaxHeight = _useState4[1];
    var _useState5 = React.useState({}),
      _useState6 = _slicedToArray$1(_useState5, 2),
      calcScrollTopMap = _useState6[0],
      setScrollTopMap = _useState6[1];
    React.useEffect(function () {
      var menuElement = menuRef.current;
      if (menuElement) {
        var _menuElement$childNod;
        var menuHeight = ((_menuElement$childNod = menuElement.childNodes) === null || _menuElement$childNod === void 0 ? void 0 : _menuElement$childNod.length) * 30;
        requestAnimationFrame(function () {
          if (panelTopContent) {
            var _getComputedStyle, _menuElement$childNod2;
            var panelTopHeight = parseInt((_getComputedStyle = getComputedStyle((_menuElement$childNod2 = menuElement.childNodes) === null || _menuElement$childNod2 === void 0 ? void 0 : _menuElement$childNod2[0])) === null || _getComputedStyle === void 0 ? void 0 : _getComputedStyle.height, 10) || 0;
            setPanelTopContentHeight(panelTopHeight);
          }
        });
        if (menuHeight >= maxHeight) setIsOverMaxHeight(true);
      }
    }, [maxHeight, panelTopContent]);
    var handleItemClick = function handleItemClick(options2) {
      var _data$onClick, _props$onClick;
      var data = options2.data,
        context = options2.context;
      data === null || data === void 0 || (_data$onClick = data.onClick) === null || _data$onClick === void 0 || _data$onClick.call(data, data, context);
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, data, context);
    };
    var handleScroll = function handleScroll(e) {
      var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var scrollTop = e.target.scrollTop;
      setScrollTopMap(_objectSpread$I(_objectSpread$I({}, calcScrollTopMap), {}, _defineProperty$2({}, deep, scrollTop)));
    };
    var throttleUpdate = throttle$1(handleScroll, 100);
    var _renderOptions = function renderOptions(data, deep) {
      var _data$forEach;
      var arr = [];
      var renderContent;
      (_data$forEach = data.forEach) === null || _data$forEach === void 0 || _data$forEach.call(data, function (menu, idx) {
        var optionItem = _objectSpread$I({}, menu);
        var onViewIdx = Math.ceil(calcScrollTopMap[deep] / 30);
        var isOverflow = idx >= onViewIdx;
        var shouldCalcPanelTopContent = panelTopContent && deep > 0;
        var itemIdx = isOverflow ? idx - onViewIdx : idx;
        if (optionItem.children) {
          optionItem.children = _renderOptions(optionItem.children, deep + 1);
          renderContent = /* @__PURE__ */React__default["default"].createElement("div", {
            key: idx
          }, /* @__PURE__ */React__default["default"].createElement(DropdownItem, {
            className: classNames$1(optionItem.className, "".concat(dropdownClass, "__item"), "".concat(dropdownClass, "__item--suffix")),
            style: optionItem.style,
            value: optionItem.value,
            theme: optionItem.theme,
            active: optionItem.active,
            prefixIcon: optionItem.prefixIcon,
            disabled: optionItem.disabled,
            minColumnWidth: minColumnWidth,
            maxColumnWidth: maxColumnWidth,
            isSubmenu: true
          }, /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(dropdownClass, "__item-content")
          }, /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(dropdownClass, "__item-text")
          }, optionItem.content), /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, {
            className: "".concat(dropdownClass, "__item-direction"),
            size: "16"
          })), /* @__PURE__ */React__default["default"].createElement("div", {
            className: classNames$1("".concat(dropdownClass, "__submenu-wrapper"), _defineProperty$2({}, "".concat(dropdownClass, "__submenu-wrapper--").concat(props.direction), props.direction)),
            style: {
              position: "absolute",
              top: "".concat(itemIdx * 30 + (shouldCalcPanelTopContent ? 0 : panelTopContentHeight), "px")
            }
          }, /* @__PURE__ */React__default["default"].createElement("div", {
            className: classNames$1("".concat(dropdownClass, "__submenu"), _defineProperty$2({}, "".concat(dropdownClass, "__submenu--disabled"), optionItem.disabled)),
            style: {
              position: "static",
              maxHeight: "".concat(props.maxHeight, "px")
            },
            onScroll: function onScroll(e) {
              return handleScroll(e, deep + 1);
            }
          }, /* @__PURE__ */React__default["default"].createElement("ul", null, optionItem.children)))), optionItem.divider ? /* @__PURE__ */React__default["default"].createElement(Divider, null) : null);
        } else {
          renderContent = /* @__PURE__ */React__default["default"].createElement("div", {
            key: idx
          }, /* @__PURE__ */React__default["default"].createElement(DropdownItem, {
            className: classNames$1(optionItem.className, "".concat(dropdownClass, "__item")),
            style: optionItem.style,
            value: optionItem.value,
            theme: optionItem.theme,
            active: optionItem.active,
            prefixIcon: optionItem.prefixIcon,
            disabled: optionItem.disabled,
            minColumnWidth: minColumnWidth,
            maxColumnWidth: maxColumnWidth,
            onClick: optionItem.disabled || optionItem.children ? function () {
              return null;
            } : function (value, context) {
              return handleItemClick({
                data: optionItem,
                context: context
              });
            }
          }, /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(dropdownClass, "__item-text")
          }, optionItem.content)), optionItem.divider ? /* @__PURE__ */React__default["default"].createElement(Divider, null) : null);
        }
        arr.push(renderContent);
      });
      return arr;
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(dropdownMenuClass, "".concat(dropdownMenuClass, "--").concat(direction), _defineProperty$2({}, "".concat(dropdownMenuClass, "--overflow"), isOverMaxHeight)),
      style: {
        maxHeight: "".concat(maxHeight, "px")
      },
      ref: menuRef,
      onScroll: throttleUpdate
    }, panelTopContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(dropdownClass, "__top-content")
    }, panelTopContent) : null, _renderOptions(options, 0), panelBottomContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(dropdownClass, "__bottom-content")
    }, panelBottomContent) : null);
  };
  DropdownMenu.displayName = "DropdownMenu";

  function ownKeys$H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$H(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _getOptionsFromChildren = function getOptionsFromChildren(children) {
    if (!children) return [];
    if (children.type === DropdownMenu) {
      var groupChildren = children.props.children;
      if (Array.isArray(groupChildren)) {
        return _getOptionsFromChildren(groupChildren);
      }
    }
    return React__default["default"].Children.toArray(children).map(function (item) {
      var _item$props, _item$props2;
      var groupChildren = (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.children;
      var contextRes = (_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.content;
      if (Array.isArray(groupChildren)) {
        var _groupChildren$filter, _groupChildren$filter2;
        var contentCtx = groupChildren === null || groupChildren === void 0 || (_groupChildren$filter = groupChildren.filter) === null || _groupChildren$filter === void 0 ? void 0 : _groupChildren$filter.call(groupChildren, function (v) {
          return ![DropdownItem, DropdownMenu].includes(v.type);
        });
        var childrenCtx = groupChildren === null || groupChildren === void 0 || (_groupChildren$filter2 = groupChildren.filter) === null || _groupChildren$filter2 === void 0 ? void 0 : _groupChildren$filter2.call(groupChildren, function (v) {
          return [DropdownItem, DropdownMenu].includes(v.type);
        });
        return _objectSpread$H(_objectSpread$H({}, item.props), {}, {
          content: contentCtx || groupChildren,
          children: childrenCtx.length > 0 ? _getOptionsFromChildren(groupChildren[1]) : null
        });
      }
      return _objectSpread$H(_objectSpread$H({}, item.props), {}, {
        content: groupChildren || contextRes,
        children: null
      });
    }).filter(function (v) {
      return !!v.content;
    });
  };
  function useDropdownOptions(children, options) {
    var dropdownOptions = React.useMemo(function () {
      if (options && options.length > 0) return options;
      var dropdownMenuChild;
      React__default["default"].Children.forEach(children, function (child) {
        if (! /*#__PURE__*/React__default["default"].isValidElement(child)) return;
        if (child.type === DropdownMenu && child.props.children) {
          dropdownMenuChild = child.props.children;
        }
      });
      return _getOptionsFromChildren(dropdownMenuChild);
    }, [options, children]);
    return dropdownOptions;
  }

  function ownKeys$G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$G(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Dropdown$1 = function Dropdown(originalProps) {
    var props = useDefaultProps(originalProps, dropdownDefaultProps);
    var _props$popupProps = props.popupProps,
      popupProps = _props$popupProps === void 0 ? {} : _props$popupProps,
      disabled = props.disabled,
      placement = props.placement,
      trigger = props.trigger,
      className = props.className,
      children = props.children,
      hideAfterItemClick = props.hideAfterItemClick,
      propsOptions = props.options,
      style = props.style;
    var arrayChildren = React__default["default"].Children.toArray(children);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isPopupVisible = _useState2[0],
      togglePopupVisible = _useState2[1];
    var dropdownClass = "".concat(classPrefix, "-dropdown");
    var options = useDropdownOptions(arrayChildren, propsOptions);
    var handleMenuClick = function handleMenuClick(data, context) {
      var _props$onClick;
      if (hideAfterItemClick) {
        var _popupProps$onVisible;
        togglePopupVisible(false);
        popupProps === null || popupProps === void 0 || (_popupProps$onVisible = popupProps.onVisibleChange) === null || _popupProps$onVisible === void 0 || _popupProps$onVisible.call(popupProps, false, context);
      }
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, data, context);
    };
    var handleVisibleChange = function handleVisibleChange(visible, context) {
      var _popupProps$onVisible2;
      if (disabled || !options.length) return;
      togglePopupVisible(visible);
      popupProps === null || popupProps === void 0 || (_popupProps$onVisible2 = popupProps.onVisibleChange) === null || _popupProps$onVisible2 === void 0 || _popupProps$onVisible2.call(popupProps, visible, context);
    };
    var renderContent = /* @__PURE__ */React__default["default"].createElement(DropdownMenu, _objectSpread$G(_objectSpread$G({}, props), {}, {
      options: options,
      onClick: handleMenuClick
    }));
    var popupParams = _objectSpread$G(_objectSpread$G({
      disabled: disabled,
      placement: placement,
      trigger: trigger,
      showArrow: false,
      content: renderContent
    }, omit$2(popupProps, "onVisibleChange")), {}, {
      overlayInnerClassName: classNames$1(dropdownClass, className, popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerClassName),
      overlayInnerStyle: style
    });
    var child = arrayChildren === null || arrayChildren === void 0 ? void 0 : arrayChildren[0];
    var dropDownTrigger = /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React__default["default"].cloneElement(child, {
      disabled: disabled
    }) : child;
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$G({
      expandAnimation: true,
      destroyOnClose: true,
      visible: isPopupVisible,
      onVisibleChange: handleVisibleChange
    }, popupParams), dropDownTrigger);
  };
  Dropdown$1.DropdownItem = DropdownItem;
  Dropdown$1.DropdownMenu = DropdownMenu;
  Dropdown$1.displayName = "Dropdown";

  var Dropdown = Dropdown$1;

  function accAdd(num1, num2) {
    var isFloat = function isFloat(n) {
      return typeof n === "number" && !Number.isInteger(n);
    };
    if (isFloat(num1) && isFloat(num2)) {
      var _String$split = String(num1).split("."),
        _String$split2 = _slicedToArray$1(_String$split, 2),
        integer1 = _String$split2[0],
        precision1 = _String$split2[1];
      var _String$split3 = String(num2).split("."),
        _String$split4 = _slicedToArray$1(_String$split3, 2),
        integer2 = _String$split4[0],
        precision2 = _String$split4[1];
      var maxPrecisionLen = Math.max(precision1.length, precision2.length);
      var wholePrecision1 = Number(precision1.padEnd(maxPrecisionLen, "0"));
      var wholePrecision2 = Number(precision2.padEnd(maxPrecisionLen, "0"));
      var precisionVal = (wholePrecision1 + wholePrecision2) / Math.pow(10, maxPrecisionLen);
      var integerVal = Number(integer1) + Number(integer2);
      return integerVal + precisionVal;
    }
    return num1 + num2;
  }

  var sliderDefaultProps = {
    inputNumberProps: false,
    label: true,
    layout: "horizontal",
    max: 100,
    min: 0,
    range: false,
    step: 1
  };

  function ownKeys$F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$F(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SliderHandleButton = function SliderHandleButton(_ref) {
    var onChange = _ref.onChange,
      style = _ref.style,
      classPrefix = _ref.classPrefix,
      toolTipProps = _ref.toolTipProps,
      hideTips = _ref.hideTips;
    var sliderNodeRef = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];
    var _useMouseEvent = useMouseEvent(sliderNodeRef, {
        onEnter: function onEnter() {
          setPopupVisible(true);
        },
        onDown: function onDown() {
          setPopupVisible(true);
        },
        onMove: function onMove(e) {
          setPopupVisible(true);
          onChange(e);
        },
        onLeave: function onLeave() {
          setPopupVisible(false);
        },
        onUp: function onUp(e) {
          setPopupVisible(false);
          onChange(e);
        }
      }),
      isMoving = _useMouseEvent.isMoving;
    var handleNode = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: sliderNodeRef,
      style: style,
      className: "".concat(classPrefix, "-slider__button-wrapper")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__button"), _defineProperty$2({}, "".concat(classPrefix, "-slider__button--dragging"), isMoving))
    }));
    return hideTips ? handleNode : /* @__PURE__ */React__default["default"].createElement(Tooltip$1, _objectSpread$F({
      visible: popupVisible,
      placement: "top"
    }, toolTipProps), handleNode);
  };

  var numberToPercent = function numberToPercent(number) {
    return "".concat(number * 100, "%");
  };

  function ownKeys$E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$E(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var LEFT_NODE = 0;
  var RIGHT_NODE = 1;
  var Slider$1 = /*#__PURE__*/React__default["default"].forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, sliderDefaultProps);
    var disabled = props.disabled,
      inputNumberProps = props.inputNumberProps,
      label = props.label,
      layout = props.layout,
      marks = props.marks,
      max = props.max,
      min = props.min,
      range = props.range,
      step = props.step,
      tooltipProps = props.tooltipProps,
      className = props.className,
      style = props.style,
      onChange = props.onChange;
    var sliderRef = React.useRef(null);
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      internalOnChange = _useControlled2[1];
    var isVertical = layout === "vertical";
    var renderValue = Array.isArray(value) ? value : [min, value];
    var start = (renderValue[LEFT_NODE] - min) / (max - min);
    var width = (renderValue[RIGHT_NODE] - renderValue[LEFT_NODE]) / (max - min);
    var end = start + width;
    var dots = React.useMemo(function () {
      if (Array.isArray(marks)) {
        if (marks.some(function (mark) {
          return typeof mark !== "number";
        })) {
          console.warn('The props "marks" only support number!');
          return [];
        }
        return marks.map(function (mark) {
          return {
            value: mark,
            position: (mark - min) / (max - min),
            label: mark
          };
        });
      }
      if (marks && _typeof$3(marks) === "object") {
        var result = [];
        Object.keys(marks).forEach(function (key) {
          var numberKey = Number(key);
          if (typeof numberKey !== "number") {
            console.warn('The props "marks" key only support number!');
          } else {
            result.push({
              value: numberKey,
              label: marks[numberKey],
              position: (numberKey - min) / (max - min)
            });
          }
        });
        return result;
      }
      return [];
    }, [max, min, marks]);
    var allDots = React.useMemo(function () {
      var result = [];
      for (var i = min; i <= max; i = accAdd(i, step)) {
        result.push({
          value: i,
          position: (i - min) / (max - min)
        });
      }
      return result;
    }, [max, min, step]);
    var startDirection = isVertical ? "bottom" : "left";
    var stepDirection = isVertical ? "top" : "left";
    var sizeKey = isVertical ? "height" : "width";
    var renderDots = isVertical ? dots.map(function (item) {
      return _objectSpread$E(_objectSpread$E({}, item), {}, {
        position: 1 - item.position
      });
    }) : dots;
    var handleInputChange = function handleInputChange(newValue, nodeIndex) {
      var safeValue = Number(newValue.toFixed(32));
      var resultValue = Math.max(Math.min(max, safeValue), min);
      if (nodeIndex === LEFT_NODE && value && safeValue > value[RIGHT_NODE]) resultValue = value[RIGHT_NODE];
      if (nodeIndex === RIGHT_NODE && value && safeValue < value[LEFT_NODE]) resultValue = value[LEFT_NODE];
      if (Array.isArray(value)) {
        var arrValue = value.slice();
        arrValue[nodeIndex] = resultValue;
        internalOnChange(arrValue);
      } else {
        internalOnChange(resultValue);
      }
    };
    var createInput = function createInput(nodeIndex) {
      var inputProps = _typeof$3(inputNumberProps) === "object" ? inputNumberProps : {};
      var currentValue = renderValue[nodeIndex];
      return /* @__PURE__ */React__default["default"].createElement(InputNumber$1, _objectSpread$E({
        value: currentValue,
        onChange: function onChange(v) {
          if (typeof v !== "undefined") {
            handleInputChange(Number(v), nodeIndex);
          }
        },
        className: classNames$1("".concat(classPrefix, "-slider-input"), {
          "is-vertical": isVertical
        }),
        disabled: disabled,
        theme: "column",
        min: min,
        max: max
      }, inputProps));
    };
    var nearbyValueChange = function nearbyValueChange(value2) {
      var buttonBias = Math.abs(value2 - renderValue[LEFT_NODE]) > Math.abs(value2 - renderValue[RIGHT_NODE]) ? RIGHT_NODE : LEFT_NODE;
      handleInputChange(value2, buttonBias);
    };
    var setPosition = function setPosition(position, nodeIndex) {
      var index = 0;
      var minDistance = 1;
      for (var i = 0; i < allDots.length; i++) {
        var diff = Math.abs(allDots[i].position - position);
        if (minDistance > diff) {
          index = i;
          minDistance = diff;
        }
      }
      var value2 = allDots[index].value;
      if (nodeIndex === void 0 && range) {
        nearbyValueChange(value2);
      } else {
        handleInputChange(value2, nodeIndex);
      }
    };
    var onSliderChange = function onSliderChange(event, nodeIndex) {
      if (disabled || !sliderRef.current) return;
      var clientKey = isVertical ? "clientY" : "clientX";
      var sliderPositionInfo = sliderRef.current.getBoundingClientRect();
      var sliderOffset = sliderPositionInfo[startDirection];
      var position = (event[clientKey] - sliderOffset) / sliderPositionInfo[sizeKey] * (isVertical ? -1 : 1);
      setPosition(position, nodeIndex);
    };
    var handleClickMarks = function handleClickMarks(event, value2) {
      event.stopPropagation();
      nearbyValueChange(value2);
    };
    var createHandleButton = function createHandleButton(nodeIndex, style2) {
      var currentValue = renderValue[nodeIndex];
      var tipLabel = currentValue;
      if (isFunction$1(label)) {
        tipLabel = label({
          value: currentValue,
          position: nodeIndex === LEFT_NODE ? "start" : "end"
        });
      }
      if (isString(label)) {
        tipLabel = label.replace(/\$\{value\}/g, currentValue.toString());
      }
      return /* @__PURE__ */React__default["default"].createElement(SliderHandleButton, {
        toolTipProps: _objectSpread$E({
          content: tipLabel
        }, tooltipProps),
        hideTips: label === false,
        classPrefix: classPrefix,
        style: style2,
        onChange: function onChange(e) {
          return onSliderChange(e, nodeIndex);
        }
      });
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: _objectSpread$E({}, style),
      className: classNames$1("".concat(classPrefix, "-slider__container"), {
        "is-vertical": isVertical
      }),
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: sliderRef,
      className: classNames$1("".concat(classPrefix, "-slider"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-slider--vertical"), isVertical), "".concat(classPrefix, "-slider--with-input"), inputNumberProps)),
      onClick: onSliderChange
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__rail"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      style: _defineProperty$2(_defineProperty$2({}, startDirection, numberToPercent(start)), sizeKey, numberToPercent(width)),
      className: classNames$1("".concat(classPrefix, "-slider__track"))
    }), range ? createHandleButton(LEFT_NODE, _defineProperty$2({}, startDirection, numberToPercent(start))) : null, createHandleButton(RIGHT_NODE, _defineProperty$2({}, startDirection, numberToPercent(end))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-slider__stops")
    }, renderDots.map(function (_ref) {
      var position = _ref.position,
        value2 = _ref.value;
      if (position === 0 || position === 1) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: value2,
        style: _defineProperty$2({}, stepDirection, numberToPercent(position)),
        className: classNames$1("".concat(classPrefix, "-slider__stop"))
      });
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__mark"))
    }, renderDots.map(function (_ref2) {
      var position = _ref2.position,
        value2 = _ref2.value,
        label2 = _ref2.label;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: value2,
        onClick: function onClick(event) {
          return handleClickMarks(event, value2);
        },
        style: _defineProperty$2({}, stepDirection, numberToPercent(position)),
        className: classNames$1("".concat(classPrefix, "-slider__mark-text"))
      }, label2);
    })))), inputNumberProps ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__input-container"), {
        "is-vertical": isVertical
      })
    }, range && createInput(LEFT_NODE), range && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-slider__center-line")
    }), createInput(RIGHT_NODE)) : null);
  });
  Slider$1.displayName = "Slider";

  var Slider = Slider$1;

  var autoCompleteDefaultProps = {
    borderless: false,
    filterable: true,
    highlightKeyword: true,
    placeholder: void 0,
    size: "medium",
    status: "default"
  };

  var HighlightOption$1 = function HighlightOption(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var content = props.content,
      keyword = props.keyword;
    var words = React.useMemo(function () {
      var _content$match;
      if (!content) return {
        list: []
      };
      if (typeof content !== "string" || !keyword) return {
        list: [content]
      };
      var regExp = new RegExp(escapeRegExp(keyword), "i");
      var splitKeyword = (_content$match = content.match(regExp)) === null || _content$match === void 0 ? void 0 : _content$match[0];
      return {
        list: content.split(splitKeyword),
        keyword: splitKeyword
      };
    }, [content, keyword]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select-option__highlight-item")
    }, words.list.map(function (item, index) {
      if (!index) return item;
      return [/* @__PURE__ */React__default["default"].createElement("b", {
        className: "".concat(classPrefix, "-is-highlight"),
        key: item + words.keyword
      }, words.keyword), item];
    }));
  };
  HighlightOption$1.displayName = "HighlightOption";

  function ownKeys$D(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$D(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$D(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var OptionsList = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var value = props.value,
      popupVisible = props.popupVisible,
      onSelect = props.onSelect;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(""),
      _useState2 = _slicedToArray$1(_useState, 2),
      active = _useState2[0],
      setActive = _useState2[1];
    var activeIndexRef = React.useRef(-1);
    var _useLocaleReceiver = useLocaleReceiver("autoComplete"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      global = _useLocaleReceiver2[0];
    var classes = "".concat(classPrefix, "-select__list");
    var optionClasses = ["".concat(classPrefix, "-select-option"), _defineProperty$2({}, props.sizeClassNames[props.size], props.size)];
    var tOptions = React.useMemo(function () {
      var options = (props.options || []).map(function (item) {
        var option = {};
        if (typeof item === "string") {
          option = {
            text: item,
            label: item
          };
        } else {
          if (item.text && typeof item.text !== "string") {
            log.warn("AutoComplete", "`text` must be a string.");
          }
          if (!item.text) {
            if (typeof item.label === "string") {
              option = _objectSpread$D(_objectSpread$D({}, item), {}, {
                text: item.label
              });
            } else {
              log.warn("AutoComplete", "one of `label` and `text` must be a existed string.");
            }
          } else {
            option = item;
          }
        }
        return option;
      });
      if (props.filter) {
        options = options.filter(function (option) {
          return props.filter(value, option);
        });
      } else if (props.filterable) {
        var regExp = new RegExp(escapeRegExp(value), "i");
        options = options.filter(function (item) {
          return regExp.test(item.text);
        });
      }
      return options;
    }, [props.options, value, props.filterable]);
    var onOptionClick = function onOptionClick(e) {
      var liNode = e.target;
      while (liNode && liNode.tagName !== "LI") {
        liNode = liNode.parentNode;
      }
      var keyword = liNode.getAttribute("title");
      setActive(keyword);
      onSelect(keyword, {
        e: e
      });
    };
    var onKeyInnerPress = function onKeyInnerPress(e) {
      if (e.code === "Enter" || e.key === "Enter") {
        var currentIndex = activeIndexRef.current;
        if (currentIndex === -1) {
          return;
        }
        onSelect(tOptions[activeIndexRef.current].text, {
          e: e
        });
      } else {
        var _tOptions$newIndex;
        var index = activeIndexRef.current;
        var newIndex;
        if (e.code === "ArrowUp" || e.key === "ArrowUp") {
          newIndex = index - 1 < 0 ? tOptions.length - 1 : index - 1;
        } else if (e.code === "ArrowDown" || e.key === "ArrowDown") {
          newIndex = index + 1 >= tOptions.length ? 0 : index + 1;
        }
        setActive((_tOptions$newIndex = tOptions[newIndex]) === null || _tOptions$newIndex === void 0 ? void 0 : _tOptions$newIndex.text);
      }
    };
    var addKeyboardListener = function addKeyboardListener() {
      on$1(document, "keydown", onKeyInnerPress);
    };
    var removeKeyboardListener = function removeKeyboardListener() {
      off$1(document, "keydown", onKeyInnerPress);
    };
    React.useImperativeHandle(ref, function () {
      return {
        addKeyboardListener: addKeyboardListener,
        removeKeyboardListener: removeKeyboardListener
      };
    });
    React.useEffect(function () {
      if (popupVisible) {
        addKeyboardListener();
      } else {
        removeKeyboardListener();
      }
      return function () {
        removeKeyboardListener();
      };
    }, [popupVisible]);
    React.useEffect(function () {
      if (!value) {
        setActive("");
      }
    }, [value]);
    React.useEffect(function () {
      activeIndexRef.current = tOptions.findIndex(function (item) {
        return item.text === active;
      });
    }, [active, tOptions]);
    if (!tOptions.length) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-auto-complete__panel--empty")
      }, props.empty || global.empty);
    }
    return /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classes
    }, tOptions.map(function (item) {
      var cls = [].concat(optionClasses);
      if (item.text === active) {
        cls.push("".concat(classPrefix, "-select-option--hover"));
      }
      var content = (isFunction$1(item.label) ? item.label() : item.label) || item.text;
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: item.text,
        className: classNames$1(cls),
        title: item.text,
        onClick: onOptionClick
      }, typeof content === "string" && props.highlightKeyword ? /* @__PURE__ */React__default["default"].createElement(HighlightOption$1, {
        content: content,
        keyword: value
      }) : content);
    }));
  });
  OptionsList.displayName = "OptionsList";

  function ownKeys$C(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$C(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$C(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$C(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var AutoComplete$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _props$placeholder;
    var props = useDefaultProps(originalProps, autoCompleteDefaultProps);
    var inputRef = React.useRef(null);
    var popupRef = React.useRef(null);
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      tValue = _useControlled2[0],
      setTValue = _useControlled2[1];
    var _useCommonClassName = useCommonClassName(),
      classPrefix = _useCommonClassName.classPrefix,
      sizeClassNames = _useCommonClassName.sizeClassNames;
    var _useLocaleReceiver = useLocaleReceiver("input"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      global = _useLocaleReceiver2[0];
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];
    var optionListRef = React.useRef(null);
    React.useImperativeHandle(ref, function () {
      return {
        inputRef: inputRef.current,
        popupRef: popupRef.current
      };
    });
    var getOverlayStyle = function getOverlayStyle(trigger, popupElement) {
      var _props$popupProps;
      var triggerWidth = trigger.getBoundingClientRect().width || trigger.offsetWidth || trigger.clientWidth;
      var popupWidth = popupElement.getBoundingClientRect().width || popupElement.offsetWidth || popupElement.clientWidth;
      return _objectSpread$C({
        width: triggerWidth >= popupWidth ? "".concat(triggerWidth, "px") : "auto"
      }, (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle);
    };
    var classes = ["".concat(classPrefix, "-auto-complete")].concat(props.className);
    var popupClasses = function (_props$popupProps2) {
      var classes2 = ["".concat(classPrefix, "-select__dropdown")];
      if ((_props$popupProps2 = props.popupProps) !== null && _props$popupProps2 !== void 0 && _props$popupProps2.overlayClassName) {
        classes2 = classes2.concat(props.popupProps.overlayClassName);
      }
      return classNames$1(classes2);
    }();
    var popupInnerClasses = function (_props$popupProps3) {
      var classes2 = ["".concat(classPrefix, "-select__dropdown-inner")];
      if ((_props$popupProps3 = props.popupProps) !== null && _props$popupProps3 !== void 0 && _props$popupProps3.overlayInnerClassName) {
        classes2 = classes2.concat(props.popupProps.overlayInnerClassName);
      }
      return classNames$1(classes2);
    }();
    var onInputChange = function onInputChange(value, context) {
      if (!popupVisible) {
        setPopupVisible(true);
      }
      setTValue(value, context);
    };
    var innerInputProps = function () {
      var tProps = _objectSpread$C({
        value: tValue,
        size: props.size
      }, props.inputProps);
      return tProps;
    }();
    var onInnerFocus = function onInnerFocus(value, context) {
      var _props$onFocus;
      setPopupVisible(true);
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, _objectSpread$C(_objectSpread$C({}, context), {}, {
        value: value
      }));
      var timer = setTimeout(function () {
        var _optionListRef$curren;
        (_optionListRef$curren = optionListRef.current) === null || _optionListRef$curren === void 0 || _optionListRef$curren.addKeyboardListener();
        clearTimeout(timer);
      }, 0);
    };
    var onInnerBlur = function onInnerBlur(value, context) {
      var _props$onBlur;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, _objectSpread$C(_objectSpread$C({}, context), {}, {
        value: value
      }));
    };
    var onInnerEnter = function onInnerEnter(value, context) {
      var _props$onEnter;
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, _objectSpread$C(_objectSpread$C({}, context), {}, {
        value: value
      }));
    };
    var onInnerCompositionend = function onInnerCompositionend(value, context) {
      var _props$onCompositione;
      (_props$onCompositione = props.onCompositionend) === null || _props$onCompositione === void 0 || _props$onCompositione.call(props, _objectSpread$C(_objectSpread$C({}, context), {}, {
        value: value
      }));
    };
    var onInnerCompositionstart = function onInnerCompositionstart(value, context) {
      var _props$onCompositions;
      (_props$onCompositions = props.onCompositionstart) === null || _props$onCompositions === void 0 || _props$onCompositions.call(props, _objectSpread$C(_objectSpread$C({}, context), {}, {
        value: value
      }));
    };
    var onInnerSelect = function onInnerSelect(value, context) {
      var _props$onSelect;
      if (props.readonly || props.disabled) return;
      setPopupVisible(false);
      setTValue(value, context);
      (_props$onSelect = props.onSelect) === null || _props$onSelect === void 0 || _props$onSelect.call(props, value, context);
    };
    var onPopupVisibleChange = function onPopupVisibleChange(visible, _ref) {
      var trigger = _ref.trigger;
      if (trigger !== "trigger-element-click") {
        setPopupVisible(visible);
      }
    };
    var triggerNode = props.triggerElement || props.children || /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$C({
      ref: inputRef,
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : global.placeholder,
      tips: props.tips,
      status: props.status,
      readonly: props.readonly,
      disabled: props.disabled,
      clearable: props.clearable,
      autofocus: props.autofocus,
      borderless: props.borderless,
      onClear: props.onClear,
      onChange: onInputChange,
      onFocus: onInnerFocus,
      onBlur: onInnerBlur,
      onEnter: onInnerEnter,
      onCompositionend: onInnerCompositionend,
      onCompositionstart: onInnerCompositionstart
    }, innerInputProps));
    var listContent = Array.isArray(props.options) && /* @__PURE__ */React__default["default"].createElement(OptionsList, {
      ref: optionListRef,
      value: tValue,
      options: props.options,
      size: props.size,
      sizeClassNames: sizeClassNames,
      onSelect: onInnerSelect,
      popupVisible: popupVisible,
      highlightKeyword: props.highlightKeyword,
      filterable: props.filterable,
      filter: props.filter,
      empty: props.empty
    });
    var topContent = props.panelTopContent;
    var bottomContent = props.panelBottomContent;
    var panelContent = topContent || listContent || bottomContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-auto-complete__panel")
    }, topContent, listContent, bottomContent) : null;
    var popupProps = _objectSpread$C(_objectSpread$C({}, props.popupProps), {}, {
      overlayInnerStyle: getOverlayStyle,
      overlayInnerClassName: popupInnerClasses,
      overlayClassName: popupClasses
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes),
      style: props.style
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$C({
      ref: popupRef,
      visible: popupVisible,
      onVisibleChange: onPopupVisibleChange,
      trigger: "focus",
      placement: "bottom-left",
      hideEmptyPopup: true,
      content: panelContent
    }, popupProps), triggerNode));
  });
  AutoComplete$1.displayName = "AutoComplete";

  var AutoComplete = AutoComplete$1;
  var HighlightOption = HighlightOption$1;

  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
    var BooleanIsFalseExceptZero = 0;
    if (multiple || !value && value !== BooleanIsFalseExceptZero) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);
    if (!(node && node.length)) {
      return value;
    }
    var path = node && node[0].getPath();
    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }
    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    return value.map(function (item) {
      var _node2$;
      var node2 = treeStore.getNodes(item);
      return showAllLevels ? getFullPathLabel(node2 === null || node2 === void 0 ? void 0 : node2[0]) : node2 === null || node2 === void 0 || (_node2$ = node2[0]) === null || _node2$ === void 0 ? void 0 : _node2$.label;
    }).filter(function (item) {
      return !!item;
    });
  }
  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function getFullPathLabel(node) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
    return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {
      return node2.label;
    }).join(separator);
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];
    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof$3(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof$3(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }
    return treeValue;
  };
  var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }
    if (multiple) {
      return value.map(function (item) {
        return item[item.length - 1];
      });
    }
    return value[value.length - 1];
  };
  function isEmptyValues(value) {
    if (typeof value === "number" && !isNaN(value)) return false;
    return isEmpty(value);
  }
  function isValueInvalid(value, cascaderContext) {
    var multiple = cascaderContext.multiple,
      showAllLevels = cascaderContext.showAllLevels;
    return multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels;
  }

  function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$2({}, STATUS.disabled, disabled)];
  }
  function getNodeStatusClass(node, STATUS, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      value = cascaderContext.value,
      max = cascaderContext.max,
      inputVal = cascaderContext.inputVal;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [_defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.selected, !isDisabled && isSelected), STATUS.expanded, !isDisabled && !inputVal && expandedActive), STATUS.disabled, isDisabled)];
  }
  function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], _defineProperty$2(_defineProperty$2({}, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), "".concat(prefix, "-cascader__item--leaf"), node.isLeaf())]);
  }
  function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon"), "".concat(prefix, "-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
  }

  function ownKeys$B(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$B(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$B(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$B(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Item = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var node = props.node,
      optionChild = props.optionChild,
      multiple = props.cascaderContext.multiple,
      _onClick = props.onClick,
      _onChange = props.onChange,
      _onMouseEnter = props.onMouseEnter,
      cascaderContext = props.cascaderContext;
    var _useConfig = useConfig$2(),
      prefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: TdChevronRightIcon
      }),
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var COMPONENT_NAME = "".concat(prefix, "-cascader__item");
    var _useDomRefCallback = useDomRefCallback(),
      _useDomRefCallback2 = _slicedToArray$1(_useDomRefCallback, 2);
      _useDomRefCallback2[0];
      _useDomRefCallback2[1];
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS,
      SIZE = _useCommonClassName.SIZE;
    var itemClass = React.useMemo(function () {
      return classNames$1(getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext));
    }, [prefix, node, SIZE, STATUS, cascaderContext]);
    var iconClass = React.useMemo(function () {
      return classNames$1(getCascaderItemIconClass(prefix, node, STATUS, cascaderContext));
    }, [prefix, node, STATUS, cascaderContext]);
    var RenderLabelInner = function RenderLabelInner(node2, cascaderContext2) {
      var inputVal = cascaderContext2.inputVal;
      if (!inputVal && optionChild) {
        return optionChild;
      }
      var labelText = inputVal ? getFullPathLabel(node2) : node2.label;
      if (inputVal) {
        var texts = labelText.split(inputVal);
        var doms = [];
        for (var index = 0; index < texts.length; index++) {
          doms.push(/* @__PURE__ */React__default["default"].createElement("span", {
            key: index
          }, texts[index]));
          if (index === texts.length - 1) break;
          doms.push(/* @__PURE__ */React__default["default"].createElement("span", {
            key: "".concat(index, "filter"),
            className: "".concat(COMPONENT_NAME, "-label--filter")
          }, inputVal));
        }
        return doms;
      }
      return labelText;
    };
    var RenderLabelContent = function RenderLabelContent(node2, cascaderContext2) {
      var label = RenderLabelInner(node2, cascaderContext2);
      var labelCont = /* @__PURE__ */React__default["default"].createElement("span", {
        title: cascaderContext2.inputVal ? getFullPathLabel(node2) : node2.label,
        className: classNames$1("".concat(COMPONENT_NAME, "-label"), "".concat(COMPONENT_NAME, "-label--ellipsis")),
        role: "label"
      }, label);
      return labelCont;
    };
    var RenderCheckBox = function RenderCheckBox(node2, cascaderContext2) {
      var checkProps = cascaderContext2.checkProps,
        value = cascaderContext2.value,
        max = cascaderContext2.max,
        inputVal = cascaderContext2.inputVal;
      var label = RenderLabelInner(node2, cascaderContext2);
      return /* @__PURE__ */React__default["default"].createElement(Checkbox, _objectSpread$B({
        checked: node2.checked,
        indeterminate: node2.indeterminate,
        disabled: node2.isDisabled() || value && value.length >= max && max !== 0,
        name: String(node2.value),
        stopLabelTrigger: !!node2.children,
        title: inputVal ? getFullPathLabel(node2) : node2.label,
        onChange: function onChange() {
          _onChange(node2);
        }
      }, checkProps), label);
    };
    var isFiltering = React.useMemo(function () {
      return Boolean(cascaderContext.filterable) || isFunction$1(cascaderContext.filter);
    }, [cascaderContext.filterable, cascaderContext.filter]);
    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: ref,
      className: itemClass,
      onClick: function onClick(e) {
        var _e$nativeEvent, _e$nativeEvent$stopIm;
        e.stopPropagation();
        e === null || e === void 0 || (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 || (_e$nativeEvent$stopIm = _e$nativeEvent.stopImmediatePropagation) === null || _e$nativeEvent$stopIm === void 0 || _e$nativeEvent$stopIm.call(_e$nativeEvent);
        if (multiple && cascaderContext.inputVal && isFiltering) return;
        _onClick(node);
      },
      onMouseEnter: function onMouseEnter(e) {
        e.stopPropagation();
        if (cascaderContext.inputVal && isFiltering) return;
        _onMouseEnter(node);
      }
    }, multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), !cascaderContext.inputVal && node.children && (node.loading ? /* @__PURE__ */React__default["default"].createElement(Loading, {
      className: iconClass,
      loading: true,
      size: "small"
    }) : /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, {
      className: iconClass
    })));
  });

  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      setTreeNodes = cascaderContext.setTreeNodes,
      setExpend = cascaderContext.setExpend,
      value = cascaderContext.value,
      max = cascaderContext.max,
      valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;
    if (propsTrigger === trigger && node.children !== null) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);
      if (multiple) {
        setExpend(expanded);
      }
    }
    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.checked);
      var _checked = _slicedToArray$1(checked, 1),
        value2 = _checked[0];
      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "check", node.getModel());
      if (!checkStrictly || propsTrigger === "hover") {
        setVisible(false, {});
      }
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
      max = cascaderContext.max,
      inputVal = cascaderContext.inputVal,
      multiple = cascaderContext.multiple,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      treeNodes = cascaderContext.treeNodes,
      treeStore = cascaderContext.treeStore,
      valueType = cascaderContext.valueType;
    if (!node || disabled || node.disabled) {
      return;
    }
    var checked = node.setChecked(!node.isChecked());
    if (isNumber(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }
    if (checked.length > max && isNumber(max) && max > 0) {
      return;
    }
    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }
    if (!multiple) {
      setVisible(false, {});
    }
    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });
    if (inputVal && isSelectAll) {
      setVisible(false, {});
    }
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, node.checked ? "uncheck" : "check", node.getModel());
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
      multiple = cascaderContext.multiple,
      setExpend = cascaderContext.setExpend,
      setValue = cascaderContext.setValue,
      treeStore = cascaderContext.treeStore;
    var expanded = treeStore.getExpanded();
    setTimeout(function () {
      treeStore.replaceExpanded(expanded);
      treeStore.refreshNodes();
    }, 0);
    setVisible(false, {});
    if (multiple) {
      setExpend([]);
    }
    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, index, onRemove) {
    var disabled = cascaderContext.disabled,
      setValue = cascaderContext.setValue,
      value = cascaderContext.value,
      valueType = cascaderContext.valueType,
      treeStore = cascaderContext.treeStore;
    if (disabled) return;
    var newValue = cloneDeep(value);
    var res = newValue.splice(index, 1);
    var node = treeStore.getNodes(res[0])[0];
    var checked = node.setChecked(!node.isChecked());
    if (valueType === "single") {
      setValue(newValue, "uncheck", node.getModel());
    } else {
      var resValue = checked.map(function (val) {
        return treeStore.getNode(val).getPath().map(function (item) {
          return item.value;
        });
      });
      setValue(resValue, "uncheck", node.getModel());
    }
    if (isFunction$1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter, checkStrictly) {
    if (!treeStore) return;
    var nodes = [];
    if (inputVal) {
      var filterMethods = function filterMethods(node) {
        if (!checkStrictly && !node.isLeaf()) return;
        if (isFunction$1(filter)) {
          return filter("".concat(inputVal), node);
        }
        var fullPathLabel = getFullPathLabel(node, "");
        return fullPathLabel.indexOf("".concat(inputVal)) > -1;
      };
      nodes = treeStore.nodes.filter(filterMethods);
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }
    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;
    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();
      var _treeValue = _slicedToArray$1(treeValue, 1),
        val = _treeValue[0];
      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);
        if (!node) {
          treeStore.refreshNodes();
          return;
        }
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }
    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }
    treeStore.refreshNodes();
  };

  var Panel$1 = function Panel(props) {
    var cascaderContext = props.cascaderContext,
      option = props.option;
    var panels = React.useMemo(function () {
      return getPanels(cascaderContext.treeNodes);
    }, [cascaderContext.treeNodes]);
    var handleExpand = function handleExpand(node, trigger) {
      var propsTrigger = props.trigger,
        cascaderContext2 = props.cascaderContext;
      expendClickEffect(propsTrigger, trigger, node, cascaderContext2);
    };
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("cascader"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      global = _useLocaleReceiver2[0];
    var COMPONENT_NAME = "".concat(classPrefix, "-cascader");
    var renderItem = function renderItem(node, index) {
      return /* @__PURE__ */React__default["default"].createElement(Item, {
        key: index,
        node: node,
        optionChild: node.data.content || parseTNode(option, {
          item: node.data,
          index: index,
          context: {
            node: node
          }
        }),
        cascaderContext: cascaderContext,
        onClick: function onClick() {
          handleExpand(node, "click");
        },
        onMouseEnter: function onMouseEnter() {
          handleExpand(node, "hover");
        },
        onChange: function onChange() {
          valueChangeEffect(node, cascaderContext);
        }
      });
    };
    var renderList = function renderList(treeNodes) {
      var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
      return /* @__PURE__ */React__default["default"].createElement("ul", {
        className: classNames$1("".concat(COMPONENT_NAME, "__menu"), "narrow-scrollbar", _defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME, "__menu--segment"), segment), "".concat(COMPONENT_NAME, "__menu--filter"), isFilter)),
        key: key
      }, treeNodes.map(function (node, index) {
        return renderItem(node, index);
      }));
    };
    var renderPanels = function renderPanels() {
      var _props$cascaderContex = props.cascaderContext,
        inputVal = _props$cascaderContex.inputVal,
        treeNodes = _props$cascaderContex.treeNodes;
      return inputVal ? renderList(treeNodes, true) : panels.map(function (treeNodes2, index) {
        return renderList(treeNodes2, false, index !== panels.length - 1, "".concat(COMPONENT_NAME, "__menu").concat(index));
      });
    };
    var content;
    if (props.loading) {
      var _props$loadingText;
      content = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(COMPONENT_NAME, "__panel--empty")
      }, (_props$loadingText = props.loadingText) !== null && _props$loadingText !== void 0 ? _props$loadingText : global.loadingText);
    } else {
      var _props$empty;
      content = panels !== null && panels !== void 0 && panels.length ? renderPanels() : /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(COMPONENT_NAME, "__panel--empty")
      }, (_props$empty = props.empty) !== null && _props$empty !== void 0 ? _props$empty : global.empty);
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(COMPONENT_NAME, "__panel"), _defineProperty$2({}, "".concat(COMPONENT_NAME, "--normal"), panels.length && !props.loading), props.className),
      style: props.style
    }, content);
  };

  var cascaderDefaultProps = {
    borderless: false,
    checkStrictly: false,
    clearable: false,
    filterable: false,
    lazy: true,
    loading: false,
    max: 0,
    minCollapsedNum: 0,
    multiple: false,
    options: [],
    placeholder: void 0,
    readonly: false,
    reserveKeyword: false,
    showAllLevels: true,
    size: "medium",
    status: "default",
    trigger: "click",
    defaultValue: [],
    valueMode: "onlyLeaf",
    valueType: "single"
  };

  function ownKeys$A(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$A(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$A(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$A(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useCascaderContext = function useCascaderContext(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerValue = _useControlled2[0],
      setInnerValue = _useControlled2[1];
    var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      innerPopupVisible = _useControlled4[0],
      setPopupVisible = _useControlled4[1];
    var _useState = React.useState(""),
      _useState2 = _slicedToArray$1(_useState, 2),
      inputVal = _useState2[0],
      setInputVal = _useState2[1];
    var _useState3 = React.useState(null),
      _useState4 = _slicedToArray$1(_useState3, 2),
      treeStore = _useState4[0],
      setTreeStore = _useState4[1];
    var _useState5 = React.useState([]),
      _useState6 = _slicedToArray$1(_useState5, 2),
      treeNodes = _useState6[0],
      setTreeNodes = _useState6[1];
    var _useState7 = React.useState([]),
      _useState8 = _slicedToArray$1(_useState7, 2),
      expend = _useState8[0],
      setExpend = _useState8[1];
    var _useState9 = React.useState(void 0),
      _useState0 = _slicedToArray$1(_useState9, 2),
      scopeVal = _useState0[0],
      setScopeVal = _useState0[1];
    var cascaderContext = React.useMemo(function () {
      var size = props.size,
        checkStrictly2 = props.checkStrictly,
        lazy2 = props.lazy,
        multiple = props.multiple,
        filterable = props.filterable,
        clearable = props.clearable,
        checkProps = props.checkProps,
        max = props.max,
        disabled2 = props.disabled,
        showAllLevels = props.showAllLevels,
        minCollapsedNum = props.minCollapsedNum,
        valueType = props.valueType;
      return {
        value: scopeVal,
        size: size,
        checkStrictly: checkStrictly2,
        lazy: lazy2,
        multiple: multiple,
        filterable: filterable,
        clearable: clearable,
        checkProps: checkProps,
        max: max,
        disabled: disabled2,
        showAllLevels: showAllLevels,
        minCollapsedNum: minCollapsedNum,
        valueType: valueType,
        treeStore: treeStore,
        setValue: function setValue(val, source, node) {
          if (isEqual(val, scopeVal)) return;
          setInnerValue(val, {
            source: source,
            node: node
          });
        },
        visible: innerPopupVisible,
        setVisible: setPopupVisible,
        treeNodes: treeNodes,
        setTreeNodes: setTreeNodes,
        inputVal: inputVal,
        setInputVal: setInputVal,
        setExpend: setExpend
      };
    }, [props, scopeVal, innerPopupVisible, treeStore, treeNodes, inputVal, setInnerValue, setPopupVisible]);
    var isFilterable = React.useMemo(function () {
      return Boolean(props.filterable || isFunction$1(props.filter));
    }, [props.filterable, props.filter]);
    var disabled = props.disabled,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$keys = props.keys,
      keys = _props$keys === void 0 ? {} : _props$keys,
      _props$checkStrictly = props.checkStrictly,
      checkStrictly = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
      _props$lazy = props.lazy,
      lazy = _props$lazy === void 0 ? true : _props$lazy,
      load = props.load,
      _props$valueMode = props.valueMode,
      valueMode = _props$valueMode === void 0 ? "onlyLeaf" : _props$valueMode;
    var optionCurrent = React.useRef([]);
    React.useEffect(function () {
      if (!isEqual(optionCurrent.current, options)) {
        optionCurrent.current = options;
        handleTreeStore();
      }
    }, [options]);
    var handleTreeStore = function handleTreeStore() {
      if (!treeStore) {
        if (!options.length) return;
        var store = new TreeStore({
          keys: _objectSpread$A(_objectSpread$A({}, keys), {}, {
            children: typeof keys.children === "string" ? keys.children : "children"
          }),
          onLoad: function onLoad() {
            setTimeout(function () {
              store.refreshNodes();
              treeNodesEffect(inputVal, store, setTreeNodes, props.filter, checkStrictly);
            });
          }
        });
        store.append(options);
        setTreeStore(store);
      } else {
        treeStore.reload(options);
        treeStore.refreshNodes();
        treeStoreExpendEffect(treeStore, scopeVal, []);
        treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);
      }
    };
    React.useEffect(function () {
      if (!treeStore) return;
      var treeProps = {
        keys: _objectSpread$A(_objectSpread$A({}, keys), {}, {
          children: typeof keys.children === "string" ? keys.children : "children"
        }),
        checkable: true,
        expandMutex: true,
        expandParent: true,
        checkStrictly: checkStrictly,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      };
      treeStore.setConfig(treeProps);
    }, [checkStrictly, disabled, keys, lazy, load, valueMode, treeStore]);
    React.useEffect(function () {
      var setValue = cascaderContext.setValue,
        multiple = cascaderContext.multiple,
        _cascaderContext$valu = cascaderContext.valueType,
        valueType = _cascaderContext$valu === void 0 ? "single" : _cascaderContext$valu;
      if (isValueInvalid(innerValue, cascaderContext)) {
        setValue(multiple ? [] : "", "invalid-value");
      }
      if (!isEmptyValues(innerValue)) {
        setScopeVal(getCascaderValue(innerValue, valueType, multiple));
      } else {
        setScopeVal(multiple ? [] : "");
      }
    }, [innerValue]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeStoreExpendEffect(treeStore, scopeVal, expend);
    }, [treeStore, scopeVal, expend]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);
    }, [inputVal, treeStore, props.filter, checkStrictly]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeStore.replaceChecked(getTreeValue(scopeVal));
    }, [options, scopeVal, treeStore, cascaderContext.multiple]);
    React.useEffect(function () {
      if (!innerPopupVisible && isFilterable) {
        setInputVal("");
      }
    }, [innerPopupVisible, isFilterable]);
    React.useEffect(function () {
      var inputVal2 = cascaderContext.inputVal,
        treeStore2 = cascaderContext.treeStore,
        setTreeNodes2 = cascaderContext.setTreeNodes;
      treeNodesEffect(inputVal2, treeStore2, setTreeNodes2, props.filter, checkStrictly);
    }, [inputVal, scopeVal]);
    var getCascaderItems = function getCascaderItems(arrValue, valueType, multiple) {
      var treeStore2 = cascaderContext.treeStore;
      var optionsData = [];
      if (!treeStore2) return optionsData;
      if (valueType === "full") {
        if (multiple) {
          arrValue.forEach(function (value) {
            if (isArray$1(value) && value.length) {
              var nodeValue = value[value.length - 1];
              var _ref = treeStore2.getNodes(nodeValue) || [],
                _ref2 = _slicedToArray$1(_ref, 1),
                node = _ref2[0];
              (node === null || node === void 0 ? void 0 : node.data) && optionsData.push(node.data);
            }
          });
        } else if (isArray$1(arrValue) && arrValue.length) {
          var nodeValue = arrValue[arrValue.length - 1];
          var _ref3 = treeStore2.getNodes(nodeValue) || [],
            _ref4 = _slicedToArray$1(_ref3, 1),
            node = _ref4[0];
          (node === null || node === void 0 ? void 0 : node.data) && optionsData.push(node.data);
        }
      } else if (valueType === "single") {
        arrValue.forEach(function (value) {
          var _ref5 = treeStore2.getNodes(value) || [],
            _ref6 = _slicedToArray$1(_ref5, 1),
            node = _ref6[0];
          (node === null || node === void 0 ? void 0 : node.data) && optionsData.push(node.data);
        });
      }
      return optionsData;
    };
    return {
      cascaderContext: cascaderContext,
      isFilterable: isFilterable,
      innerValue: innerValue,
      getCascaderItems: getCascaderItems
    };
  };

  function ownKeys$z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Cascader$1 = function Cascader(originalProps) {
    var _props$popupProps;
    var props = useDefaultProps(originalProps, cascaderDefaultProps);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var _useLocaleReceiver = useLocaleReceiver("cascader"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      global = _useLocaleReceiver2[0];
    var COMPONENT_NAME = "".concat(classPrefix, "-cascader");
    var _useCascaderContext = useCascaderContext(props),
      cascaderContext = _useCascaderContext.cascaderContext,
      isFilterable = _useCascaderContext.isFilterable,
      innerValue = _useCascaderContext.innerValue,
      getCascaderItems = _useCascaderContext.getCascaderItems;
    var displayValue = React.useMemo(function () {
      return props.multiple ? getMultipleContent(cascaderContext) : getSingleContent(cascaderContext);
    }, [props.multiple, cascaderContext]);
    var panels = React.useMemo(function () {
      return getPanels(cascaderContext.treeNodes);
    }, [cascaderContext]);
    var inputPlaceholder = React.useMemo(function () {
      var _props$placeholder;
      return cascaderContext.visible && !props.multiple && getSingleContent(cascaderContext) || ((_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : global.placeholder);
    }, [props.placeholder, cascaderContext, props.multiple, global.placeholder]);
    var renderSuffixIcon = function renderSuffixIcon() {
      if (props.suffixIcon) {
        return props.suffixIcon;
      }
      var visible2 = cascaderContext.visible,
        disabled = cascaderContext.disabled;
      return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
        className: getFakeArrowIconClass(classPrefix, STATUS, cascaderContext),
        isActive: visible2,
        disabled: disabled
      });
    };
    var renderLabel = function renderLabel() {
      var label = parseTNode(props.label);
      if (props.multiple) return label;
      if (!label) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-tag-input__prefix")
      }, label);
    };
    var valueDisplayParams = React.useMemo(function () {
      var arrayValue = innerValue instanceof Array ? innerValue : [innerValue];
      var displayValue2 = props.multiple && props.minCollapsedNum ? arrayValue.slice(0, props.minCollapsedNum) : innerValue;
      var options = getCascaderItems(arrayValue, props.valueType, props.multiple);
      return {
        value: innerValue,
        selectedOptions: options,
        onClose: function onClose(index) {
          handleRemoveTagEffect(cascaderContext, index, props.onRemove);
        },
        displayValue: displayValue2
      };
    }, [cascaderContext, innerValue, props.multiple, props.minCollapsedNum, props.onRemove, getCascaderItems, props.valueType]);
    var renderValueDisplay = function renderValueDisplay() {
      return parseContentTNode(props.valueDisplay, valueDisplayParams);
    };
    var setVisible = cascaderContext.setVisible,
      visible = cascaderContext.visible,
      inputVal = cascaderContext.inputVal,
      setInputVal = cascaderContext.setInputVal;
    var updateScrollTop = function updateScrollTop(content) {
      var cascaderMenuList = content.querySelectorAll(".".concat(COMPONENT_NAME, "__menu"));
      requestAnimationFrame(function () {
        cascaderMenuList.forEach(function (menu) {
          var firstSelectedNode = (menu === null || menu === void 0 ? void 0 : menu.querySelector(".".concat(classPrefix, "-is-selected"))) || (menu === null || menu === void 0 ? void 0 : menu.querySelector(".".concat(classPrefix, "-is-expanded")));
          if (!firstSelectedNode || !menu) return;
          var nodeTop = firstSelectedNode.offsetTop;
          var nodeHeight = firstSelectedNode.offsetHeight;
          var menuHeight = menu.clientHeight;
          var currentScrollTop = menu.scrollTop;
          var nodeVisibleTop = nodeTop - currentScrollTop;
          var nodeVisibleBottom = nodeVisibleTop + nodeHeight;
          var isNodeFullyVisible = nodeVisibleTop >= 0 && nodeVisibleBottom <= menuHeight;
          if (isNodeFullyVisible) return;
          var targetScrollTop = currentScrollTop;
          if (nodeVisibleTop < 0) {
            targetScrollTop = nodeTop;
          } else if (nodeVisibleBottom > menuHeight) {
            targetScrollTop = nodeTop - menuHeight + nodeHeight;
          }
          var maxScrollTop = menu.scrollHeight - menuHeight;
          targetScrollTop = Math.max(0, Math.min(targetScrollTop, maxScrollTop));
          menu.scrollTop = targetScrollTop;
        });
      });
    };
    return /* @__PURE__ */React__default["default"].createElement(SelectInput, _objectSpread$z(_objectSpread$z({
      className: classNames$1(COMPONENT_NAME, props.className),
      style: props.style,
      value: displayValue,
      borderless: props.borderless,
      inputValue: visible ? inputVal : "",
      popupVisible: visible,
      allowInput: isFilterable,
      minCollapsedNum: props.minCollapsedNum,
      collapsedItems: props.collapsedItems,
      readonly: props.readonly,
      clearable: props.clearable,
      placeholder: inputPlaceholder,
      multiple: props.multiple,
      loading: props.loading,
      disabled: props.disabled,
      status: props.status,
      tips: props.tips,
      label: renderLabel(),
      valueDisplay: renderValueDisplay(),
      suffix: props.suffix,
      suffixIcon: renderSuffixIcon(),
      updateScrollTop: updateScrollTop,
      popupProps: _objectSpread$z(_objectSpread$z({}, props.popupProps), {}, {
        overlayInnerStyle: panels.length && !props.loading ? {
          width: "auto"
        } : {},
        overlayClassName: ["".concat(classPrefix, "-cascader__popup"), (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayClassName]
      }),
      inputProps: _objectSpread$z({
        size: props.size
      }, props.inputProps),
      tagInputProps: _objectSpread$z({
        size: props.size
      }, props.tagInputProps),
      tagProps: _objectSpread$z({}, props.tagProps),
      onInputChange: function onInputChange(value, ctx) {
        var _props$selectInputPro, _props$selectInputPro2;
        if (!visible || (ctx === null || ctx === void 0 ? void 0 : ctx.trigger) === "clear") {
          return;
        }
        setInputVal("".concat(value));
        props === null || props === void 0 || (_props$selectInputPro = props.selectInputProps) === null || _props$selectInputPro === void 0 || (_props$selectInputPro2 = _props$selectInputPro.onInputChange) === null || _props$selectInputPro2 === void 0 || _props$selectInputPro2.call(_props$selectInputPro, value, ctx);
      },
      onTagChange: function onTagChange(val, ctx) {
        var _props$selectInputPro3, _props$selectInputPro4;
        if (ctx.trigger === "enter" || ctx.trigger === "clear") {
          return;
        }
        handleRemoveTagEffect(cascaderContext, ctx.index, props.onRemove);
        props === null || props === void 0 || (_props$selectInputPro3 = props.selectInputProps) === null || _props$selectInputPro3 === void 0 || (_props$selectInputPro4 = _props$selectInputPro3.onTagChange) === null || _props$selectInputPro4 === void 0 || _props$selectInputPro4.call(_props$selectInputPro3, val, ctx);
      },
      onPopupVisibleChange: function onPopupVisibleChange(val, context) {
        var _props$selectInputPro5, _props$selectInputPro6;
        if (props.disabled) {
          return;
        }
        setVisible(val, context);
        props === null || props === void 0 || (_props$selectInputPro5 = props.selectInputProps) === null || _props$selectInputPro5 === void 0 || (_props$selectInputPro6 = _props$selectInputPro5.onPopupVisibleChange) === null || _props$selectInputPro6 === void 0 || _props$selectInputPro6.call(_props$selectInputPro5, val, context);
      },
      onBlur: function onBlur(val, context) {
        var _props$onBlur, _props$selectInputPro7, _props$selectInputPro8;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
          value: cascaderContext.value,
          e: context.e,
          inputValue: inputVal
        });
        props === null || props === void 0 || (_props$selectInputPro7 = props.selectInputProps) === null || _props$selectInputPro7 === void 0 || (_props$selectInputPro8 = _props$selectInputPro7.onBlur) === null || _props$selectInputPro8 === void 0 || _props$selectInputPro8.call(_props$selectInputPro7, val, context);
      },
      onFocus: function onFocus(val, context) {
        var _props$onFocus, _props$selectInputPro9, _props$selectInputPro0;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
          value: cascaderContext.value,
          e: context.e
        });
        props === null || props === void 0 || (_props$selectInputPro9 = props.selectInputProps) === null || _props$selectInputPro9 === void 0 || (_props$selectInputPro0 = _props$selectInputPro9.onFocus) === null || _props$selectInputPro0 === void 0 || _props$selectInputPro0.call(_props$selectInputPro9, val, context);
      },
      onClear: function onClear(context) {
        var _props$selectInputPro1, _props$selectInputPro10, _props$onClear;
        closeIconClickEffect(cascaderContext);
        props === null || props === void 0 || (_props$selectInputPro1 = props.selectInputProps) === null || _props$selectInputPro1 === void 0 || (_props$selectInputPro10 = _props$selectInputPro1.onClear) === null || _props$selectInputPro10 === void 0 || _props$selectInputPro10.call(_props$selectInputPro1, context);
        (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, context);
      }
    }, omit$2(props.selectInputProps, ["onTagChange", "onInputChange", "onPopupVisibleChange", "onBlur", "onFocus", "onClear"])), {}, {
      panel: /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, props.panelTopContent && parseTNode(props.panelTopContent), /* @__PURE__ */React__default["default"].createElement(Panel$1, _objectSpread$z({
        cascaderContext: cascaderContext
      }, pick$1(props, ["trigger", "onChange", "empty", "loading", "loadingText", "option"]))), props.panelBottomContent && parseTNode(props.panelBottomContent))
    }));
  };
  Cascader$1.displayName = "Cascader";

  function ownKeys$y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CascaderPanel$1 = function CascaderPanel(originalProps) {
    var props = useDefaultProps(originalProps, cascaderDefaultProps);
    var _useCascaderContext = useCascaderContext(props),
      cascaderContext = _useCascaderContext.cascaderContext;
    return /* @__PURE__ */React__default["default"].createElement(Panel$1, _objectSpread$y({
      className: classNames$1(props.className),
      style: props.style,
      cascaderContext: cascaderContext
    }, pick$1(props, ["trigger", "onChange", "empty", "option"])));
  };
  CascaderPanel$1.displayName = "CascaderPanel";

  var Cascader = Cascader$1;
  var CascaderPanel = CascaderPanel$1;

  var useUpdateEffect = function useUpdateEffect(callback, dependency) {
    var isFirstRender = useIsFirstRender();
    React.useEffect(function () {
      if (isFirstRender) return;
      return callback();
    }, dependency);
  };

  function useSingleValue(props) {
    var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];
    var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.multiple ? false : props.enableTimePicker
      }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat;
    if (props.enableTimePicker) {
      if (!extractTimeFormat(format)) log.error("DatePicker", "format: ".concat(format, " is invalid\uFF0Ctime selection must include time formatting HH:mm:ss"));
    }
    var _useState = React.useState(function () {
        return formatTime(props.multiple ? value === null || value === void 0 ? void 0 : value[0] : value, format, timeFormat, props.defaultTime);
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      time = _useState2[0],
      setTime = _useState2[1];
    var _useState3 = React.useState(function () {
        return parseToDayjs(props.multiple ? value === null || value === void 0 ? void 0 : value[0] : value, format).month();
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      month = _useState4[0],
      setMonth = _useState4[1];
    var _useState5 = React.useState(function () {
        return parseToDayjs(props.multiple ? value === null || value === void 0 ? void 0 : value[0] : value, format).year();
      }),
      _useState6 = _slicedToArray$1(_useState5, 2),
      year = _useState6[0],
      setYear = _useState6[1];
    var _useState7 = React.useState(function () {
        return formatDate(props.multiple ? value === null || value === void 0 ? void 0 : value[0] : value, {
          format: format
        });
      }),
      _useState8 = _slicedToArray$1(_useState7, 2),
      cacheValue = _useState8[0],
      setCacheValue = _useState8[1];
    React.useEffect(function () {
      if (!value) {
        setCacheValue("");
        return;
      }
      if (!isValidDate(value, format)) return;
      setCacheValue(formatDate(value, {
        format: format
      }));
      setTime(formatTime(value, format, timeFormat, props.defaultTime));
    }, [value]);
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      cacheValue: cacheValue,
      onChange: onChange,
      setYear: setYear,
      setMonth: setMonth,
      setTime: setTime,
      setCacheValue: setCacheValue
    };
  }

  function ownKeys$x(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$x(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$x(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$x(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useSingleInput(props) {
    var _props$placeholder, _props$suffixIcon, _props$popupProps$ove, _props$popupProps2, _props$popupProps3;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;
    var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: TdCalendarIcon
      }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;
    var name = "".concat(classPrefix, "-date-picker");
    var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.multiple ? false : props.enableTimePicker
      }),
      format = _getDefaultFormat.format,
      valueType = _getDefaultFormat.valueType,
      timeFormat = _getDefaultFormat.timeFormat;
    var inputRef = React.useRef(null);
    var _useSingleValue = useSingleValue(props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      setTime = _useSingleValue.setTime,
      month = _useSingleValue.month,
      setMonth = _useSingleValue.setMonth,
      year = _useSingleValue.year,
      setYear = _useSingleValue.setYear,
      cacheValue = _useSingleValue.cacheValue,
      setCacheValue = _useSingleValue.setCacheValue;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];
    var _useState5 = React.useState(function () {
        return formatDate(value, {
          format: format
        });
      }),
      _useState6 = _slicedToArray$1(_useState5, 2),
      inputValue = _useState6[0],
      setInputValue = _useState6[1];
    var handlePopupInvisible = function handlePopupInvisible() {
      var _props$popupProps, _props$popupProps$onV;
      setPopupVisible(false);
      (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 || (_props$popupProps$onV = _props$popupProps.onVisibleChange) === null || _props$popupProps$onV === void 0 || _props$popupProps$onV.call(_props$popupProps, false, {});
    };
    var inputProps = _objectSpread$x(_objectSpread$x({}, props.inputProps), {}, {
      ref: inputRef,
      size: props.size,
      clearable: props.clearable,
      prefixIcon: props.prefixIcon,
      allowInput: props.allowInput,
      placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : globalDatePickerConfig.placeholder[props.mode],
      suffixIcon: (_props$suffixIcon = props.suffixIcon) !== null && _props$suffixIcon !== void 0 ? _props$suffixIcon : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null),
      className: classNames$1(_defineProperty$2({}, "".concat(name, "__input--placeholder"), isHoverCell)),
      onClear: function onClear(_ref) {
        var e = _ref.e;
        e.stopPropagation();
        handlePopupInvisible();
        onChange("", {
          dayjsValue: dayjs(),
          trigger: "clear"
        });
      },
      onBlur: function onBlur(val, _ref2) {
        var _props$onBlur;
        var e = _ref2.e;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
          value: val,
          e: e
        });
      },
      onFocus: function onFocus(_, _ref3) {
        var _props$onFocus;
        var e = _ref3.e;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
          value: value,
          e: e
        });
      },
      onChange: function onChange(val) {
        setInputValue(val);
        if (!isValidDate(val, format)) return;
        setCacheValue(val);
        var newMonth = parseToDayjs(val, format).month();
        var newYear = parseToDayjs(val, format).year();
        var newTime = formatTime(val, format, timeFormat, props.defaultTime);
        !Number.isNaN(newYear) && setYear(newYear);
        !Number.isNaN(newMonth) && setMonth(newMonth);
        !Number.isNaN(newTime) && setTime(newTime);
      },
      onEnter: function onEnter(val) {
        if (!val) {
          onChange("", {
            dayjsValue: dayjs(),
            trigger: "enter"
          });
          handlePopupInvisible();
          return;
        }
        if (!isValidDate(val, format) && !isValidDate(value, format)) return;
        handlePopupInvisible();
        if (isValidDate(val, format)) {
          onChange(formatDate(val, {
            format: format,
            targetFormat: valueType
          }), {
            dayjsValue: parseToDayjs(val, format),
            trigger: "enter"
          });
        } else if (isValidDate(value, format)) {
          setInputValue(formatDate(value, {
            format: format
          }));
        } else {
          setInputValue("");
        }
      }
    });
    var popupProps = _objectSpread$x(_objectSpread$x({
      expandAnimation: true
    }, props.popupProps), {}, {
      trigger: "mousedown",
      overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
        width: "auto"
      },
      overlayClassName: classNames$1((_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 ? void 0 : _props$popupProps3.overlayClassName, "".concat(name, "__panel-container")),
      onVisibleChange: function onVisibleChange(visible, context) {
        var _props$popupProps4, _props$popupProps4$on;
        if (props.disabled) return;
        (_props$popupProps4 = props.popupProps) === null || _props$popupProps4 === void 0 || (_props$popupProps4$on = _props$popupProps4.onVisibleChange) === null || _props$popupProps4$on === void 0 || _props$popupProps4$on.call(_props$popupProps4, visible, context);
        if (context.trigger === "trigger-element-mousedown") {
          return setPopupVisible(true);
        }
        setPopupVisible(visible);
      }
    });
    var tagInputProps = {};
    if (props.multiple) {
      var _props$placeholder2, _props$suffixIcon2;
      inputProps = omit$2(inputProps, ["ref", "className", "placeholder", "suffixIcon"]);
      popupProps = _objectSpread$x(_objectSpread$x({}, popupProps), {}, {
        trigger: "click"
      });
      tagInputProps = {
        clearable: props.clearable,
        placeholder: (_props$placeholder2 = props.placeholder) !== null && _props$placeholder2 !== void 0 ? _props$placeholder2 : globalDatePickerConfig.placeholder[props.mode],
        suffixIcon: (_props$suffixIcon2 = props.suffixIcon) !== null && _props$suffixIcon2 !== void 0 ? _props$suffixIcon2 : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null)
      };
    }
    React.useEffect(function () {
      if (!value) {
        setInputValue("");
        return;
      }
      if (!isValidDate(value, format)) return;
      setInputValue(formatDate(value, {
        format: format
      }));
    }, [value]);
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      inputProps: inputProps,
      popupProps: popupProps,
      tagInputProps: tagInputProps,
      inputRef: inputRef,
      cacheValue: cacheValue,
      onChange: onChange,
      setYear: setYear,
      setMonth: setMonth,
      setTime: setTime,
      setIsHoverCell: setIsHoverCell,
      setInputValue: setInputValue,
      setPopupVisible: setPopupVisible,
      setCacheValue: setCacheValue
    };
  }

  function ownKeys$w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$w(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SinglePanel = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;
    var panelName = "".concat(classPrefix, "-date-picker__panel");
    var props = useDefaultProps(originalProps, {
      mode: "date",
      enableTimePicker: false,
      presetsPlacement: "bottom"
    });
    var value = props.value,
      mode = props.mode,
      presetsPlacement = props.presetsPlacement,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
      needConfirm = props.needConfirm,
      style = props.style,
      className = props.className,
      year = props.year,
      month = props.month,
      onPanelClick = props.onPanelClick,
      disableTime = props.disableTime;
    var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      }),
      format = _getDefaultFormat.format;
    var disableDateOptions = useDisableDate({
      disableDate: props.disableDate,
      mode: props.mode,
      format: format
    });
    var disableTimeOptions = function disableTimeOptions(h, m, s, ms) {
      if (!isFunction$1(disableTime) || !value) {
        return {};
      }
      return disableTime(parseToDateTime(value, format, [h, m, s, ms]));
    };
    var tableData = useTableData(_objectSpread$w({
      value: value,
      year: year,
      month: month,
      mode: mode,
      start: value ? parseToDayjs(props.multiple ? value[0] : value, format).toDate() : void 0,
      firstDayOfWeek: firstDayOfWeek,
      multiple: props.multiple
    }, disableDateOptions));
    var panelContentProps = {
      mode: mode,
      value: value,
      year: year,
      month: month,
      format: format,
      firstDayOfWeek: firstDayOfWeek,
      tableData: tableData,
      popupVisible: props.popupVisible,
      multiple: props.multiple,
      time: props.time,
      timePickerProps: _objectSpread$w({
        disableTime: disableTimeOptions
      }, props.timePickerProps),
      enableTimePicker: props.enableTimePicker,
      onMonthChange: props.onMonthChange,
      onYearChange: props.onYearChange,
      onJumperClick: props.onJumperClick,
      onCellClick: props.onCellClick,
      onCellMouseEnter: props.onCellMouseEnter,
      onCellMouseLeave: props.onCellMouseLeave,
      onTimePickerChange: props.onTimePickerChange
    };
    var extraProps = {
      presets: props.presets,
      enableTimePicker: props.enableTimePicker,
      presetsPlacement: props.presetsPlacement,
      onPresetClick: props.onPresetClick,
      onConfirmClick: props.onConfirmClick,
      selectedValue: props.value,
      needConfirm: needConfirm
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(panelName, className, _defineProperty$2({}, "".concat(panelName, "--direction-row"), ["left", "right"].includes(presetsPlacement))),
      onClick: function onClick(e) {
        return onPanelClick === null || onPanelClick === void 0 ? void 0 : onPanelClick({
          e: e
        });
      }
    }, ["top", "left"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, _objectSpread$w({}, extraProps)) : null, /* @__PURE__ */React__default["default"].createElement(PanelContent, _objectSpread$w({}, panelContentProps)), ["bottom", "right"].includes(presetsPlacement) ? /* @__PURE__ */React__default["default"].createElement(ExtraContent, _objectSpread$w({}, extraProps)) : null);
  });
  SinglePanel.displayName = "SinglePanel";

  function ownKeys$v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$v(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DatePicker$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, datePickerDefaultProps);
    var className = props.className,
      style = props.style,
      disabled = props.disabled,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      firstDayOfWeek = props.firstDayOfWeek,
      presets = props.presets,
      defaultTime = props.defaultTime,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      needConfirm = props.needConfirm,
      multiple = props.multiple,
      label = props.label,
      disableTime = props.disableTime,
      onClear = props.onClear,
      onPick = props.onPick;
    var _useSingle = useSingleInput(props),
      inputValue = _useSingle.inputValue,
      popupVisible = _useSingle.popupVisible,
      inputProps = _useSingle.inputProps,
      popupProps = _useSingle.popupProps,
      tagInputProps = _useSingle.tagInputProps,
      value = _useSingle.value,
      year = _useSingle.year,
      month = _useSingle.month,
      time = _useSingle.time,
      onChange = _useSingle.onChange,
      setIsHoverCell = _useSingle.setIsHoverCell,
      setInputValue = _useSingle.setInputValue,
      setPopupVisible = _useSingle.setPopupVisible,
      setTime = _useSingle.setTime,
      setYear = _useSingle.setYear,
      setMonth = _useSingle.setMonth,
      cacheValue = _useSingle.cacheValue,
      setCacheValue = _useSingle.setCacheValue;
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      local = _useLocaleReceiver2[0];
    var _getDefaultFormat = getDefaultFormat({
        mode: mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: multiple ? false : enableTimePicker
      }),
      format = _getDefaultFormat.format,
      timeFormat = _getDefaultFormat.timeFormat,
      valueType = _getDefaultFormat.valueType;
    var onTriggerNeedConfirm = useLatest(function () {
      if (needConfirm || !enableTimePicker || popupVisible) return;
      var nextValue = formatDate(inputValue, {
        format: format
      });
      if (nextValue) {
        var currentValue = formatDate(value, {
          format: format
        });
        if (currentValue === nextValue) return;
        onChange(formatDate(inputValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: parseToDayjs(inputValue, format),
          trigger: "confirm"
        });
      } else {
        setInputValue(formatDate(value, {
          format: format
        }));
      }
    });
    var handlePopupInvisible = function handlePopupInvisible() {
      var _props$popupProps, _props$popupProps$onV;
      setPopupVisible(false);
      (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 || (_props$popupProps$onV = _props$popupProps.onVisibleChange) === null || _props$popupProps$onV === void 0 || _props$popupProps$onV.call(_props$popupProps, false, {});
    };
    useUpdateEffect(function () {
      onTriggerNeedConfirm.current();
    }, [popupVisible]);
    React.useEffect(function () {
      if (multiple) return;
      var dateValue = value && !isDate$3(value) && !["week", "quarter"].includes(props.mode) ? covertToDate(value, valueType) : value;
      setCacheValue(formatDate(dateValue, {
        format: format
      }));
      setInputValue(formatDate(dateValue, {
        format: format
      }));
      if (popupVisible) {
        setYear(parseToDayjs(value, format).year());
        setMonth(parseToDayjs(value, format).month());
        setTime(formatTime(value, format, timeFormat, defaultTime));
      } else {
        setIsHoverCell(false);
      }
    }, [popupVisible]);
    function onCellMouseEnter(date) {
      if (multiple) return;
      setIsHoverCell(true);
      setInputValue(formatDate(date, {
        format: format
      }));
    }
    function onCellMouseLeave() {
      if (multiple) return;
      setIsHoverCell(false);
      setInputValue(formatDate(cacheValue, {
        format: format
      }));
    }
    function onCellClick(date) {
      onPick === null || onPick === void 0 || onPick(date);
      setIsHoverCell(false);
      if (mode === "date") {
        setYear(date.getFullYear());
        setMonth(date.getMonth());
      }
      if (enableTimePicker) {
        setCacheValue(formatDate(date, {
          format: format
        }));
        if (props.needConfirm) return;
        handlePopupInvisible();
        onChange(formatDate(date, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: parseToDayjs(date, format),
          trigger: "pick"
        });
      } else {
        if (multiple) {
          var newDate = processDate(date);
          onChange(newDate, {
            dayjsValue: parseToDayjs(date, format),
            trigger: "pick"
          });
          return;
        }
        handlePopupInvisible();
        onChange(formatDate(date, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: parseToDayjs(date, format),
          trigger: "pick"
        });
      }
    }
    var onJumperClick = React__default["default"].useCallback(function (_ref) {
      var trigger = _ref.trigger;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year, month);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      setYear(nextYear);
      setMonth(nextMonth);
    }, [year, month, mode, setYear, setMonth]);
    function onTimePickerChange(val) {
      setTime(val);
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs(inputValue, format).isValid() ? dayjs() : dayjs(inputValue, format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      setInputValue(formatDate(nextDate, {
        format: format
      }));
      setCacheValue(formatDate(nextDate, {
        format: format
      }));
      onPick === null || onPick === void 0 || onPick(nextDate);
    }
    function onConfirmClick(_ref2) {
      var _props$onConfirm;
      var e = _ref2.e;
      var nextValue = formatDate(inputValue, {
        format: format
      });
      props === null || props === void 0 || (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
        e: e,
        date: nextValue
      });
      handlePopupInvisible();
      if (nextValue) {
        onChange(formatDate(inputValue, {
          format: format,
          targetFormat: valueType
        }), {
          dayjsValue: parseToDayjs(inputValue, format),
          trigger: "confirm"
        });
      } else {
        setInputValue(formatDate(value, {
          format: format
        }));
      }
    }
    function onPresetClick(preset, context) {
      var _props$onPresetClick;
      var presetValue = preset;
      if (typeof preset === "function") {
        presetValue = preset();
      }
      var formattedPreset = formatDate(presetValue, {
        format: format,
        targetFormat: valueType
      });
      var formattedInput = formatDate(presetValue, {
        format: format
      });
      setInputValue(formattedInput);
      setCacheValue(formattedInput);
      setTime(formatTime(presetValue, format, timeFormat, props.defaultTime));
      setYear(parseToDayjs(presetValue, format).year());
      setMonth(parseToDayjs(presetValue, format).month());
      handlePopupInvisible();
      onChange(formattedPreset, {
        dayjsValue: parseToDayjs(presetValue, format),
        trigger: "preset"
      });
      (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
    }
    var onYearChange = React.useCallback(function (year2) {
      setYear(year2);
    }, []);
    var onMonthChange = React.useCallback(function (month2) {
      setMonth(month2);
    }, []);
    function processDate(date) {
      var _currentDate;
      var isSameDate;
      var currentValue = value || [];
      if (mode !== "week") isSameDate = currentValue.some(function (val) {
        return isSame(parseToDayjs(val, format).toDate(), date, mode, local.dayjsLocale);
      });else {
        isSameDate = currentValue.some(function (val) {
          return val === dayjs(date).locale(local.dayjsLocale).format(format);
        });
      }
      var currentDate;
      if (!isSameDate) {
        currentDate = currentValue.concat(formatDate(date, {
          format: format,
          targetFormat: valueType
        }));
      } else {
        currentDate = currentValue.filter(function (val) {
          return formatDate(val, {
            format: format,
            targetFormat: valueType
          }) !== formatDate(date, {
            format: format,
            targetFormat: valueType
          });
        });
      }
      return (_currentDate = currentDate) === null || _currentDate === void 0 ? void 0 : _currentDate.sort(function (a, b) {
        return dayjs(a).valueOf() - dayjs(b).valueOf();
      });
    }
    var onTagRemoveClick = function onTagRemoveClick(ctx) {
      if (["week", "quarter"].includes(props.mode)) {
        onChange === null || onChange === void 0 || onChange(ctx.value, {
          trigger: "tag-remove"
        });
        return;
      }
      var removeDate = dayjs(ctx.item).toDate();
      var newDate = processDate(removeDate);
      onChange === null || onChange === void 0 || onChange(newDate, {
        dayjsValue: parseToDayjs(removeDate, format),
        trigger: "tag-remove"
      });
    };
    var onTagClearClick = function onTagClearClick(_ref3) {
      var e = _ref3.e;
      e.stopPropagation();
      handlePopupInvisible();
      onChange([], {
        dayjsValue: dayjs(),
        trigger: "clear"
      });
      onClear === null || onClear === void 0 || onClear({
        e: e
      });
    };
    var panelProps = {
      value: cacheValue,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: multiple ? false : time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: multiple ? false : enableTimePicker,
      presetsPlacement: presetsPlacement,
      popupVisible: popupVisible,
      needConfirm: needConfirm,
      multiple: multiple,
      onCellClick: onCellClick,
      onCellMouseEnter: onCellMouseEnter,
      onCellMouseLeave: onCellMouseLeave,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      disableTime: disableTime
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-date-picker"), className),
      style: style,
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement(SelectInput, {
      disabled: disabled,
      value: inputValue,
      status: props.status,
      tips: props.tips,
      borderless: props.borderless,
      label: label,
      popupProps: popupProps,
      inputProps: inputProps,
      popupVisible: popupVisible,
      panel: /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$v({}, panelProps)),
      multiple: multiple,
      tagInputProps: _objectSpread$v({
        onRemove: onTagRemoveClick
      }, tagInputProps),
      onClear: onTagClearClick
    }));
  });
  DatePicker$1.displayName = "DatePicker";

  function ownKeys$u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$u(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DatePickerPanel$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, {
      mode: "date",
      defaultValue: "",
      needConfirm: true
    });
    var _useSingleValue = useSingleValue(props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      setTime = _useSingleValue.setTime,
      month = _useSingleValue.month,
      setMonth = _useSingleValue.setMonth,
      year = _useSingleValue.year,
      setYear = _useSingleValue.setYear,
      cacheValue = _useSingleValue.cacheValue,
      setCacheValue = _useSingleValue.setCacheValue;
    var className = props.className,
      style = props.style,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      firstDayOfWeek = props.firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      needConfirm = props.needConfirm,
      onPanelClick = props.onPanelClick,
      disableTime = props.disableTime;
    var _getDefaultFormat = getDefaultFormat({
        mode: mode,
        format: props.format,
        enableTimePicker: enableTimePicker
      }),
      format = _getDefaultFormat.format;
    function onCellClick(date, _ref) {
      var _props$onCellClick;
      var e = _ref.e;
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, {
        date: date,
        e: e
      });
      if (mode === "date") {
        setYear(date.getFullYear());
        setMonth(date.getMonth());
      }
      if (enableTimePicker) {
        setCacheValue(formatDate(date, {
          format: format
        }));
      } else {
        onChange(formatDate(date, {
          format: format
        }), {
          dayjsValue: parseToDayjs(date, format),
          trigger: "pick"
        });
      }
    }
    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger;
      var triggerMap = {
        prev: "arrow-previous",
        next: "arrow-next"
      };
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year, month);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      if (year !== nextYear) {
        var _props$onYearChange;
        (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 || _props$onYearChange.call(props, {
          year: nextYear,
          date: parseToDayjs(value, format).toDate(),
          trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
        });
      }
      if (month !== nextMonth) {
        var _props$onMonthChange;
        (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 || _props$onMonthChange.call(props, {
          month: nextMonth,
          date: parseToDayjs(value, format).toDate(),
          trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
        });
      }
      setYear(nextYear);
      setMonth(nextMonth);
    }
    function onTimePickerChange(val) {
      var _props$onTimeChange;
      setTime(val);
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs(cacheValue, format).isValid() ? dayjs() : dayjs(cacheValue, format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      setCacheValue(formatDate(nextDate, {
        format: format
      }));
      (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 || _props$onTimeChange.call(props, {
        time: val,
        date: parseToDayjs(value, format).toDate(),
        trigger: "time-hour"
      });
    }
    function onConfirmClick(_ref3) {
      var _props$onConfirm;
      var e = _ref3.e;
      onChange(formatDate(cacheValue, {
        format: format
      }), {
        dayjsValue: parseToDayjs(cacheValue, format),
        trigger: "confirm"
      });
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
        date: dayjs(value).toDate(),
        e: e
      });
    }
    function onPresetClick(presetValue, context) {
      var _props$onPresetClick;
      var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
      onChange(formatDate(presetVal, {
        format: format
      }), {
        dayjsValue: parseToDayjs(presetVal, format),
        trigger: "preset"
      });
      (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
    }
    function onYearChange(year2) {
      var _props$onYearChange2;
      setYear(year2);
      (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 || _props$onYearChange2.call(props, {
        year: year2,
        date: parseToDayjs(value, format).toDate(),
        trigger: "year-select"
      });
    }
    function onMonthChange(month2) {
      var _props$onMonthChange2;
      setMonth(month2);
      (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 || _props$onMonthChange2.call(props, {
        month: month2,
        date: parseToDayjs(value, format).toDate(),
        trigger: "month-select"
      });
    }
    var panelProps = {
      value: cacheValue,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      needConfirm: needConfirm,
      onCellClick: onCellClick,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      onPanelClick: onPanelClick,
      disableTime: disableTime
    };
    return /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$u({
      ref: ref,
      className: className,
      style: style
    }, panelProps));
  });
  DatePickerPanel$1.displayName = "DatePickerPanel";

  function ownKeys$t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$t(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DateRangePickerPanel$1 = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, {
      mode: "date",
      defaultValue: [],
      panelPreselection: true
    });
    var className = props.className,
      style = props.style,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      firstDayOfWeek = props.firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      presetsPlacement = props.presetsPlacement,
      panelPreselection = props.panelPreselection,
      onPanelClick = props.onPanelClick;
    var _useRangeValue = useRange$1(props),
      value = _useRangeValue.value,
      year = _useRangeValue.year,
      month = _useRangeValue.month,
      _useRangeValue$time = _useRangeValue.time,
      time = _useRangeValue$time === void 0 ? [] : _useRangeValue$time,
      onChange = _useRangeValue.onChange,
      setTime = _useRangeValue.setTime,
      setYear = _useRangeValue.setYear,
      setMonth = _useRangeValue.setMonth,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected,
      setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected,
      cacheValue = _useRangeValue.cacheValue,
      setCacheValue = _useRangeValue.setCacheValue;
    var _getDefaultFormat = getDefaultFormat({
        mode: mode,
        enableTimePicker: enableTimePicker,
        format: props.format
      }),
      format = _getDefaultFormat.format;
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];
    var _useState5 = React.useState([]),
      _useState6 = _slicedToArray$1(_useState5, 2),
      hoverValue = _useState6[0],
      setHoverValue = _useState6[1];
    var activeIndex = React.useMemo(function () {
      return isFirstValueSelected ? 1 : 0;
    }, [isFirstValueSelected]);
    function onCellMouseEnter(date) {
      setIsHoverCell(true);
      var nextValue = _toConsumableArray(hoverValue);
      nextValue[activeIndex] = formatDate(date, {
        format: format
      });
      setHoverValue(nextValue);
    }
    function onCellMouseLeave() {
      setIsHoverCell(false);
      setHoverValue(cacheValue);
    }
    function onCellClick(date, _ref) {
      var _props$onCellClick;
      var e = _ref.e,
        partial = _ref.partial;
      setIsSelected(true);
      var nextValue = _toConsumableArray(cacheValue);
      nextValue[activeIndex] = formatDate(date, {
        format: format
      });
      setCacheValue(nextValue);
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, {
        date: nextValue.map(function (v) {
          return dayjs(v).toDate();
        }),
        e: e,
        partial: activeIndex ? "end" : "start"
      });
      if (mode === "date") {
        var partialIndex = partial === "start" ? 0 : 1;
        var isAdditional = dayjs(date).month() !== month[partialIndex];
        if (isAdditional) {
          if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
          if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
        }
      }
      if (enableTimePicker) return;
      if (nextValue.length === 2 && isFirstValueSelected) {
        onChange(formatDate(nextValue, {
          format: format,
          autoSwap: true
        }), {
          dayjsValue: nextValue.map(function (v) {
            return parseToDayjs(v, format);
          }),
          trigger: "pick"
        });
        setIsFirstValueSelected(false);
      } else {
        setIsFirstValueSelected(true);
      }
    }
    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger,
        partial = _ref2.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      var triggerMap = {
        "-1": "arrow-previous",
        1: "arrow-next"
      };
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[mode] || 0;
      var current = new Date(year[partialIndex], month[partialIndex]);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = _toConsumableArray(year);
      nextYear[partialIndex] = next.getFullYear();
      var nextMonth = _toConsumableArray(month);
      nextMonth[partialIndex] = next.getMonth();
      var onlyYearSelect = ["year", "quarter", "month"].includes(mode);
      var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
      nextYear = correctedDate.nextYear;
      nextMonth = correctedDate.nextMonth;
      if (year.some(function (y) {
        return !nextYear.includes(y);
      })) {
        var _props$onYearChange;
        (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 || _props$onYearChange.call(props, {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.map(function (v) {
            return parseToDayjs(v, format).toDate();
          }),
          trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
        });
      }
      if (month.some(function (m) {
        return !nextMonth.includes(m);
      })) {
        var _props$onMonthChange;
        (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 || _props$onMonthChange.call(props, {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.map(function (v) {
            return parseToDayjs(v, format).toDate();
          }),
          trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
        });
      }
      setYear(nextYear);
      setMonth(nextMonth);
    }
    function onTimePickerChange(val) {
      var _props$onTimeChange;
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextInputValue = _toConsumableArray(cacheValue);
      var changedInputValue = cacheValue[activeIndex];
      var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      nextInputValue[activeIndex] = nextDate;
      var nextTime = _toConsumableArray(time);
      nextTime[activeIndex] = val;
      setTime(nextTime);
      setIsSelected(true);
      setCacheValue(formatDate(nextInputValue, {
        format: format
      }));
      (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 || _props$onTimeChange.call(props, {
        time: val,
        partial: activeIndex ? "end" : "start",
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "time-hour"
      });
    }
    function onConfirmClick(_ref3) {
      var _props$onConfirm;
      var e = _ref3.e;
      var nextValue = _toConsumableArray(cacheValue);
      if (nextValue.length === 2 && isFirstValueSelected) {
        onChange(formatDate(nextValue, {
          format: format,
          autoSwap: true
        }), {
          dayjsValue: nextValue.map(function (v) {
            return parseToDayjs(v, format);
          }),
          trigger: "confirm"
        });
        setYear(nextValue.map(function (v) {
          return dayjs(v, format).year();
        }));
        setMonth(nextValue.map(function (v) {
          return dayjs(v, format).month();
        }));
        setIsFirstValueSelected(false);
      } else {
        setIsFirstValueSelected(true);
      }
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        e: e
      });
    }
    function onPresetClick(presetValue, context) {
      var _props$onPresetClick;
      var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
      if (!Array.isArray(presetVal)) {
        log.error("DateRangePickerPanel", "preset: ".concat(presetValue, " must be Array!"));
      } else {
        onChange(formatDate(presetVal, {
          format: format,
          autoSwap: true
        }), {
          dayjsValue: presetVal.map(function (p) {
            return parseToDayjs(p, format);
          }),
          trigger: "preset"
        });
      }
      (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
    }
    function onYearChange(nextVal, _ref4) {
      var _props$onYearChange2;
      var partial = _ref4.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;
      var nextYear = _toConsumableArray(year);
      nextYear[partialIndex] = nextVal;
      var nextMonth = _toConsumableArray(month);
      nextYear[partialIndex] = nextVal;
      var onlyYearSelect = ["year", "quarter", "month"].includes(mode);
      var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
      nextYear = correctedDate.nextYear;
      nextMonth = correctedDate.nextMonth;
      setYear(nextYear);
      !onlyYearSelect && setMonth(nextMonth);
      (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 || _props$onYearChange2.call(props, {
        partial: partial,
        year: nextYear[partialIndex],
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "year-select"
      });
    }
    function onMonthChange(nextVal, _ref5) {
      var _props$onMonthChange2;
      var partial = _ref5.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (enableTimePicker) partialIndex = activeIndex;
      var nextMonth = _toConsumableArray(month);
      nextMonth[partialIndex] = nextVal;
      if (year[0] === year[1]) {
        if (partialIndex === 0) {
          if (nextMonth[1] <= nextMonth[0]) {
            nextMonth[1] = nextMonth[0] + 1;
            if (nextMonth[1] === 12) {
              nextMonth[1] = 0;
              setYear(function (currentYear) {
                return [currentYear[0], currentYear[1] + 1];
              });
            }
          }
        }
        if (partialIndex === 1) {
          nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
          if (nextMonth[0] >= nextMonth[1]) {
            nextMonth[0] -= 1;
            if (nextMonth[0] === -1) {
              nextMonth[0] = 11;
              setYear(function (currentYear) {
                return [currentYear[0] - 1, currentYear[1]];
              });
            }
          }
        }
      }
      setMonth(nextMonth);
      (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 || _props$onMonthChange2.call(props, {
        partial: partial,
        month: nextMonth[partialIndex],
        date: value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "month-select"
      });
    }
    var panelProps = {
      hoverValue: isHoverCell ? hoverValue : [],
      value: isSelected ? cacheValue : value,
      year: year,
      month: month,
      mode: mode,
      format: format,
      presets: presets,
      time: time,
      disableDate: disableDate,
      firstDayOfWeek: firstDayOfWeek,
      timePickerProps: timePickerProps,
      enableTimePicker: enableTimePicker,
      presetsPlacement: presetsPlacement,
      activeIndex: activeIndex,
      panelPreselection: panelPreselection,
      onCellMouseEnter: onCellMouseEnter,
      onCellMouseLeave: onCellMouseLeave,
      onCellClick: onCellClick,
      onJumperClick: onJumperClick,
      onConfirmClick: onConfirmClick,
      onPresetClick: onPresetClick,
      onYearChange: onYearChange,
      onMonthChange: onMonthChange,
      onTimePickerChange: onTimePickerChange,
      onPanelClick: onPanelClick
    };
    return /* @__PURE__ */React__default["default"].createElement(RangePanel, _objectSpread$t({
      ref: ref,
      className: className,
      style: style
    }, panelProps));
  });
  DateRangePickerPanel$1.displayName = "DateRangePickerPanel";

  var DatePicker = DatePicker$1;
  var DateRangePicker = DateRangePicker$1;
  var DatePickerPanel = DatePickerPanel$1;
  var DateRangePickerPanel = DateRangePickerPanel$1;

  var Upload = Upload$1;

  var swiperDefaultProps = {
    animation: "slide",
    autoplay: true,
    defaultCurrent: 0,
    direction: "horizontal",
    duration: 300,
    interval: 5e3,
    loop: true,
    stopOnHover: true,
    theme: "light",
    trigger: "hover",
    type: "default"
  };

  var CARD_SCALE = 210 / 332;
  var itemWidth = 0.415;
  var disposeIndex = function disposeIndex(index, currentIndex, childrenLength) {
    if (currentIndex === 0 && index === childrenLength - 1) {
      return -1;
    }
    if (currentIndex === childrenLength - 1 && index === 0) {
      return childrenLength;
    }
    if (index < currentIndex - 1 && currentIndex - index >= childrenLength / 2) {
      return childrenLength + 1;
    }
    if (index > currentIndex + 1 && index - currentIndex >= childrenLength / 2) {
      return -2;
    }
    return index;
  };
  var calculateTranslate = function calculateTranslate(index, currentIndex, parentWidth, inStage) {
    if (inStage) {
      return parentWidth * ((index - currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
    }
    if (index < currentIndex) {
      return -itemWidth * (1 + CARD_SCALE) * parentWidth / 2;
    }
    return (2 + itemWidth * (CARD_SCALE - 1)) * parentWidth / 2;
  };
  var getZindex = function getZindex(isActivity, inStage) {
    if (isActivity) {
      return 2;
    }
    if (inStage) {
      return 1;
    }
    return 0;
  };
  var SwiperItem = function SwiperItem(props) {
    var children = props.children,
      currentIndex = props.currentIndex,
      index = props.index,
      animation = props.animation,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 300 : _props$duration,
      needAnimation = props.needAnimation,
      _props$type = props.type,
      type = _props$type === void 0 ? "default" : _props$type,
      childrenLength = props.childrenLength,
      getWrapAttribute = props.getWrapAttribute;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      setUpdate = _useState2[1];
    var isFirstFirstRender = useIsFirstRender();
    var getSwiperItemStyle = function getSwiperItemStyle() {
      if (animation === "fade") {
        return {
          opacity: currentIndex === index ? 1 : 0,
          transition: needAnimation ? "opacity ".concat(duration / 1e3, "s") : ""
        };
      }
      if (type === "card") {
        var wrapWidth = getWrapAttribute("offsetWidth");
        var translateIndex = index !== currentIndex && childrenLength > 2 ? disposeIndex(index, currentIndex, childrenLength) : index;
        var inStage = Math.round(Math.abs(translateIndex - currentIndex)) <= 1;
        var translate = calculateTranslate(translateIndex, currentIndex, wrapWidth, inStage).toFixed(2);
        var isActivity = translateIndex === currentIndex;
        var zIndex = getZindex(isActivity, inStage);
        return {
          msTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
          WebkitTransform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
          transform: "translateX(".concat(translate, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
          transition: "transform ".concat(duration / 1e3, "s ease"),
          zIndex: zIndex
        };
      }
      return {};
    };
    React.useEffect(function () {
      if (isFirstFirstRender) {
        setUpdate({});
      }
    }, []);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper__container__item"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-swiper__card"), type === "card"), "".concat(classPrefix, "-is-active"), index === currentIndex), "".concat(classPrefix, "-swiper__fade"), animation === "fade")),
      style: getSwiperItemStyle(),
      "data-index": index
    }, children);
  };
  SwiperItem.displayName = "SwiperItem";

  function ownKeys$s(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$s(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$s(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var defaultNavigation = {
    placement: "inside",
    showSlideBtn: "always",
    size: "medium",
    type: "bars"
  };
  var Swiper$1 = function Swiper(swiperProps) {
    var props = useDefaultProps(swiperProps, swiperDefaultProps);
    var animation = props.animation,
      autoplay = props.autoplay,
      current = props.current,
      defaultCurrent = props.defaultCurrent,
      direction = props.direction,
      duration = props.duration,
      interval = props.interval,
      trigger = props.trigger,
      height = props.height,
      loop = props.loop,
      stopOnHover = props.stopOnHover,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      className = props.className,
      children = props.children,
      navigation = props.navigation,
      type = props.type;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        ChevronLeftIcon: TdChevronLeftIcon,
        ChevronRightIcon: TdChevronRightIcon
      }),
      ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var navigationConfig = defaultNavigation;
    var navigationNode = null;
    if (/*#__PURE__*/React.isValidElement(navigation)) {
      navigationNode = navigation;
    } else {
      navigationConfig = _objectSpread$s(_objectSpread$s({}, defaultNavigation), navigation);
    }
    var _useState = React.useState(defaultCurrent),
      _useState2 = _slicedToArray$1(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      needAnimation = _useState4[0],
      setNeedAnimation = _useState4[1];
    var _useState5 = React.useState(function () {
        return navigationConfig.showSlideBtn === "always";
      }),
      _useState6 = _slicedToArray$1(_useState5, 2),
      arrowShow = _useState6[0],
      setArrowShow = _useState6[1];
    var swiperTimer = React.useRef(null);
    var swiperAnimationTimer = React.useRef(null);
    var isHovering = React.useRef(false);
    var swiperWrap = React.useRef(null);
    var getWrapAttribute = React__default["default"].useCallback(function (attr) {
      var _swiperWrap$current;
      return (_swiperWrap$current = swiperWrap.current) === null || _swiperWrap$current === void 0 || (_swiperWrap$current = _swiperWrap$current.parentNode) === null || _swiperWrap$current === void 0 ? void 0 : _swiperWrap$current[attr];
    }, []);
    var childrenList = React.useMemo(function () {
      return React__default["default"].Children.toArray(children).filter(function (child) {
        var _child$type;
        return ((_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === SwiperItem.displayName;
      });
    }, [children]);
    var childrenLength = childrenList.length;
    var swiperItemList = childrenList.map(function (child, index) {
      return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$s(_objectSpread$s({
        key: index,
        index: index,
        currentIndex: currentIndex,
        needAnimation: needAnimation,
        childrenLength: childrenLength,
        getWrapAttribute: getWrapAttribute
      }, props), child.props));
    });
    if (loop && childrenLength > 0 && type === "default") {
      var firstEle = swiperItemList[0];
      var lastEle = swiperItemList[childrenLength - 1];
      swiperItemList.unshift(/*#__PURE__*/React__default["default"].cloneElement(lastEle, _objectSpread$s(_objectSpread$s({}, lastEle), {}, {
        props: props,
        key: -1,
        index: -1
      })));
      swiperItemList.push(/*#__PURE__*/React__default["default"].cloneElement(firstEle, _objectSpread$s(_objectSpread$s({}, firstEle.props), {}, {
        key: childrenLength,
        index: childrenLength
      })));
    }
    var swiperItemLength = swiperItemList.length;
    var startIndex = loop ? -1 : 0;
    var endIndex = loop ? React__default["default"].Children.count(children) : React__default["default"].Children.count(children) - 1;
    var swiperTo = React.useCallback(function (index, context) {
      onChange((index === -1 ? childrenLength - 1 : index) % childrenLength, context);
      if (index !== currentIndex) {
        setNeedAnimation(true);
        setCurrentIndex(index);
      }
    }, [childrenLength, currentIndex, onChange]);
    var setTimer = React.useCallback(function () {
      if (autoplay && interval > 0) {
        swiperTimer.current = setTimeout(function () {
          if (!loop && currentIndex === endIndex) {
            return;
          }
          swiperTo(currentIndex + 1, {
            source: "autoplay"
          });
        }, currentIndex === 0 ? interval - (duration + 50) : interval);
      }
    }, [autoplay, interval, currentIndex, loop, duration, endIndex, swiperTo]);
    var clearTimer = React.useCallback(function () {
      if (swiperTimer.current) {
        clearTimeout(swiperTimer.current);
        swiperTimer.current = null;
      }
    }, []);
    React.useEffect(function () {
      if (current !== void 0) {
        var nextCurrent = current % childrenLength;
        if (nextCurrent === 0) {
          swiperTo(childrenLength, {
            source: "autoplay"
          });
        } else {
          swiperTo(nextCurrent, {
            source: "autoplay"
          });
        }
      }
    }, [current, childrenLength]);
    React.useEffect(function () {
      if (currentIndex + 1 > swiperItemLength && type === "card") {
        return setCurrentIndex(0);
      }
      if (swiperAnimationTimer.current) {
        clearTimeout(swiperAnimationTimer.current);
        swiperAnimationTimer.current = null;
      }
      var swiperAnimationDuration = 0;
      if (currentIndex === -1 && type === "card") {
        swiperAnimationDuration = 50;
      } else {
        swiperAnimationDuration = duration + 50;
      }
      swiperAnimationTimer.current = setTimeout(function () {
        setNeedAnimation(false);
        if (loop && currentIndex === endIndex) {
          clearTimer();
          setCurrentIndex(0);
        }
        if (loop && currentIndex === startIndex) {
          setCurrentIndex(endIndex - 1);
        }
      }, swiperAnimationDuration);
    }, [currentIndex, swiperItemLength, duration, type, clearTimer, endIndex, startIndex, loop]);
    React.useEffect(function () {
      if (!isHovering.current || !stopOnHover) {
        clearTimer();
        setTimer();
      }
    }, [setTimer, clearTimer, stopOnHover, loop, currentIndex, endIndex]);
    var onMouseEnter = function onMouseEnter() {
      isHovering.current = true;
      if (stopOnHover) {
        clearTimer();
      }
      if (navigationConfig.showSlideBtn === "hover") {
        setArrowShow(true);
      }
    };
    var onMouseLeave = function onMouseLeave() {
      isHovering.current = false;
      if (!swiperTimer.current && autoplay) {
        setTimer();
      }
      if (navigationConfig.showSlideBtn === "hover") {
        setArrowShow(false);
      }
    };
    var navMouseAction = function navMouseAction(action, index) {
      if (action === "enter" /* Enter */ && trigger === "hover") {
        swiperTo(index, {
          source: "hover"
        });
      }
      if (action === "click" /* Click */ && trigger === "click") {
        swiperTo(index, {
          source: "click"
        });
      }
    };
    var arrowClick = function arrowClick(direction2) {
      if (needAnimation) {
        return false;
      }
      if (direction2 === "right" /* Right */) {
        if (!loop && currentIndex === endIndex) {
          return;
        }
        if (type === "card") {
          return swiperTo(currentIndex + 1 >= swiperItemLength ? 0 : currentIndex + 1, {
            source: "click"
          });
        }
        return swiperTo(currentIndex + 1, {
          source: "click"
        });
      }
      if (direction2 === "left" /* Left */) {
        if (!loop && currentIndex === startIndex) {
          return;
        }
        return swiperTo(currentIndex - 1, {
          source: "click"
        });
      }
    };
    var renderArrow = function renderArrow(type2) {
      if (!arrowShow) {
        return "";
      }
      if (navigationConfig.type === "fraction" && type2 === "default" /* Default */) {
        return "";
      }
      var fractionIndex = currentIndex + 1 > childrenLength ? 1 : currentIndex + 1;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(classPrefix, "-swiper__arrow"), _defineProperty$2({}, "".concat(classPrefix, "-swiper__arrow--default"), type2 === "default"))
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-swiper__arrow-left"),
        onClick: function onClick() {
          return arrowClick("left" /* Left */);
        }
      }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null)), type2 === "fraction" /* Fraction */ ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-swiper__navigation-text-fraction")
      }, fractionIndex, "/", childrenLength) : "", /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-swiper__arrow-right"),
        onClick: function onClick() {
          return arrowClick("right" /* Right */);
        }
      }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null)));
    };
    var renderNavigation = function renderNavigation() {
      if (navigationConfig.type === "fraction") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1("".concat(classPrefix, "-swiper__navigation"), "".concat(classPrefix, "-swiper__navigation--fraction"))
        }, renderArrow("fraction" /* Fraction */));
      }
      return navigationNode ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, navigationNode) : /* @__PURE__ */React__default["default"].createElement("ul", {
        className: classNames$1("".concat(classPrefix, "-swiper__navigation"), "".concat(classPrefix, "-swiper__navigation-").concat(navigationConfig.type))
      }, childrenList.map(function (_, i) {
        return /* @__PURE__ */React__default["default"].createElement("li", {
          key: i,
          className: classNames$1("".concat(classPrefix, "-swiper__navigation-item"), _defineProperty$2({}, "".concat(classPrefix, "-is-active"), i === (currentIndex === -1 ? childrenLength - 1 : currentIndex) % childrenLength)),
          onClick: function onClick() {
            return navMouseAction("click" /* Click */, i);
          },
          onMouseEnter: function onMouseEnter() {
            return navMouseAction("enter" /* Enter */, i);
          },
          onMouseLeave: function onMouseLeave() {
            return navMouseAction("leave" /* Leave */, i);
          }
        }, /* @__PURE__ */React__default["default"].createElement("span", null));
      }));
    };
    var getWrapperStyle = function getWrapperStyle() {
      var loopIndex = loop ? 1 : 0;
      var offsetHeight = height ? "".concat(height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");
      if (type === "card" || animation === "fade") {
        return {
          height: offsetHeight
        };
      }
      if (animation === "slide") {
        if (direction === "vertical") {
          return {
            height: offsetHeight,
            msTransform: "translate3d(0, -".concat((currentIndex + loopIndex) * 100, "%, 0px)"),
            WebkitTransform: "translate3d(0, -".concat((currentIndex + loopIndex) * 100, "%, 0px)"),
            transform: "translate3d(0, -".concat((currentIndex + loopIndex) * 100, "%, 0px)"),
            transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
          };
        }
        return {
          msTransform: "translate3d(-".concat((currentIndex + loopIndex) * 100, "%, 0px, 0px)"),
          WebkitTransform: "translate3d(-".concat((currentIndex + loopIndex) * 100, "%, 0px, 0px)"),
          transform: "translate3d(-".concat((currentIndex + loopIndex) * 100, "%, 0px, 0px)"),
          transition: needAnimation ? "transform ".concat(duration / 1e3, "s ease") : ""
        };
      }
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper"), className),
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      ref: swiperWrap
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper__wrap"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-swiper--inside"), navigationConfig.placement === "inside"), "".concat(classPrefix, "-swiper--outside"), navigationConfig.placement === "outside"), "".concat(classPrefix, "-swiper--vertical"), direction === "vertical"), "".concat(classPrefix, "-swiper--large"), navigationConfig.size === "large"), "".concat(classPrefix, "-swiper--small"), navigationConfig.size === "small"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper__content"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-swiper-fade"), animation === "fade"), "".concat(classPrefix, "-swiper-card"), type === "card")),
      style: {
        height: ""
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-swiper__container"),
      style: getWrapperStyle()
    }, swiperItemList)), renderNavigation(), renderArrow("default" /* Default */)));
  };
  Swiper$1.SwiperItem = SwiperItem;
  Swiper$1.displayName = "Swiper";

  var Swiper = Swiper$1;

  var commentDefaultProps = {};

  var Comment$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, commentDefaultProps),
      actions = _useDefaultProps.actions,
      author = _useDefaultProps.author,
      avatar = _useDefaultProps.avatar,
      content = _useDefaultProps.content,
      datetime = _useDefaultProps.datetime,
      reply = _useDefaultProps.reply,
      quote = _useDefaultProps.quote,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var avatarElement = avatar ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__avatar")
    }, typeof avatar === "string" ? /* @__PURE__ */React__default["default"].createElement("img", {
      src: avatar,
      alt: "",
      className: "".concat(classPrefix, "-comment__avatar-image")
    }) : avatar) : null;
    var authorDatetimeContent = (author || datetime) && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__author")
    }, author && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-comment__name")
    }, author), datetime && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-comment__time")
    }, datetime));
    var quoteElement = quote ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__quote")
    }, quote) : null;
    var actionsElement = actions && actions.length ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__actions")
    }, actions.map(function (action, index) {
      return /* @__PURE__ */React__default["default"].createElement(Button, {
        key: "action-".concat(index),
        size: "small",
        variant: "text"
      }, action);
    })) : null;
    var contentElement = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__content")
    }, authorDatetimeContent, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__detail")
    }, content), quoteElement, actionsElement);
    var replyElement = reply ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-comment__reply"))
    }, reply) : null;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-comment"), className)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__inner")
    }, avatarElement, contentElement), replyElement);
  });
  Comment$1.displayName = "Comment";

  var Comment = Comment$1;

  var Transfer = Transfer$1;

  var AvatarContext = /*#__PURE__*/React__default["default"].createContext("default");
  var AvatarContextProvider = function AvatarContextProvider(_ref) {
    var children = _ref.children,
      size = _ref.size;
    return /* @__PURE__ */React__default["default"].createElement(AvatarContext.Consumer, null, function (inputSize) {
      return /* @__PURE__ */React__default["default"].createElement(AvatarContext.Provider, {
        value: size || inputSize
      }, children);
    });
  };

  var avatarDefaultProps = {
    hideOnLoadFailed: false,
    shape: "circle"
  };
  var avatarGroupDefaultProps = {
    cascading: "right-up"
  };

  var _excluded$d = ["className", "cascading", "collapseAvatar", "max", "size", "children"];
  function ownKeys$r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$r(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var AvatarGroup$1 = function AvatarGroup(props) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var preClass = "".concat(classPrefix, "-avatar");
    var _useDefaultProps = useDefaultProps(props, avatarGroupDefaultProps),
      className = _useDefaultProps.className,
      cascading = _useDefaultProps.cascading,
      collapseAvatar = _useDefaultProps.collapseAvatar,
      max = _useDefaultProps.max,
      size = _useDefaultProps.size,
      children = _useDefaultProps.children,
      avatarGroupProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$d);
    var childrenList = React__default["default"].Children.toArray(children);
    var allChildrenList;
    if (childrenList.length > 0) {
      allChildrenList = childrenList.map(function (child, index) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$r({
          key: "avatar-group-item-".concat(index)
        }, child.props));
      });
    }
    var groupClass = classNames$1("".concat(preClass, "-group"), className, _defineProperty$2(_defineProperty$2({}, "".concat(preClass, "--offset-right"), cascading === "right-up"), "".concat(preClass, "--offset-left"), cascading === "left-up"));
    var childrenCount = childrenList.length;
    if (max && childrenCount > max) {
      var showList = allChildrenList.slice(0, max);
      var ellipsisAvatar = /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        className: "".concat(preClass, "__collapse")
      }, parseTNode(collapseAvatar) || "+".concat(childrenCount - max));
      showList.push(/* @__PURE__ */React__default["default"].createElement(React.Fragment, {
        key: "t-avatar__collapse"
      }, ellipsisAvatar));
      return /* @__PURE__ */React__default["default"].createElement(AvatarContextProvider, {
        size: size
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: groupClass
      }, showList));
    }
    return /* @__PURE__ */React__default["default"].createElement(AvatarContextProvider, {
      size: size
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$r({
      className: groupClass
    }, avatarGroupProps), allChildrenList));
  };
  AvatarGroup$1.displayName = "AvatarGroup";

  var _excluded$c = ["alt", "hideOnLoadFailed", "icon", "image", "shape", "size", "onError", "onClick", "onHover", "onContextmenu", "children", "content", "style", "imageProps", "className"];
  function ownKeys$q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Avatar$1 = forwardRefWithStatics(function (props, ref) {
    var _useDefaultProps = useDefaultProps(props, avatarDefaultProps),
      alt = _useDefaultProps.alt,
      hideOnLoadFailed = _useDefaultProps.hideOnLoadFailed,
      icon = _useDefaultProps.icon,
      image = _useDefaultProps.image,
      shape = _useDefaultProps.shape,
      avatarSize = _useDefaultProps.size,
      onError = _useDefaultProps.onError,
      _onClick = _useDefaultProps.onClick,
      onHover = _useDefaultProps.onHover,
      onContextmenu = _useDefaultProps.onContextmenu,
      children = _useDefaultProps.children,
      content = _useDefaultProps.content,
      style = _useDefaultProps.style,
      imageProps = _useDefaultProps.imageProps,
      className = _useDefaultProps.className,
      avatarProps = _objectWithoutProperties$2(_useDefaultProps, _excluded$c);
    var groupSize = React.useContext(AvatarContext);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useState = React.useState(1),
      _useState2 = _slicedToArray$1(_useState, 2),
      scale = _useState2[0],
      setScale = _useState2[1];
    var _useState3 = React.useState(true),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isImgExist = _useState4[0],
      setIsImgExist = _useState4[1];
    var avatarRef = React.useRef(null);
    var avatarChildrenRef = React.useRef(null);
    var size = avatarSize === void 0 ? groupSize : avatarSize;
    var gap = 4;
    var handleScale = function handleScale() {
      if (!avatarChildrenRef.current || !avatarRef.current) {
        return;
      }
      var childrenWidth = avatarChildrenRef.current.offsetWidth;
      var avatarWidth = avatarRef.current.offsetWidth;
      if (childrenWidth !== 0 && avatarWidth !== 0) {
        if (gap * 2 < avatarWidth) {
          setScale(avatarWidth - gap * 2 < childrenWidth ? (avatarWidth - gap * 2) / childrenWidth : 1);
        }
      }
    };
    useResizeObserver(avatarChildrenRef, handleScale);
    var handleImgLoadError = function handleImgLoadError(ctx) {
      onError === null || onError === void 0 || onError(ctx);
      !hideOnLoadFailed && setIsImgExist(false);
    };
    React.useEffect(function () {
      setIsImgExist(true);
      setScale(1);
    }, [image]);
    React.useEffect(function () {
      handleScale();
    }, []);
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;
    var numSizeStyle = size && !SIZE[size] ? {
      width: size,
      height: size,
      fontSize: "".concat(Number.parseInt(size, 10) / 2, "px")
    } : {};
    var imageStyle = size && !SIZE[size] ? {
      width: size,
      height: size
    } : {};
    var preClass = "".concat(classPrefix, "-avatar");
    var avatarClass = classNames$1(preClass, className, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, SIZE[size], !!SIZE[size]), "".concat(preClass, "--").concat(shape), !!shape), "".concat(preClass, "__icon"), !!icon));
    var renderChildren;
    if (image && isImgExist) {
      renderChildren = /* @__PURE__ */React__default["default"].createElement(Image$1, _objectSpread$q({
        src: image,
        alt: alt,
        style: imageStyle,
        onError: handleImgLoadError
      }, imageProps));
    } else if (icon) {
      renderChildren = icon;
    } else {
      var childrenStyle = {
        transform: "scale(".concat(scale, ")")
      };
      renderChildren = /* @__PURE__ */React__default["default"].createElement("span", {
        ref: composeRefs(ref, avatarChildrenRef),
        style: childrenStyle
      }, children || content);
    }
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$q({
      ref: composeRefs(ref, avatarRef),
      className: avatarClass,
      style: _objectSpread$q(_objectSpread$q({}, numSizeStyle), style),
      onClick: function onClick(e) {
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick({
          e: e
        });
      },
      onMouseEnter: function onMouseEnter(e) {
        return onHover === null || onHover === void 0 ? void 0 : onHover({
          e: e
        });
      },
      onContextMenu: function onContextMenu(e) {
        return onContextmenu === null || onContextmenu === void 0 ? void 0 : onContextmenu({
          e: e
        });
      }
    }, avatarProps), renderChildren);
  }, {
    Group: AvatarGroup$1
  });
  Avatar$1.displayName = "Avatar";

  var AvatarGroup = AvatarGroup$1;
  var Avatar = Avatar$1;

  var skeletonDefaultProps = {
    animation: "none",
    delay: 0,
    loading: true,
    theme: "text"
  };

  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }].concat(_toConsumableArray([3, 2, 2, 2].map(function (value) {
      return Array(value).fill({
        type: "text",
        height: "30px"
      });
    })))
  };
  var Skeleton$1 = function Skeleton(originalProps) {
    var props = useDefaultProps(originalProps, skeletonDefaultProps);
    var animation = props.animation,
      loading = props.loading,
      rowCol = props.rowCol,
      theme = props.theme,
      className = props.className,
      style = props.style,
      _props$delay = props.delay,
      delay = _props$delay === void 0 ? 0 : _props$delay,
      children = props.children;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var name = "".concat(classPrefix, "-skeleton");
    var renderCols = function renderCols(_cols) {
      var getColItemClass = function getColItemClass(obj) {
        return classNames$1("".concat(name, "__col"), "".concat(name, "--type-").concat(obj.type || "text"), _defineProperty$2({}, "".concat(name, "--animation-").concat(animation), animation));
      };
      var getColItemStyle = function getColItemStyle(obj) {
        var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
        var style2 = {};
        styleName.forEach(function (name2) {
          if (name2 in obj) {
            var px = pxCompat(obj[name2]);
            if (name2 === "size") {
              var _ref = [px, px];
              style2.width = _ref[0];
              style2.height = _ref[1];
            } else {
              style2[name2] = px;
            }
          }
        });
        return style2;
      };
      var cols = [];
      if (Array.isArray(_cols)) {
        cols = _cols;
      } else if (isNumber(_cols)) {
        cols = new Array(_cols).fill({
          type: "text"
        });
      } else {
        cols = [_cols];
      }
      return cols.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          key: index,
          className: getColItemClass(item),
          style: getColItemStyle(item)
        }, parseTNode(item.content));
      });
    };
    var renderRowCol = function renderRowCol(_rowCol) {
      var renderedRowCol = _rowCol || rowCol;
      return renderedRowCol.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          key: index,
          className: "".concat(name, "__row")
        }, renderCols(item));
      });
    };
    var _useState = React.useState(loading),
      _useState2 = _slicedToArray$1(_useState, 2),
      ctrlLoading = _useState2[0],
      setCtrlLoading = _useState2[1];
    React.useEffect(function () {
      if (delay > 0 && !loading) {
        var timeout = setTimeout(function () {
          setCtrlLoading(loading);
        }, delay);
        return function () {
          return clearTimeout(timeout);
        };
      }
      setCtrlLoading(loading);
    }, [delay, loading]);
    if (!ctrlLoading) {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, children);
    }
    var childrenContent = [];
    if (theme && !rowCol) {
      childrenContent.push(renderRowCol(ThemeMap[theme]));
    }
    if (rowCol) {
      childrenContent.push(renderRowCol(rowCol));
    }
    if (!theme && !rowCol) {
      childrenContent.push(renderRowCol([1, 1, 1, {
        width: "70%"
      }]));
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: style
    }, childrenContent);
  };
  Skeleton$1.displayName = "Skeleton";

  var Skeleton = Skeleton$1;

  var rgb2cmyk = function rgb2cmyk(red, green, blue) {
    var computedC = 0;
    var computedM = 0;
    var computedY = 0;
    var computedK = 0;
    var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
    var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
    var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);
    if (r === 0 && g === 0 && b === 0) {
      computedK = 1;
      return [0, 0, 0, 1];
    }
    computedC = 1 - r / 255;
    computedM = 1 - g / 255;
    computedY = 1 - b / 255;
    var minCMY = Math.min(computedC, Math.min(computedM, computedY));
    computedC = (computedC - minCMY) / (1 - minCMY);
    computedM = (computedM - minCMY) / (1 - minCMY);
    computedY = (computedY - minCMY) / (1 - minCMY);
    computedK = minCMY;
    return [computedC, computedM, computedY, computedK];
  };
  var cmyk2rgb = function cmyk2rgb(cyan, magenta, yellow, black) {
    var c = cyan / 100;
    var m = magenta / 100;
    var y = yellow / 100;
    var k = black / 100;
    c = c * (1 - k) + k;
    m = m * (1 - k) + k;
    y = y * (1 - k) + k;
    var r = 1 - c;
    var g = 1 - m;
    var b = 1 - y;
    r = Math.round(255 * r);
    g = Math.round(255 * g);
    b = Math.round(255 * b);
    return {
      r: r,
      g: g,
      b: b
    };
  };
  var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;
  var toNumber = function toNumber(str) {
    return Math.max(0, Math.min(255, parseInt(str, 10)));
  };
  var cmykInputToColor = function cmykInputToColor(input) {
    if (/cmyk/i.test(input)) {
      var str = input.replace(/\s/g, "");
      var match = str.match(REG_CMYK_STRING);
      var c = toNumber(match[1]);
      var m = toNumber(match[2]);
      var y = toNumber(match[3]);
      var k = toNumber(match[4]);
      var _cmyk2rgb = cmyk2rgb(c, m, y, k),
        r = _cmyk2rgb.r,
        g = _cmyk2rgb.g,
        b = _cmyk2rgb.b;
      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }
    return input;
  };

  var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
  var COLOR_MODES = {
    monochrome: "singleColor",
    "linear-gradient": "gradientColor"
  };
  var DEFAULT_COLOR = "#001F97";
  var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
  var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
  var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];
  var ALPHA_FORMAT_MAP = {
    HEX: "HEX8",
    RGB: "RGBA",
    HSL: "HSLA",
    HSV: "HSVA"
  };
  var COLOR_FORMAT_INPUTS = {
    RGB: [{
      key: "r",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "g",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "b",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    HSV: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "v",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    HSL: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "l",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    CMYK: [{
      key: "c",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "m",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "y",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "k",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    CSS: [{
      key: "css",
      type: "input",
      flex: 3
    }],
    HEX: [{
      key: "hex",
      type: "input",
      flex: 3
    }]
  };
  var SATURATION_PANEL_DEFAULT_WIDTH = 230;
  var SATURATION_PANEL_DEFAULT_HEIGHT = 168;
  var SLIDER_DEFAULT_WIDTH = 186;
  var GRADIENT_SLIDER_DEFAULT_WIDTH = 176;

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var source = "";
    for (var i = 0; i < regexpList.length; i++) {
      if (isString(regexpList[i])) {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }
    return new RegExp(source, flags);
  };
  var generateRegExp = function generateRegExp() {
    var searchFlags = "gi";
    var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
    var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
    var rComma = /\s*,\s*/;
    var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
    var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
    var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
    var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
    var rKeyword = /[_a-z-][_a-z0-9-]*/;
    var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
    var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
    var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
    var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
    var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
    var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };
  var parseGradient = function parseGradient(regExpLib, input) {
    var result;
    var matchColorStop;
    var stopResult;
    regExpLib.gradientSearch.lastIndex = 0;
    var matchGradient = regExpLib.gradientSearch.exec(input);
    if (!isNull(matchGradient)) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      };
      if (matchGradient[1]) {
        result.line = matchGradient[1];
      }
      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      }
      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      }
      regExpLib.colorStopSearch.lastIndex = 0;
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      while (!isNull(matchColorStop)) {
        stopResult = {
          color: matchColorStop[1]
        };
        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }
        result.colorStopList.push(stopResult);
        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    }
    return result;
  };
  var REGEXP_LIB = generateRegExp();
  var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
  var isGradientColor = function isGradientColor(input) {
    REG_GRADIENT.lastIndex = 0;
    return REG_GRADIENT.exec(input);
  };
  var sideCornerDegreeMap = {
    top: 0,
    right: 90,
    bottom: 180,
    left: 270,
    "top left": 315,
    "left top": 315,
    "top right": 45,
    "right top": 45,
    "bottom left": 225,
    "left bottom": 225,
    "bottom right": 135,
    "right bottom": 135
  };
  var parseGradientString = function parseGradientString(input) {
    var match = isGradientColor(input);
    if (!match) return false;
    var gradientColors = {
      points: [],
      degree: 0
    };
    var result = parseGradient(REGEXP_LIB, match[1]);
    if (result.original.trim() !== match[1].trim()) return false;
    var points = result.colorStopList.map(function (_ref, index, array) {
      var color = _ref.color,
        position = _ref.position;
      var point = /* @__PURE__ */Object.create(null);
      point.color = tinycolor(color).toRgbString();
      var left = parseFloat(position);
      if (Number.isNaN(left)) {
        left = index / (array.length - 1) * 100;
      }
      point.left = left;
      return point;
    });
    gradientColors.points = points;
    var degree = parseInt(result.angle, 10);
    if (Number.isNaN(degree)) {
      degree = sideCornerDegreeMap[result.sideCorner] || 180;
    }
    gradientColors.degree = degree;
    return gradientColors;
  };

  var _Color;
  function ownKeys$p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$p(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var mathRound = Math.round;
  var hsv2rgba = function hsv2rgba(states) {
    return tinycolor(states).toRgb();
  };
  var hsv2hsva = function hsv2hsva(states) {
    return tinycolor(states).toHsv();
  };
  var hsv2hsla = function hsv2hsla(states) {
    return tinycolor(states).toHsl();
  };
  var gradientColors2string = function gradientColors2string(object) {
    var points = object.points,
      degree = object.degree;
    var colorsStop = points.sort(function (pA, pB) {
      return pA.left - pB.left;
    }).map(function (p) {
      return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
    });
    return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
  };
  var genId = function genId() {
    return (1 + Math.random() * 4294967295).toString(16);
  };
  var genGradientPoint = function genGradientPoint(left, color, id) {
    return {
      id: id || genId(),
      left: left,
      color: color
    };
  };
  var Color = /*#__PURE__*/function () {
    function Color(input) {
      _classCallCheck(this, Color);
      _defineProperty$2(this, "states", {
        s: 100,
        v: 100,
        h: 100,
        a: 1
      });
      _defineProperty$2(this, "gradientStates", {
        colors: [],
        degree: 0,
        selectedId: null,
        css: ""
      });
      this.update(input);
    }
    return _createClass(Color, [{
      key: "update",
      value: function update(input) {
        var _this = this;
        if (input === this.originColor) return;
        var gradientColors = parseGradientString(input);
        if (this.isGradient && !gradientColors) {
          var colorHsv = tinycolor(input).toHsv();
          this.states = colorHsv;
          this.updateCurrentGradientColor();
          return;
        }
        this.originColor = input;
        this.isGradient = false;
        var colorInput = input;
        if (gradientColors) {
          var _points$, _this$gradientSelecte;
          this.isGradient = true;
          var object = gradientColors;
          var points = object.points.map(function (c, index) {
            var _this$gradientStates$;
            return genGradientPoint(c.left, c.color, (_this$gradientStates$ = _this.gradientStates.colors[index]) === null || _this$gradientStates$ === void 0 ? void 0 : _this$gradientStates$.id);
          });
          this.gradientStates = {
            colors: points,
            degree: object.degree,
            selectedId: this.gradientStates.selectedId || ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
          };
          this.gradientStates.css = this.linearGradient;
          colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
        }
        this.updateStates(colorInput);
      }
    }, {
      key: "saturation",
      get: function get() {
        return this.states.s;
      },
      set: function set(value) {
        this.states.s = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "value",
      get: function get() {
        return this.states.v;
      },
      set: function set(value) {
        this.states.v = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "hue",
      get: function get() {
        return this.states.h;
      },
      set: function set(value) {
        this.states.h = Math.max(0, Math.min(360, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.states.a;
      },
      set: function set(value) {
        this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "rgb",
      get: function get() {
        var _hsv2rgba = hsv2rgba(this.states),
          r = _hsv2rgba.r,
          g = _hsv2rgba.g,
          b = _hsv2rgba.b;
        return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ")");
      }
    }, {
      key: "rgba",
      get: function get() {
        var _hsv2rgba2 = hsv2rgba(this.states),
          r = _hsv2rgba2.r,
          g = _hsv2rgba2.g,
          b = _hsv2rgba2.b,
          a = _hsv2rgba2.a;
        return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
      }
    }, {
      key: "hsv",
      get: function get() {
        var _this$getHsva = this.getHsva(),
          h = _this$getHsva.h,
          s = _this$getHsva.s,
          v = _this$getHsva.v;
        return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
      }
    }, {
      key: "hsva",
      get: function get() {
        var _this$getHsva2 = this.getHsva(),
          h = _this$getHsva2.h,
          s = _this$getHsva2.s,
          v = _this$getHsva2.v,
          a = _this$getHsva2.a;
        return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
      }
    }, {
      key: "hsl",
      get: function get() {
        var _this$getHsla = this.getHsla(),
          h = _this$getHsla.h,
          s = _this$getHsla.s,
          l = _this$getHsla.l;
        return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
      }
    }, {
      key: "hsla",
      get: function get() {
        var _this$getHsla2 = this.getHsla(),
          h = _this$getHsla2.h,
          s = _this$getHsla2.s,
          l = _this$getHsla2.l,
          a = _this$getHsla2.a;
        return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
      }
    }, {
      key: "hex",
      get: function get() {
        return tinycolor(this.states).toHexString();
      }
    }, {
      key: "hex8",
      get: function get() {
        return tinycolor(this.states).toHex8String();
      }
    }, {
      key: "cmyk",
      get: function get() {
        var _this$getCmyk = this.getCmyk(),
          c = _this$getCmyk.c,
          m = _this$getCmyk.m,
          y = _this$getCmyk.y,
          k = _this$getCmyk.k;
        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
    }, {
      key: "css",
      get: function get() {
        if (this.isGradient) {
          return this.linearGradient;
        }
        return this.rgba;
      }
    }, {
      key: "linearGradient",
      get: function get() {
        var gradientColors = this.gradientColors,
          gradientDegree = this.gradientDegree;
        return gradientColors2string({
          points: gradientColors,
          degree: gradientDegree
        });
      }
    }, {
      key: "gradientColors",
      get: function get() {
        return this.gradientStates.colors;
      },
      set: function set(colors) {
        this.gradientStates.colors = colors;
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedId",
      get: function get() {
        return this.gradientStates.selectedId;
      },
      set: function set(id) {
        var _this$gradientSelecte2;
        if (id === this.gradientSelectedId) {
          return;
        }
        this.gradientStates.selectedId = id;
        this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
      }
    }, {
      key: "gradientDegree",
      get: function get() {
        return this.gradientStates.degree;
      },
      set: function set(degree) {
        this.gradientStates.degree = Math.max(0, Math.min(360, degree));
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedPoint",
      get: function get() {
        var gradientColors = this.gradientColors,
          gradientSelectedId = this.gradientSelectedId;
        return gradientColors.find(function (color) {
          return color.id === gradientSelectedId;
        });
      }
    }, {
      key: "getFormatsColorMap",
      value: function getFormatsColorMap() {
        return {
          HEX: this.hex,
          CMYK: this.cmyk,
          RGB: this.rgb,
          RGBA: this.rgba,
          HSL: this.hsl,
          HSLA: this.hsla,
          HSV: this.hsv,
          HSVA: this.hsva,
          CSS: this.css,
          HEX8: this.hex8
        };
      }
    }, {
      key: "getFormattedColor",
      value: function getFormattedColor(format, enableAlpha) {
        if (this.isGradient) return this.linearGradient;
        var finalFormat = enableAlpha && format in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[format] : format;
        return this.getFormatsColorMap()[finalFormat];
      }
    }, {
      key: "updateCurrentGradientColor",
      value: function updateCurrentGradientColor() {
        var isGradient = this.isGradient,
          gradientColors = this.gradientColors,
          gradientSelectedId = this.gradientSelectedId;
        var length = gradientColors.length;
        var current = this.gradientSelectedPoint;
        if (!isGradient || length === 0 || !current) {
          return false;
        }
        var index = gradientColors.findIndex(function (color) {
          return color.id === gradientSelectedId;
        });
        var newColor = _objectSpread$p(_objectSpread$p({}, current), {}, {
          color: this.rgba
        });
        gradientColors.splice(index, 1, newColor);
        this.gradientColors = gradientColors.slice();
        return this;
      }
    }, {
      key: "updateStates",
      value: function updateStates(input) {
        var color = tinycolor(cmykInputToColor(input));
        var hsva = color.toHsv();
        this.states = hsva;
      }
    }, {
      key: "getRgba",
      value: function getRgba() {
        var _hsv2rgba3 = hsv2rgba(this.states),
          r = _hsv2rgba3.r,
          g = _hsv2rgba3.g,
          b = _hsv2rgba3.b,
          a = _hsv2rgba3.a;
        return {
          r: mathRound(r),
          g: mathRound(g),
          b: mathRound(b),
          a: a
        };
      }
    }, {
      key: "getCmyk",
      value: function getCmyk() {
        var _this$getRgba = this.getRgba(),
          r = _this$getRgba.r,
          g = _this$getRgba.g,
          b = _this$getRgba.b;
        var _rgb2cmyk = rgb2cmyk(r, g, b),
          _rgb2cmyk2 = _slicedToArray$1(_rgb2cmyk, 4),
          c = _rgb2cmyk2[0],
          m = _rgb2cmyk2[1],
          y = _rgb2cmyk2[2],
          k = _rgb2cmyk2[3];
        return {
          c: mathRound(c * 100),
          m: mathRound(m * 100),
          y: mathRound(y * 100),
          k: mathRound(k * 100)
        };
      }
    }, {
      key: "getHsva",
      value: function getHsva() {
        var _hsv2hsva = hsv2hsva(this.states),
          h = _hsv2hsva.h,
          s = _hsv2hsva.s,
          v = _hsv2hsva.v,
          a = _hsv2hsva.a;
        h = mathRound(h);
        s = mathRound(s * 100);
        v = mathRound(v * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          v: v,
          a: a
        };
      }
    }, {
      key: "getHsla",
      value: function getHsla() {
        var _hsv2hsla = hsv2hsla(this.states),
          h = _hsv2hsla.h,
          s = _hsv2hsla.s,
          l = _hsv2hsla.l,
          a = _hsv2hsla.a;
        h = mathRound(h);
        s = mathRound(s * 100);
        l = mathRound(l * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          l: l,
          a: a
        };
      }
    }, {
      key: "equals",
      value: function equals(color) {
        return tinycolor.equals(this.rgba, color);
      }
    }], [{
      key: "isValid",
      value: function isValid(color) {
        if (parseGradientString(color)) {
          return true;
        }
        return tinycolor(color).isValid();
      }
    }, {
      key: "object2color",
      value: function object2color(object, format) {
        if (format === "CMYK") {
          var c = object.c,
            m = object.m,
            y = object.y,
            k = object.k;
          return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
        }
        if (format === "RGB" || format === "RGBA") {
          return tinycolor(object).toRgbString();
        }
        if (format === "HSL" || format === "HSLA") {
          return tinycolor(object).toHslString();
        }
        if (format === "HSV" || format === "HSVA") {
          return tinycolor(object).toHsvString();
        }
        return tinycolor(object).toHexString();
      }
    }]);
  }();
  _Color = Color;
  _defineProperty$2(Color, "isGradientColor", function (input) {
    return !!isGradientColor(input);
  });
  _defineProperty$2(Color, "compare", function (color1, color2) {
    var isGradientColor1 = _Color.isGradientColor(color1);
    var isGradientColor2 = _Color.isGradientColor(color2);
    if (isGradientColor1 && isGradientColor2) {
      var gradientStr1 = parseGradientString(color1);
      var gradientStr2 = parseGradientString(color2);
      if (!gradientStr1 || !gradientStr2) return false;
      var gradientColor1 = gradientColors2string(gradientStr1);
      var gradientColor2 = gradientColors2string(gradientStr2);
      return gradientColor1 === gradientColor2;
    }
    if (!isGradientColor1 && !isGradientColor2) {
      return tinycolor.equals(color1, color2);
    }
    return false;
  });
  var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
  var getColorObject = function getColorObject(color) {
    if (!color) {
      return null;
    }
    var colorObject = /* @__PURE__ */Object.create(null);
    COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {
      colorObject[key] = color[key];
    });
    if (color.isGradient) {
      colorObject.linearGradient = color.linearGradient;
    }
    return colorObject;
  };

  var initColorFormat = function initColorFormat(format, enableAlpha) {
    if (enableAlpha && format in ALPHA_FORMAT_MAP) {
      return format in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[format] : format;
    }
    return format;
  };
  var getColorFormatMap = function getColorFormatMap(color, type) {
    if (type === "encode") {
      return {
        HSV: color.getHsva(),
        HSVA: color.getHsva(),
        HSL: color.getHsla(),
        HSLA: color.getHsla(),
        RGB: color.getRgba(),
        RGBA: color.getRgba(),
        CMYK: color.getCmyk(),
        CSS: {
          css: color.css
        },
        HEX: {
          hex: color.hex
        },
        HEX8: {
          hex: color.hex8
        }
      };
    }
    return color.getFormatsColorMap();
  };
  var getColorFormatOptions = function getColorFormatOptions(enableAlpha) {
    return enableAlpha ? FORMATS.map(function (item) {
      return item in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[item] : item;
    }) : FORMATS;
  };
  var getColorFormatInputs = function getColorFormatInputs() {
    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "RGB";
    var enableAlpha = arguments.length > 1 ? arguments[1] : undefined;
    var finalFormat;
    if (enableAlpha) {
      finalFormat = Object.keys(ALPHA_FORMAT_MAP).find(function (key) {
        return key in ALPHA_FORMAT_MAP && ALPHA_FORMAT_MAP[key] === format;
      }) || format;
    } else {
      finalFormat = format;
    }
    if (!COLOR_FORMAT_INPUTS[finalFormat]) return [];
    var configs = _toConsumableArray(COLOR_FORMAT_INPUTS[finalFormat]);
    if (enableAlpha && format !== "CMYK") {
      configs.push({
        type: "inputNumber",
        key: "a",
        min: 0,
        max: 100,
        format: function format(value) {
          return "".concat(value, "%");
        },
        flex: 1.15
      });
    }
    return configs;
  };

  var colorPickerDefaultProps = {
    borderless: false,
    clearable: false,
    colorModes: ["monochrome", "linear-gradient"],
    disabled: void 0,
    enableAlpha: false,
    enableMultipleGradient: true,
    format: "RGB",
    defaultRecentColors: [],
    showPrimaryColorPreview: true,
    swatchColors: void 0
  };

  var useClassNames = function useClassNames() {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var baseClassName = "".concat(classPrefix, "-color-picker");
    return baseClassName;
  };

  var useStyles = function useStyles(params, panelRectRef) {
    var color = params.color,
      value = params.value,
      maxValue = params.maxValue,
      type = params.type;
    var _useState = React.useState({
        left: "",
        color: ""
      }),
      _useState2 = _slicedToArray$1(_useState, 2),
      styles = _useState2[0],
      setStyles = _useState2[1];
    React.useEffect(function () {
      var width = panelRectRef.current.width;
      if (!width) return;
      var left = Math.round(Number(value) / Number(maxValue) * 100);
      var thumbColor = "";
      if (type === "hue") {
        thumbColor = "hsl(".concat(color.hue, ", 100%, 50%)");
      } else if (type === "alpha") {
        thumbColor = color.rgba;
      }
      setStyles({
        left: "".concat(left, "%"),
        color: thumbColor
      });
    }, [color.hue, color.rgba, value]);
    return {
      styles: styles
    };
  };

  var ColorSlider = function ColorSlider(props) {
    var color = props.color,
      _props$className = props.className,
      className = _props$className === void 0 ? "" : _props$className,
      _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      _props$railStyle = props.railStyle,
      railStyle = _props$railStyle === void 0 ? {} : _props$railStyle,
      _props$maxValue = props.maxValue,
      maxValue = _props$maxValue === void 0 ? 360 : _props$maxValue,
      baseClassName = props.baseClassName,
      disabled = props.disabled,
      onChange = props.onChange,
      type = props.type;
    var panelRef = React.useRef(null);
    var panelRectRef = React.useRef({
      width: SLIDER_DEFAULT_WIDTH
    });
    var _useStyles = useStyles({
        color: color,
        value: value,
        maxValue: maxValue,
        type: type
      }, panelRectRef),
      styles = _useStyles.styles;
    var handleDrag = function handleDrag(coordinate) {
      if (disabled) return;
      var width = panelRectRef.current.width;
      var x = coordinate.x;
      var value2 = Math.round(x / width * Number(maxValue) * 100) / 100;
      onChange(value2);
    };
    useMouseEvent(panelRef, {
      onDown: function onDown(_, ctx) {
        if (disabled) return;
        panelRectRef.current.width = panelRef.current.offsetWidth;
        handleDrag(ctx.coordinate);
      },
      onMove: function onMove(_, ctx) {
        handleDrag(ctx.coordinate);
      },
      onUp: function onUp(_, ctx) {
        handleDrag(ctx.coordinate);
      }
    });
    React.useEffect(function () {
      panelRectRef.current.width = panelRef.current.offsetWidth || SLIDER_DEFAULT_WIDTH;
    }, []);
    var paddingStyle = {
      background: "linear-gradient(90deg, rgba(0,0,0,.0) 0%, rgba(0,0,0,.0) 93%, ".concat(props.color.rgb, " 93%, ").concat(props.color.rgb, " 100%)")
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__slider-wrapper"), "".concat(baseClassName, "__slider-wrapper--").concat(type, "-type"))
    }, type === "alpha" && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__slider-padding"),
      style: paddingStyle
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__slider"), className),
      ref: panelRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__rail"),
      style: railStyle
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassName, "__thumb"),
      role: "slider",
      tabIndex: 0,
      style: styles
    })));
  };
  var ColorSlider$1 = /*#__PURE__*/React__default["default"].memo(ColorSlider);

  var _excluded$b = ["color", "baseClassName", "onChange"];
  function ownKeys$o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$o(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Alpha = function Alpha(props) {
    var color = props.color,
      baseClassName = props.baseClassName,
      onChange = props.onChange,
      rest = _objectWithoutProperties$2(props, _excluded$b);
    var handleChange = function handleChange(v) {
      onChange(v / 100);
    };
    var railStyle = {
      background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props.color.rgb, ")")
    };
    return /* @__PURE__ */React__default["default"].createElement(ColorSlider$1, _objectSpread$o({
      baseClassName: baseClassName,
      className: classNames$1(["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")]),
      color: color,
      value: color.alpha * 100,
      onChange: handleChange,
      railStyle: railStyle,
      type: "alpha",
      maxValue: 100
    }, rest));
  };
  var AlphaSlider = /*#__PURE__*/React__default["default"].memo(Alpha);

  function ownKeys$n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$n(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var FormatInputs = function FormatInputs(props) {
    var format = props.format,
      enableAlpha = props.enableAlpha,
      inputProps = props.inputProps,
      disabled = props.disabled,
      onInputChange = props.onInputChange,
      color = props.color;
    var modelValueRef = React.useRef({});
    var lastModelValue = React.useRef({});
    var inputKey = React.useRef(0);
    var updateModelValue = function updateModelValue() {
      var value = getColorFormatMap(color, "encode")[format];
      if (!value) return;
      if (enableAlpha) {
        value.a = Math.round(color.alpha * 100);
      }
      var changedFormatValue = {};
      Object.keys(value).forEach(function (key) {
        if (value[key] !== modelValueRef.current[key]) {
          changedFormatValue[key] = value[key];
        }
        lastModelValue.current[key] = value[key];
      });
      if (Object.keys(changedFormatValue).length > 0) {
        modelValueRef.current = value;
      }
    };
    var handleInputChange = function handleInputChange(key, v, max) {
      inputKey.current = performance.now();
      if (v.toString().trim() === "") {
        var lastValue = lastModelValue.current[key];
        color.update(lastValue);
        onInputChange();
        return;
      }
      if (!v || v === lastModelValue.current[key] || Number(v) < 0 || Number(v) > max) return;
      lastModelValue.current[key] = v;
      var newFormatValue = _objectSpread$n(_objectSpread$n({}, modelValueRef.current), {}, _defineProperty$2({}, key, v));
      modelValueRef.current = newFormatValue;
      if (key === "a") {
        color.alpha = v / 100;
      } else if (key === "hex" || key === "css") {
        color.update(v);
      } else {
        color.update(Color.object2color(newFormatValue, format));
      }
      onInputChange();
    };
    updateModelValue();
    React.useEffect(function () {
      var throttleUpdate = throttle$1(updateModelValue, 100);
      throttleUpdate();
      return function () {
        return throttleUpdate.cancel();
      };
    }, [color.saturation, color.hue, color.value, color.alpha, format]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "input-group"
    }, getColorFormatInputs(format, enableAlpha).map(function (config) {
      var currentValue = modelValueRef.current[config.key];
      var commonProps = _objectSpread$n(_objectSpread$n({}, inputProps), {}, {
        disabled: disabled,
        title: currentValue,
        align: "center",
        size: "small",
        onBlur: function onBlur(v) {
          return handleInputChange(config.key, v, config.max);
        },
        onEnter: function onEnter(v) {
          return handleInputChange(config.key, v, config.max);
        }
      });
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "input-group__item",
        key: config.key,
        style: {
          flex: config.flex || 1
        }
      }, config.type === "input" ? /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$n(_objectSpread$n({}, commonProps), {}, {
        defaultValue: currentValue,
        key: "".concat(inputKey.current, "-").concat(currentValue),
        maxlength: format === "HEX" ? 9 : void 0
      })) : /* @__PURE__ */React__default["default"].createElement(InputNumber, _objectSpread$n(_objectSpread$n({}, commonProps), {}, {
        min: config.min,
        max: config.max,
        format: config.format,
        step: 1,
        value: currentValue,
        onChange: function onChange(v) {
          return handleInputChange(config.key, v || config.min, config.max);
        },
        theme: "normal"
      })));
    }));
  };
  var FormatInputs$1 = /*#__PURE__*/React__default["default"].memo(FormatInputs);

  function ownKeys$m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$m(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var FormatPanel = function FormatPanel(props) {
    var enableAlpha = props.enableAlpha,
      baseClassName = props.baseClassName,
      format = props.format,
      selectInputProps = props.selectInputProps;
    var _useState = React.useState(format),
      _useState2 = _slicedToArray$1(_useState, 2),
      formatMode = _useState2[0],
      setFormatMode = _useState2[1];
    var handleModeChange = function handleModeChange(v) {
      setFormatMode(v);
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__format")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__format--item")
    }, /* @__PURE__ */React__default["default"].createElement(Select, {
      size: "small",
      className: "".concat(baseClassName, "__format-mode-select"),
      popupProps: _objectSpread$m({
        overlayClassName: "".concat(baseClassName, "__select-options")
      }, selectInputProps === null || selectInputProps === void 0 ? void 0 : selectInputProps.popupProps),
      autoWidth: true,
      value: formatMode,
      onChange: handleModeChange
    }, getColorFormatOptions(enableAlpha).map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement(Select.Option, {
        key: item,
        value: item,
        label: item,
        style: {
          fontSize: "12px"
        }
      });
    }))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__format--item")
    }, /* @__PURE__ */React__default["default"].createElement(FormatInputs$1, _objectSpread$m(_objectSpread$m({}, props), {}, {
      format: formatMode
    }))));
  };
  var FormatPanel$1 = /*#__PURE__*/React__default["default"].memo(FormatPanel);

  var Header = function Header(props) {
    var _useLocaleReceiver = useLocaleReceiver("colorPicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var baseClassName = props.baseClassName,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? "monochrome" : _props$mode,
      colorModes = props.colorModes,
      onModeChange = props.onModeChange;
    var isSingleMode = (colorModes === null || colorModes === void 0 ? void 0 : colorModes.length) === 1;
    if (isSingleMode) {
      return null;
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__head")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__mode")
    }, /* @__PURE__ */React__default["default"].createElement(Radio.Group, {
      variant: "default-filled",
      size: "small",
      value: mode,
      onChange: onModeChange
    }, Object.keys(COLOR_MODES).map(function (key) {
      return /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
        key: key,
        value: key
      }, t(local[COLOR_MODES[key]]));
    }))));
  };
  var PanelHeader = /*#__PURE__*/React__default["default"].memo(Header);

  var HueSlider = function HueSlider(props) {
    var color = props.color,
      baseClassName = props.baseClassName,
      disabled = props.disabled,
      onChange = props.onChange;
    return /* @__PURE__ */React__default["default"].createElement(ColorSlider$1, {
      disabled: disabled,
      baseClassName: baseClassName,
      className: "".concat(baseClassName, "__hue"),
      color: color,
      value: color.hue,
      type: "hue",
      onChange: onChange
    });
  };
  var HueSlider$1 = /*#__PURE__*/React__default["default"].memo(HueSlider);

  var DELETE_KEYS = ["delete", "backspace"];
  var LinearGradient = function LinearGradient(props) {
    var _allGradientColors$, _allGradientColors;
    var onChange = props.onChange,
      color = props.color,
      disabled = props.disabled;
    var baseClassName = useClassNames();
    var _useCommonClassName = useCommonClassName(),
      statusClassNames = _useCommonClassName.STATUS;
    var sliderRef = React.useRef(null);
    var sliderRectRef = React.useRef({
      left: 0,
      width: GRADIENT_SLIDER_DEFAULT_WIDTH
    });
    var degree = React.useRef(props.color.gradientDegree);
    var selectedRef = React.useRef(props.color.gradientSelectedId);
    var colors = React.useRef(cloneDeep(color.gradientColors));
    var _useState = React.useState(props.color.gradientSelectedId),
      _useState2 = _slicedToArray$1(_useState, 2),
      selectedId = _useState2[0],
      setSelectedId = _useState2[1];
    var _useState3 = React.useState(colors.current),
      _useState4 = _slicedToArray$1(_useState3, 2),
      colorsState = _useState4[0],
      setColorsState = _useState4[1];
    React.useEffect(function () {
      degree.current = color === null || color === void 0 ? void 0 : color.gradientDegree;
      setSelectedId(color.gradientSelectedId);
      selectedRef.current = color.gradientSelectedId;
      colors.current = cloneDeep(color.gradientColors);
      setColorsState(colors.current);
    }, [color.gradientColors, color === null || color === void 0 ? void 0 : color.gradientDegree, color.gradientSelectedId, color.value, color.saturation]);
    var updateSliderRect = function updateSliderRect() {
      var rect = sliderRef.current.getBoundingClientRect();
      sliderRectRef.current = {
        left: rect.left,
        width: rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH
      };
    };
    var handleChange = React.useCallback(function (key, payload) {
      if (disabled) return;
      onChange({
        key: key,
        payload: payload
      });
    }, [onChange, disabled]);
    var handleDegreeChange = function handleDegreeChange(value) {
      if (disabled || value === props.color.gradientDegree) {
        return;
      }
      degree.current = value;
      handleChange("degree", value);
    };
    var handleSelectedIdChange = function handleSelectedIdChange(value) {
      if (disabled) return;
      setSelectedId(value);
      selectedRef.current = value;
      handleChange("selectedId", value);
    };
    var handleColorsChange = React.useCallback(function (value) {
      if (disabled) return;
      colors.current = value;
      setColorsState(value);
      handleChange("colors", value);
    }, [disabled, handleChange]);
    var updateActiveThumbLeft = React.useCallback(function (left) {
      var index = colors.current.findIndex(function (c) {
        return c.id === selectedRef.current;
      });
      if (index === -1) {
        return;
      }
      var point = colors.current[index];
      var formatLeft = Math.max(0, Math.min(sliderRectRef.current.width, left));
      var percentLeft = formatLeft / sliderRectRef.current.width * 100;
      var newColors = colors.current.map(function (item, i) {
        return index !== i ? item : {
          color: point.color,
          left: percentLeft,
          id: point.id
        };
      });
      handleColorsChange(newColors);
    }, [handleColorsChange]);
    var handleStart = function handleStart(id, e) {
      if (disabled) return;
      e.preventDefault();
      e.stopPropagation();
      handleSelectedIdChange(id);
      sliderRef.current.focus();
    };
    useMouseEvent(sliderRef, {
      onMove: function onMove(_, ctx) {
        if (disabled) return;
        updateActiveThumbLeft(ctx.coordinate.x);
      }
    });
    var handleKeyup = function handleKeyup(e) {
      if (disabled) return;
      var points = _toConsumableArray(colors.current);
      var pos = points.findIndex(function (c) {
        return c.id === selectedRef.current;
      });
      var length = points.length;
      if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
        points.splice(pos, 1);
        if (!points[pos]) {
          pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
        }
        var current = points[pos];
        handleColorsChange(points);
        handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
      }
    };
    var handleThumbBarClick = function handleThumbBarClick(e) {
      if (disabled || !props.enableMultipleGradient) return;
      updateSliderRect();
      var left = e.clientX - sliderRectRef.current.left;
      left = Math.max(0, Math.min(sliderRectRef.current.width, left));
      var percentLeft = left / sliderRectRef.current.width * 100;
      var newPoint = genGradientPoint(percentLeft, props.color.rgba);
      var newColors = _toConsumableArray(colors.current);
      newColors.push(newPoint);
      handleColorsChange(newColors);
      handleSelectedIdChange(newPoint.id);
    };
    React.useEffect(function () {
      updateSliderRect();
    }, []);
    var gradientColors = props.color.gradientColors;
    var thumbBackground = gradientColors2string({
      points: gradientColors,
      degree: 90
    });
    var handleClickThumb = function handleClickThumb(e, t) {
      handleSelectedIdChange(t.id);
      e.stopPropagation();
    };
    var allGradientColors = _toConsumableArray(colorsState);
    var _genGradientPoint = genGradientPoint(0, (_allGradientColors$ = allGradientColors[0]) === null || _allGradientColors$ === void 0 ? void 0 : _allGradientColors$.color),
      leftColor = _genGradientPoint.color;
    var _genGradientPoint2 = genGradientPoint(100, (_allGradientColors = allGradientColors[allGradientColors.length - 1]) === null || _allGradientColors === void 0 ? void 0 : _allGradientColors.color),
      rightColor = _genGradientPoint2.color;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__gradient")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__gradient-slider"),
      style: {
        background: "linear-gradient(90deg, ".concat(leftColor, " 0%, ").concat(leftColor, " 50%, ").concat(rightColor, " 50%, ").concat(rightColor, " 100%)")
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: sliderRef,
      className: classNames$1("".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")),
      onKeyUp: handleKeyup,
      tabIndex: 0
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "gradient-thumbs",
      onClick: handleThumbBarClick,
      style: {
        background: thumbBackground
      }
    }, colorsState.map(function (t) {
      var left = "".concat(Math.round(t.left * 100) / 100, "%");
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: classNames$1(["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""]),
        key: t.id,
        title: "".concat(t.color, " ").concat(left),
        style: {
          color: t.color,
          left: left
        },
        onClick: function onClick(e) {
          return handleClickThumb(e, t);
        },
        onMouseDown: function onMouseDown(e) {
          return handleStart(t.id, e);
        }
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")])
      }));
    })))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__gradient-degree"),
      title: "".concat(degree, "deg")
    }, /* @__PURE__ */React__default["default"].createElement(InputNumber, {
      theme: "normal",
      min: 0,
      max: 360,
      step: 1,
      size: "small",
      format: function format(value) {
        return "".concat(value, "\xB0");
      },
      value: degree.current,
      onBlur: handleDegreeChange,
      onEnter: handleDegreeChange,
      onChange: handleDegreeChange,
      disabled: props.disabled
    })));
  };
  var LinearGradient$1 = /*#__PURE__*/React__default["default"].memo(LinearGradient);

  var Saturation = function Saturation(props) {
    var color = props.color,
      disabled = props.disabled,
      onChange = props.onChange,
      baseClassName = props.baseClassName;
    var panelRef = React.useRef(null);
    var panelRectRef = React.useRef({
      width: SATURATION_PANEL_DEFAULT_WIDTH,
      height: SATURATION_PANEL_DEFAULT_HEIGHT
    });
    var styles = function styles() {
      var saturation = color.saturation,
        value = color.value,
        rgb = color.rgb;
      var _panelRectRef$current = panelRectRef.current,
        width = _panelRectRef$current.width,
        height = _panelRectRef$current.height;
      var top = Math.round((1 - value) * height);
      var left = Math.round(saturation * width);
      return {
        color: rgb,
        left: "".concat(left, "px"),
        top: "".concat(top, "px")
      };
    };
    var getSaturationAndValue = function getSaturationAndValue(coordinate) {
      var _panelRectRef$current2 = panelRectRef.current,
        width = _panelRectRef$current2.width,
        height = _panelRectRef$current2.height;
      var x = coordinate.x,
        y = coordinate.y;
      var saturation = Math.round(x / width * 100);
      var value = Math.round((1 - y / height) * 100);
      return {
        saturation: saturation,
        value: value
      };
    };
    var handleDrag = React.useCallback(function (_ref) {
      var x = _ref.x,
        y = _ref.y;
      if (disabled) return;
      var _getSaturationAndValu = getSaturationAndValue({
          x: x,
          y: y
        }),
        saturation = _getSaturationAndValu.saturation,
        value = _getSaturationAndValu.value;
      onChange({
        saturation: saturation / 100,
        value: value / 100
      });
    }, [disabled, onChange]);
    useMouseEvent(panelRef, {
      onDown: function onDown() {
        if (disabled) return;
        panelRectRef.current.width = panelRef.current.offsetWidth;
        panelRectRef.current.height = panelRef.current.offsetHeight;
      },
      onMove: function onMove(_, ctx) {
        handleDrag(ctx.coordinate);
      },
      onUp: function onUp(_, ctx) {
        handleDrag(ctx.coordinate);
      }
    });
    React.useEffect(function () {
      var _panelRef$current, _panelRef$current2;
      panelRectRef.current.width = ((_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.offsetWidth) || SATURATION_PANEL_DEFAULT_WIDTH;
      panelRectRef.current.height = ((_panelRef$current2 = panelRef.current) === null || _panelRef$current2 === void 0 ? void 0 : _panelRef$current2.offsetHeight) || SATURATION_PANEL_DEFAULT_HEIGHT;
    }, [handleDrag]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: panelRef,
      className: "".concat(baseClassName, "__saturation"),
      style: {
        background: "hsl(".concat(color.hue, ", 100%, 50%)")
      }
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassName, "__thumb"),
      role: "slider",
      tabIndex: 0,
      style: styles()
    }));
  };
  var SaturationPanel = /*#__PURE__*/React__default["default"].memo(Saturation);

  var Swatches = function Swatches(props) {
    var baseClassName = props.baseClassName,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? [] : _props$colors,
      _props$editable = props.editable,
      editable = _props$editable === void 0 ? false : _props$editable,
      title = props.title,
      onChange = props.onChange,
      disabled = props.disabled,
      onSetColor = props.onSetColor,
      handleAddColor = props.handleAddColor;
    var _useGlobalIcon = useGlobalIcon({
        DeleteIcon: TdDeleteIcon,
        AddIcon: TdAddIcon
      }),
      DeleteIcon = _useGlobalIcon.DeleteIcon,
      AddIcon = _useGlobalIcon.AddIcon;
    var swatchesClass = "".concat(baseClassName, "__swatches");
    var _useCommonClassName = useCommonClassName(),
      statusClassNames = _useCommonClassName.STATUS;
    var isEqualCurrentColor = function isEqualCurrentColor(color) {
      return Color.compare(color, props.color.css);
    };
    var selectedColorIndex = function selectedColorIndex() {
      return colors.findIndex(function (color) {
        return isEqualCurrentColor(color);
      });
    };
    var handleRemoveColor = function handleRemoveColor() {
      var selectedIndex = selectedColorIndex();
      if (selectedIndex > -1) {
        var newColors = colors.filter(function (item, index) {
          return index !== selectedIndex;
        });
        onChange(newColors);
      }
    };
    var handleClick = function handleClick(color) {
      return onSetColor(color);
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: swatchesClass
    }, title ? /* @__PURE__ */React__default["default"].createElement("h3", {
      className: "".concat(swatchesClass, "--title")
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), editable && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(swatchesClass, "--actions")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      role: "button",
      className: "".concat(baseClassName, "__icon"),
      onClick: function onClick() {
        return handleAddColor();
      }
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon, null)), colors.length > 0 ? /* @__PURE__ */React__default["default"].createElement("span", {
      role: "button",
      className: "".concat(baseClassName, "__icon"),
      onClick: function onClick() {
        return handleRemoveColor();
      }
    }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon, null)) : null)) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(swatchesClass, "--items"), "narrow-scrollbar")
    }, colors.map(function (color) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: classNames$1("".concat(swatchesClass, "--item"), isEqualCurrentColor(color) && editable ? statusClassNames.active : ""),
        key: color,
        onClick: function onClick() {
          if (disabled) {
            return;
          }
          handleClick(color);
        }
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(swatchesClass, "--item__color"), "".concat(baseClassName, "--bg-alpha"))
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(swatchesClass, "--item__inner"),
        style: {
          background: color
        }
      })));
    })));
  };
  var SwatchesPanel = /*#__PURE__*/React__default["default"].memo(Swatches);

  function ownKeys$l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$l(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Panel = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var baseClassName = useClassNames();
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var _useLocaleReceiver = useLocaleReceiver("colorPicker"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var _useDefaultProps = useDefaultProps(props, colorPickerDefaultProps),
      className = _useDefaultProps.className,
      colorModes = _useDefaultProps.colorModes,
      defaultRecentColors = _useDefaultProps.defaultRecentColors,
      disabled = _useDefaultProps.disabled,
      enableAlpha = _useDefaultProps.enableAlpha,
      enableMultipleGradient = _useDefaultProps.enableMultipleGradient,
      format = _useDefaultProps.format,
      style = _useDefaultProps.style,
      swatchColors = _useDefaultProps.swatchColors,
      showPrimaryColorPreview = _useDefaultProps.showPrimaryColorPreview,
      onChange = _useDefaultProps.onChange,
      onPaletteBarChange = _useDefaultProps.onPaletteBarChange,
      onRecentColorsChange = _useDefaultProps.onRecentColorsChange;
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerValue = _useControlled2[0],
      setInnerValue = _useControlled2[1];
    var _useState = React.useState(0),
      _useState2 = _slicedToArray$1(_useState, 2),
      setUpdateId = _useState2[1];
    var getModeByColor = function getModeByColor(input) {
      if (colorModes.length === 1) return colorModes[0];
      return colorModes.includes("linear-gradient") && Color.isGradientColor(input) ? "linear-gradient" : "monochrome";
    };
    var _useState3 = React.useState(function () {
        return getModeByColor(innerValue);
      }),
      _useState4 = _slicedToArray$1(_useState3, 2),
      mode = _useState4[0],
      setMode = _useState4[1];
    var isGradient = mode === "linear-gradient";
    var defaultEmptyColor = isGradient ? DEFAULT_LINEAR_GRADIENT : DEFAULT_COLOR;
    var _useControlled3 = useControlled(props, "recentColors", onRecentColorsChange, {
        defaultRecentColors: defaultRecentColors
      }),
      _useControlled4 = _slicedToArray$1(_useControlled3, 2),
      recentlyUsedColors = _useControlled4[0],
      setRecentlyUsedColors = _useControlled4[1];
    var colorInstanceRef = React.useRef(new Color(innerValue || defaultEmptyColor));
    var formatRef = React.useRef(initColorFormat(format, enableAlpha));
    var baseProps = {
      color: colorInstanceRef.current,
      disabled: disabled,
      baseClassName: baseClassName
    };
    var updateColor = function updateColor(value) {
      colorInstanceRef.current.update(value);
      setUpdateId(performance.now());
    };
    var emitColorChange = React.useCallback(function (trigger) {
      var value = colorInstanceRef.current.getFormattedColor(formatRef.current, enableAlpha);
      setInnerValue(value, {
        color: getColorObject(colorInstanceRef.current),
        trigger: trigger || "palette-saturation-brightness"
      });
      setUpdateId(performance.now());
    }, [enableAlpha, setInnerValue]);
    React.useEffect(function () {
      var currentColor = colorInstanceRef.current.getFormattedColor(formatRef.current, enableAlpha);
      if (innerValue === currentColor) return;
      var newMode = getModeByColor(innerValue);
      setMode(newMode);
      colorInstanceRef.current.isGradient = newMode === "linear-gradient";
      updateColor(innerValue);
    }, [innerValue]);
    var handleModeChange = function handleModeChange(newMode) {
      setMode(newMode);
      var isGradientMode = newMode === "linear-gradient";
      colorInstanceRef.current.isGradient = isGradientMode;
      var _colorInstanceRef$cur = colorInstanceRef.current,
        rgba = _colorInstanceRef$cur.rgba,
        gradientColors = _colorInstanceRef$cur.gradientColors,
        linearGradient = _colorInstanceRef$cur.linearGradient;
      if (isGradientMode) {
        updateColor(gradientColors.length > 0 ? linearGradient : DEFAULT_LINEAR_GRADIENT);
      } else {
        updateColor(rgba);
      }
      emitColorChange();
    };
    var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
      setRecentlyUsedColors(colors);
    };
    var addRecentlyUsedColor = function addRecentlyUsedColor() {
      var colors = _toConsumableArray(recentlyUsedColors || []);
      var _colorInstanceRef$cur2 = colorInstanceRef.current,
        isGradient2 = _colorInstanceRef$cur2.isGradient,
        linearGradient = _colorInstanceRef$cur2.linearGradient,
        rgba = _colorInstanceRef$cur2.rgba;
      var currentColor = isGradient2 ? linearGradient : rgba;
      var index = colors.indexOf(currentColor);
      if (index > -1) {
        colors.splice(index, 1);
      }
      colors.unshift(currentColor);
      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
      }
      handleRecentlyUsedColorsChange(colors);
    };
    var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
      var saturation = _ref.saturation,
        value = _ref.value;
      var _colorInstanceRef$cur3 = colorInstanceRef.current,
        sat = _colorInstanceRef$cur3.saturation,
        val = _colorInstanceRef$cur3.value;
      var changeTrigger = "palette-saturation-brightness";
      if (value !== val && saturation !== sat) {
        changeTrigger = "palette-saturation-brightness";
        colorInstanceRef.current.saturation = saturation;
        colorInstanceRef.current.value = value;
      } else if (saturation !== sat) {
        changeTrigger = "palette-saturation";
        colorInstanceRef.current.saturation = saturation;
      } else if (value !== val) {
        changeTrigger = "palette-brightness";
        colorInstanceRef.current.value = value;
      } else {
        return;
      }
      emitColorChange(changeTrigger);
    };
    var handleHueChange = function handleHueChange(hue) {
      colorInstanceRef.current.hue = hue;
      emitColorChange("palette-hue-bar");
      onPaletteBarChange === null || onPaletteBarChange === void 0 || onPaletteBarChange({
        color: getColorObject(colorInstanceRef.current)
      });
    };
    var handleAlphaChange = function handleAlphaChange(alpha) {
      colorInstanceRef.current.alpha = alpha;
      emitColorChange("palette-alpha-bar");
      onPaletteBarChange === null || onPaletteBarChange === void 0 || onPaletteBarChange({
        color: getColorObject(colorInstanceRef.current)
      });
    };
    var handleGradientChange = function handleGradientChange(_ref2) {
      var key = _ref2.key,
        payload = _ref2.payload;
      var trigger = "palette-saturation-brightness";
      switch (key) {
        case "degree":
          colorInstanceRef.current.gradientDegree = payload;
          trigger = "input";
          break;
        case "selectedId":
          colorInstanceRef.current.gradientSelectedId = payload;
          break;
        case "colors":
          colorInstanceRef.current.gradientColors = payload;
          break;
      }
      emitColorChange(trigger);
    };
    var handleInputChange = function handleInputChange() {
      emitColorChange("input");
    };
    var SwatchesArea = /*#__PURE__*/React__default["default"].memo(function () {
      var onlySupportGradient = colorModes.length === 1 && colorModes.includes("linear-gradient");
      var recentColors = recentlyUsedColors;
      if (onlySupportGradient && Array.isArray(recentColors)) {
        recentColors = recentColors.filter(function (color) {
          return Color.isGradientColor(color);
        });
      }
      var showUsedColors = Array.isArray(recentColors) || recentColors === true;
      var systemColors = swatchColors;
      if (systemColors === void 0) {
        systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
      }
      if (onlySupportGradient) {
        var _systemColors;
        systemColors = (_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.filter(function (color) {
          return Color.isGradientColor(color);
        });
      }
      var showSystemColors = Array.isArray(systemColors);
      var handleSetColor = function handleSetColor(value, trigger) {
        var newMode = getModeByColor(value);
        setMode(newMode);
        colorInstanceRef.current.isGradient = newMode === "linear-gradient";
        updateColor(value);
        emitColorChange(trigger);
      };
      if (!showSystemColors && !showUsedColors) return null;
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(baseClassName, "__swatches-wrap")
      }, showUsedColors && /* @__PURE__ */React__default["default"].createElement(SwatchesPanel, _objectSpread$l(_objectSpread$l({}, baseProps), {}, {
        title: t(local.recentColorTitle),
        editable: true,
        handleAddColor: addRecentlyUsedColor,
        colors: recentColors,
        onSetColor: function onSetColor(color) {
          return handleSetColor(color, "recent");
        },
        onChange: handleRecentlyUsedColorsChange
      })), showSystemColors && /* @__PURE__ */React__default["default"].createElement(SwatchesPanel, _objectSpread$l(_objectSpread$l({}, baseProps), {}, {
        title: t(local.swatchColorTitle),
        colors: systemColors,
        onSetColor: function onSetColor(color) {
          return handleSetColor(color, "preset");
        }
      }))));
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(baseClassName, "__panel"), disabled ? STATUS.disabled : false, className),
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      style: _objectSpread$l({}, style),
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement(PanelHeader, {
      baseClassName: baseClassName,
      mode: mode,
      colorModes: colorModes,
      onModeChange: handleModeChange
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__body")
    }, isGradient && /* @__PURE__ */React__default["default"].createElement(LinearGradient$1, _objectSpread$l(_objectSpread$l({}, baseProps), {}, {
      enableMultipleGradient: enableMultipleGradient,
      onChange: handleGradientChange
    })), /* @__PURE__ */React__default["default"].createElement(SaturationPanel, _objectSpread$l(_objectSpread$l({}, baseProps), {}, {
      onChange: handleSatAndValueChange
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__sliders-wrapper")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__sliders")
    }, /* @__PURE__ */React__default["default"].createElement(HueSlider$1, _objectSpread$l(_objectSpread$l({}, baseProps), {}, {
      onChange: handleHueChange
    })), enableAlpha && /* @__PURE__ */React__default["default"].createElement(AlphaSlider, _objectSpread$l(_objectSpread$l({}, baseProps), {}, {
      onChange: handleAlphaChange
    }))), showPrimaryColorPreview ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")])
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(baseClassName, "__sliders-preview-inner"),
      style: {
        background: isGradient ? colorInstanceRef.current.linearGradient : colorInstanceRef.current.rgba
      }
    })) : null), /* @__PURE__ */React__default["default"].createElement(FormatPanel$1, _objectSpread$l(_objectSpread$l(_objectSpread$l({}, props), baseProps), {}, {
      format: formatRef.current,
      onInputChange: handleInputChange
    })), /* @__PURE__ */React__default["default"].createElement(SwatchesArea, null)));
  });
  var ColorPanel = /*#__PURE__*/React__default["default"].memo(Panel);

  function ownKeys$k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$k(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ColorPickerPanel$1 = function ColorPickerPanel(props) {
    return /* @__PURE__ */React__default["default"].createElement(ColorPanel, _objectSpread$k(_objectSpread$k({}, props), {}, {
      popupProps: null
    }));
  };
  ColorPickerPanel$1.displayName = "ColorPickerPanel";
  var _ColorPickerPanel = /*#__PURE__*/React__default["default"].memo(ColorPickerPanel$1);

  function ownKeys$j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$j(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ColorPickerTrigger = function ColorPickerTrigger(props) {
    var baseClassName = useClassNames();
    var _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$borderless = props.borderless,
      borderless = _props$borderless === void 0 ? false : _props$borderless,
      _props$inputProps = props.inputProps,
      inputProps = _props$inputProps === void 0 ? {
        autoWidth: true
      } : _props$inputProps,
      clearable = props.clearable,
      onClear = props.onClear;
    var handleChange = function handleChange(input) {
      if (input !== props.value) {
        var _props$onChange;
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, input, {
          color: getColorObject(new Color(input)),
          trigger: "input"
        });
      }
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__trigger--default")
    }, /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$j(_objectSpread$j({
      borderless: borderless,
      clearable: clearable
    }, inputProps), {}, {
      value: props.value,
      disabled: disabled,
      label: /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha"))
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "color-inner",
        style: {
          background: props.value
        }
      })),
      onChange: handleChange,
      onClear: onClear || noop
    })));
  };
  var ColorTrigger = /*#__PURE__*/React__default["default"].memo(ColorPickerTrigger);

  var _excluded$a = ["popupProps", "clearable", "disabled", "borderless", "inputProps", "onChange", "onClear", "colorModes"],
    _excluded2 = ["overlayClassName", "overlayInnerStyle"];
  function ownKeys$i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$i(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ColorPicker$1 = function ColorPicker(props) {
    var baseClassName = useClassNames();
    var _useDefaultProps = useDefaultProps(props, colorPickerDefaultProps),
      popupProps = _useDefaultProps.popupProps,
      clearable = _useDefaultProps.clearable,
      disabled = _useDefaultProps.disabled,
      borderless = _useDefaultProps.borderless,
      inputProps = _useDefaultProps.inputProps,
      onChange = _useDefaultProps.onChange,
      onClear = _useDefaultProps.onClear,
      colorModes = _useDefaultProps.colorModes,
      rest = _objectWithoutProperties$2(_useDefaultProps, _excluded$a);
    var _ref = popupProps || {},
      overlayClassName = _ref.overlayClassName,
      _ref$overlayInnerStyl = _ref.overlayInnerStyle,
      overlayInnerStyle = _ref$overlayInnerStyl === void 0 ? {} : _ref$overlayInnerStyl,
      restPopupProps = _objectWithoutProperties$2(_ref, _excluded2);
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerValue = _useControlled2[0],
      setInnerValue = _useControlled2[1];
    var triggerRef = React.useRef(null);
    var colorPanelRef = React.useRef(null);
    var popProps = _objectSpread$i(_objectSpread$i({
      placement: "bottom-left",
      expandAnimation: true,
      trigger: "click"
    }, restPopupProps), {}, {
      overlayClassName: [baseClassName, overlayClassName],
      overlayInnerStyle: _objectSpread$i({
        padding: 0
      }, overlayInnerStyle)
    });
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$i(_objectSpread$i({}, popProps), {}, {
      content: !disabled && /* @__PURE__ */React__default["default"].createElement(ColorPanel, _objectSpread$i(_objectSpread$i({}, rest), {}, {
        disabled: disabled,
        value: innerValue,
        colorModes: colorModes,
        onChange: function onChange(value, context) {
          return setInnerValue(value, context);
        },
        ref: colorPanelRef
      }))
    }), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(baseClassName, "__trigger"),
      ref: triggerRef
    }, /* @__PURE__ */React__default["default"].createElement(ColorTrigger, {
      clearable: clearable,
      disabled: disabled,
      borderless: borderless,
      inputProps: inputProps,
      value: innerValue,
      onChange: setInnerValue,
      onClear: onClear
    })));
  };
  ColorPicker$1.displayName = "ColorPicker";
  var _ColorPicker = /*#__PURE__*/React__default["default"].memo(ColorPicker$1);

  var ColorPickerPanel = _ColorPickerPanel;
  var ColorPicker = _ColorPicker;

  var cardDefaultProps = {
    bordered: true,
    headerBordered: false,
    hoverShadow: false,
    loading: false,
    shadow: false,
    size: "medium",
    theme: "normal"
  };

  function ownKeys$h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$h(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Card$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$children;
    var _useDefaultProps = useDefaultProps(props, cardDefaultProps),
      actions = _useDefaultProps.actions,
      avatar = _useDefaultProps.avatar,
      bordered = _useDefaultProps.bordered,
      className = _useDefaultProps.className,
      cover = _useDefaultProps.cover,
      description = _useDefaultProps.description,
      footer = _useDefaultProps.footer,
      header = _useDefaultProps.header,
      headerBordered = _useDefaultProps.headerBordered,
      hoverShadow = _useDefaultProps.hoverShadow,
      loading = _useDefaultProps.loading,
      shadow = _useDefaultProps.shadow,
      size = _useDefaultProps.size,
      style = _useDefaultProps.style,
      subtitle = _useDefaultProps.subtitle,
      title = _useDefaultProps.title,
      theme = _useDefaultProps.theme,
      status = _useDefaultProps.status,
      loadingProps = _useDefaultProps.loadingProps,
      bodyClassName = _useDefaultProps.bodyClassName,
      bodyStyle = _useDefaultProps.bodyStyle,
      footerClassName = _useDefaultProps.footerClassName,
      footerStyle = _useDefaultProps.footerStyle,
      headerClassName = _useDefaultProps.headerClassName,
      headerStyle = _useDefaultProps.headerStyle;
    var children = (_props$children = props.children) !== null && _props$children !== void 0 ? _props$children : props.content;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var commonClassNames = useCommonClassName();
    var isPoster2 = theme === "poster2";
    var cardClass = classNames$1("".concat(classPrefix, "-card"), className, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, commonClassNames.SIZE.small, size === "small"), "".concat(classPrefix, "-card--bordered"), bordered), "".concat(classPrefix, "-card--shadow"), shadow), "".concat(classPrefix, "-card--shadow-hover"), hoverShadow));
    var showHeader = header || title || subtitle || description || avatar || actions && !isPoster2 || status && isPoster2;
    var headerClass = classNames$1(headerClassName, _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-card__header"), showHeader), "".concat(classPrefix, "-card__title--bordered"), headerBordered));
    var titleClass = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-card__title"), title));
    var subtitleClass = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-card__subtitle"), subtitle));
    var actionClass = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-card__actions"), actions));
    var footerClass = classNames$1(footerClassName, _defineProperty$2({}, "".concat(classPrefix, "-card__footer"), footer));
    var coverClass = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-card__cover"), cover));
    var avatarClass = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-card__avatar"), avatar));
    var bodyClass = classNames$1(bodyClassName, _defineProperty$2({}, "".concat(classPrefix, "-card__body"), children));
    var descriptionClass = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-card__description"), description));
    var renderTitle = title ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: titleClass
    }, title) : null;
    var renderSubtitle = subtitle ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: subtitleClass
    }, subtitle) : null;
    var renderDescription = description ? /* @__PURE__ */React__default["default"].createElement("p", {
      className: descriptionClass
    }, description) : null;
    var renderAvatar = avatar && /* @__PURE__ */React__default["default"].createElement("div", {
      className: avatarClass
    }, avatar);
    var renderHeaderActions = actions && !isPoster2 && /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionClass
    }, actions);
    var renderFooterActions = actions && isPoster2 && /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionClass
    }, actions);
    var renderStatus = status && isPoster2 && /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionClass
    }, status);
    var renderHeader = function renderHeader() {
      if (header) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: headerClass,
          style: headerStyle
        }, header);
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: headerClass,
        style: headerStyle
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-card__header-wrapper")
      }, renderAvatar, /* @__PURE__ */React__default["default"].createElement("div", null, renderTitle, renderSubtitle, renderDescription)), renderHeaderActions, renderStatus);
    };
    var renderCover = cover ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: coverClass
    }, typeof cover === "string" ? /* @__PURE__ */React__default["default"].createElement("img", {
      src: cover,
      alt: ""
    }) : cover) : null;
    var renderChildren = children && /* @__PURE__ */React__default["default"].createElement("div", {
      className: bodyClass,
      style: bodyStyle
    }, children);
    var renderFooter = footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: footerClass,
      style: footerStyle
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-card__footer-wrapper")
    }, footer), renderFooterActions);
    var card = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, showHeader ? renderHeader() : null, renderCover, renderChildren, renderFooter);
    var childrenNode = null;
    if (!Reflect.has(props, "loading")) {
      childrenNode = card;
    } else if (/*#__PURE__*/React__default["default"].isValidElement(loading)) {
      childrenNode = /*#__PURE__*/React__default["default"].cloneElement(loading, null, card);
    } else {
      childrenNode = /* @__PURE__ */React__default["default"].createElement(Loading, _objectSpread$h(_objectSpread$h({}, loadingProps), {}, {
        loading: !!loading
      }), card);
    }
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: cardClass,
      style: style
    }, childrenNode);
  });
  Card$1.displayName = "Card";

  var Card = Card$1;

  var CollapseContext = /*#__PURE__*/React__default["default"].createContext({
    defaultExpandAll: false,
    disabled: false,
    expandIconPlacement: "left",
    expandOnRowClick: true,
    expandIcon: true
  });
  var useCollapseContext = function useCollapseContext() {
    return React__default["default"].useContext(CollapseContext);
  };

  var collapseDefaultProps = {
    borderless: false,
    defaultExpandAll: false,
    expandIcon: true,
    expandIconPlacement: "left",
    expandMutex: false,
    expandOnRowClick: true
  };
  var collapsePanelDefaultProps = {
    destroyOnCollapse: false,
    disabled: void 0,
    expandIcon: void 0
  };

  function ownKeys$g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$g(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CollapsePanel = function CollapsePanel(props) {
    var _useDefaultProps = useDefaultProps(props, collapsePanelDefaultProps),
      value = _useDefaultProps.value,
      disabled = _useDefaultProps.disabled,
      destroyOnCollapse = _useDefaultProps.destroyOnCollapse,
      expandIcon = _useDefaultProps.expandIcon,
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      header = _useDefaultProps.header,
      headerRightContent = _useDefaultProps.headerRightContent,
      children = _useDefaultProps.children,
      index = _useDefaultProps.index;
    var _useCollapseContext = useCollapseContext(),
      disableAll = _useCollapseContext.disabled,
      defaultExpandAll = _useCollapseContext.defaultExpandAll,
      expandIconPlacement = _useCollapseContext.expandIconPlacement,
      expandOnRowClick = _useCollapseContext.expandOnRowClick,
      expandIconAll = _useCollapseContext.expandIcon,
      updateCollapseValue = _useCollapseContext.updateCollapseValue,
      collapseValue = _useCollapseContext.collapseValue;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var componentName = "".concat(classPrefix, "-collapse-panel");
    var innerValue = value || index;
    var finalExpandIcon = (expandIcon === void 0 ? expandIconAll : expandIcon) || null;
    var headRef = React.useRef(null);
    var iconRef = React.useRef(null);
    var contentRef = React.useRef(null);
    var bodyRef = React.useRef(null);
    var isDisabled = disabled || !!disableAll;
    React.useEffect(function () {
      if (defaultExpandAll) {
        updateCollapseValue(innerValue);
      }
    }, []);
    var isActive = Array.isArray(collapseValue) ? collapseValue.includes(innerValue) : collapseValue === innerValue;
    var classes = classNames$1(componentName, _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), isDisabled), className);
    var handleClick = function handleClick(e) {
      var canExpand = expandOnRowClick && e.currentTarget === headRef.current || e.currentTarget === iconRef.current;
      if (canExpand && !isDisabled) {
        updateCollapseValue(innerValue, {
          e: e
        });
      }
      e.stopPropagation();
    };
    var renderIcon = function renderIcon() {
      var iconNode = null;
      if (/*#__PURE__*/React__default["default"].isValidElement(finalExpandIcon)) {
        iconNode = finalExpandIcon;
      } else if (finalExpandIcon) {
        iconNode = /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
          className: classNames$1("".concat(componentName, "__icon--default"))
        });
      }
      return iconNode && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentName, "__icon ").concat(componentName, "__icon--").concat(expandIconPlacement, " ").concat(isActive ? "".concat(componentName, "__icon--active") : ""),
        ref: iconRef,
        onClick: handleClick
      }, iconNode);
    };
    var renderHeader = function renderHeader() {
      var cls = ["".concat(componentName, "__header"), _defineProperty$2({}, "".concat(classPrefix, "-is-clickable"), expandOnRowClick && !isDisabled)];
      return /* @__PURE__ */React__default["default"].createElement("div", {
        ref: headRef,
        className: classNames$1(cls),
        onClick: handleClick
      }, expandIconPlacement === "left" && renderIcon(), header, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentName, "__header--blank")
      }), headerRightContent, expandIconPlacement === "right" && renderIcon());
    };
    var renderBody = function renderBody() {
      var transitionCallbacks = {
        onEnter: function onEnter() {
          bodyRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.clientHeight, "px");
        },
        onEntered: function onEntered() {
          bodyRef.current.style.height = "auto";
        },
        onExit: function onExit() {
          bodyRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.clientHeight, "px");
        },
        onExiting: function onExiting() {
          bodyRef.current.style.height = "0px";
        }
      };
      return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$g({
        "in": isActive,
        appear: true,
        timeout: 300,
        nodeRef: bodyRef,
        unmountOnExit: destroyOnCollapse
      }, transitionCallbacks), /* @__PURE__ */React__default["default"].createElement("div", {
        style: {
          height: 0
        },
        className: classNames$1("".concat(componentName, "__body"), "".concat(classPrefix, "-slide-down-enter-active"), _defineProperty$2({}, "".concat(componentName, "__body--collapsed"), !isActive)),
        ref: bodyRef
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(componentName, "__content"),
        ref: contentRef
      }, children)));
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classes,
      style: _objectSpread$g({}, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(componentName, "__wrapper")
    }, renderHeader(), renderBody()));
  };
  CollapsePanel.displayName = "CollapsePanel";

  var _excluded$9 = ["defaultExpandAll", "disabled", "expandIconPlacement", "expandOnRowClick", "expandIcon"];
  function ownKeys$f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$f(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Collapse$1 = forwardRefWithStatics(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, collapseDefaultProps);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var componentName = "".concat(classPrefix, "-collapse");
    var borderlessClass = "".concat(classPrefix, "--border-less");
    var defaultExpandAll = props.defaultExpandAll,
      disabled = props.disabled,
      expandIconPlacement = props.expandIconPlacement,
      expandOnRowClick = props.expandOnRowClick,
      expandIcon = props.expandIcon,
      rest = _objectWithoutProperties$2(props, _excluded$9);
    var children = rest.children,
      className = rest.className,
      style = rest.style,
      expandMutex = rest.expandMutex,
      borderless = rest.borderless,
      onChange = rest.onChange;
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      collapseValue = _useControlled2[0],
      setCollapseValue = _useControlled2[1];
    var collapseValues = React.useRef(collapseValue);
    React.useEffect(function () {
      collapseValues.current = collapseValue;
    }, [collapseValue]);
    var updateCollapseValue = function updateCollapseValue(value, context) {
      var newValue = [].concat(collapseValues.current || []);
      var index = newValue.indexOf(value);
      if (index >= 0) {
        newValue.splice(index, 1);
      } else if (expandMutex) {
        newValue = [value];
      } else {
        newValue.push(value);
      }
      collapseValues.current = _toConsumableArray(newValue);
      setCollapseValue(newValue, context);
    };
    var classes = [componentName, _defineProperty$2({}, borderlessClass, !!borderless), className];
    var childrenList = React__default["default"].Children.toArray(children).filter(function (child) {
      return child.type.displayName === CollapsePanel.displayName;
    });
    var collapsePanelList = function collapsePanelList() {
      return childrenList.map(function (child, index) {
        var key = child.key || String(index);
        var childProps = _objectSpread$f({
          key: key,
          index: index + 1
        }, child.props);
        return /*#__PURE__*/React__default["default"].cloneElement(child, childProps);
      });
    };
    return /* @__PURE__ */React__default["default"].createElement(CollapseContext.Provider, {
      value: {
        defaultExpandAll: defaultExpandAll,
        disabled: disabled,
        expandIconPlacement: expandIconPlacement,
        expandOnRowClick: expandOnRowClick,
        expandIcon: expandIcon,
        updateCollapseValue: updateCollapseValue,
        collapseValue: collapseValue
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(classes),
      style: style,
      ref: ref
    }, collapsePanelList()));
  }, {
    Panel: CollapsePanel
  });
  Collapse$1.displayName = "Collapse";

  var Collapse = Collapse$1;

  function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function generateBase64Url(_ref, onFinish) {
    var width = _ref.width,
      height = _ref.height,
      gapX = _ref.gapX,
      gapY = _ref.gapY,
      offsetLeft = _ref.offsetLeft,
      offsetTop = _ref.offsetTop,
      rotate = _ref.rotate,
      alpha = _ref.alpha,
      watermarkContent = _ref.watermarkContent,
      lineSpace = _ref.lineSpace,
      _ref$fontColor = _ref.fontColor,
      fontColor = _ref$fontColor === void 0 ? "rgba(0,0,0,0.1)" : _ref$fontColor;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (!ctx) {
      console.warn("\u5F53\u524D\u73AF\u5883\u4E0D\u652F\u6301Canvas, \u65E0\u6CD5\u7ED8\u5236\u6C34\u5370");
      onFinish("");
      return;
    }
    var ratio = window.devicePixelRatio || 1;
    var canvasWidth = (gapX + width) * ratio;
    var canvasHeight = (gapY + height) * ratio;
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = "".concat(gapX + width, "px");
    canvas.style.height = "".concat(gapY + height, "px");
    ctx.translate(offsetLeft * ratio, offsetTop * ratio);
    ctx.rotate(Math.PI / 180 * Number(rotate));
    ctx.globalAlpha = alpha;
    var markWidth = width * ratio;
    var markHeight = height * ratio;
    ctx.fillStyle = "transparent";
    ctx.fillRect(0, 0, markWidth, markHeight);
    var contents = Array.isArray(watermarkContent) ? watermarkContent : [_objectSpread$e({}, watermarkContent)];
    var top = 0;
    contents.forEach(function (item) {
      if (item.url) {
        var url = item.url,
          _item$isGrayscale = item.isGrayscale,
          isGrayscale = _item$isGrayscale === void 0 ? false : _item$isGrayscale;
        item.top = top;
        top += height;
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.src = url;
        img.onload = function () {
          ctx.drawImage(img, 0, item.top * ratio, width * ratio, height * ratio);
          if (isGrayscale) {
            var imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
            var pixels = imgData.data;
            for (var i = 0; i < pixels.length; i += 4) {
              var lightness = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
              pixels[i] = lightness;
              pixels[i + 1] = lightness;
              pixels[i + 2] = lightness;
            }
            ctx.putImageData(imgData, 0, 0);
          }
          onFinish(canvas.toDataURL());
        };
      } else if (item.text) {
        var text = item.text,
          _item$fontSize = item.fontSize,
          fontSize = _item$fontSize === void 0 ? 16 : _item$fontSize,
          _item$fontFamily = item.fontFamily,
          fontFamily = _item$fontFamily === void 0 ? void 0 : _item$fontFamily,
          _item$fontWeight = item.fontWeight,
          fontWeight = _item$fontWeight === void 0 ? "normal" : _item$fontWeight;
        var fillStyle = (item === null || item === void 0 ? void 0 : item.fontColor) || fontColor;
        item.top = top;
        top += lineSpace;
        var markSize = Number(fontSize) * ratio;
        ctx.font = "normal normal ".concat(fontWeight, " ").concat(markSize, "px/").concat(markHeight, "px ").concat(fontFamily);
        ctx.textAlign = "start";
        ctx.textBaseline = "top";
        ctx.fillStyle = fillStyle;
        ctx.fillText(text, 0, item.top * ratio);
      }
    });
    onFinish(canvas.toDataURL());
  }

  function randomMovingStyle() {
    var align = Math.floor(Math.random() * 4);
    var p1 = Math.floor(Math.random() * 70) + 30;
    var leftTopLimit = 0;
    var bottomLimit = 95;
    var rightLimit = 90;
    var keyframesStyle = "\n  @keyframes watermark {\n    0%   {left: ".concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n    25% {left: ").concat(align === 0 ? rightLimit : align === 2 ? leftTopLimit : 100 - p1, "%; top: ").concat(align === 1 ? bottomLimit : align === 3 ? leftTopLimit : p1, "%;}\n    50% {left: ").concat(align === 1 ? leftTopLimit : align === 3 ? rightLimit : 100 - p1, "%; top: ").concat(align === 0 ? bottomLimit : align === 2 ? leftTopLimit : 100 - p1, "%; transform: translateX(-100%);}\n    75% {left: ").concat(align === 0 ? leftTopLimit : align === 2 ? rightLimit : p1, "%; top: ").concat(align === 1 ? leftTopLimit : align === 3 ? bottomLimit : 100 - p1, "%;}\n    100% {left: ").concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n  }\n  ");
    return keyframesStyle;
  }

  var injectStyle = function injectStyle(style) {
    var styleElement = document.createElement("style");
    var styleSheet = null;
    document.head.appendChild(styleElement);
    styleSheet = styleElement.sheet;
    styleSheet.insertRule(style, styleSheet.cssRules.length);
  };

  var watermarkDefaultProps = {
    alpha: 1,
    isRepeat: true,
    lineSpace: 16,
    movable: false,
    moveInterval: 3e3,
    removable: false,
    rotate: -22
  };

  var toLowercaseSeparator = function toLowercaseSeparator(key) {
    return key.replace(/([A-Z])/g, "-$1").toLowerCase();
  };
  var getStyleStr = function getStyleStr(style) {
    return Object.keys(style).map(function (key) {
      return "".concat(toLowercaseSeparator(key), ": ").concat(style[key], ";");
    }).join(" ");
  };

  var getColorTokenColor = function getColorTokenColor(token) {
    var _document, _styles$getPropertyVa;
    if (typeof window === "undefined") return "";
    var targetElement = (_document = document) === null || _document === void 0 ? void 0 : _document.documentElement;
    var styles = getComputedStyle(targetElement);
    return (_styles$getPropertyVa = styles.getPropertyValue(token).trim()) !== null && _styles$getPropertyVa !== void 0 ? _styles$getPropertyVa : "";
  };

  function _createForOfIteratorHelper$1(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
  function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var DEFAULT_OPTIONS = {
    debounceTime: 250,
    config: {
      attributes: true
    }
  };
  function useVariables(variables, targetElement) {
    var _useState = React.useState({}),
      _useState2 = _slicedToArray$1(_useState, 2),
      forceUpdate = _useState2[1];
    if (canUseDocument && !targetElement) {
      var _document;
      targetElement = (_document = document) === null || _document === void 0 ? void 0 : _document.documentElement;
    }
    if (!variables || Object.keys(variables).length === 0) {
      throw new Error("useVariables: variables parameter cannot be empty");
    }
    var refs = React.useMemo(function () {
      var values = {};
      Object.entries(variables).forEach(function (_ref) {
        var _ref2 = _slicedToArray$1(_ref, 2),
          key = _ref2[0],
          varName = _ref2[1];
        try {
          var initialValue = getColorTokenColor(varName);
          values[key] = initialValue;
        } catch (error) {
          console.warn("Failed to get initial value for CSS variable ".concat(varName, ":"), error);
          values[key] = "";
        }
      });
      return values;
    }, [variables]);
    var updateVariables = function updateVariables() {
      try {
        Object.entries(variables).forEach(function (_ref3) {
          var _ref4 = _slicedToArray$1(_ref3, 2),
            key = _ref4[0],
            varName = _ref4[1];
          var newValue = getColorTokenColor(varName);
          if (refs[key] && refs[key] !== newValue) {
            refs[key] = newValue;
          }
        });
        forceUpdate({});
      } catch (error) {
        console.warn("Failed to update CSS variables:", error);
      }
    };
    useMutationObservable(targetElement, function (mutationsList) {
      var _iterator = _createForOfIteratorHelper$1(mutationsList),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var mutation = _step.value;
          if (mutation.type === "attributes" && mutation.attributeName === THEME_MODE) {
            updateVariables();
            return;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }, DEFAULT_OPTIONS);
    if (!canUseDocument) return {};
    return refs;
  }

  function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Watermark$1 = function Watermark(originalProps) {
    var props = useDefaultProps(originalProps, watermarkDefaultProps);
    var alpha = props.alpha,
      _props$x = props.x,
      x = _props$x === void 0 ? 200 : _props$x,
      _props$y = props.y,
      y = _props$y === void 0 ? 210 : _props$y,
      _props$width = props.width,
      width = _props$width === void 0 ? 120 : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? 60 : _props$height,
      tempRotate = props.rotate,
      _props$zIndex = props.zIndex,
      zIndex = _props$zIndex === void 0 ? 10 : _props$zIndex,
      lineSpace = props.lineSpace,
      isRepeat = props.isRepeat,
      removable = props.removable,
      movable = props.movable,
      moveInterval = props.moveInterval,
      _props$offset = props.offset,
      offset = _props$offset === void 0 ? [] : _props$offset,
      content = props.content,
      children = props.children,
      watermarkContent = props.watermarkContent,
      className = props.className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var gapX = x;
    var gapY = y;
    var rotate = tempRotate;
    if (movable) {
      gapX = 0;
      gapY = 0;
      rotate = 0;
    }
    var clsName = "".concat(classPrefix, "-watermark");
    var _useState = React.useState(""),
      _useState2 = _slicedToArray$1(_useState, 2),
      base64Url = _useState2[0],
      setBase64Url = _useState2[1];
    var styleStr = React.useRef("");
    var watermarkRef = React.useRef(null);
    var watermarkImgRef = React.useRef(null);
    var stopObservation = React.useRef(false);
    var offsetLeft = offset[0] || gapX / 2;
    var offsetTop = offset[1] || gapY / 2;
    var _useVariables = useVariables({
        fontColor: "--td-text-color-watermark"
      }),
      fontColor = _useVariables.fontColor;
    React.useEffect(function () {
      generateBase64Url({
        width: width,
        height: height,
        rotate: rotate,
        lineSpace: lineSpace,
        alpha: alpha,
        gapX: gapX,
        gapY: gapY,
        watermarkContent: watermarkContent,
        offsetLeft: offsetLeft,
        offsetTop: offsetTop,
        fontColor: fontColor
      }, function (url) {
        setBase64Url(url);
      });
    }, [width, height, rotate, zIndex, lineSpace, alpha, offsetLeft, offsetTop, gapX, gapY, watermarkContent, fontColor]);
    React.useEffect(function () {
      styleStr.current = getStyleStr(_objectSpread$d({
        zIndex: zIndex,
        position: "absolute",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        width: movable ? "".concat(width, "px") : "100%",
        height: movable ? "".concat(height, "px") : "100%",
        backgroundSize: "".concat(gapX + width, "px"),
        pointerEvents: "none",
        backgroundRepeat: movable ? "no-repeat" : isRepeat ? "repeat" : "no-repeat",
        backgroundImage: "url('".concat(base64Url, "')"),
        animation: movable ? "watermark infinite ".concat(moveInterval * 4 / 60, "s") : "none"
      }, style));
    }, [zIndex, gapX, width, movable, isRepeat, base64Url, moveInterval, style, height]);
    var renderWatermark = React.useCallback(function () {
      var _watermarkImgRef$curr, _watermarkImgRef$curr2, _watermarkRef$current;
      stopObservation.current = true;
      (_watermarkImgRef$curr = watermarkImgRef.current) === null || _watermarkImgRef$curr === void 0 || (_watermarkImgRef$curr2 = _watermarkImgRef$curr.remove) === null || _watermarkImgRef$curr2 === void 0 || _watermarkImgRef$curr2.call(_watermarkImgRef$curr);
      watermarkImgRef.current = void 0;
      watermarkImgRef.current = document.createElement("div");
      watermarkImgRef.current.setAttribute("style", styleStr.current);
      (_watermarkRef$current = watermarkRef.current) === null || _watermarkRef$current === void 0 || _watermarkRef$current.append(watermarkImgRef.current);
      setTimeout(function () {
        stopObservation.current = false;
      });
    }, []);
    React.useEffect(function () {
      renderWatermark();
    }, [renderWatermark, zIndex, gapX, width, movable, isRepeat, base64Url, moveInterval, style, className]);
    useMutationObservable(watermarkRef.current, function (mutations) {
      if (stopObservation.current) return;
      if (removable) return;
      mutations.forEach(function (mutation) {
        if (mutation.type === "childList") {
          var removeNodes = mutation.removedNodes;
          removeNodes.forEach(function (node) {
            var element = node;
            if (element === watermarkImgRef.current) {
              renderWatermark();
            }
          });
        }
        if (mutation.target === watermarkImgRef.current) {
          renderWatermark();
        }
      });
    });
    var parent = React.useRef(null);
    React.useEffect(function () {
      parent.current = watermarkRef.current.parentElement;
      var keyframesStyle = randomMovingStyle();
      injectStyle(keyframesStyle);
    }, []);
    useMutationObservable(typeof document !== "undefined" ? document.body : null, function (mutations) {
      if (removable) return;
      mutations.forEach(function (mutation) {
        if (mutation.type === "childList") {
          var removeNodes = mutation.removedNodes;
          removeNodes.forEach(function (node) {
            var element = node;
            if (element === watermarkRef.current) {
              parent.current.appendChild(element);
            }
          });
        }
      });
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1([clsName, className]),
      ref: watermarkRef
    }, children || content);
  };

  var Watermark = Watermark$1;

  var StepsContext = /*#__PURE__*/React__default["default"].createContext({
    theme: "default",
    reverse: false,
    itemsStatus: [],
    layout: "vertical",
    mode: "alternate"
  });

  var DefaultAlign = {
    vertical: ["left", "right"],
    horizontal: ["top", "bottom"]
  };
  var useAlign = function useAlign(align) {
    var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vertical";
    return React.useMemo(function () {
      var renderAlign = layout === "vertical" ? "left" : "top";
      if (layout === "vertical" && align) {
        var index = DefaultAlign.horizontal.indexOf(align);
        var isError = index !== -1;
        isError && log.warn("Timeline", 'If layout is vertical, align should be "left","alternate" or "right" ');
        renderAlign = isError ? DefaultAlign.vertical[index] : align;
      }
      if (layout === "horizontal" && align) {
        var _index = DefaultAlign.vertical.indexOf(align);
        var _isError = _index !== -1;
        _isError && log.warn("Timeline", 'If layout is horizontal, align should be "top","alternate" or "bottom" ');
        renderAlign = _isError ? DefaultAlign.horizontal[_index] : align;
      }
      return renderAlign;
    }, [align, layout]);
  };

  var DefaultTheme = ["default", "primary", "success", "warning", "error"];
  var TimelineItem$1 = function TimelineItem(props) {
    var className = props.className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      dot = props.dot,
      _props$dotColor = props.dotColor,
      dotColor = _props$dotColor === void 0 ? "primary" : _props$dotColor,
      labelAlign = props.labelAlign,
      children = props.children,
      index = props.index,
      content = props.content,
      label = props.label,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      onClick = props.onClick;
    var _useContext = React.useContext(StepsContext),
      theme = _useContext.theme,
      reverse = _useContext.reverse,
      itemsStatus = _useContext.itemsStatus,
      layout = _useContext.layout,
      globalAlign = _useContext.globalAlign,
      mode = _useContext.mode;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var renderAlign = useAlign(globalAlign, layout);
    var getPositionClassName = function getPositionClassName(index2) {
      var left = layout === "horizontal" ? "top" : "left";
      var right = layout === "horizontal" ? "bottom" : "right";
      if (renderAlign === "alternate") {
        return labelAlign || index2 % 2 === 0 ? "".concat(classPrefix, "-timeline-item-").concat(left) : "".concat(classPrefix, "-timeline-item-").concat(right);
      }
      if (renderAlign === "left" || renderAlign === "top") {
        return "".concat(classPrefix, "-timeline-item-").concat(left);
      }
      if (renderAlign === "right" || renderAlign === "bottom") {
        return "".concat(classPrefix, "-timeline-item-").concat(right);
      }
      return "";
    };
    var dotElement = React.useMemo(function () {
      var ele = parseTNode(dot);
      if (/*#__PURE__*/React__default["default"].isValidElement(ele)) {
        var _ele$props;
        return /*#__PURE__*/React__default["default"].cloneElement(ele, {
          className: classNames$1(ele === null || ele === void 0 || (_ele$props = ele.props) === null || _ele$props === void 0 ? void 0 : _ele$props.className, "".concat(classPrefix, "-timeline-item__dot-content"))
        });
      }
      return ele;
    }, [dot, classPrefix]);
    var handleClick = function handleClick(e) {
      onClick === null || onClick === void 0 || onClick({
        e: e,
        item: omit$2(props, ["children", "index", "onClick"])
      });
    };
    var itemClassName = classNames$1(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-timeline-item"), true), "".concat(getPositionClassName(index)), true), className);
    var tailClassName = classNames$1(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-timeline-item__tail"), true), "".concat(classPrefix, "-timeline-item__tail--theme-").concat(theme), true), "".concat(classPrefix, "-timeline-item__tail--status-").concat(itemsStatus[index]), reverse));
    var dotClassName = classNames$1(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-timeline-item__dot"), true), "".concat(classPrefix, "-timeline-item__dot--custom"), !!dotElement || !dotElement && loading), "".concat(classPrefix, "-timeline-item__dot--").concat(dotColor), DefaultTheme.includes(dotColor)));
    var labelClassName = classNames$1("".concat(classPrefix, "-timeline-item__label"), _defineProperty$2({}, "".concat(classPrefix, "-timeline-item__label--").concat(mode), true));
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: itemClassName,
      style: style,
      onClick: handleClick
    }, mode === "alternate" && label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: labelClassName
    }, label), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-timeline-item__wrapper")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: dotClassName,
      style: {
        borderColor: !DefaultTheme.includes(dotColor) && dotColor
      }
    }, !dotElement && loading && /* @__PURE__ */React__default["default"].createElement(Loading, {
      size: "12px",
      className: "".concat(classPrefix, "-timeline-item__dot-content")
    }), dotElement), /* @__PURE__ */React__default["default"].createElement("div", {
      className: tailClassName
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-timeline-item__content")
    }, content || children, mode === "same" && label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: labelClassName
    }, label)));
  };
  TimelineItem$1.displayName = "TimelineItem";

  var Timeline$1 = forwardRefWithStatics(function (props, ref) {
    var _props$theme = props.theme,
      theme = _props$theme === void 0 ? "default" : _props$theme,
      labelAlign = props.labelAlign,
      children = props.children,
      className = props.className,
      style = props.style,
      _props$reverse = props.reverse,
      reverse = _props$reverse === void 0 ? false : _props$reverse,
      _props$layout = props.layout,
      layout = _props$layout === void 0 ? "vertical" : _props$layout,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? "alternate" : _props$mode;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var renderAlign = useAlign(labelAlign, layout);
    var timelineItems = React__default["default"].Children.toArray(children).filter(function (child) {
      var _child$type;
      return ((_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === TimelineItem$1.displayName;
    });
    var itemsStatus = React__default["default"].Children.map(timelineItems, function (child) {
      var _child$props;
      return ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.dotColor) || "primary";
    });
    var hasLabelItem = timelineItems.some(function (item) {
      var _item$props;
      return !!(item !== null && item !== void 0 && (_item$props = item.props) !== null && _item$props !== void 0 && _item$props.label);
    });
    if (reverse) {
      timelineItems.reverse();
    }
    var itemsCounts = React__default["default"].Children.count(timelineItems);
    var timelineClassName = classNames$1("".concat(classPrefix, "-timeline"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-timeline-").concat(renderAlign), true), "".concat(classPrefix, "-timeline-reverse"), reverse), "".concat(classPrefix, "-timeline-").concat(layout), true), "".concat(classPrefix, "-timeline-label"), hasLabelItem), "".concat(classPrefix, "-timeline-label--").concat(mode), true), className);
    return /* @__PURE__ */React__default["default"].createElement(StepsContext.Provider, {
      value: {
        theme: theme,
        reverse: reverse,
        itemsStatus: itemsStatus,
        layout: layout,
        globalAlign: labelAlign,
        mode: mode
      }
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: timelineClassName,
      style: style,
      ref: ref
    }, React__default["default"].Children.map(timelineItems, function (ele, index) {
      var _ele$props;
      return /*#__PURE__*/React__default["default"].cloneElement(ele, {
        index: index,
        className: classNames$1([ele === null || ele === void 0 || (_ele$props = ele.props) === null || _ele$props === void 0 ? void 0 : _ele$props.className], _defineProperty$2({}, "".concat(classPrefix, "-timeline-item--last"), index === itemsCounts - 1))
      });
    })));
  }, {
    Item: TimelineItem$1
  });
  Timeline$1.displayName = "Timeline";

  var Timeline = Timeline$1;
  var TimelineItem = TimelineItem$1;

  var rateDefaultProps = {
    allowHalf: false,
    clearable: false,
    color: "#ED7B2F",
    count: 5,
    disabled: void 0,
    gap: 4,
    showText: false,
    size: "24px",
    texts: [],
    defaultValue: 0
  };

  var _excluded$8 = ["icon"];
  function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var RateIcon = function RateIcon(_ref) {
    var icon = _ref.icon,
      props = _objectWithoutProperties$2(_ref, _excluded$8);
    var _useGlobalIcon = useGlobalIcon({
        StarFilledIcon: TdStarFilledIcon
      }),
      StarFilledIcon = _useGlobalIcon.StarFilledIcon;
    if (/*#__PURE__*/React__default["default"].isValidElement(icon)) {
      return /*#__PURE__*/React__default["default"].cloneElement(icon, props);
    }
    return /* @__PURE__ */React__default["default"].createElement(StarFilledIcon, _objectSpread$c({}, props));
  };
  var Rate$1 = /*#__PURE__*/React__default["default"].forwardRef(function (originalProps, ref) {
    var props = useDefaultProps(originalProps, rateDefaultProps);
    var allowHalf = props.allowHalf,
      color = props.color,
      count = props.count,
      disabled = props.disabled,
      gap = props.gap,
      showText = props.showText,
      size = props.size,
      icon = props.icon,
      className = props.className,
      style = props.style,
      onChange = props.onChange,
      texts = props.texts,
      clearable = props.clearable;
    var _useLocaleReceiver = useLocaleReceiver("rate"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var displayTexts = texts.length ? texts : t(locale.rateText);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      starValue = _useControlled2[0],
      setStarValue = _useControlled2[1];
    var _useState = React.useState(void 0),
      _useState2 = _slicedToArray$1(_useState, 2),
      hoverValue = _useState2[0],
      setHoverValue = _useState2[1];
    var displayValue = hoverValue || starValue;
    var rootRef = React__default["default"].useRef(null);
    var activeColor = Array.isArray(color) ? color[0] : color;
    var defaultColor = Array.isArray(color) ? color[1] : "var(--td-bg-color-component)";
    var getStarValue = function getStarValue(event, index) {
      if (allowHalf) {
        var rootNode = rootRef.current;
        var _rootNode$getBounding = rootNode.getBoundingClientRect(),
          left = _rootNode$getBounding.left;
        var firstStar = rootNode.firstChild;
        var _firstStar$getBoundin = firstStar.getBoundingClientRect(),
          width = _firstStar$getBoundin.width;
        var clientX = event.clientX;
        var starMiddle = width * (index - 0.5) + gap * (index - 1);
        if (clientX - left >= starMiddle) {
          return index;
        }
        if (clientX - left < starMiddle) {
          return index - 0.5;
        }
      }
      return index;
    };
    var mouseEnterHandler = function mouseEnterHandler(event, index) {
      if (disabled) {
        return;
      }
      setHoverValue(getStarValue(event, index));
    };
    var mouseLeaveHandler = function mouseLeaveHandler() {
      if (disabled) {
        return;
      }
      setHoverValue(void 0);
    };
    var clickHandler = function clickHandler(event, index) {
      if (disabled) {
        return;
      }
      var value = getStarValue(event, index);
      if (clearable && value === starValue) {
        value = 0;
        setHoverValue(void 0);
      }
      setStarValue(value);
    };
    var getStarCls = function getStarCls(index) {
      if (allowHalf && index + 0.5 === displayValue) {
        return "".concat(classPrefix, "-rate__item--half");
      }
      if (index >= displayValue) {
        return "";
      }
      if (index < displayValue) {
        return "".concat(classPrefix, "-rate__item--full");
      }
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-rate"), className),
      onMouseLeave: mouseLeaveHandler
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-rate__list"),
      style: {
        gap: gap
      },
      ref: rootRef
    }, _toConsumableArray(Array(count)).map(function (_, index) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: index,
        className: classNames$1("".concat(classPrefix, "-rate__item"), getStarCls(index)),
        onClick: function onClick(event) {
          return clickHandler(event, index + 1);
        },
        onMouseMove: function onMouseMove(event) {
          return mouseEnterHandler(event, index + 1);
        }
      }, showText ? /* @__PURE__ */React__default["default"].createElement(TooltipLite, {
        key: index,
        content: displayTexts[displayValue - 1]
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-top")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: activeColor,
        icon: icon
      })), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-bottom")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: defaultColor,
        icon: icon
      }))) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-top")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: activeColor,
        icon: icon
      })), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-rate__star-bottom")
      }, /* @__PURE__ */React__default["default"].createElement(RateIcon, {
        size: size,
        color: defaultColor,
        icon: icon
      }))));
    })), showText && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-rate__text")
    }, displayTexts[displayValue - 1]));
  });
  Rate$1.displayName = "Rate";

  var Rate = Rate$1;

  function getScrollParent(element) {
    var style = getComputedStyle(element);
    var excludeStaticParent = style.position === "absolute";
    var overflowRegex = /(auto|scroll)/;
    if (style.position === "fixed") return document.body;
    for (var parent = element; parent.parentElement;) {
      parent = parent.parentElement;
      style = getComputedStyle(parent);
      if (excludeStaticParent && style.position === "static") {
        continue;
      }
      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;
    }
    return document.body;
  }
  function scrollToParentVisibleArea(element) {
    var parent = getScrollParent(element);
    if (parent === document.body) return;
    if (elementInViewport(element, parent)) return;
    parent.scrollTop = element.offsetTop - parent.offsetTop;
  }

  function getRelativePosition(elm) {
    var relativeElm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;
    var _getWindowScroll = getWindowScroll(),
      scrollTop = _getWindowScroll.scrollTop,
      scrollLeft = _getWindowScroll.scrollLeft;
    var _elm$getBoundingClien = elm.getBoundingClientRect(),
      elmTop = _elm$getBoundingClien.top,
      elmLeft = _elm$getBoundingClien.left;
    var _relativeElm$getBound = relativeElm.getBoundingClientRect(),
      relElmTop = _relativeElm$getBound.top,
      relElmLeft = _relativeElm$getBound.left;
    var relativeElmPosition = getCssVarsValue("position", relativeElm);
    if (relativeElm.tagName.toLowerCase() !== "body" && relativeElmPosition === "relative" || relativeElmPosition === "sticky") {
      return {
        top: elmTop - relElmTop,
        left: elmLeft - relElmLeft
      };
    }
    if (isFixed(elm)) {
      return {
        top: elmTop,
        left: elmLeft
      };
    }
    return {
      top: elmTop + scrollTop,
      left: elmLeft + scrollLeft
    };
  }

  function getTargetElm(elm) {
    if (elm) {
      var targetElement = null;
      if (typeof elm === "string") {
        targetElement = document.querySelector(elm);
      } else if (typeof elm === "function") {
        targetElement = elm();
      } else {
        throw new Error("elm should be string or function");
      }
      if (targetElement) {
        return targetElement;
      }
      throw new Error("There is no element with given.");
    } else {
      return document.body;
    }
  }

  function scrollToElm(elm) {
    var rect = elm.getBoundingClientRect();
    if (!elementInViewport(elm)) {
      var winHeight = getWindowSize().height;
      scrollTo(rect.top - (winHeight / 2 - rect.height / 2), {});
    }
  }

  var guideDefaultProps = {
    hideCounter: false,
    hidePrev: false,
    hideSkip: false,
    highlightPadding: 8,
    mode: "popup",
    showOverlay: true,
    zIndex: 999999
  };

  function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Guide$1 = function Guide(originalProps) {
    var props = useDefaultProps(originalProps, guideDefaultProps);
    var counter = props.counter,
      hideCounter = props.hideCounter,
      hidePrev = props.hidePrev,
      hideSkip = props.hideSkip,
      steps = props.steps,
      zIndex = props.zIndex;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      guideGlobalConfig = _useConfig.guide;
    var prefixCls = "".concat(classPrefix, "-guide");
    var lockCls = "".concat(prefixCls, "--lock");
    var _useControlled = useControlled(props, "current", props.onChange),
      _useControlled2 = _slicedToArray$1(_useControlled, 2),
      innerCurrent = _useControlled2[0],
      setInnerCurrent = _useControlled2[1];
    var overlayLayerRef = React.useRef(null);
    var highlightLayerRef = React.useRef(null);
    var referenceLayerRef = React.useRef(null);
    var currentHighlightLayerElm = React.useRef(null);
    var dialogWrapperRef = React.useRef(null);
    var dialogTooltipRef = React.useRef(null);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      active = _useState2[0],
      setActive = _useState2[1];
    var stepsTotal = steps.length;
    var currentStepInfo = React.useMemo(function () {
      return steps[innerCurrent];
    }, [steps, innerCurrent]);
    var getCurrentCrossProps = function getCurrentCrossProps(propsName) {
      var _currentStepInfo$prop;
      return (_currentStepInfo$prop = currentStepInfo === null || currentStepInfo === void 0 ? void 0 : currentStepInfo[propsName]) !== null && _currentStepInfo$prop !== void 0 ? _currentStepInfo$prop : props[propsName];
    };
    var isPopup = getCurrentCrossProps("mode") === "popup";
    var setHighlightLayerPosition = function setHighlightLayerPosition(highlightLayer) {
      var _getRelativePosition = getRelativePosition(currentHighlightLayerElm.current),
        top = _getRelativePosition.top,
        left = _getRelativePosition.left;
      var _currentHighlightLaye = currentHighlightLayerElm.current.getBoundingClientRect(),
        width = _currentHighlightLaye.width,
        height = _currentHighlightLaye.height;
      var highlightPadding = getCurrentCrossProps("highlightPadding");
      if (isPopup) {
        width += highlightPadding * 2;
        height += highlightPadding * 2;
        top -= highlightPadding;
        left -= highlightPadding;
      } else {
        var _getWindowScroll = getWindowScroll(),
          scrollTop = _getWindowScroll.scrollTop,
          scrollLeft = _getWindowScroll.scrollLeft;
        top += scrollTop;
        left += scrollLeft;
      }
      setStyle(highlightLayer, {
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        top: "".concat(top, "px"),
        left: "".concat(left, "px")
      });
    };
    var showPopupGuide = function showPopupGuide() {
      currentHighlightLayerElm.current = getTargetElm(currentStepInfo.element);
      setTimeout(function () {
        scrollToParentVisibleArea(currentHighlightLayerElm.current);
        setHighlightLayerPosition(highlightLayerRef.current);
        setHighlightLayerPosition(referenceLayerRef.current);
        scrollToElm(currentHighlightLayerElm.current);
      });
    };
    var destroyTooltipElm = function destroyTooltipElm() {
      var _referenceLayerRef$cu;
      (_referenceLayerRef$cu = referenceLayerRef.current) === null || _referenceLayerRef$cu === void 0 || _referenceLayerRef$cu.parentNode.removeChild(referenceLayerRef.current);
    };
    var showDialogGuide = function showDialogGuide() {
      setTimeout(function () {
        currentHighlightLayerElm.current = dialogTooltipRef.current;
        scrollToParentVisibleArea(currentHighlightLayerElm.current);
        setHighlightLayerPosition(highlightLayerRef.current);
        scrollToElm(currentHighlightLayerElm.current);
      });
    };
    var destroyDialogTooltipElm = function destroyDialogTooltipElm() {
      var _dialogTooltipRef$cur, _dialogWrapperRef$cur;
      (_dialogTooltipRef$cur = dialogTooltipRef.current) === null || _dialogTooltipRef$cur === void 0 || _dialogTooltipRef$cur.parentNode.removeChild(dialogTooltipRef.current);
      (_dialogWrapperRef$cur = dialogWrapperRef.current) === null || _dialogWrapperRef$cur === void 0 || _dialogWrapperRef$cur.parentNode.removeChild(dialogWrapperRef.current);
    };
    var showGuide = useEventCallback(function () {
      if (isPopup) {
        destroyDialogTooltipElm();
        showPopupGuide();
      } else {
        destroyTooltipElm();
        showDialogGuide();
      }
    });
    var showGuideDebounce = React.useMemo(function () {
      return debounce$1(showGuide, 250);
    }, [showGuide]);
    var destroyGuide = function destroyGuide() {
      var _highlightLayerRef$cu, _overlayLayerRef$curr;
      destroyTooltipElm();
      destroyDialogTooltipElm();
      (_highlightLayerRef$cu = highlightLayerRef.current) === null || _highlightLayerRef$cu === void 0 || _highlightLayerRef$cu.parentNode.removeChild(highlightLayerRef.current);
      (_overlayLayerRef$curr = overlayLayerRef.current) === null || _overlayLayerRef$curr === void 0 || _overlayLayerRef$curr.parentNode.removeChild(overlayLayerRef.current);
      removeClass$2(document.body, lockCls);
    };
    var handleSkip = function handleSkip(e) {
      var _props$onSkip;
      var total = stepsTotal;
      setActive(false);
      setInnerCurrent(-1, {
        e: e,
        total: total
      });
      (_props$onSkip = props.onSkip) === null || _props$onSkip === void 0 || _props$onSkip.call(props, {
        e: e,
        current: innerCurrent,
        total: total
      });
    };
    var handlePrev = function handlePrev(e) {
      var _props$onPrevStepClic;
      var total = stepsTotal;
      setInnerCurrent(innerCurrent - 1, {
        e: e,
        total: total
      });
      (_props$onPrevStepClic = props.onPrevStepClick) === null || _props$onPrevStepClic === void 0 || _props$onPrevStepClic.call(props, {
        e: e,
        prev: innerCurrent - 1,
        current: innerCurrent,
        total: total
      });
    };
    var handleNext = function handleNext(e) {
      var _props$onNextStepClic;
      var total = stepsTotal;
      setInnerCurrent(innerCurrent + 1, {
        e: e,
        total: total
      });
      (_props$onNextStepClic = props.onNextStepClick) === null || _props$onNextStepClic === void 0 || _props$onNextStepClic.call(props, {
        e: e,
        next: innerCurrent + 1,
        current: innerCurrent,
        total: total
      });
    };
    var handleFinish = function handleFinish(e) {
      var _props$onFinish;
      var total = stepsTotal;
      setActive(false);
      setInnerCurrent(-1, {
        e: e,
        total: total
      });
      (_props$onFinish = props.onFinish) === null || _props$onFinish === void 0 || _props$onFinish.call(props, {
        e: e,
        current: innerCurrent,
        total: total
      });
    };
    var initGuide = function initGuide() {
      if (innerCurrent >= 0 && innerCurrent < steps.length) {
        if (!active) {
          setActive(true);
          addClass$1(document.body, lockCls);
        }
        showGuide();
      }
    };
    useIsomorphicLayoutEffect(function () {
      if (innerCurrent >= 0 && innerCurrent < steps.length) {
        initGuide();
      } else {
        setActive(false);
        destroyGuide();
      }
    }, [innerCurrent]);
    useIsomorphicLayoutEffect(function () {
      initGuide();
    }, []);
    React.useEffect(function () {
      window.addEventListener("resize", showGuideDebounce);
      return function () {
        window.removeEventListener("resize", showGuideDebounce);
        destroyGuide();
      };
    }, []);
    if (!canUseDocument) {
      return null;
    }
    var currentElmIsFixed = isFixed(currentHighlightLayerElm.current || document.body);
    var renderOverlayLayer = function renderOverlayLayer() {
      return /*#__PURE__*/ReactDOM.createPortal(/* @__PURE__ */React__default["default"].createElement("div", {
        ref: overlayLayerRef,
        className: "".concat(prefixCls, "__overlay"),
        style: {
          zIndex: zIndex - 2
        }
      }), document.body);
    };
    var renderHighlightLayer = function renderHighlightLayer() {
      var style = {
        zIndex: zIndex - 1
      };
      var highlightClass = ["".concat(prefixCls, "__highlight"), "".concat(prefixCls, "__highlight--").concat(isPopup ? "popup" : "dialog"), "".concat(prefixCls, "--").concat(currentElmIsFixed && isPopup ? "fixed" : "absolute")];
      var showOverlay = getCurrentCrossProps("showOverlay");
      var maskClass = ["".concat(prefixCls, "__highlight--").concat(showOverlay ? "mask" : "nomask")];
      var highlightContent = currentStepInfo.highlightContent;
      var showHighlightContent = highlightContent && isPopup;
      return /*#__PURE__*/ReactDOM.createPortal(/* @__PURE__ */React__default["default"].createElement("div", {
        ref: highlightLayerRef,
        className: classNames$1(highlightClass.concat(showHighlightContent ? highlightClass : maskClass)),
        style: style
      }, showHighlightContent && /*#__PURE__*/React__default["default"].cloneElement(highlightContent, {
        className: classNames$1(highlightClass.concat(maskClass, highlightContent.props.className)),
        style: _objectSpread$b(_objectSpread$b({}, style), highlightContent.props.style)
      })), document.body);
    };
    var renderCounter = function renderCounter() {
      var popupSlotCounter = isFunction$1(counter) ? counter({
        total: stepsTotal,
        current: innerCurrent
      }) : counter;
      var popupDefaultCounter = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__counter")
      }, popupSlotCounter || /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, innerCurrent + 1, "/", stepsTotal));
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, !hideCounter && popupDefaultCounter);
    };
    var renderAction = function renderAction(mode) {
      var _getCurrentCrossProps, _getCurrentCrossProps2, _getCurrentCrossProps3, _props$finishButtonPr;
      var isLast = innerCurrent === stepsTotal - 1;
      var isFirst = innerCurrent === 0;
      var buttonSize = mode === "popup" ? "small" : "medium";
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__action")
      }, !hideSkip && !isLast && /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$b({
        className: "".concat(prefixCls, "__skip"),
        theme: "default",
        size: buttonSize,
        variant: "base",
        onClick: handleSkip
      }, (_getCurrentCrossProps = getCurrentCrossProps("skipButtonProps")) !== null && _getCurrentCrossProps !== void 0 ? _getCurrentCrossProps : guideGlobalConfig.skipButtonProps)), !hidePrev && !isFirst && /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$b({
        className: "".concat(prefixCls, "__prev"),
        theme: "primary",
        size: buttonSize,
        variant: "base",
        onClick: handlePrev
      }, (_getCurrentCrossProps2 = getCurrentCrossProps("prevButtonProps")) !== null && _getCurrentCrossProps2 !== void 0 ? _getCurrentCrossProps2 : guideGlobalConfig.prevButtonProps)), !isLast && /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$b({
        className: "".concat(prefixCls, "__next"),
        theme: "primary",
        size: buttonSize,
        variant: "base",
        onClick: handleNext
      }, (_getCurrentCrossProps3 = getCurrentCrossProps("nextButtonProps")) !== null && _getCurrentCrossProps3 !== void 0 ? _getCurrentCrossProps3 : guideGlobalConfig.nextButtonProps)), isLast && /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$b({
        className: "".concat(prefixCls, "__finish"),
        theme: "primary",
        size: buttonSize,
        variant: "base",
        onClick: handleFinish
      }, (_props$finishButtonPr = props.finishButtonProps) !== null && _props$finishButtonPr !== void 0 ? _props$finishButtonPr : guideGlobalConfig.finishButtonProps)));
    };
    var renderTooltipBody = function renderTooltipBody() {
      var title = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, currentStepInfo.title);
      var descBody = currentStepInfo.body;
      var desc = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__desc")
      }, descBody);
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, title, desc);
    };
    var renderPopupContent = function renderPopupContent() {
      var footerClasses = ["".concat(prefixCls, "__footer"), "".concat(prefixCls, "__footer--popup")];
      var action = /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(footerClasses)
      }, renderCounter(), renderAction("popup"));
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__tooltip")
      }, renderTooltipBody(), action);
    };
    var renderPopupGuide = function renderPopupGuide() {
      var _currentStepInfo$chil, _currentStepInfo$popu, _currentStepInfo$popu2;
      var content = (_currentStepInfo$chil = currentStepInfo.children) !== null && _currentStepInfo$chil !== void 0 ? _currentStepInfo$chil : currentStepInfo.content;
      var renderBody;
      if (/*#__PURE__*/React__default["default"].isValidElement(content)) {
        var contentProps = {
          handlePrev: handlePrev,
          handleNext: handleNext,
          handleSkip: handleSkip,
          handleFinish: handleFinish,
          current: innerCurrent,
          total: stepsTotal
        };
        renderBody = isFunction$1(content) ? content(contentProps) : /*#__PURE__*/React__default["default"].cloneElement(content, contentProps);
      } else {
        renderBody = renderPopupContent();
      }
      var classes = ["".concat(prefixCls, "__reference"), "".concat(prefixCls, "--").concat(currentElmIsFixed ? "fixed" : "absolute")];
      var innerClassName = [_defineProperty$2({}, "".concat(prefixCls, "__popup--content"), !!content)];
      return /*#__PURE__*/ReactDOM.createPortal(/* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$b(_objectSpread$b({
        visible: true,
        content: renderBody,
        showArrow: !content,
        zIndex: zIndex,
        placement: currentStepInfo.placement
      }, currentStepInfo.popupProps), {}, {
        overlayClassName: ["".concat(prefixCls, "__popup"), currentStepInfo.stepOverlayClass, (_currentStepInfo$popu = currentStepInfo.popupProps) === null || _currentStepInfo$popu === void 0 ? void 0 : _currentStepInfo$popu.overlayClassName],
        overlayInnerClassName: innerClassName.concat((_currentStepInfo$popu2 = currentStepInfo.popupProps) === null || _currentStepInfo$popu2 === void 0 ? void 0 : _currentStepInfo$popu2.overlayInnerClassName)
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        ref: referenceLayerRef,
        className: classNames$1(classes)
      })), document.body);
    };
    var renderDialogGuide = function renderDialogGuide() {
      var style = {
        zIndex: zIndex
      };
      var wrapperClasses = ["".concat(prefixCls, "__wrapper"), _defineProperty$2({}, "".concat(prefixCls, "__wrapper--center"), currentStepInfo.placement === "center")];
      var dialogClasses = ["".concat(prefixCls, "__reference"), "".concat(prefixCls, "--absolute"), "".concat(prefixCls, "__dialog"), _defineProperty$2(_defineProperty$2({}, "".concat(prefixCls, "__dialog--nomask"), !getCurrentCrossProps("showOverlay")), currentStepInfo.stepOverlayClass, !!currentStepInfo.stepOverlayClass)];
      var footerClasses = ["".concat(prefixCls, "__footer"), "".concat(prefixCls, "__footer--popup")];
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/ReactDOM.createPortal(/* @__PURE__ */React__default["default"].createElement("div", {
        ref: dialogWrapperRef,
        className: classNames$1(wrapperClasses),
        style: style
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        ref: dialogTooltipRef,
        className: classNames$1(dialogClasses)
      }, renderTooltipBody(), /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(footerClasses)
      }, renderCounter(), renderAction("dialog")))), document.body));
    };
    var renderGuide = function renderGuide() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderOverlayLayer(), renderHighlightLayer(), isPopup ? renderPopupGuide() : renderDialogGuide());
    };
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, innerCurrent > -1 && active && renderGuide());
  };
  Guide$1.displayName = "Guide";

  var Guide = Guide$1;

  var backTopDefaultProps = {
    container: "body",
    duration: 200,
    offset: ["24px", "80px"],
    shape: "square",
    size: "medium",
    target: "body",
    theme: "light",
    visibleHeight: "200px"
  };

  var useScroll = function useScroll(props) {
    var target = props.target;
    var _useState = React.useState(0),
      _useState2 = _slicedToArray$1(_useState, 2),
      scrollLeft = _useState2[0],
      setScrollLeft = _useState2[1];
    var _useState3 = React.useState(0),
      _useState4 = _slicedToArray$1(_useState3, 2),
      scrollTop = _useState4[0],
      setScrollTop = _useState4[1];
    React.useEffect(function () {
      if (!target) return;
      var setPosition = function setPosition() {
        if (target === document) {
          setScrollLeft(target.documentElement.scrollLeft);
          setScrollTop(target.documentElement.scrollTop);
        } else {
          setScrollLeft(target.scrollLeft);
          setScrollTop(target.scrollTop);
        }
      };
      target.addEventListener("scroll", setPosition);
      return function () {
        target.removeEventListener("scroll", setPosition);
      };
    }, [target]);
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  };

  function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var getContainer = function getContainer(container) {
    if (typeof container === "string") {
      if (typeof document !== "undefined") {
        return document.querySelector(container);
      }
    }
    if (typeof container === "function") {
      return container();
    }
    return null;
  };
  var InternalBackTop = function InternalBackTop(props, ref) {
    var _useDefaultProps = useDefaultProps(props, backTopDefaultProps),
      theme = _useDefaultProps.theme,
      size = _useDefaultProps.size,
      shape = _useDefaultProps.shape,
      target = _useDefaultProps.target,
      visibleHeight = _useDefaultProps.visibleHeight,
      container = _useDefaultProps.container,
      duration = _useDefaultProps.duration,
      content = _useDefaultProps.content,
      offset = _useDefaultProps.offset,
      children = _useDefaultProps.children,
      cusContent = _useDefaultProps["default"],
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      onClick = _useDefaultProps.onClick;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var scrollContainer = React.useMemo(function () {
      return getContainer(container);
    }, [container]);
    var _useScroll = useScroll({
        target: scrollContainer
      }),
      scrollTop = _useScroll.scrollTop;
    var defaultContent = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(BacktopIcon$1, {
      className: "".concat(classPrefix, "-back-top__icon"),
      size: 24
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-back-top__text")
    }, "TOP"));
    var renderChildren = children || content || cusContent || defaultContent;
    var backTopRef = React__default["default"].useRef(null);
    React__default["default"].useImperativeHandle(ref, function () {
      return backTopRef.current;
    });
    var visible = React.useMemo(function () {
      if (typeof visibleHeight === "string") {
        return scrollTop >= Number(visibleHeight.replace("px", ""));
      }
      return scrollTop >= visibleHeight;
    }, [scrollTop, visibleHeight]);
    var backTopStyle = React.useMemo(function () {
      return _objectSpread$a({
        insetInlineEnd: offset[0],
        insetBlockEnd: offset[1]
      }, style);
    }, [offset, style]);
    var cls = classNames$1("".concat(classPrefix, "-back-top"), "".concat(classPrefix, "-back-top--theme-").concat(theme), "".concat(classPrefix, "-back-top--").concat(shape), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-back-top--show"), visible), "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-m"), size === "medium"), className);
    var getBackTo = React.useCallback(function () {
      if (!target) return 0;
      var targetNode = getContainer(target);
      if (!targetNode) return 0;
      var rect = targetNode.getBoundingClientRect();
      var y = rect.y;
      return y;
    }, [target]);
    var handleClick = React.useCallback(function (e) {
      e.stopPropagation();
      onClick === null || onClick === void 0 || onClick({
        e: e
      });
      var backTo = getBackTo();
      scrollTo(backTo, {
        container: scrollContainer,
        duration: duration
      });
    }, [duration, getBackTo, onClick, scrollContainer]);
    return /* @__PURE__ */React__default["default"].createElement("button", {
      type: "button",
      ref: backTopRef,
      className: cls,
      style: backTopStyle,
      onClick: handleClick
    }, renderChildren);
  };
  var BackTop$1 = /*#__PURE__*/React__default["default"].forwardRef(InternalBackTop);
  BackTop$1.displayName = "BackTop";

  var BackTop = BackTop$1;

  var quartOut = function quartOut(t) {
    return 1 - Math.abs(Math.pow(t - 1, 4));
  };
  var Tween = /*#__PURE__*/function () {
    function Tween(_ref) {
      var _this = this;
      var from = _ref.from,
        to = _ref.to,
        _ref$duration = _ref.duration,
        duration = _ref$duration === void 0 ? 200 : _ref$duration,
        onStart = _ref.onStart,
        _ref$onUpdate = _ref.onUpdate,
        onUpdate = _ref$onUpdate === void 0 ? function () {} : _ref$onUpdate,
        onFinish = _ref.onFinish;
      _classCallCheck(this, Tween);
      _defineProperty$2(this, "time", 0);
      _defineProperty$2(this, "elapsed", 0);
      this.from = from;
      this.to = to;
      this.duration = duration;
      this.onStart = onStart;
      this.onUpdate = onUpdate;
      this.onFinish = onFinish;
      this.startTime = Date.now();
      this.started = false;
      this.finished = false;
      this.timer = null;
      this.keys = {};
      Object.entries(from).forEach(function (_ref2) {
        var _ref3 = _slicedToArray$1(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];
        if (_this.to[key] === void 0) {
          _this.to[key] = value;
        }
      });
      Object.entries(to).forEach(function (_ref4) {
        var _ref5 = _slicedToArray$1(_ref4, 2),
          key = _ref5[0],
          value = _ref5[1];
        if (_this.from[key] === void 0) {
          _this.from[key] = value;
        }
      });
    }
    return _createClass(Tween, [{
      key: "update",
      value: function update() {
        var _this2 = this;
        this.time = Date.now();
        if (this.time < this.startTime || this.finished) return;
        if (this.elapsed >= this.duration) {
          var _this$onFinish;
          this.finished = true;
          (_this$onFinish = this.onFinish) === null || _this$onFinish === void 0 || _this$onFinish.call(this, this.keys);
          return;
        }
        var elapsed = Math.min(this.time - this.startTime, this.duration);
        this.elapsed = elapsed;
        var progress = quartOut(elapsed / this.duration);
        Object.keys(this.to).forEach(function (key) {
          var delta = _this2.to[key] - _this2.from[key];
          _this2.keys[key] = _this2.from[key] + delta * progress;
        });
        if (!this.started) {
          var _this$onStart;
          (_this$onStart = this.onStart) === null || _this$onStart === void 0 || _this$onStart.call(this, this.keys);
          this.started = true;
        }
        this.onUpdate(this.keys);
      }
    }, {
      key: "polyfillStart",
      value: function polyfillStart() {
        var _this3 = this;
        var elapsed = Date.now() - this.startTime;
        var interval = quartOut(elapsed / this.duration);
        this.timer = setInterval(function () {
          _this3.update();
          if (_this3.finished) {
            clearInterval(_this3.timer);
          }
        }, interval);
      }
    }, {
      key: "normalStart",
      value: function normalStart() {
        var _this4 = this;
        var _tick = function tick() {
          _this4.update();
          _this4.timer = requestAnimationFrame(_tick);
          if (_this4.finished) {
            cancelAnimationFrame(_this4.timer);
            _this4.timer = null;
          }
        };
        _tick();
      }
    }, {
      key: "start",
      value: function start() {
        this.startTime = Date.now();
        if (getIEVersion() < 10) this.polyfillStart();else this.normalStart();
      }
    }, {
      key: "stop",
      value: function stop() {
        if (getIEVersion() < 10) clearInterval(this.timer);else cancelAnimationFrame(this.timer);
        this.timer = null;
      }
    }]);
  }();

  var COLOR_MAP = {
    black: "var(--td-text-color-primary)",
    blue: "var(--td-brand-color)",
    red: "var(--td-error-color)",
    orange: "var(--td-warning-color)",
    green: "var(--td-success-color)"
  };
  function getFormatValue(value, decimalPlaces, separator) {
    var options = {
      minimumFractionDigits: decimalPlaces !== null && decimalPlaces !== void 0 ? decimalPlaces : 0,
      maximumFractionDigits: decimalPlaces !== null && decimalPlaces !== void 0 ? decimalPlaces : 20,
      useGrouping: !!separator
    };
    return value.toLocaleString(void 0, options).replace(/,|，/g, separator);
  }

  var statisticDefaultProps = {
    animationStart: false,
    loading: false,
    separator: ",",
    trendPlacement: "left"
  };

  var Statistic$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _animation$valueFrom;
    var _useDefaultProps = useDefaultProps(props, statisticDefaultProps),
      className = _useDefaultProps.className,
      style = _useDefaultProps.style,
      animation = _useDefaultProps.animation,
      animationStart = _useDefaultProps.animationStart,
      color = _useDefaultProps.color,
      decimalPlaces = _useDefaultProps.decimalPlaces,
      extra = _useDefaultProps.extra,
      format = _useDefaultProps.format,
      loading = _useDefaultProps.loading,
      prefix = _useDefaultProps.prefix,
      separator = _useDefaultProps.separator,
      suffix = _useDefaultProps.suffix,
      title = _useDefaultProps.title,
      trend = _useDefaultProps.trend,
      trendPlacement = _useDefaultProps.trendPlacement,
      unit = _useDefaultProps.unit,
      value = _useDefaultProps.value;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useGlobalIcon = useGlobalIcon({
        ArrowTriangleUpFilledIcon: TDArrowTriangleUpFilledIcon
      }),
      ArrowTriangleUpFilledIcon = _useGlobalIcon.ArrowTriangleUpFilledIcon;
    var _useGlobalIcon2 = useGlobalIcon({
        ArrowTriangleDownFilledIcon: TDArrowTriangleDownFilledIcon
      }),
      ArrowTriangleDownFilledIcon = _useGlobalIcon2.ArrowTriangleDownFilledIcon;
    var _useState = React.useState((_animation$valueFrom = animation === null || animation === void 0 ? void 0 : animation.valueFrom) !== null && _animation$valueFrom !== void 0 ? _animation$valueFrom : value),
      _useState2 = _slicedToArray$1(_useState, 2),
      innerValue = _useState2[0],
      setInnerValue = _useState2[1];
    var numberValue = React.useMemo(function () {
      return isNumber(value) ? value : 0;
    }, [value]);
    var tween = React.useRef(null);
    var isFirstRender = useIsFirstRender();
    var start = function start() {
      var _animation$valueFrom2;
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_animation$valueFrom2 = animation === null || animation === void 0 ? void 0 : animation.valueFrom) !== null && _animation$valueFrom2 !== void 0 ? _animation$valueFrom2 : 0;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : numberValue;
      if (from !== to) {
        var _tween$current;
        tween.current = new Tween({
          from: {
            value: from
          },
          to: {
            value: to
          },
          duration: animation === null || animation === void 0 ? void 0 : animation.duration,
          onUpdate: function onUpdate(keys) {
            setInnerValue(keys.value);
          },
          onFinish: function onFinish() {
            setInnerValue(to);
          }
        });
        (_tween$current = tween.current) === null || _tween$current === void 0 || _tween$current.start();
      }
    };
    var formatValue = React.useMemo(function () {
      var formatInnerValue = innerValue;
      if (isFunction$1(format)) {
        return format(formatInnerValue);
      }
      formatInnerValue = getFormatValue(formatInnerValue, decimalPlaces, separator);
      return formatInnerValue;
    }, [innerValue, decimalPlaces, separator, format]);
    var valueStyle = React.useMemo(function () {
      return {
        color: COLOR_MAP[color] || color
      };
    }, [color]);
    React.useEffect(function () {
      if (isFirstRender) return;
      setInnerValue(value);
      animationStart && animation && start();
      return function () {
        if (tween.current) {
          tween.current.stop();
        }
      };
    }, [value]);
    React.useEffect(function () {
      animationStart && animation && !tween.current && start();
    }, [animationStart]);
    React.useImperativeHandle(ref, function () {
      return {
        start: start
      };
    });
    var trendIcons = {
      increase: /* @__PURE__ */React__default["default"].createElement(ArrowTriangleUpFilledIcon, null),
      decrease: /* @__PURE__ */React__default["default"].createElement(ArrowTriangleDownFilledIcon, null)
    };
    var trendIcon = trend ? trendIcons[trend] : null;
    var prefixRender = prefix || (trendIcon && trendPlacement !== "right" ? trendIcon : null);
    var suffixRender = suffix || (trendIcon && trendPlacement === "right" ? trendIcon : null);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-statistic"), className),
      style: style
    }, title && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-statistic-title")
    }, title), /* @__PURE__ */React__default["default"].createElement(Skeleton, {
      animation: "gradient",
      theme: "text",
      loading: !!loading
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-statistic-content"),
      style: valueStyle
    }, prefixRender && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-statistic-content-prefix")
    }, prefixRender), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-statistic-content-value")
    }, formatValue), unit && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-statistic-content-unit")
    }, unit), suffixRender && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-statistic-content-suffix")
    }, suffixRender))), extra && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-statistic-extra")
    }, extra));
  });
  Statistic$1.displayName = "Statistic";

  var Statistic = Statistic$1;

  var descriptionsDefaultProps = {
    bordered: false,
    column: 2,
    itemLayout: "horizontal",
    layout: "horizontal",
    size: "medium",
    tableLayout: "auto"
  };
  var descriptionsItemDefaultProps = {
    span: 1
  };

  var DescriptionsContext = /*#__PURE__*/React.createContext(null);

  var DescriptionsItem = function DescriptionsItem() {
    return null;
  };
  DescriptionsItem.displayName = "DescriptionsItem";

  var Row = function Row(props) {
    var row = props.row;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("descriptions"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var descriptionsContext = React.useContext(DescriptionsContext);
    var COMPONENT_NAME = "".concat(classPrefix, "-descriptions");
    var label = function label(node) {
      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "horizontal";
      var rowKey = arguments.length > 2 ? arguments[2] : undefined;
      var span = node.span;
      var labelSpan = layout === "horizontal" ? 1 : span;
      return /* @__PURE__ */React__default["default"].createElement("td", {
        key: rowKey,
        colSpan: labelSpan,
        className: "".concat(COMPONENT_NAME, "__label"),
        style: descriptionsContext.labelStyle
      }, node.label, descriptionsContext.colon && t(locale.colonText));
    };
    var content = function content(node) {
      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "horizontal";
      var rowKey = arguments.length > 2 ? arguments[2] : undefined;
      var span = node.span;
      var contentSpan = span > 1 && layout === "horizontal" ? span * 2 - 1 : span;
      return /* @__PURE__ */React__default["default"].createElement("td", {
        key: rowKey,
        colSpan: contentSpan,
        className: "".concat(COMPONENT_NAME, "__content"),
        style: descriptionsContext.contentStyle
      }, node.content);
    };
    var hh = function hh() {
      return /* @__PURE__ */React__default["default"].createElement("tr", null, row.map(function (node, i) {
        return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, {
          key: i
        }, label(node), content(node));
      }));
    };
    var hv = function hv() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("tr", null, row.map(function (node, i) {
        return label(node, "vertical", "top_".concat(i));
      })), /* @__PURE__ */React__default["default"].createElement("tr", null, row.map(function (node, i) {
        return content(node, "vertical", "bottom_".concat(i));
      })));
    };
    var vh = function vh() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, row.map(function (node, i) {
        return /* @__PURE__ */React__default["default"].createElement("tr", {
          key: i
        }, label(node), content(node));
      }));
    };
    var vv = function vv() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, row.map(function (node, i) {
        return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, {
          key: i
        }, /* @__PURE__ */React__default["default"].createElement("tr", null, label(node)), /* @__PURE__ */React__default["default"].createElement("tr", null, content(node)));
      }));
    };
    if (descriptionsContext.layout === "horizontal") {
      if (descriptionsContext.itemLayout === "horizontal") {
        return hh();
      }
      return hv();
    }
    if (descriptionsContext.itemLayout === "horizontal") {
      return vh();
    }
    return vv();
  };
  Row.displayName = "DescriptionsRow";

  var Descriptions$1 = function Descriptions(DescriptionsProps) {
    var props = useDefaultProps(DescriptionsProps, descriptionsDefaultProps);
    var className = props.className,
      style = props.style,
      title = props.title,
      bordered = props.bordered,
      column = props.column,
      layout = props.layout,
      rowItems = props.items,
      children = props.children,
      tableLayout = props.tableLayout;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var COMPONENT_NAME = "".concat(classPrefix, "-descriptions");
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;
    var getRows = function getRows() {
      var items = [];
      if (isArray$1(rowItems)) {
        items = rowItems.map(function (item) {
          var _assign = assign$2({}, descriptionsItemDefaultProps, item),
            span = _assign.span;
          return {
            label: item.label,
            content: item.content,
            span: span
          };
        });
      } else {
        var childrenList = React__default["default"].Children.toArray(children).filter(function (child) {
          var _child$type;
          return ((_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === DescriptionsItem.displayName;
        });
        if (childrenList.length !== 0) {
          items = childrenList.map(function (_ref) {
            var _child$content;
            var child = _ref.props;
            var _assign2 = assign$2({}, descriptionsItemDefaultProps, child),
              span = _assign2.span;
            return {
              label: child.label,
              content: (_child$content = child.content) !== null && _child$content !== void 0 ? _child$content : child.children,
              span: span
            };
          });
        }
      }
      if (layout === "vertical") {
        return [items];
      }
      var temp = [];
      var reset = column;
      var res = [];
      items.forEach(function (item, index) {
        var span = item.span;
        if (reset >= span) {
          temp.push(item);
          reset -= span;
        } else {
          res.push(temp);
          temp = [item];
          reset = column - span;
        }
        if (index === items.length - 1) {
          Reflect.set(item, "span", span + reset);
          res.push(temp);
        }
      });
      return res;
    };
    var renderHeader = function renderHeader() {
      return title ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(COMPONENT_NAME, "__header")
      }, title) : "";
    };
    var renderBody = function renderBody() {
      var tableClass = ["".concat(COMPONENT_NAME, "__body"), SIZE[props.size], _defineProperty$2({}, "".concat(COMPONENT_NAME, "__body--fixed"), tableLayout === "fixed"), _defineProperty$2({}, "".concat(COMPONENT_NAME, "__body--border"), bordered)];
      return /* @__PURE__ */React__default["default"].createElement("table", {
        className: classNames$1(tableClass)
      }, /* @__PURE__ */React__default["default"].createElement("tbody", null, getRows().map(function (row, i) {
        return /* @__PURE__ */React__default["default"].createElement(Row, {
          row: row,
          key: i
        });
      })));
    };
    return /* @__PURE__ */React__default["default"].createElement(DescriptionsContext.Provider, {
      value: props
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(className, COMPONENT_NAME),
      style: style
    }, renderHeader(), renderBody()));
  };
  Descriptions$1.displayName = "Descriptions";
  Descriptions$1.DescriptionsItem = DescriptionsItem;

  var Descriptions = Descriptions$1;

  var emptyDefaultProps = {
    size: "medium",
    type: "empty"
  };

  function MaintenanceSvg() {
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      width: "1em",
      height: "1em",
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("g", {
      id: "\xE8\xB7\xAF\xE5\x86\xB5\xE4\xBA\x8B\xE4\xBB\xB6-traffic-events"
    }, /* @__PURE__ */React__default["default"].createElement("g", {
      id: "Subtract"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M29.5237 17L24 3.82812L18.4763 17H29.5237Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M31.2011 21H16.7989L13.6699 28.4615H34.3301L31.2011 21Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M36.0076 32.4615H11.9924L9.66997 37.9997H6V41.9997H42V37.9997H38.33L36.0076 32.4615Z",
      fill: "var(--td-text-color-placeholder)"
    }))));
  }

  function NetworkErrorSvg() {
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      width: "1em",
      height: "1em",
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("g", {
      id: "\xE6\x97\xA0\xE7\xBD\x91\xE7\xBB\x9C-no-network"
    }, /* @__PURE__ */React__default["default"].createElement("g", {
      id: "Union"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M26 17V2H22V17H26Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M26.0078 20H22V24.0078H26.0078V20Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M2.75751 13.45C7.29713 9.80916 12.553 7.50276 18 6.53088V28H30V6.53052C35.4475 7.50216 40.7038 9.80854 45.2438 13.4497L46.8021 14.6995L24.0006 43.2016L1.19922 14.6998L2.75751 13.45Z",
      fill: "var(--td-text-color-placeholder)"
    }))));
  }

  function EmptySvg() {
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      width: "1em",
      height: "1em",
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("g", {
      id: "\xE6\x97\xA0\xE7\xBB\x93\xE6\x9E\x9C-no-result"
    }, /* @__PURE__ */React__default["default"].createElement("g", {
      id: "Union"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M22 0H26V8H22V0Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M10.002 1.17157L7.17353 4L13.002 9.82843L15.8304 7L10.002 1.17157Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2 27.4689L10.8394 12H37.1606L46 27.4689V44H2V27.4689ZM13.1606 16L7.44636 26H17.8025L18.1889 27.5015C18.8551 30.0898 21.207 32 24 32C26.793 32 29.1449 30.0898 29.8111 27.5015L30.1975 26H40.5536L34.8394 16H13.1606Z",
      fill: "var(--td-text-color-placeholder)"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M37.998 1.17157L32.1696 7L34.998 9.82843L40.8265 4L37.998 1.17157Z",
      fill: "var(--td-text-color-placeholder)"
    }))));
  }

  function FailSvg() {
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      width: "1em",
      height: "1em",
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M24 6C14.0589 6 6 14.0589 6 24C6 33.9411 14.0589 42 24 42C33.9411 42 42 33.9411 42 24C42 14.0589 33.9411 6 24 6ZM2 24C2 11.8497 11.8497 2 24 2C36.1503 2 46 11.8497 46 24C46 36.1503 36.1503 46 24 46C11.8497 46 2 36.1503 2 24ZM26 13V28H22V13H26ZM22 31H26.0078V35.0078H22V31Z",
      fill: "#D54941"
    }));
  }

  function SuccessSvg() {
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      width: "1em",
      height: "1em",
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M24 42C33.9411 42 42 33.9411 42 24C42 14.0589 33.9411 6 24 6C14.0589 6 6 14.0589 6 24C6 33.9411 14.0589 42 24 42ZM46 24C46 36.1503 36.1503 46 24 46C11.8497 46 2 36.1503 2 24C2 11.8497 11.8497 2 24 2C36.1503 2 46 11.8497 46 24ZM21 32.8284L12.1716 24L15 21.1716L21 27.1716L33 15.1716L35.8284 18L21 32.8284Z",
      fill: "#2BA471"
    }));
  }

  function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getImageIns(data) {
    var result = data;
    if (/*#__PURE__*/React.isValidElement(data)) {
      result = data;
    } else if (isObject(data)) {
      result = /* @__PURE__ */React__default["default"].createElement(Image$1, _objectSpread$9({}, data));
    } else if (isString(data)) {
      result = /* @__PURE__ */React__default["default"].createElement(Image$1, {
        src: data
      });
    }
    return data ? result : null;
  }
  var Empty$1 = function Empty(props) {
    var _defaultMaps$type, _typeImageProps$image, _typeImageProps$title;
    var _useDefaultProps = useDefaultProps(props, emptyDefaultProps),
      propsImage = _useDefaultProps.image,
      imageStyle = _useDefaultProps.imageStyle,
      propsDescription = _useDefaultProps.description,
      propsTitle = _useDefaultProps.title,
      type = _useDefaultProps.type,
      action = _useDefaultProps.action,
      style = _useDefaultProps.style,
      className = _useDefaultProps.className,
      _useDefaultProps$size = _useDefaultProps.size,
      size = _useDefaultProps$size === void 0 ? "medium" : _useDefaultProps$size;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix,
      empty = _useConfig.empty;
    var _useLocaleReceiver = useLocaleReceiver("empty"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var defaultMaps = {
      maintenance: {
        image: empty.image.maintenance || /* @__PURE__ */React__default["default"].createElement(MaintenanceSvg, null),
        title: empty.titleText.maintenance || t(local.titleText.maintenance)
      },
      success: {
        image: empty.image.success || /* @__PURE__ */React__default["default"].createElement(SuccessSvg, null),
        title: empty.titleText.success || t(local.titleText.success)
      },
      fail: {
        image: empty.image.fail || /* @__PURE__ */React__default["default"].createElement(FailSvg, null),
        title: empty.titleText.fail || t(local.titleText.fail)
      },
      "network-error": {
        image: empty.image.networkError || /* @__PURE__ */React__default["default"].createElement(NetworkErrorSvg, null),
        title: empty.titleText.networkError || t(local.titleText.networkError)
      },
      empty: {
        image: empty.image.empty || /* @__PURE__ */React__default["default"].createElement(EmptySvg, null),
        title: empty.titleText.empty || t(local.titleText.empty)
      }
    };
    var defaultSize = {
      small: "".concat(classPrefix, "-size-s"),
      medium: "".concat(classPrefix, "-size"),
      large: "".concat(classPrefix, "-size-l")
    };
    var prefix = "".concat(classPrefix, "-empty");
    var emptyClasses = classNames$1(prefix, className, defaultSize[size]);
    var titleClasses = classNames$1("".concat(prefix, "__title"));
    var imageClasses = classNames$1("".concat(prefix, "__image"));
    var descriptionClasses = classNames$1("".concat(prefix, "__description"));
    var actionCls = classNames$1("".concat(prefix, "__action"));
    var typeImageProps = (_defaultMaps$type = defaultMaps[type]) !== null && _defaultMaps$type !== void 0 ? _defaultMaps$type : null;
    var _image$title$descript = {
        image: propsImage ? propsImage : (_typeImageProps$image = typeImageProps === null || typeImageProps === void 0 ? void 0 : typeImageProps.image) !== null && _typeImageProps$image !== void 0 ? _typeImageProps$image : null,
        title: propsTitle ? propsTitle : (_typeImageProps$title = typeImageProps === null || typeImageProps === void 0 ? void 0 : typeImageProps.title) !== null && _typeImageProps$title !== void 0 ? _typeImageProps$title : null,
        description: propsDescription
      },
      image = _image$title$descript.image,
      description = _image$title$descript.description,
      title = _image$title$descript.title;
    function renderTitle() {
      if (!title) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: titleClasses
      }, title);
    }
    function renderDescription() {
      if (!description) {
        return null;
      }
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: descriptionClasses
      }, description);
    }
    var imageContent = getImageIns(image);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: emptyClasses,
      style: style
    }, imageContent ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: imageClasses,
      style: imageStyle
    }, imageContent) : null, renderTitle(), renderDescription(), action ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: actionCls
    }, action) : null);
  };

  var Empty = Empty$1;

  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == _typeof$3(e) || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }

  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }

  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf(t, e);
  }

  var _excluded$7 = ["children", "ellipsis", "lines"];
  function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
  var Truncate = /*#__PURE__*/function (_React$Component) {
    function Truncate(props) {
      var _this;
      _classCallCheck(this, Truncate);
      _this = _callSuper(this, Truncate, [props]);
      _defineProperty$2(_this, "state", {});
      _defineProperty$2(_this, "extractReplaceLinksKeys", function (content) {
        var i = 0;
        _this.replacedLinks = [];
        content.replace(/(<a[\s]+([^>]+)>((?:.(?!<\/a>))*.)<\/a>)/g, function () {
          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
            rest[_key] = arguments[_key];
          }
          var item = Array.prototype.slice.call(rest, 1, 4);
          item.key = "[".concat("@".repeat(item[2].length - 1), "=").concat(i + 1, "]");
          _this.replacedLinks.push(item);
          content = content.replace(item[0], item.key);
        });
        return content;
      });
      _defineProperty$2(_this, "restoreReplacedLinks", function (content) {
        _this.replacedLinks.forEach(function (item) {
          content = content.replace(item.key, item[0]);
        });
        return _this.createMarkup(content);
      });
      _defineProperty$2(_this, "innerText", function (node) {
        var div = document.createElement("div");
        var contentKey = "innerText" in window.HTMLElement.prototype ? "innerText" : "textContent";
        var content = node.innerHTML.replace(/\r\n|\r|\n/g, " ");
        div.innerHTML = _this.extractReplaceLinksKeys(content);
        var text = div[contentKey];
        var test = document.createElement("div");
        test.innerHTML = "foo<br/>bar";
        if (test[contentKey].replace(/\r\n|\r/g, "\n") !== "foo\nbar") {
          div.innerHTML = div.innerHTML.replace(/<br.*?[/]?>/gi, "\n");
          text = div[contentKey];
        }
        return text;
      });
      _defineProperty$2(_this, "onResize", function () {
        _this.calcTargetWidth();
      });
      _defineProperty$2(_this, "onTruncate", function (didTruncate) {
        var onTruncate = _this.props.onTruncate;
        if (typeof onTruncate === "function") {
          _this.timeout = window.requestAnimationFrame(function () {
            onTruncate(didTruncate);
          });
        }
      });
      _defineProperty$2(_this, "calcTargetWidth", function (callback) {
        var _this2 = _this,
          target = _this2.elements.target,
          calcTargetWidth = _this2.calcTargetWidth,
          canvasContext = _this2.canvasContext,
          width = _this2.props.width;
        if (!target) {
          return;
        }
        var targetWidth = width || Math.floor(target.parentElement.getBoundingClientRect().width);
        if (!targetWidth) {
          return window.requestAnimationFrame(function () {
            return calcTargetWidth(callback);
          });
        }
        var style = window.getComputedStyle(target);
        var font = [style["font-weight"], style["font-style"], style["font-size"], style["font-family"]].join(" ");
        canvasContext.font = font;
        _this.setState({
          targetWidth: targetWidth
        }, callback);
      });
      _defineProperty$2(_this, "measureWidth", function (text) {
        return _this.canvasContext.measureText(text).width;
      });
      _defineProperty$2(_this, "ellipsisWidth", function (node) {
        _this.calculatedEllipsisWidth = true;
        return node.offsetWidth;
      });
      _defineProperty$2(_this, "trimRight", function (text) {
        return text.replace(/\s+$/, "");
      });
      _defineProperty$2(_this, "createMarkup", function (str) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: _this.props.lineClassName,
          dangerouslySetInnerHTML: {
            __html: str
          }
        });
      });
      _defineProperty$2(_this, "getLines", function () {
        var _this3 = _this,
          elements = _this3.elements,
          _this3$props = _this3.props,
          numLines = _this3$props.lines,
          ellipsis = _this3$props.ellipsis,
          trimWhitespace = _this3$props.trimWhitespace,
          lineClassName = _this3$props.lineClassName,
          targetWidth = _this3.state.targetWidth,
          innerText = _this3.innerText,
          measureWidth = _this3.measureWidth,
          onTruncate = _this3.onTruncate,
          trimRight = _this3.trimRight,
          renderLine = _this3.renderLine,
          restoreReplacedLinks = _this3.restoreReplacedLinks;
        var lines = [];
        var text = innerText(elements.text);
        var textLines = text.split("\n").map(function (line) {
          return line.split("");
        });
        var didTruncate = true;
        var ellipsisWidth = _this.ellipsisWidth(_this.elements.ellipsis);
        for (var line = 1; line <= numLines; line++) {
          var textWords = textLines[0];
          if (textWords.length === 0) {
            lines.push();
            textLines.shift();
            line -= 1;
            continue;
          }
          var resultLine = textWords.join("");
          if (measureWidth(resultLine) <= targetWidth) {
            if (textLines.length === 1) {
              didTruncate = false;
              resultLine = restoreReplacedLinks(resultLine);
              lines.push(resultLine);
              break;
            }
          }
          if (line === numLines) {
            var textRest = textWords.join("");
            var lower = 0;
            var upper = textRest.length - 1;
            while (lower <= upper) {
              var middle = Math.floor((lower + upper) / 2);
              var testLine = textRest.slice(0, middle + 1);
              if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {
                lower = middle + 1;
              } else {
                upper = middle - 1;
              }
            }
            var lastLineText = textRest.slice(0, lower);
            if (trimWhitespace) {
              lastLineText = trimRight(lastLineText);
              while (!lastLineText.length && lines.length) {
                var prevLine = lines.pop();
                lastLineText = trimRight(prevLine);
              }
            }
            if (lastLineText.substr(lastLineText.length - 2) === "][") {
              lastLineText = lastLineText.substring(0, lastLineText.length - 1);
            }
            lastLineText = lastLineText.replace(/\[@+$/, "");
            lastLineText = restoreReplacedLinks(lastLineText);
            resultLine = /* @__PURE__ */React__default["default"].createElement("span", {
              className: "".concat(lineClassName, "-with-symbol")
            }, lastLineText, ellipsis);
          } else {
            var _lower = 0;
            var _upper = textWords.length - 1;
            while (_lower <= _upper) {
              var _middle = Math.floor((_lower + _upper) / 2);
              var _testLine = textWords.slice(0, _middle + 1).join("");
              if (measureWidth(_testLine) <= targetWidth) {
                _lower = _middle + 1;
              } else {
                _upper = _middle - 1;
              }
            }
            if (_lower === 0) {
              line = numLines - 1;
              continue;
            }
            resultLine = textWords.slice(0, _lower).join("");
            resultLine = restoreReplacedLinks(resultLine);
            textLines[0].splice(0, _lower);
          }
          lines.push(resultLine);
        }
        onTruncate(didTruncate);
        return lines.map(renderLine);
      });
      _defineProperty$2(_this, "renderLine", function (line, i, arr) {
        var lineClassName = _this.props.lineClassName;
        if (i === arr.length - 1) {
          return /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(lineClassName, "-wrapper"),
            key: i
          }, line);
        }
        var br = /* @__PURE__ */React__default["default"].createElement("br", {
          key: "".concat(i, "br")
        });
        if (line) {
          return [/* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(lineClassName, "-wrapper"),
            key: i
          }, line), br];
        }
        return br;
      });
      _this.elements = {};
      _this.replacedLinks = [];
      _this.calculatedEllipsisWidth = false;
      _this.canvasContext;
      return _this;
    }
    _inherits(Truncate, _React$Component);
    return _createClass(Truncate, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var text = this.elements.text,
          calcTargetWidth = this.calcTargetWidth,
          onResize = this.onResize;
        var canvas = document.createElement("canvas");
        this.canvasContext = canvas.getContext("2d");
        calcTargetWidth(function () {
          if (text && text.parentNode) {
            text.parentNode.removeChild(text);
          }
        });
        window.addEventListener("resize", onResize);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.children !== prevProps.children) {
          this.forceUpdate();
        }
        if (this.props.width !== prevProps.width) {
          this.calcTargetWidth();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var ellipsis = this.elements.ellipsis,
          onResize = this.onResize,
          timeout = this.timeout;
        if (ellipsis.parentNode && this.calculatedEllipsisWidth) {
          ellipsis.parentNode.removeChild(ellipsis);
        }
        window.removeEventListener("resize", onResize);
        window.cancelAnimationFrame(timeout);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;
        var target = this.elements.target,
          _this$props = this.props,
          children = _this$props.children,
          ellipsis = _this$props.ellipsis,
          lines = _this$props.lines,
          spanProps = _objectWithoutProperties$2(_this$props, _excluded$7),
          targetWidth = this.state.targetWidth,
          getLines = this.getLines,
          onTruncate = this.onTruncate;
        var text;
        var mounted = !!(target && targetWidth);
        if (typeof window !== "undefined" && mounted) {
          if (lines > 0) {
            text = getLines();
          } else {
            text = children;
            onTruncate(false);
          }
        }
        return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$8(_objectSpread$8({}, omit$2(spanProps, ["onTruncate", "trimWhitespace", "lineClassName"])), {}, {
          ref: function ref(targetEl) {
            _this4.elements.target = targetEl;
          }
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          style: {
            display: "block",
            maxWidth: spanProps.width > 0 ? "".concat(spanProps.width, "px") : "unset"
          }
        }, text), /* @__PURE__ */React__default["default"].createElement("span", {
          ref: function ref(textEl) {
            _this4.elements.text = textEl;
          }
        }, children), /* @__PURE__ */React__default["default"].createElement("span", {
          ref: function ref(ellipsisEl) {
            _this4.elements.ellipsis = ellipsisEl;
          },
          style: {
            position: "fixed",
            visibility: "hidden",
            top: 0,
            left: 0
          }
        }, ellipsis));
      }
    }]);
  }(React__default["default"].Component);
  _defineProperty$2(Truncate, "propTypes", {
    children: PropTypes.node,
    ellipsis: PropTypes.node,
    lines: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number]),
    trimWhitespace: PropTypes.bool,
    width: PropTypes.number,
    onTruncate: PropTypes.func,
    className: PropTypes.string,
    lineClassName: PropTypes.string
  });
  _defineProperty$2(Truncate, "defaultProps", {
    children: "",
    ellipsis: "...",
    lines: 1,
    trimWhitespace: false,
    width: 0,
    lineClassName: "truncate-line"
  });

  var _excluded$6 = ["className", "children", "lines", "ellipsisClassName", "ellipsisPrefix", "onToggleExpand", "width", "onTruncate", "component", "collapsible", "expandable", "more", "less"];
  function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Ellipsis = function Ellipsis(_ref) {
    var className = _ref.className,
      children = _ref.children,
      _ref$lines = _ref.lines,
      lines = _ref$lines === void 0 ? 1 : _ref$lines,
      ellipsisClassName = _ref.ellipsisClassName,
      _ref$ellipsisPrefix = _ref.ellipsisPrefix,
      ellipsisPrefix = _ref$ellipsisPrefix === void 0 ? "..." : _ref$ellipsisPrefix,
      onToggleExpand = _ref.onToggleExpand,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 0 : _ref$width,
      onTruncate = _ref.onTruncate,
      _ref$component = _ref.component,
      Component = _ref$component === void 0 ? "div" : _ref$component,
      _ref$collapsible = _ref.collapsible,
      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,
      _ref$expandable = _ref.expandable,
      expandable = _ref$expandable === void 0 ? false : _ref$expandable,
      more = _ref.more,
      less = _ref.less,
      rest = _objectWithoutProperties$2(_ref, _excluded$6);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var symbolClassName = ellipsisClassName || "".concat(classPrefix, "-typography-ellipsis-symbol");
    var isMountRef = React.useRef(false);
    React.useEffect(function () {
      isMountRef.current = true;
    }, []);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isExpanded = _useState2[0],
      setIsExpanded = _useState2[1];
    var handleToggleExpand = function handleToggleExpand(e) {
      if (!expandable) return;
      if (isMountRef.current) {
        setIsExpanded(!isExpanded);
        onToggleExpand === null || onToggleExpand === void 0 || onToggleExpand(!isExpanded, e);
      }
    };
    var truncateRef = React.useRef(null);
    var _useState3 = React.useState(false),
      _useState4 = _slicedToArray$1(_useState3, 2),
      isTruncated = _useState4[0],
      setTruncated = _useState4[1];
    var handleTruncate = function handleTruncate(truncated) {
      if (isMountRef.current && truncated !== isTruncated) {
        setTruncated(truncated);
        if (truncated && truncateRef.current) {
          var _truncateRef$current$, _truncateRef$current;
          (_truncateRef$current$ = (_truncateRef$current = truncateRef.current).onResize) === null || _truncateRef$current$ === void 0 || _truncateRef$current$.call(_truncateRef$current);
        }
        onTruncate === null || onTruncate === void 0 || onTruncate(truncated);
      }
    };
    var componentProps = _objectSpread$7({
      className: className
    }, rest);
    return /* @__PURE__ */React__default["default"].createElement(Component, _objectSpread$7({}, componentProps), /* @__PURE__ */React__default["default"].createElement(Truncate, {
      width: width,
      lines: !isExpanded && lines,
      className: "".concat(classPrefix, "-typography-ellipsis"),
      ellipsis: /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-typography-ellipsis-symbol-wrapper")
      }, ellipsisPrefix, /* @__PURE__ */React__default["default"].createElement("span", {
        className: symbolClassName,
        onClick: handleToggleExpand
      }, more)),
      onTruncate: handleTruncate,
      ref: truncateRef,
      lineClassName: "".concat(classPrefix, "-typography-ellipsis-line")
    }, children), !isTruncated && collapsible && isExpanded && /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(symbolClassName, "".concat(symbolClassName, "--expanded")),
      onClick: handleToggleExpand
    }, less));
  };

  function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useEllipsis(ellipsis) {
    var _useLocaleReceiver = useLocaleReceiver("typography"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var expandText = t(local.expandText);
    var collapseText = t(local.collapseText);
    var formattedEllipsis = {};
    if (ellipsis) {
      var _ellipsis$expandable, _ellipsis$collapsible;
      formattedEllipsis = ellipsis === true ? {
        row: 1,
        expandable: false,
        tooltipProps: null,
        suffix: function suffix() {
          return "";
        },
        collapsible: true
      } : {
        row: ellipsis.row || 1,
        expandable: (_ellipsis$expandable = ellipsis.expandable) !== null && _ellipsis$expandable !== void 0 ? _ellipsis$expandable : false,
        tooltipProps: ellipsis.tooltipProps || null,
        suffix: function suffix(_ref) {
          var expanded = _ref.expanded;
          return typeof (ellipsis === null || ellipsis === void 0 ? void 0 : ellipsis.suffix) === "function" ? ellipsis === null || ellipsis === void 0 ? void 0 : ellipsis.suffix({
            expanded: expanded
          }) : expanded ? collapseText : ellipsis !== null && ellipsis !== void 0 && ellipsis.expandable ? "".concat(expandText) : "...";
        },
        collapsible: (_ellipsis$collapsible = ellipsis === null || ellipsis === void 0 ? void 0 : ellipsis.collapsible) !== null && _ellipsis$collapsible !== void 0 ? _ellipsis$collapsible : false
      };
    }
    var _useState = React.useState(true),
      _useState2 = _slicedToArray$1(_useState, 2),
      isClamped = _useState2[0],
      setIsClamped = _useState2[1];
    var handleExpand = function handleExpand(expanded) {
      var _ellipsis$onExpand;
      if (typeof expanded !== "boolean") return;
      setIsClamped(!expanded);
      (_ellipsis$onExpand = ellipsis.onExpand) === null || _ellipsis$onExpand === void 0 || _ellipsis$onExpand.call(ellipsis, !expanded);
    };
    var getEllipsisSuffix = function getEllipsisSuffix() {
      var _formattedEllipsis$su, _formattedEllipsis, _formattedEllipsis2;
      var moreOrLess;
      if (isFunction$1(formattedEllipsis.suffix)) moreOrLess = (_formattedEllipsis$su = (_formattedEllipsis = formattedEllipsis).suffix) === null || _formattedEllipsis$su === void 0 ? void 0 : _formattedEllipsis$su.call(_formattedEllipsis, {
        expanded: !isClamped
      });else moreOrLess = formattedEllipsis.suffix;
      if ((_formattedEllipsis2 = formattedEllipsis) !== null && _formattedEllipsis2 !== void 0 && _formattedEllipsis2.tooltipProps && !!moreOrLess) {
        var _formattedEllipsis3;
        return /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$6({}, (_formattedEllipsis3 = formattedEllipsis) === null || _formattedEllipsis3 === void 0 ? void 0 : _formattedEllipsis3.tooltipProps), moreOrLess);
      }
      return moreOrLess;
    };
    var getEllipsisPrefix = function getEllipsisPrefix() {
      var _formattedEllipsis$su2, _formattedEllipsis4, _formattedEllipsis5;
      var moreOrLess;
      if (isFunction$1(formattedEllipsis.suffix)) moreOrLess = (_formattedEllipsis$su2 = (_formattedEllipsis4 = formattedEllipsis).suffix) === null || _formattedEllipsis$su2 === void 0 ? void 0 : _formattedEllipsis$su2.call(_formattedEllipsis4, {
        expanded: !isClamped
      });else moreOrLess = formattedEllipsis.suffix;
      if ((_formattedEllipsis5 = formattedEllipsis) !== null && _formattedEllipsis5 !== void 0 && _formattedEllipsis5.tooltipProps && !moreOrLess) {
        var _formattedEllipsis6;
        return /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$6({}, (_formattedEllipsis6 = formattedEllipsis) === null || _formattedEllipsis6 === void 0 ? void 0 : _formattedEllipsis6.tooltipProps), "...");
      }
      return "...";
    };
    var ellipsisProps = {
      lines: formattedEllipsis.row,
      ellipsisPrefix: getEllipsisPrefix(),
      more: getEllipsisSuffix(),
      less: getEllipsisSuffix(),
      onToggleExpand: handleExpand,
      expandable: formattedEllipsis.expandable,
      collapsible: formattedEllipsis.collapsible
    };
    return {
      ellipsisProps: ellipsisProps
    };
  }

  var textDefaultProps = {
    code: false,
    copyable: false,
    "delete": false,
    disabled: false,
    ellipsis: false,
    italic: false,
    keyboard: false,
    mark: false,
    strong: false,
    underline: false
  };
  var titleDefaultProps = {
    ellipsis: false,
    level: "h1"
  };
  var paragraphDefaultProps = {
    ellipsis: false
  };

  var _excluded$5 = ["theme", "disabled", "className", "copyable", "strong", "mark", "code", "keyboard", "underline", "delete", "italic", "children", "ellipsis"];
  function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Text = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _copyable$onCopy, _copyable$tooltipProp;
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, textDefaultProps);
    var prefixCls = "".concat(classPrefix, "-typography");
    var _useLocaleReceiver = useLocaleReceiver("typography"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];
    var copiedText = t(local.copiedText);
    var theme = props.theme,
      disabled = props.disabled,
      className = props.className,
      copyable = props.copyable,
      strong = props.strong,
      mark = props.mark,
      code = props.code,
      keyboard = props.keyboard,
      underline = props.underline,
      deleteProp = props["delete"],
      italic = props.italic,
      children = props.children,
      ellipsis = props.ellipsis,
      rest = _objectWithoutProperties$2(props, _excluded$5);
    var getComponent = function getComponent() {
      var _Object$entries$find;
      var componentMap = {
        strong: !!strong,
        mark: !!mark,
        code: !!code,
        kbd: !!keyboard,
        u: !!underline,
        del: !!deleteProp,
        i: !!italic
      };
      return (_Object$entries$find = Object.entries(componentMap).find(function (_ref) {
        var _ref2 = _slicedToArray$1(_ref, 2),
          condition = _ref2[1];
        return !!condition;
      })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];
    };
    var currentRef = React.useRef(null);
    var _useEllipsis = useEllipsis(ellipsis),
      ellipsisProps = _useEllipsis.ellipsisProps;
    var Component = getComponent();
    var textEllipsisProps = _objectSpread$5({}, ellipsisProps);
    var _useState = React.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isCopied = _useState2[0],
      setIsCopied = _useState2[1];
    var copyProps = typeof copyable === "boolean" ? {
      text: children.toString(),
      onCopy: Function.prototype,
      tooltipProps: isCopied ? {
        content: copiedText
      } : null
    } : {
      text: (copyable === null || copyable === void 0 ? void 0 : copyable.text) || children.toString(),
      onCopy: copyable === null || copyable === void 0 || (_copyable$onCopy = copyable.onCopy) === null || _copyable$onCopy === void 0 ? void 0 : _copyable$onCopy.call(copyable),
      tooltipProps: _objectSpread$5(_objectSpread$5({}, copyable === null || copyable === void 0 ? void 0 : copyable.tooltipProps), {}, {
        content: isCopied ? copiedText : copyable === null || copyable === void 0 || (_copyable$tooltipProp = copyable.tooltipProps) === null || _copyable$tooltipProp === void 0 ? void 0 : _copyable$tooltipProp.content
      }),
      suffix: copyable === null || copyable === void 0 ? void 0 : copyable.suffix
    };
    var handleCopy = function handleCopy() {
      copyText(copyProps === null || copyProps === void 0 ? void 0 : copyProps.text);
      setIsCopied(true);
      setTimeout(function () {
        setIsCopied(false);
      }, 1500);
      if (typeof copyProps.onCopy === "function") copyProps.onCopy();
    };
    var renderContent = function renderContent(withChildren) {
      var tooltipProps = copyProps.tooltipProps;
      var wrapWithTooltip = function wrapWithTooltip(wrapContent) {
        return tooltipProps ? /* @__PURE__ */React__default["default"].createElement(Tooltip, _objectSpread$5({}, tooltipProps), wrapContent) : wrapContent;
      };
      var getSuffix = function getSuffix() {
        if (typeof (copyProps === null || copyProps === void 0 ? void 0 : copyProps.suffix) === "function") {
          return copyProps.suffix({
            copied: isCopied
          });
        }
        return isCopied ? /* @__PURE__ */React__default["default"].createElement(CheckIcon$1, null) : /* @__PURE__ */React__default["default"].createElement(CopyIcon$1, null);
      };
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, withChildren ? children : null, copyable ? wrapWithTooltip(/* @__PURE__ */React__default["default"].createElement(Button$1, {
        shape: "square",
        theme: "primary",
        variant: "text",
        icon: getSuffix(),
        onClick: handleCopy
      })) : null);
    };
    if (!ellipsis) {
      return Component ? /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$5({
        className: classNames$1(className, prefixCls),
        ref: ref || currentRef
      }, rest), /* @__PURE__ */React__default["default"].createElement(Component, null, renderContent(true))) : /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$5({
        className: classNames$1(className, _defineProperty$2(_defineProperty$2({}, "".concat(prefixCls, "--").concat(theme), theme), "".concat(prefixCls, "--disabled"), disabled))
      }, rest), renderContent(true));
    }
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, Component ? /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$5({
      className: classNames$1(className, prefixCls),
      ref: ref || currentRef
    }, rest), /* @__PURE__ */React__default["default"].createElement(Ellipsis, _objectSpread$5(_objectSpread$5({}, textEllipsisProps), {}, {
      component: Component
    }), children)) : /* @__PURE__ */React__default["default"].createElement(Ellipsis, _objectSpread$5(_objectSpread$5({}, textEllipsisProps), {}, {
      className: classNames$1(className, _defineProperty$2(_defineProperty$2({}, "".concat(prefixCls, "--").concat(theme), theme), "".concat(prefixCls, "--disabled"), disabled))
    }, rest), children), renderContent(false));
  });

  var _excluded$4 = ["level", "children", "className", "content", "ellipsis"];
  function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Title = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, titleDefaultProps);
    var _props$level = props.level,
      Component = _props$level === void 0 ? "h1" : _props$level,
      children = props.children,
      className = props.className,
      content = props.content,
      ellipsis = props.ellipsis,
      rest = _objectWithoutProperties$2(props, _excluded$4);
    var prefixCls = "".concat(classPrefix, "-typography");
    var _useEllipsis = useEllipsis(ellipsis),
      ellipsisProps = _useEllipsis.ellipsisProps;
    if (!ellipsis) {
      return /* @__PURE__ */React__default["default"].createElement(Component, _objectSpread$4({
        className: classNames$1(className, prefixCls),
        ref: ref
      }, rest), children || content);
    }
    return /* @__PURE__ */React__default["default"].createElement(Ellipsis, _objectSpread$4(_objectSpread$4({
      className: classNames$1(className, prefixCls)
    }, ellipsisProps), {}, {
      component: Component
    }, rest), children || content);
  });

  var _excluded$3 = ["ellipsis", "children", "className", "content"];
  function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var Paragraph = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var props = useDefaultProps(originalProps, paragraphDefaultProps);
    var ellipsis = props.ellipsis,
      children = props.children,
      className = props.className,
      content = props.content,
      rest = _objectWithoutProperties$2(props, _excluded$3);
    var prefixCls = "".concat(classPrefix, "-typography");
    var _useEllipsis = useEllipsis(ellipsis),
      ellipsisProps = _useEllipsis.ellipsisProps;
    if (!ellipsis) {
      return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$3({
        className: classNames$1(className, prefixCls),
        ref: ref
      }, rest), children || content);
    }
    return /* @__PURE__ */React__default["default"].createElement(Ellipsis, _objectSpread$3(_objectSpread$3({}, ellipsisProps), {}, {
      className: classNames$1(className, prefixCls)
    }, rest), children || content);
  });
  Paragraph.displayName = "Paragraph";

  var Typography$1 = function Typography() {
    return null;
  };
  Typography$1.Text = Text;
  Typography$1.Title = Title;
  Typography$1.Paragraph = Paragraph;
  Text.displayName = "Text";
  Paragraph.displayName = "Paragraph";
  Title.displayName = "Title";

  var Typography = Typography$1;

  var _Mode, _Ecc;
  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function appendBits(val, len, bb) {
    if (len < 0 || len > 31 || val >>> len !== 0) {
      throw new RangeError("Value out of range");
    }
    for (var i = len - 1; i >= 0; i--) {
      bb.push(val >>> i & 1);
    }
  }
  function getBit(x, i) {
    return (x >>> i & 1) !== 0;
  }
  function assert(cond) {
    if (!cond) {
      throw new Error("Assertion error");
    }
  }
  var Mode = /*#__PURE__*/function () {
    function Mode(modeBits, numBitsCharCount) {
      _classCallCheck(this, Mode);
      this.modeBits = modeBits;
      this.numBitsCharCount = numBitsCharCount;
    }
    return _createClass(Mode, [{
      key: "numCharCountBits",
      value: function numCharCountBits(ver) {
        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];
      }
    }]);
  }();
  _Mode = Mode;
  _defineProperty$2(Mode, "NUMERIC", new _Mode(1, [10, 12, 14]));
  _defineProperty$2(Mode, "ALPHANUMERIC", new _Mode(2, [9, 11, 13]));
  _defineProperty$2(Mode, "BYTE", new _Mode(4, [8, 16, 16]));
  _defineProperty$2(Mode, "KANJI", new _Mode(8, [8, 10, 12]));
  _defineProperty$2(Mode, "ECI", new _Mode(7, [0, 0, 0]));
  var Ecc = /*#__PURE__*/_createClass(function Ecc(ordinal, formatBits) {
    _classCallCheck(this, Ecc);
    this.ordinal = ordinal;
    this.formatBits = formatBits;
  });
  _Ecc = Ecc;
  _defineProperty$2(Ecc, "LOW", new _Ecc(0, 1));
  _defineProperty$2(Ecc, "MEDIUM", new _Ecc(1, 0));
  _defineProperty$2(Ecc, "QUARTILE", new _Ecc(2, 3));
  _defineProperty$2(Ecc, "HIGH", new _Ecc(3, 2));
  var QrSegment = /*#__PURE__*/function () {
    function QrSegment(mode, numChars, bitData) {
      _classCallCheck(this, QrSegment);
      this.mode = mode;
      this.numChars = numChars;
      this.bitData = bitData;
      if (numChars < 0) {
        throw new RangeError("Invalid argument");
      }
      this.bitData = bitData.slice();
    }
    return _createClass(QrSegment, [{
      key: "getData",
      value: function getData() {
        return this.bitData.slice();
      }
    }], [{
      key: "makeBytes",
      value: function makeBytes(data) {
        var bb = [];
        var _iterator = _createForOfIteratorHelper(data),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var b = _step.value;
            appendBits(b, 8, bb);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return new QrSegment(Mode.BYTE, data.length, bb);
      }
    }, {
      key: "makeNumeric",
      value: function makeNumeric(digits) {
        if (!QrSegment.isNumeric(digits)) {
          throw new RangeError("String contains non-numeric characters");
        }
        var bb = [];
        for (var i = 0; i < digits.length;) {
          var n = Math.min(digits.length - i, 3);
          appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);
          i += n;
        }
        return new QrSegment(Mode.NUMERIC, digits.length, bb);
      }
    }, {
      key: "makeAlphanumeric",
      value: function makeAlphanumeric(text) {
        if (!QrSegment.isAlphanumeric(text)) {
          throw new RangeError("String contains unencodable characters in alphanumeric mode");
        }
        var bb = [];
        var i;
        for (i = 0; i + 2 <= text.length; i += 2) {
          var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;
          temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));
          appendBits(temp, 11, bb);
        }
        if (i < text.length) {
          appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);
        }
        return new QrSegment(Mode.ALPHANUMERIC, text.length, bb);
      }
    }, {
      key: "makeSegments",
      value: function makeSegments(text) {
        if (text === "") {
          return [];
        }
        if (QrSegment.isNumeric(text)) {
          return [QrSegment.makeNumeric(text)];
        }
        if (QrSegment.isAlphanumeric(text)) {
          return [QrSegment.makeAlphanumeric(text)];
        }
        return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];
      }
    }, {
      key: "makeEci",
      value: function makeEci(assignVal) {
        var bb = [];
        if (assignVal < 0) {
          throw new RangeError("ECI assignment value out of range");
        } else if (assignVal < 1 << 7) {
          appendBits(assignVal, 8, bb);
        } else if (assignVal < 1 << 14) {
          appendBits(2, 2, bb);
          appendBits(assignVal, 14, bb);
        } else if (assignVal < 1e6) {
          appendBits(6, 3, bb);
          appendBits(assignVal, 21, bb);
        } else {
          throw new RangeError("ECI assignment value out of range");
        }
        return new QrSegment(Mode.ECI, 0, bb);
      }
    }, {
      key: "isNumeric",
      value: function isNumeric(text) {
        return QrSegment.NUMERIC_REGEX.test(text);
      }
    }, {
      key: "isAlphanumeric",
      value: function isAlphanumeric(text) {
        return QrSegment.ALPHANUMERIC_REGEX.test(text);
      }
    }, {
      key: "getTotalBits",
      value: function getTotalBits(segs, version) {
        var result = 0;
        var _iterator2 = _createForOfIteratorHelper(segs),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var seg = _step2.value;
            var ccbits = seg.mode.numCharCountBits(version);
            if (seg.numChars >= 1 << ccbits) {
              return Infinity;
            }
            result += 4 + ccbits + seg.bitData.length;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return result;
      }
    }, {
      key: "toUtf8ByteArray",
      value: function toUtf8ByteArray(input) {
        var str = encodeURI(input);
        var result = [];
        for (var i = 0; i < str.length; i++) {
          if (str.charAt(i) !== "%") {
            result.push(str.charCodeAt(i));
          } else {
            result.push(parseInt(str.substring(i + 1, i + 3), 16));
            i += 2;
          }
        }
        return result;
      }
    }]);
  }();
  _defineProperty$2(QrSegment, "NUMERIC_REGEX", /^[0-9]*$/);
  _defineProperty$2(QrSegment, "ALPHANUMERIC_REGEX", /^[A-Z0-9 $%*+.\/:-]*$/);
  _defineProperty$2(QrSegment, "ALPHANUMERIC_CHARSET", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:");
  var QrCode = /*#__PURE__*/function () {
    function QrCode(version, errorCorrectionLevel, dataCodewords, oriMsk) {
      _classCallCheck(this, QrCode);
      _defineProperty$2(this, "modules", []);
      _defineProperty$2(this, "isFunction", []);
      var msk = oriMsk;
      this.version = version;
      this.errorCorrectionLevel = errorCorrectionLevel;
      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) {
        throw new RangeError("Version value out of range");
      }
      if (msk < -1 || msk > 7) {
        throw new RangeError("Mask value out of range");
      }
      this.size = version * 4 + 17;
      var row = [];
      for (var i = 0; i < this.size; i++) {
        row.push(false);
      }
      for (var _i = 0; _i < this.size; _i++) {
        this.modules.push(row.slice());
        this.isFunction.push(row.slice());
      }
      this.drawFunctionPatterns();
      var allCodewords = this.addEccAndInterleave(dataCodewords);
      this.drawCodewords(allCodewords);
      if (msk === -1) {
        var minPenalty = 1e9;
        for (var _i2 = 0; _i2 < 8; _i2++) {
          this.applyMask(_i2);
          this.drawFormatBits(_i2);
          var penalty = this.getPenaltyScore();
          if (penalty < minPenalty) {
            msk = _i2;
            minPenalty = penalty;
          }
          this.applyMask(_i2);
        }
      }
      assert(msk >= 0 && msk <= 7);
      this.mask = msk;
      this.applyMask(msk);
      this.drawFormatBits(msk);
      this.isFunction = [];
    }
    return _createClass(QrCode, [{
      key: "getModule",
      value: function getModule(x, y) {
        return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];
      }
    }, {
      key: "getModules",
      value: function getModules() {
        return this.modules;
      }
    }, {
      key: "drawFunctionPatterns",
      value: function drawFunctionPatterns() {
        for (var i = 0; i < this.size; i++) {
          this.setFunctionModule(6, i, i % 2 === 0);
          this.setFunctionModule(i, 6, i % 2 === 0);
        }
        this.drawFinderPattern(3, 3);
        this.drawFinderPattern(this.size - 4, 3);
        this.drawFinderPattern(3, this.size - 4);
        var alignPatPos = this.getAlignmentPatternPositions();
        var numAlign = alignPatPos.length;
        for (var _i3 = 0; _i3 < numAlign; _i3++) {
          for (var j = 0; j < numAlign; j++) {
            if (!(_i3 === 0 && j === 0 || _i3 === 0 && j === numAlign - 1 || _i3 === numAlign - 1 && j === 0)) {
              this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);
            }
          }
        }
        this.drawFormatBits(0);
        this.drawVersion();
      }
    }, {
      key: "drawFormatBits",
      value: function drawFormatBits(mask) {
        var data = this.errorCorrectionLevel.formatBits << 3 | mask;
        var rem = data;
        for (var i = 0; i < 10; i++) {
          rem = rem << 1 ^ (rem >>> 9) * 1335;
        }
        var bits = (data << 10 | rem) ^ 21522;
        assert(bits >>> 15 === 0);
        for (var _i4 = 0; _i4 <= 5; _i4++) {
          this.setFunctionModule(8, _i4, getBit(bits, _i4));
        }
        this.setFunctionModule(8, 7, getBit(bits, 6));
        this.setFunctionModule(8, 8, getBit(bits, 7));
        this.setFunctionModule(7, 8, getBit(bits, 8));
        for (var _i5 = 9; _i5 < 15; _i5++) {
          this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));
        }
        for (var _i6 = 0; _i6 < 8; _i6++) {
          this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));
        }
        for (var _i7 = 8; _i7 < 15; _i7++) {
          this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));
        }
        this.setFunctionModule(8, this.size - 8, true);
      }
    }, {
      key: "drawVersion",
      value: function drawVersion() {
        if (this.version < 7) {
          return;
        }
        var rem = this.version;
        for (var i = 0; i < 12; i++) {
          rem = rem << 1 ^ (rem >>> 11) * 7973;
        }
        var bits = this.version << 12 | rem;
        assert(bits >>> 18 === 0);
        for (var _i8 = 0; _i8 < 18; _i8++) {
          var color = getBit(bits, _i8);
          var a = this.size - 11 + _i8 % 3;
          var b = Math.floor(_i8 / 3);
          this.setFunctionModule(a, b, color);
          this.setFunctionModule(b, a, color);
        }
      }
    }, {
      key: "drawFinderPattern",
      value: function drawFinderPattern(x, y) {
        for (var dy = -4; dy <= 4; dy++) {
          for (var dx = -4; dx <= 4; dx++) {
            var dist = Math.max(Math.abs(dx), Math.abs(dy));
            var xx = x + dx;
            var yy = y + dy;
            if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) {
              this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4);
            }
          }
        }
      }
    }, {
      key: "drawAlignmentPattern",
      value: function drawAlignmentPattern(x, y) {
        for (var dy = -2; dy <= 2; dy++) {
          for (var dx = -2; dx <= 2; dx++) {
            this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1);
          }
        }
      }
    }, {
      key: "setFunctionModule",
      value: function setFunctionModule(x, y, isDark) {
        this.modules[y][x] = isDark;
        this.isFunction[y][x] = true;
      }
    }, {
      key: "addEccAndInterleave",
      value: function addEccAndInterleave(data) {
        var ver = this.version;
        var ecl = this.errorCorrectionLevel;
        if (data.length !== QrCode.getNumDataCodewords(ver, ecl)) {
          throw new RangeError("Invalid argument");
        }
        var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
        var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];
        var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);
        var numShortBlocks = numBlocks - rawCodewords % numBlocks;
        var shortBlockLen = Math.floor(rawCodewords / numBlocks);
        var blocks = [];
        var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);
        for (var i = 0, k = 0; i < numBlocks; i++) {
          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));
          k += dat.length;
          var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);
          if (i < numShortBlocks) {
            dat.push(0);
          }
          blocks.push(dat.concat(ecc));
        }
        var result = [];
        var _loop = function _loop(_i9) {
          blocks.forEach(function (block, j) {
            if (_i9 !== shortBlockLen - blockEccLen || j >= numShortBlocks) {
              result.push(block[_i9]);
            }
          });
        };
        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {
          _loop(_i9);
        }
        assert(result.length === rawCodewords);
        return result;
      }
    }, {
      key: "drawCodewords",
      value: function drawCodewords(data) {
        if (data.length !== Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) {
          throw new RangeError("Invalid argument");
        }
        var i = 0;
        for (var right = this.size - 1; right >= 1; right -= 2) {
          if (right === 6) {
            right = 5;
          }
          for (var vert = 0; vert < this.size; vert++) {
            for (var j = 0; j < 2; j++) {
              var x = right - j;
              var upward = (right + 1 & 2) === 0;
              var y = upward ? this.size - 1 - vert : vert;
              if (!this.isFunction[y][x] && i < data.length * 8) {
                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));
                i++;
              }
            }
          }
        }
        assert(i === data.length * 8);
      }
    }, {
      key: "applyMask",
      value: function applyMask(mask) {
        if (mask < 0 || mask > 7) {
          throw new RangeError("Mask value out of range");
        }
        for (var y = 0; y < this.size; y++) {
          for (var x = 0; x < this.size; x++) {
            var invert = void 0;
            switch (mask) {
              case 0:
                invert = (x + y) % 2 === 0;
                break;
              case 1:
                invert = y % 2 === 0;
                break;
              case 2:
                invert = x % 3 === 0;
                break;
              case 3:
                invert = (x + y) % 3 === 0;
                break;
              case 4:
                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;
                break;
              case 5:
                invert = x * y % 2 + x * y % 3 === 0;
                break;
              case 6:
                invert = (x * y % 2 + x * y % 3) % 2 === 0;
                break;
              case 7:
                invert = ((x + y) % 2 + x * y % 3) % 2 === 0;
                break;
              default:
                throw new Error("Unreachable");
            }
            if (!this.isFunction[y][x] && invert) {
              this.modules[y][x] = !this.modules[y][x];
            }
          }
        }
      }
    }, {
      key: "getPenaltyScore",
      value: function getPenaltyScore() {
        var result = 0;
        for (var y = 0; y < this.size; y++) {
          var runColor = false;
          var runX = 0;
          var runHistory = [0, 0, 0, 0, 0, 0, 0];
          for (var x = 0; x < this.size; x++) {
            if (this.modules[y][x] === runColor) {
              runX++;
              if (runX === 5) {
                result += QrCode.PENALTY_N1;
              } else if (runX > 5) {
                result++;
              }
            } else {
              this.finderPenaltyAddHistory(runX, runHistory);
              if (!runColor) {
                result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;
              }
              runColor = this.modules[y][x];
              runX = 1;
            }
          }
          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;
        }
        for (var _x = 0; _x < this.size; _x++) {
          var _runColor = false;
          var runY = 0;
          var _runHistory = [0, 0, 0, 0, 0, 0, 0];
          for (var _y = 0; _y < this.size; _y++) {
            if (this.modules[_y][_x] === _runColor) {
              runY++;
              if (runY === 5) {
                result += QrCode.PENALTY_N1;
              } else if (runY > 5) {
                result++;
              }
            } else {
              this.finderPenaltyAddHistory(runY, _runHistory);
              if (!_runColor) {
                result += this.finderPenaltyCountPatterns(_runHistory) * QrCode.PENALTY_N3;
              }
              _runColor = this.modules[_y][_x];
              runY = 1;
            }
          }
          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * QrCode.PENALTY_N3;
        }
        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {
          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {
            var color = this.modules[_y2][_x2];
            if (color === this.modules[_y2][_x2 + 1] && color === this.modules[_y2 + 1][_x2] && color === this.modules[_y2 + 1][_x2 + 1]) {
              result += QrCode.PENALTY_N2;
            }
          }
        }
        var dark = 0;
        var _iterator3 = _createForOfIteratorHelper(this.modules),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var row = _step3.value;
            dark = row.reduce(function (sum, color) {
              return sum + (color ? 1 : 0);
            }, dark);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        var total = this.size * this.size;
        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;
        assert(k >= 0 && k <= 9);
        result += k * QrCode.PENALTY_N4;
        assert(result >= 0 && result <= 2568888);
        return result;
      }
    }, {
      key: "getAlignmentPatternPositions",
      value: function getAlignmentPatternPositions() {
        if (this.version === 1) {
          return [];
        }
        var numAlign = Math.floor(this.version / 7) + 2;
        var step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;
        var result = [6];
        for (var pos = this.size - 7; result.length < numAlign; pos -= step) {
          result.splice(1, 0, pos);
        }
        return result;
      }
    }, {
      key: "finderPenaltyCountPatterns",
      value: function finderPenaltyCountPatterns(runHistory) {
        var n = runHistory[1];
        assert(n <= this.size * 3);
        var core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;
        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);
      }
    }, {
      key: "finderPenaltyTerminateAndCount",
      value: function finderPenaltyTerminateAndCount(currentRunColor, oriCurrentRunLength, runHistory) {
        var currentRunLength = oriCurrentRunLength;
        if (currentRunColor) {
          this.finderPenaltyAddHistory(currentRunLength, runHistory);
          currentRunLength = 0;
        }
        currentRunLength += this.size;
        this.finderPenaltyAddHistory(currentRunLength, runHistory);
        return this.finderPenaltyCountPatterns(runHistory);
      }
    }, {
      key: "finderPenaltyAddHistory",
      value: function finderPenaltyAddHistory(oriCurrentRunLength, runHistory) {
        var currentRunLength = oriCurrentRunLength;
        if (runHistory[0] === 0) {
          currentRunLength += this.size;
        }
        runHistory.pop();
        runHistory.unshift(currentRunLength);
      }
    }], [{
      key: "encodeText",
      value: function encodeText(text, ecl) {
        var segs = QrSegment.makeSegments(text);
        return QrCode.encodeSegments(segs, ecl);
      }
    }, {
      key: "encodeBinary",
      value: function encodeBinary(data, ecl) {
        var seg = QrSegment.makeBytes(data);
        return QrCode.encodeSegments([seg], ecl);
      }
    }, {
      key: "encodeSegments",
      value: function encodeSegments(segs, oriEcl) {
        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;
        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
        if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) {
          throw new RangeError("Invalid value");
        }
        var version;
        var dataUsedBits;
        for (version = minVersion;; version++) {
          var dataCapacityBits2 = QrCode.getNumDataCodewords(version, oriEcl) * 8;
          var usedBits = QrSegment.getTotalBits(segs, version);
          if (usedBits <= dataCapacityBits2) {
            dataUsedBits = usedBits;
            break;
          }
          if (version >= maxVersion) {
            throw new RangeError("Data too long");
          }
        }
        var ecl = oriEcl;
        for (var _i0 = 0, _arr = [Ecc.MEDIUM, Ecc.QUARTILE, Ecc.HIGH]; _i0 < _arr.length; _i0++) {
          var newEcl = _arr[_i0];
          if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) {
            ecl = newEcl;
          }
        }
        var bb = [];
        var _iterator4 = _createForOfIteratorHelper(segs),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var seg = _step4.value;
            appendBits(seg.mode.modeBits, 4, bb);
            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);
            var _iterator5 = _createForOfIteratorHelper(seg.getData()),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var b = _step5.value;
                bb.push(b);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        assert(bb.length === dataUsedBits);
        var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;
        assert(bb.length <= dataCapacityBits);
        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);
        appendBits(0, (8 - bb.length % 8) % 8, bb);
        assert(bb.length % 8 === 0);
        for (var padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) {
          appendBits(padByte, 8, bb);
        }
        var dataCodewords = [];
        while (dataCodewords.length * 8 < bb.length) {
          dataCodewords.push(0);
        }
        bb.forEach(function (b, i) {
          dataCodewords[i >>> 3] |= b << 7 - (i & 7);
        });
        return new QrCode(version, ecl, dataCodewords, mask);
      }
    }, {
      key: "getNumRawDataModules",
      value: function getNumRawDataModules(ver) {
        if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) {
          throw new RangeError("Version number out of range");
        }
        var result = (16 * ver + 128) * ver + 64;
        if (ver >= 2) {
          var numAlign = Math.floor(ver / 7) + 2;
          result -= (25 * numAlign - 10) * numAlign - 55;
          if (ver >= 7) {
            result -= 36;
          }
        }
        assert(result >= 208 && result <= 29648);
        return result;
      }
    }, {
      key: "getNumDataCodewords",
      value: function getNumDataCodewords(ver, ecl) {
        return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
      }
    }, {
      key: "reedSolomonComputeDivisor",
      value: function reedSolomonComputeDivisor(degree) {
        if (degree < 1 || degree > 255) {
          throw new RangeError("Degree out of range");
        }
        var result = [];
        for (var i = 0; i < degree - 1; i++) {
          result.push(0);
        }
        result.push(1);
        var root = 1;
        for (var _i1 = 0; _i1 < degree; _i1++) {
          for (var j = 0; j < result.length; j++) {
            result[j] = QrCode.reedSolomonMultiply(result[j], root);
            if (j + 1 < result.length) {
              result[j] ^= result[j + 1];
            }
          }
          root = QrCode.reedSolomonMultiply(root, 2);
        }
        return result;
      }
    }, {
      key: "reedSolomonComputeRemainder",
      value: function reedSolomonComputeRemainder(data, divisor) {
        var result = divisor.map(function () {
          return 0;
        });
        var _iterator6 = _createForOfIteratorHelper(data),
          _step6;
        try {
          var _loop2 = function _loop2() {
            var b = _step6.value;
            var factor = b ^ result.shift();
            result.push(0);
            divisor.forEach(function (coef, i) {
              result[i] ^= QrCode.reedSolomonMultiply(coef, factor);
            });
          };
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            _loop2();
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        return result;
      }
    }, {
      key: "reedSolomonMultiply",
      value: function reedSolomonMultiply(x, y) {
        if (x >>> 8 !== 0 || y >>> 8 !== 0) {
          throw new RangeError("Byte out of range");
        }
        var z = 0;
        for (var i = 7; i >= 0; i--) {
          z = z << 1 ^ (z >>> 7) * 285;
          z ^= (y >>> i & 1) * x;
        }
        assert(z >>> 8 === 0);
        return z;
      }
    }]);
  }();
  _defineProperty$2(QrCode, "MIN_VERSION", 1);
  _defineProperty$2(QrCode, "MAX_VERSION", 40);
  _defineProperty$2(QrCode, "PENALTY_N1", 3);
  _defineProperty$2(QrCode, "PENALTY_N2", 3);
  _defineProperty$2(QrCode, "PENALTY_N3", 40);
  _defineProperty$2(QrCode, "PENALTY_N4", 10);
  _defineProperty$2(QrCode, "ECC_CODEWORDS_PER_BLOCK", [[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]]);
  _defineProperty$2(QrCode, "NUM_ERROR_CORRECTION_BLOCKS", [[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]]);

  var ERROR_LEVEL_MAP = {
    L: Ecc.LOW,
    M: Ecc.MEDIUM,
    Q: Ecc.QUARTILE,
    H: Ecc.HIGH
  };
  var DEFAULT_SIZE = 160;
  var DEFAULT_LEVEL = "M";
  var DEFAULT_BACKGROUND_COLOR = "#FFFFFF";
  var DEFAULT_FRONT_COLOR = "#000000";
  var DEFAULT_NEED_MARGIN = false;
  var DEFAULT_MINVERSION = 1;
  var SPEC_MARGIN_SIZE = 4;
  var DEFAULT_MARGIN_SIZE = 0;
  var DEFAULT_IMG_SCALE = 0.1;
  var generatePath = function generatePath(modules) {
    var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var ops = [];
    modules.forEach(function (row, y) {
      var start = null;
      row.forEach(function (cell, x) {
        if (!cell && start !== null) {
          ops.push("M".concat(start + margin, " ").concat(y + margin, "h").concat(x - start, "v1H").concat(start + margin, "z"));
          start = null;
          return;
        }
        if (x === row.length - 1) {
          if (!cell) {
            return;
          }
          if (start === null) {
            ops.push("M".concat(x + margin, ",").concat(y + margin, " h1v1H").concat(x + margin, "z"));
          } else {
            ops.push("M".concat(start + margin, ",").concat(y + margin, " h").concat(x + 1 - start, "v1H").concat(start + margin, "z"));
          }
          return;
        }
        if (cell && start === null) {
          start = x;
        }
      });
    });
    return ops.join("");
  };
  var excavateModules = function excavateModules(modules, excavation) {
    return modules.slice().map(function (row, y) {
      if (y < excavation.y || y >= excavation.y + excavation.h) {
        return row;
      }
      return row.map(function (cell, x) {
        if (x < excavation.x || x >= excavation.x + excavation.w) {
          return cell;
        }
        return false;
      });
    });
  };
  var getImageSettings = function getImageSettings(cells, size, margin, imageSettings) {
    if (imageSettings == null) {
      return null;
    }
    var numCells = cells.length + margin * 2;
    var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);
    var scale = numCells / size;
    var w = (imageSettings.width || defaultSize) * scale;
    var h = (imageSettings.height || defaultSize) * scale;
    var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;
    var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;
    var opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;
    var excavation = null;
    if (imageSettings.excavate) {
      var floorX = Math.floor(x);
      var floorY = Math.floor(y);
      var ceilW = Math.ceil(w + x - floorX);
      var ceilH = Math.ceil(h + y - floorY);
      excavation = {
        x: floorX,
        y: floorY,
        w: ceilW,
        h: ceilH
      };
    }
    var crossOrigin = imageSettings.crossOrigin;
    return {
      x: x,
      y: y,
      h: h,
      w: w,
      excavation: excavation,
      opacity: opacity,
      crossOrigin: crossOrigin
    };
  };
  var getMarginSize = function getMarginSize(needMargin, marginSize) {
    if (marginSize != null) {
      return Math.max(Math.floor(marginSize), 0);
    }
    return needMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;
  };
  var isSupportPath2d = function () {
    try {
      new Path2D().addPath(new Path2D());
    } catch (_unused) {
      return false;
    }
    return true;
  }();

  var useQRCode = function useQRCode(opt) {
    var value = opt.value,
      level = opt.level,
      minVersion = opt.minVersion,
      includeMargin = opt.includeMargin,
      marginSize = opt.marginSize,
      imageSettings = opt.imageSettings,
      size = opt.size;
    var memoizedQrcode = React__default["default"].useMemo(function () {
      var segments = QrSegment.makeSegments(value);
      return QrCode.encodeSegments(segments, ERROR_LEVEL_MAP[level], minVersion);
    }, [value, level, minVersion]);
    return React__default["default"].useMemo(function () {
      var cs = memoizedQrcode.getModules();
      var mg = getMarginSize(includeMargin, marginSize);
      var ncs = cs.length + mg * 2;
      var cis = getImageSettings(cs, size, mg, imageSettings);
      return {
        cells: cs,
        margin: mg,
        numCells: ncs,
        calculatedImageSettings: cis,
        qrcode: memoizedQrcode
      };
    }, [memoizedQrcode, size, imageSettings, includeMargin, marginSize]);
  };

  var _excluded$2 = ["value", "size", "level", "bgColor", "fgColor", "includeMargin", "minVersion", "marginSize", "style", "imageSettings"];
  function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var QRCodeCanvas = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var value = props.value,
      _props$size = props.size,
      size = _props$size === void 0 ? DEFAULT_SIZE : _props$size,
      _props$level = props.level,
      level = _props$level === void 0 ? DEFAULT_LEVEL : _props$level,
      _props$bgColor = props.bgColor,
      bgColor = _props$bgColor === void 0 ? DEFAULT_BACKGROUND_COLOR : _props$bgColor,
      _props$fgColor = props.fgColor,
      fgColor = _props$fgColor === void 0 ? DEFAULT_FRONT_COLOR : _props$fgColor,
      _props$includeMargin = props.includeMargin,
      includeMargin = _props$includeMargin === void 0 ? DEFAULT_NEED_MARGIN : _props$includeMargin,
      _props$minVersion = props.minVersion,
      minVersion = _props$minVersion === void 0 ? DEFAULT_MINVERSION : _props$minVersion,
      marginSize = props.marginSize,
      style = props.style,
      imageSettings = props.imageSettings,
      otherProps = _objectWithoutProperties$2(props, _excluded$2);
    var imgSrc = imageSettings === null || imageSettings === void 0 ? void 0 : imageSettings.src;
    var canvasRef = React__default["default"].useRef(null);
    var imageRef = React__default["default"].useRef(null);
    var setCanvasRef = React__default["default"].useCallback(function (node) {
      canvasRef.current = node;
      if (typeof ref === "function") {
        ref(node);
      } else if (ref) {
        ref.current = node;
      }
    }, [ref]);
    var _React$useState = React__default["default"].useState(false),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      setIsImageLoaded = _React$useState2[1];
    var _useQRCode = useQRCode({
        value: value,
        level: level,
        minVersion: minVersion,
        includeMargin: includeMargin,
        marginSize: marginSize,
        imageSettings: imageSettings,
        size: size
      }),
      margin = _useQRCode.margin,
      cells = _useQRCode.cells,
      numCells = _useQRCode.numCells,
      calculatedImageSettings = _useQRCode.calculatedImageSettings;
    React__default["default"].useEffect(function () {
      if (canvasRef.current) {
        var canvas = canvasRef.current;
        var ctx = canvas.getContext("2d");
        if (!ctx) {
          return;
        }
        var cellsToDraw = cells;
        var image = imageRef.current;
        var haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;
        if (haveImageToRender) {
          if (calculatedImageSettings.excavation != null) {
            cellsToDraw = excavateModules(cells, calculatedImageSettings.excavation);
          }
        }
        var pixelRatio = window.devicePixelRatio || 1;
        canvas.height = size * pixelRatio;
        canvas.width = size * pixelRatio;
        var scale = size / numCells * pixelRatio;
        ctx.scale(scale, scale);
        ctx.fillStyle = bgColor;
        ctx.fillRect(0, 0, numCells, numCells);
        ctx.fillStyle = fgColor;
        if (isSupportPath2d) {
          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));
        } else {
          cells.forEach(function (row, rdx) {
            row.forEach(function (cell, cdx) {
              if (cell) {
                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);
              }
            });
          });
        }
        if (calculatedImageSettings) {
          ctx.globalAlpha = calculatedImageSettings.opacity;
        }
        if (haveImageToRender) {
          ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);
        }
      }
    });
    React__default["default"].useEffect(function () {
      setIsImageLoaded(false);
    }, [imgSrc]);
    var img = null;
    if (imgSrc != null) {
      img = /* @__PURE__ */React__default["default"].createElement("img", {
        src: imgSrc,
        key: imgSrc,
        style: {
          display: "none"
        },
        onLoad: function onLoad() {
          setIsImageLoaded(true);
        },
        ref: imageRef,
        crossOrigin: calculatedImageSettings === null || calculatedImageSettings === void 0 ? void 0 : calculatedImageSettings.crossOrigin
      });
    }
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("canvas", _objectSpread$2({
      style: style,
      height: size,
      width: size,
      ref: setCanvasRef,
      role: "img"
    }, otherProps)), img);
  });
  QRCodeCanvas.displayName = "QRCodeCanvas";

  var _excluded$1 = ["value", "size", "level", "bgColor", "fgColor", "includeMargin", "minVersion", "title", "marginSize", "imageSettings"];
  function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var QRCodeSVG = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var value = props.value,
      _props$size = props.size,
      size = _props$size === void 0 ? DEFAULT_SIZE : _props$size,
      _props$level = props.level,
      level = _props$level === void 0 ? DEFAULT_LEVEL : _props$level,
      _props$bgColor = props.bgColor,
      bgColor = _props$bgColor === void 0 ? DEFAULT_BACKGROUND_COLOR : _props$bgColor,
      _props$fgColor = props.fgColor,
      fgColor = _props$fgColor === void 0 ? DEFAULT_FRONT_COLOR : _props$fgColor,
      _props$includeMargin = props.includeMargin,
      includeMargin = _props$includeMargin === void 0 ? DEFAULT_NEED_MARGIN : _props$includeMargin,
      _props$minVersion = props.minVersion,
      minVersion = _props$minVersion === void 0 ? DEFAULT_MINVERSION : _props$minVersion,
      title = props.title,
      marginSize = props.marginSize,
      imageSettings = props.imageSettings,
      otherProps = _objectWithoutProperties$2(props, _excluded$1);
    var _useQRCode = useQRCode({
        value: value,
        level: level,
        minVersion: minVersion,
        includeMargin: includeMargin,
        marginSize: marginSize,
        imageSettings: imageSettings,
        size: size
      }),
      margin = _useQRCode.margin,
      cells = _useQRCode.cells,
      numCells = _useQRCode.numCells,
      calculatedImageSettings = _useQRCode.calculatedImageSettings;
    var cellsToDraw = cells;
    var image = null;
    if (imageSettings != null && calculatedImageSettings != null) {
      if (calculatedImageSettings.excavation != null) {
        cellsToDraw = excavateModules(cells, calculatedImageSettings.excavation);
      }
      image = /* @__PURE__ */React__default["default"].createElement("image", {
        href: imageSettings.src,
        height: calculatedImageSettings.h,
        width: calculatedImageSettings.w,
        x: calculatedImageSettings.x + margin,
        y: calculatedImageSettings.y + margin,
        preserveAspectRatio: "none",
        opacity: calculatedImageSettings.opacity,
        crossOrigin: calculatedImageSettings.crossOrigin
      });
    }
    var fgPath = generatePath(cellsToDraw, margin);
    return /* @__PURE__ */React__default["default"].createElement("svg", _objectSpread$1({
      height: size,
      width: size,
      viewBox: "0 0 ".concat(numCells, " ").concat(numCells),
      ref: ref,
      role: "img"
    }, otherProps), !!title && /* @__PURE__ */React__default["default"].createElement("title", null, title), /* @__PURE__ */React__default["default"].createElement("path", {
      fill: bgColor,
      d: "M0,0 h".concat(numCells, "v").concat(numCells, "H0z"),
      shapeRendering: "crispEdges"
    }), /* @__PURE__ */React__default["default"].createElement("path", {
      fill: fgColor,
      d: fgPath,
      shapeRendering: "crispEdges"
    }), image);
  });
  QRCodeSVG.displayName = "QRCodeSVG";

  var qRCodeDefaultProps = {
    borderless: false,
    iconSize: 40,
    level: "M",
    size: 160,
    status: "active",
    type: "canvas"
  };

  var defaultSpin = /* @__PURE__ */React__default["default"].createElement(Loading, {
    size: "32px"
  });
  function QRcodeStatus(_ref) {
    var locale = _ref.locale,
      classPrefix = _ref.classPrefix,
      onRefresh = _ref.onRefresh,
      statusRender = _ref.statusRender,
      status = _ref.status;
    var defaultExpiredNode = React.useMemo(function () {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-expired__text")
      }, locale === null || locale === void 0 ? void 0 : locale.expiredText), onRefresh && /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-expired__button"),
        onClick: onRefresh
      }, /* @__PURE__ */React__default["default"].createElement(RefreshIcon$1, {
        size: 16
      }), locale === null || locale === void 0 ? void 0 : locale.refreshText));
    }, [classPrefix, locale === null || locale === void 0 ? void 0 : locale.expiredText, locale === null || locale === void 0 ? void 0 : locale.refreshText, onRefresh]);
    var defaultScannedNode = React.useMemo(function () {
      return /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-scanned")
      }, /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon$1, {
        size: 16,
        className: "".concat(classPrefix, "-scanned__icon")
      }), locale === null || locale === void 0 ? void 0 : locale.scannedText);
    }, [classPrefix, locale === null || locale === void 0 ? void 0 : locale.scannedText]);
    var defaultNodes = React.useMemo(function () {
      return {
        expired: defaultExpiredNode,
        loading: defaultSpin,
        scanned: defaultScannedNode
      };
    }, [defaultExpiredNode, defaultScannedNode]);
    var defaultStatusRender = React.useCallback(function (info) {
      return defaultNodes[info.status];
    }, [defaultNodes]);
    var mergedStatusRender = statusRender !== null && statusRender !== void 0 ? statusRender : defaultStatusRender;
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, mergedStatusRender({
      status: status,
      onRefresh: onRefresh
    }) || null);
  }

  var _excluded = ["className", "value", "borderless", "iconSize", "color", "bgColor", "style", "icon", "size", "type", "status", "onRefresh", "statusRender"];
  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var QRCode$1 = function QRCode(props) {
    var _iconSize$height, _iconSize$width, _style$width, _style$height;
    var _useDefaultProps = useDefaultProps(props, qRCodeDefaultProps),
      className = _useDefaultProps.className,
      value = _useDefaultProps.value,
      borderless = _useDefaultProps.borderless,
      iconSize = _useDefaultProps.iconSize,
      color = _useDefaultProps.color,
      bgColor = _useDefaultProps.bgColor,
      style = _useDefaultProps.style,
      icon = _useDefaultProps.icon,
      size = _useDefaultProps.size,
      type = _useDefaultProps.type,
      status = _useDefaultProps.status,
      onRefresh = _useDefaultProps.onRefresh,
      statusRender = _useDefaultProps.statusRender,
      rest = _objectWithoutProperties$2(_useDefaultProps, _excluded);
    var _useConfig = useConfig$2(),
      classPrefix = _useConfig.classPrefix;
    var _useLocaleReceiver = useLocaleReceiver("qrcode"),
      _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
      locale = _useLocaleReceiver2[0];
    var _useVariables = useVariables({
        themeFgColor: "--td-text-color-primary",
        themeBgColor: "--td-bg-color-specialcomponent"
      }),
      themeFgColor = _useVariables.themeFgColor,
      themeBgColor = _useVariables.themeBgColor;
    var finalBgColor = React.useMemo(function () {
      return bgColor || themeBgColor || "transparent";
    }, [bgColor, themeBgColor]);
    if (!value) {
      return null;
    }
    var imageSettings = {
      src: icon,
      x: void 0,
      y: void 0,
      height: typeof iconSize === "number" ? iconSize : (_iconSize$height = iconSize === null || iconSize === void 0 ? void 0 : iconSize.height) !== null && _iconSize$height !== void 0 ? _iconSize$height : 40,
      width: typeof iconSize === "number" ? iconSize : (_iconSize$width = iconSize === null || iconSize === void 0 ? void 0 : iconSize.width) !== null && _iconSize$width !== void 0 ? _iconSize$width : 40,
      excavate: true,
      crossOrigin: "anonymous"
    };
    var qrCodeProps = _objectSpread({
      value: value,
      size: size,
      bgColor: finalBgColor,
      fgColor: color || themeFgColor,
      imageSettings: icon ? imageSettings : void 0
    }, rest);
    var cls = classNames$1("".concat(classPrefix, "-qrcode"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix, "-borderless"), borderless), "".concat(classPrefix, "-qrcode-svg"), type === "svg"), className);
    var mergedStyle = _objectSpread(_objectSpread({
      backgroundColor: finalBgColor
    }, style), {}, {
      width: (_style$width = style === null || style === void 0 ? void 0 : style.width) !== null && _style$width !== void 0 ? _style$width : size,
      height: (_style$height = style === null || style === void 0 ? void 0 : style.height) !== null && _style$height !== void 0 ? _style$height : size
    });
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread(_objectSpread({}, rest), {}, {
      className: cls,
      style: mergedStyle
    }), status !== "active" && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-mask")
    }, /* @__PURE__ */React__default["default"].createElement(QRcodeStatus, {
      classPrefix: classPrefix,
      locale: locale,
      status: status,
      onRefresh: onRefresh,
      statusRender: statusRender
    })), type === "canvas" ? /* @__PURE__ */React__default["default"].createElement(QRCodeCanvas, _objectSpread(_objectSpread({}, qrCodeProps), {}, {
      size: size
    })) : /* @__PURE__ */React__default["default"].createElement(QRCodeSVG, _objectSpread(_objectSpread({}, qrCodeProps), {}, {
      size: size
    })));
  };
  QRCode$1.displayName = "QRCode";

  var QRCode = QRCode$1;

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.AutoComplete = AutoComplete;
  exports.Avatar = Avatar;
  exports.AvatarGroup = AvatarGroup;
  exports.BackTop = BackTop;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Card = Card;
  exports.Cascader = Cascader;
  exports.CascaderPanel = CascaderPanel;
  exports.CheckTag = CheckTag;
  exports.CheckTagGroup = CheckTagGroup;
  exports.Checkbox = Checkbox;
  exports.Col = Col;
  exports.Collapse = Collapse;
  exports.ColorPicker = ColorPicker;
  exports.ColorPickerPanel = ColorPickerPanel;
  exports.Comment = Comment;
  exports.ConfigContext = ConfigContext$2;
  exports.ConfigProvider = ConfigProvider;
  exports.DatePicker = DatePicker;
  exports.DatePickerPanel = DatePickerPanel;
  exports.DateRangePicker = DateRangePicker;
  exports.DateRangePickerPanel = DateRangePickerPanel;
  exports.Descriptions = Descriptions;
  exports.Dialog = Dialog;
  exports.DialogCard = DialogCard;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.DrawerPlugin = DrawerPlugin;
  exports.Dropdown = Dropdown;
  exports.Empty = Empty;
  exports.EnhancedTable = EnhancedTable;
  exports.Form = Form;
  exports.Guide = Guide;
  exports.HighlightOption = HighlightOption;
  exports.Image = Image$1;
  exports.ImageViewer = ImageViewer;
  exports.Input = Input;
  exports.InputAdornment = InputAdornment;
  exports.InputGroup = InputGroup;
  exports.InputNumber = InputNumber;
  exports.Layout = Layout;
  exports.Link = Link;
  exports.List = List;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotificationPlugin = NotificationPlugin;
  exports.Pagination = Pagination;
  exports.PaginationMini = PaginationMini;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PopupPlugin = PopupPlugin;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.QRCode = QRCode;
  exports.Radio = Radio;
  exports.RadioGroup = RadioGroup$1;
  exports.RangeInput = RangeInput;
  exports.RangeInputPopup = RangeInputPopup;
  exports.Rate = Rate;
  exports.Row = Row$1;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.SimpleTable = SimpleTable;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.Space = Space;
  exports.Statistic = Statistic;
  exports.Steps = Steps;
  exports.StickyTool = StickyTool;
  exports.Swiper = Swiper;
  exports.Switch = Switch;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimePickerPanel = TimePickerPanel;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Timeline = Timeline;
  exports.TimelineItem = TimelineItem;
  exports.Tooltip = Tooltip;
  exports.TooltipLite = TooltipLite;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Typography = Typography;
  exports.Upload = Upload;
  exports.Watermark = Watermark;
  exports.dialog = dialog;
  exports.drawer = drawer;
  exports.loading = loading;
  exports.merge = merge$1;
  exports.message = message;
  exports.notification = notification;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
