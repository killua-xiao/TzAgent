{"version":3,"file":"index.js","sources":["../../../../../components/color-picker/components/panel/index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport {\n  Color,\n  DEFAULT_COLOR,\n  DEFAULT_LINEAR_GRADIENT,\n  DEFAULT_SYSTEM_SWATCH_COLORS,\n  getColorObject,\n  GradientColorPoint,\n  initColorFormat,\n  TD_COLOR_USED_COLORS_MAX_SIZE,\n  type ColorFormat,\n} from '@tdesign/common-js/color-picker/index';\nimport useCommonClassName from '../../../hooks/useCommonClassName';\nimport useControlled from '../../../hooks/useControlled';\nimport useDefaultProps from '../../../hooks/useDefaultProps';\nimport { useLocaleReceiver } from '../../../locale/LocalReceiver';\nimport { colorPickerDefaultProps } from '../../defaultProps';\nimport useClassName from '../../hooks/useClassNames';\nimport type { ColorPickerProps, TdColorModes, TdColorSaturationData } from '../../interface';\nimport type { ColorPickerChangeTrigger } from '../../type';\nimport AlphaSlider from './alpha';\nimport FormatPanel from './format';\nimport PanelHeader from './header';\nimport HueSlider from './hue';\nimport LinearGradient from './linear-gradient';\nimport SaturationPanel from './saturation';\nimport SwatchesPanel from './swatches';\n\nconst Panel = forwardRef<HTMLDivElement, ColorPickerProps>((props, ref) => {\n  const baseClassName = useClassName();\n  const { STATUS } = useCommonClassName();\n  const [local, t] = useLocaleReceiver('colorPicker');\n  const {\n    className,\n    colorModes,\n    defaultRecentColors,\n    disabled,\n    enableAlpha,\n    enableMultipleGradient,\n    format,\n    style,\n    swatchColors,\n    showPrimaryColorPreview,\n    onChange,\n    onPaletteBarChange,\n    onRecentColorsChange,\n  } = useDefaultProps(props, colorPickerDefaultProps);\n  const [innerValue, setInnerValue] = useControlled(props, 'value', onChange);\n\n  const [, setUpdateId] = useState(0); // 确保 UI 同步更新\n\n  const getModeByColor = (input: string) => {\n    if (colorModes.length === 1) return colorModes[0];\n    return colorModes.includes('linear-gradient') && Color.isGradientColor(input) ? 'linear-gradient' : 'monochrome';\n  };\n  const [mode, setMode] = useState<TdColorModes>(() => getModeByColor(innerValue));\n\n  const isGradient = mode === 'linear-gradient';\n  const defaultEmptyColor = isGradient ? DEFAULT_LINEAR_GRADIENT : DEFAULT_COLOR;\n\n  const [recentlyUsedColors, setRecentlyUsedColors] = useControlled(props, 'recentColors', onRecentColorsChange, {\n    defaultRecentColors,\n  });\n  const colorInstanceRef = useRef<Color>(new Color(innerValue || defaultEmptyColor));\n  const formatRef = useRef<ColorFormat>(initColorFormat(format, enableAlpha));\n\n  const baseProps = {\n    color: colorInstanceRef.current,\n    disabled,\n    baseClassName,\n  };\n\n  const updateColor = (value: string) => {\n    colorInstanceRef.current.update(value);\n    setUpdateId(performance.now());\n  };\n\n  const emitColorChange = useCallback(\n    (trigger?: ColorPickerChangeTrigger) => {\n      const value = colorInstanceRef.current.getFormattedColor(formatRef.current, enableAlpha);\n      setInnerValue(value, {\n        color: getColorObject(colorInstanceRef.current),\n        trigger: trigger || 'palette-saturation-brightness',\n      });\n      setUpdateId(performance.now());\n    },\n    [enableAlpha, setInnerValue],\n  );\n\n  useEffect(() => {\n    const currentColor = colorInstanceRef.current.getFormattedColor(formatRef.current, enableAlpha);\n    if (innerValue === currentColor) return;\n    // 根据颜色自动切换模式\n    const newMode = getModeByColor(innerValue);\n    setMode(newMode);\n    colorInstanceRef.current.isGradient = newMode === 'linear-gradient';\n    updateColor(innerValue);\n  }, [innerValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleModeChange = (newMode: TdColorModes) => {\n    setMode(newMode);\n\n    const isGradientMode = newMode === 'linear-gradient';\n    colorInstanceRef.current.isGradient = isGradientMode;\n\n    const { rgba, gradientColors, linearGradient } = colorInstanceRef.current;\n    if (isGradientMode) {\n      updateColor(gradientColors.length > 0 ? linearGradient : DEFAULT_LINEAR_GRADIENT);\n    } else {\n      updateColor(rgba);\n    }\n    emitColorChange();\n  };\n\n  /**\n   * 最近使用颜色变化\n   */\n  const handleRecentlyUsedColorsChange = (colors: string[]) => {\n    setRecentlyUsedColors(colors);\n  };\n\n  const addRecentlyUsedColor = () => {\n    const colors = [...((recentlyUsedColors as string[]) || [])];\n    const { isGradient, linearGradient, rgba } = colorInstanceRef.current;\n    const currentColor = isGradient ? linearGradient : rgba;\n    const index = colors.indexOf(currentColor);\n    if (index > -1) {\n      colors.splice(index, 1);\n    }\n    colors.unshift(currentColor);\n    if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {\n      colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;\n    }\n    handleRecentlyUsedColorsChange(colors);\n  };\n\n  /**\n   * 饱和度亮度变化\n   */\n  const handleSatAndValueChange = ({ saturation, value }: TdColorSaturationData) => {\n    const { saturation: sat, value: val } = colorInstanceRef.current;\n    let changeTrigger: ColorPickerChangeTrigger = 'palette-saturation-brightness';\n    if (value !== val && saturation !== sat) {\n      changeTrigger = 'palette-saturation-brightness';\n      colorInstanceRef.current.saturation = saturation;\n      colorInstanceRef.current.value = value;\n    } else if (saturation !== sat) {\n      changeTrigger = 'palette-saturation';\n      colorInstanceRef.current.saturation = saturation;\n    } else if (value !== val) {\n      changeTrigger = 'palette-brightness';\n      colorInstanceRef.current.value = value;\n    } else {\n      return;\n    }\n\n    emitColorChange(changeTrigger);\n  };\n\n  /**\n   * 色相变化\n   */\n  const handleHueChange = (hue: number) => {\n    colorInstanceRef.current.hue = hue;\n    emitColorChange('palette-hue-bar');\n    onPaletteBarChange?.({\n      color: getColorObject(colorInstanceRef.current),\n    });\n  };\n\n  /**\n   * 透明度变化\n   */\n  const handleAlphaChange = (alpha: number) => {\n    colorInstanceRef.current.alpha = alpha;\n    emitColorChange('palette-alpha-bar');\n    onPaletteBarChange?.({\n      color: getColorObject(colorInstanceRef.current),\n    });\n  };\n\n  /**\n   * 渐变变化\n   */\n  const handleGradientChange = ({\n    key,\n    payload,\n  }: {\n    key: 'degree' | 'selectedId' | 'colors';\n    payload: number | string | GradientColorPoint[];\n  }) => {\n    let trigger: ColorPickerChangeTrigger = 'palette-saturation-brightness';\n    switch (key) {\n      case 'degree':\n        colorInstanceRef.current.gradientDegree = payload as number;\n        trigger = 'input';\n        break;\n      case 'selectedId':\n        colorInstanceRef.current.gradientSelectedId = payload as string;\n        break;\n      case 'colors':\n        colorInstanceRef.current.gradientColors = payload as GradientColorPoint[];\n        break;\n    }\n    emitColorChange(trigger);\n  };\n\n  /**\n   * 输入值变化\n   */\n  const handleInputChange = () => {\n    emitColorChange('input');\n  };\n\n  const SwatchesArea = React.memo(() => {\n    // 只支持渐变模式\n    const onlySupportGradient = colorModes.length === 1 && colorModes.includes('linear-gradient');\n\n    // 最近使用颜色\n    let recentColors = recentlyUsedColors;\n    if (onlySupportGradient && Array.isArray(recentColors)) {\n      recentColors = recentColors.filter((color) => Color.isGradientColor(color));\n    }\n    const showUsedColors = Array.isArray(recentColors) || recentColors === true;\n\n    // 系统预设颜色\n    let systemColors = swatchColors;\n    if (systemColors === undefined) {\n      systemColors = [...DEFAULT_SYSTEM_SWATCH_COLORS];\n    }\n    if (onlySupportGradient) {\n      systemColors = systemColors?.filter((color) => Color.isGradientColor(color));\n    }\n    const showSystemColors = Array.isArray(systemColors);\n\n    // 色块点击\n    const handleSetColor = (value: string, trigger: ColorPickerChangeTrigger) => {\n      const newMode = getModeByColor(value);\n      setMode(newMode);\n      // 确保在渐变模式下选择纯色块，能切换回单色模式\n      colorInstanceRef.current.isGradient = newMode === 'linear-gradient';\n      updateColor(value);\n      emitColorChange(trigger);\n    };\n\n    if (!showSystemColors && !showUsedColors) return null;\n\n    return (\n      <>\n        <div className={`${baseClassName}__swatches-wrap`}>\n          {showUsedColors && (\n            <SwatchesPanel\n              {...baseProps}\n              title={t(local.recentColorTitle)}\n              editable\n              handleAddColor={addRecentlyUsedColor}\n              colors={recentColors as string[]}\n              onSetColor={(color: string) => handleSetColor(color, 'recent')}\n              onChange={handleRecentlyUsedColorsChange}\n            />\n          )}\n          {showSystemColors && (\n            <SwatchesPanel\n              {...baseProps}\n              title={t(local.swatchColorTitle)}\n              colors={systemColors}\n              onSetColor={(color: string) => handleSetColor(color, 'preset')}\n            />\n          )}\n        </div>\n      </>\n    );\n  });\n\n  return (\n    <div\n      className={classNames(`${baseClassName}__panel`, disabled ? STATUS.disabled : false, className)}\n      onClick={(e) => e.stopPropagation()}\n      style={{ ...style }}\n      ref={ref}\n    >\n      <PanelHeader baseClassName={baseClassName} mode={mode} colorModes={colorModes} onModeChange={handleModeChange} />\n      <div className={`${baseClassName}__body`}>\n        {isGradient && (\n          <LinearGradient\n            {...baseProps}\n            enableMultipleGradient={enableMultipleGradient}\n            onChange={handleGradientChange}\n          />\n        )}\n        <SaturationPanel {...baseProps} onChange={handleSatAndValueChange} />\n        <div className={`${baseClassName}__sliders-wrapper`}>\n          <div className={`${baseClassName}__sliders`}>\n            <HueSlider {...baseProps} onChange={handleHueChange} />\n            {enableAlpha && <AlphaSlider {...baseProps} onChange={handleAlphaChange} />}\n          </div>\n          {showPrimaryColorPreview ? (\n            <div className={classNames([`${baseClassName}__sliders-preview`, `${baseClassName}--bg-alpha`])}>\n              <span\n                className={`${baseClassName}__sliders-preview-inner`}\n                style={{\n                  background: isGradient ? colorInstanceRef.current.linearGradient : colorInstanceRef.current.rgba,\n                }}\n              />\n            </div>\n          ) : null}\n        </div>\n\n        <FormatPanel {...props} {...baseProps} format={formatRef.current} onInputChange={handleInputChange} />\n        <SwatchesArea />\n      </div>\n    </div>\n  );\n});\n\nexport default React.memo(Panel);\n"],"names":["Panel","forwardRef","props","ref","baseClassName","useClassName","_useCommonClassName","useCommonClassName","STATUS","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","_slicedToArray","local","t","_useDefaultProps","useDefaultProps","colorPickerDefaultProps","className","colorModes","defaultRecentColors","disabled","enableAlpha","enableMultipleGradient","format","style","swatchColors","showPrimaryColorPreview","onChange","onPaletteBarChange","onRecentColorsChange","_useControlled","useControlled","_useControlled2","innerValue","setInnerValue","_useState","useState","_useState2","setUpdateId","getModeByColor","input","length","includes","Color","isGradientColor","_useState3","_useState4","mode","setMode","isGradient","defaultEmptyColor","DEFAULT_LINEAR_GRADIENT","DEFAULT_COLOR","_useControlled3","_useControlled4","recentlyUsedColors","setRecentlyUsedColors","colorInstanceRef","useRef","formatRef","initColorFormat","baseProps","color","current","updateColor","value","update","performance","now","emitColorChange","useCallback","trigger","getFormattedColor","getColorObject","useEffect","currentColor","newMode","handleModeChange","isGradientMode","_colorInstanceRef$cur","rgba","gradientColors","linearGradient","handleRecentlyUsedColorsChange","colors","addRecentlyUsedColor","_toConsumableArray","_colorInstanceRef$cur2","index","indexOf","splice","unshift","TD_COLOR_USED_COLORS_MAX_SIZE","handleSatAndValueChange","_ref","saturation","_colorInstanceRef$cur3","sat","val","changeTrigger","handleHueChange","hue","handleAlphaChange","alpha","handleGradientChange","key","_ref2","payload","gradientDegree","gradientSelectedId","handleInputChange","SwatchesArea","React","memo","onlySupportGradient","recentColors","Array","isArray","filter","showUsedColors","systemColors","DEFAULT_SYSTEM_SWATCH_COLORS","_systemColors","showSystemColors","handleSetColor","createElement","SwatchesPanel","_objectSpread","title","recentColorTitle","editable","handleAddColor","onSetColor","swatchColorTitle","classNames","onClick","e","stopPropagation","PanelHeader","onModeChange","LinearGradient","SaturationPanel","HueSlider","AlphaSlider","concat","background","FormatPanel","onInputChange"],"mappings":"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"}