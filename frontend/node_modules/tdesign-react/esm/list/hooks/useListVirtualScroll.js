/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { useMemo } from 'react';
import '../../_chunks/dep-f53c91cd.js';
import useVirtualScroll from '../../hooks/useVirtualScroll.js';
import { l as log } from '../../_chunks/dep-b908e1fe.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-48805ab8.js';
import '../../_chunks/dep-026a4c6b.js';
import 'lodash-es';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useListVirtualScroll = function useListVirtualScroll(scroll, listRef, listItems) {
  var virtualScrollParams = useMemo(function () {
    return {
      data: listItems,
      scroll: scroll
    };
  }, [listItems, scroll]);
  var virtualConfig = useVirtualScroll(listRef, virtualScrollParams);
  var isVirtualScroll = virtualConfig.isVirtualScroll;
  var lastScrollY = -1;
  var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
    var target = e.target || e.srcElement;
    var top = target.scrollTop;
    if (lastScrollY !== top) {
      virtualConfig.isVirtualScroll && virtualConfig.handleScroll();
    } else {
      lastScrollY = -1;
    }
    lastScrollY = top;
  };
  var cursorStyle = useMemo(function () {
    return {
      position: "absolute",
      width: "1px",
      height: "1px",
      transition: "transform 0.2s",
      transform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)"),
      msTransform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)"),
      MozTransform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)"),
      WebkitTransform: "translate(0, ".concat(virtualConfig.scrollHeight, "px)")
    };
  }, [virtualConfig.scrollHeight]);
  var listStyle = useMemo(function () {
    return {
      transform: "translate(0, ".concat(virtualConfig.translateY, "px)"),
      msTransform: "translate(0, ".concat(virtualConfig.translateY, "px)"),
      MozTransform: "translate(0, ".concat(virtualConfig.translateY, "px)"),
      WebkitTransform: "translate(0, ".concat(virtualConfig.translateY, "px)")
    };
  }, [virtualConfig.translateY]);
  var handleScrollTo = function handleScrollTo(params) {
    var index = params.index,
      key = params.key;
    var targetIndex = index === 0 ? index : index !== null && index !== void 0 ? index : Number(key);
    if (!targetIndex && targetIndex !== 0) {
      log.error("List", "scrollTo: `index` or `key` must exist.");
      return;
    }
    if (targetIndex < 0 || targetIndex >= listItems.length) {
      log.error("List", "".concat(targetIndex, " does not exist in data, check `index` or `key` please."));
      return;
    }
    virtualConfig.scrollToElement(_objectSpread(_objectSpread({}, params), {}, {
      index: targetIndex - 1
    }));
  };
  return {
    virtualConfig: virtualConfig,
    cursorStyle: cursorStyle,
    listStyle: listStyle,
    isVirtualScroll: isVirtualScroll,
    onInnerVirtualScroll: onInnerVirtualScroll,
    scrollToElement: handleScrollTo
  };
};

export { useListVirtualScroll };
//# sourceMappingURL=useListVirtualScroll.js.map
