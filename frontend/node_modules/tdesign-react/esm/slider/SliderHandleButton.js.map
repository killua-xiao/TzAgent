{"version":3,"file":"SliderHandleButton.js","sources":["../../../components/slider/SliderHandleButton.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport useMouseEvent, { type MouseCallback } from '../hooks/useMouseEvent';\nimport Tooltip from '../tooltip/Tooltip';\nimport type { TdTooltipProps } from '../tooltip/type';\n\ninterface SliderHandleButtonProps {\n  onChange: (event: MouseCallback) => void;\n  classPrefix: string;\n  style: React.CSSProperties;\n  toolTipProps: TdTooltipProps;\n  hideTips: boolean;\n}\n\nconst SliderHandleButton: React.FC<SliderHandleButtonProps> = ({\n  onChange,\n  style,\n  classPrefix,\n  toolTipProps,\n  hideTips,\n}) => {\n  const sliderNodeRef = useRef<HTMLDivElement>(null);\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  const { isMoving } = useMouseEvent(sliderNodeRef, {\n    onEnter() {\n      setPopupVisible(true);\n    },\n    onDown: () => {\n      setPopupVisible(true);\n    },\n    onMove: (e) => {\n      setPopupVisible(true);\n      onChange(e);\n    },\n    onLeave: () => {\n      setPopupVisible(false);\n    },\n    onUp: (e) => {\n      setPopupVisible(false);\n      onChange(e);\n    },\n  });\n\n  const handleNode = (\n    <div ref={sliderNodeRef} style={style} className={`${classPrefix}-slider__button-wrapper`}>\n      <div\n        className={classNames(`${classPrefix}-slider__button`, {\n          [`${classPrefix}-slider__button--dragging`]: isMoving,\n        })}\n      ></div>\n    </div>\n  );\n\n  return hideTips ? (\n    handleNode\n  ) : (\n    <Tooltip visible={popupVisible} placement=\"top\" {...toolTipProps}>\n      {handleNode}\n    </Tooltip>\n  );\n};\n\nexport default SliderHandleButton;\n"],"names":["SliderHandleButton","onChange","_ref","style","classPrefix","toolTipProps","hideTips","sliderNodeRef","useRef","_useState","useState","_useState2","_slicedToArray","popupVisible","setPopupVisible","_useMouseEvent","useMouseEvent","onEnter","onDown","onMove","e","onLeave","onUp","isMoving","handleNode","React","createElement","ref","className","classNames","concat","_defineProperty","Tooltip","_objectSpread","visible","placement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,qBAAwD,SAAxDA,yBAMA;AAAA,EAAA,IALJC,QAAA,GAAAC,IAAA,CAAAD,QAAA;IACAE,KAAA,GAAAD,IAAA,CAAAC,KAAA;IACAC,WAAA,GAAAF,IAAA,CAAAE,WAAA;IACAC,YAAA,GAAAH,IAAA,CAAAG,YAAA;IACAC,QAAA,GAAAJ,IAAA,CAAAI,QAAA,CAAA;AAEM,EAAA,IAAAC,aAAA,GAAgBC,OAAuB,IAAI,CAAA,CAAA;AACjD,EAAA,IAAAC,SAAA,GAAwCC,SAAS,KAAK,CAAA;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA,EAAA,CAAA,CAAA;AAA/CI,IAAAA,YAAA,GAAAF,UAAA,CAAA,CAAA,CAAA;AAAcG,IAAAA,eAAe,GAAAH,UAAA,CAAA,CAAA,CAAA,CAAA;AAEpC,EAAA,IAAAI,cAAA,GAAqBC,aAAA,CAAcT,aAAe,EAAA;MAChDU,OAAU,EAAA,SAAVA,OAAUA,GAAA;QACRH,eAAA,CAAgB,IAAI,CAAA,CAAA;OACtB;AACAI,MAAAA,QAAQ,SAARA,SAAc;QACZJ,eAAA,CAAgB,IAAI,CAAA,CAAA;OACtB;AACAK,MAAAA,MAAA,EAAQ,SAARA,MAAAA,CAASC,CAAM,EAAA;QACbN,eAAA,CAAgB,IAAI,CAAA,CAAA;QACpBb,QAAA,CAASmB,CAAC,CAAA,CAAA;OACZ;AACAC,MAAAA,SAAS,SAATA,UAAe;QACbP,eAAA,CAAgB,KAAK,CAAA,CAAA;OACvB;AACAQ,MAAAA,IAAA,EAAM,SAANA,IAAAA,CAAOF,CAAM,EAAA;QACXN,eAAA,CAAgB,KAAK,CAAA,CAAA;QACrBb,QAAA,CAASmB,CAAC,CAAA,CAAA;AACZ,OAAA;AACF,KAAC,CAAA;IAlBOG,QAAA,GAAAR,cAAA,CAAAQ,QAAA,CAAA;EAoBR,IAAMC,4BACHC,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AAAIC,IAAAA,GAAK,EAAApB,aAAA;AAAeJ,IAAAA,KAAA,EAAAA,KAAA;IAAcyB,qBAAcxB,WAAA,EAAA,yBAAA,CAAA;AAAA,GAAA,iBAClDqB,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AACCE,IAAAA,SAAA,EAAWC,UAAW,CAAAC,EAAAA,CAAAA,MAAA,CAAG1B,WAA8B,EAAA,iBAAA,CAAA,EAAA2B,eAAA,CAAA,EAAA,EAAA,EAAA,CAAAD,MAAA,CACjD1B,WAAyC,EAAA,2BAAA,CAAA,EAAAmB,QAAA,CAC9C,CAAA;AAAA,GACF,CACH,CAAA,CAAA;EAGK,OAAAjB,QAAA,GACLkB,4BAECC,KAAA,CAAAC,aAAA,CAAAM,OAAA,EAAAC,aAAA,CAAA;AAAQC,IAAAA,OAAS,EAAArB,YAAA;AAAcsB,IAAAA,SAAU,EAAA,KAAA;GAAU9B,EAAAA,YAAA,CACjDmB,EAAAA,UACH,CAAA,CAAA;AAEJ;;;;"}