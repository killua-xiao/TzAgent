/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React, { useMemo, useCallback } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import StickyItem from './StickyItem.js';
import { stickyToolDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-eca3a3de.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import 'hoist-non-react-statics';
import '../popup/index.js';
import '../popup/Popup.js';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-026a4c6b.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/index.js';
import '../popup/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StickyTool = forwardRefWithStatics(function (props, ref) {
  var _useDefaultProps = useDefaultProps(props, stickyToolDefaultProps),
    style = _useDefaultProps.style,
    className = _useDefaultProps.className,
    children = _useDefaultProps.children,
    width = _useDefaultProps.width,
    type = _useDefaultProps.type,
    shape = _useDefaultProps.shape,
    placement = _useDefaultProps.placement,
    offset = _useDefaultProps.offset,
    popupProps = _useDefaultProps.popupProps,
    list = _useDefaultProps.list,
    onClick = _useDefaultProps.onClick,
    onHover = _useDefaultProps.onHover;
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var styles = useMemo(function () {
    var position = offset ? [80, 24] : ["80px", "24px"];
    offset === null || offset === void 0 || offset.forEach(function (item, index) {
      position[index] = isNaN(Number(item)) ? "calc( ".concat(position[index], "px + ").concat(item, ")") : "".concat(position[index] + item, "px");
    });
    var styles2 = _objectSpread({}, style);
    placement.split("-").forEach(function (item, index) {
      if (item !== "center") {
        styles2[item] = position[index];
      } else {
        styles2.top = "50%";
        styles2.transform = "translate(0, -50%)";
      }
    });
    if (width) {
      styles2.width = typeof width === "number" ? "".concat(width, "px") : width;
    }
    return styles2;
  }, [offset, placement, width, style]);
  var handleClick = useCallback(function (context) {
    onClick === null || onClick === void 0 || onClick(context);
  }, [onClick]);
  var handleHover = useCallback(function (context) {
    onHover === null || onHover === void 0 || onHover(context);
  }, [onHover]);
  var stickyItemList = useMemo(function () {
    if (list !== null && list !== void 0 && list.length) {
      return list.map(function (item, index) {
        var itemProps = _objectSpread(_objectSpread({}, item), {}, {
          type: type,
          shape: shape,
          placement: placement,
          basePopupProps: popupProps,
          baseWidth: styles.width,
          onClick: handleClick,
          onHover: handleHover
        });
        return /* @__PURE__ */React.createElement(StickyItem, _objectSpread({
          key: index
        }, itemProps));
      });
    }
    var childrenList = React.Children.toArray(children);
    return childrenList.map(function (child) {
      var itemProps = _objectSpread(_objectSpread({}, child.props), {}, {
        type: type,
        shape: shape,
        placement: placement,
        basePopupProps: popupProps,
        baseWidth: styles.width,
        onClick: handleClick,
        onHover: handleHover
      });
      return /*#__PURE__*/React.cloneElement(child, _objectSpread({}, itemProps));
    });
  }, [list, children, type, shape, placement, popupProps, styles, handleClick, handleHover]);
  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    style: styles,
    className: classNames("".concat(classPrefix, "-sticky-tool"), "".concat(classPrefix, "-sticky-tool--").concat(shape), className)
  }, stickyItemList);
}, {
  StickyItem: StickyItem
});
StickyTool.displayName = "StickyTool";

export { StickyTool as default };
//# sourceMappingURL=StickyTool.js.map
