{"version":3,"file":"useVirtualScroll.js","sources":["../../../components/hooks/useVirtualScroll.ts"],"sourcesContent":["/**\n * 通用虚拟滚动，可支持 Select/List/Table/TreeSelect/Cascader 等组件\n */\nimport { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react';\nimport { isEqual } from 'lodash-es';\nimport type { ScrollToElementParams, TScroll } from '../common';\n\nexport type UseVirtualScrollParams = {\n  /** 列数据 */\n  data: { [key: string]: any }[];\n  scroll: TScroll & {\n    fixedRows?: Array<number>;\n  };\n};\n\nconst requestAnimationFrame =\n  (typeof window === 'undefined' ? false : window.requestAnimationFrame) || ((cb) => setTimeout(cb, 16.6));\n\nconst useVirtualScroll = (container: MutableRefObject<HTMLElement>, params: UseVirtualScrollParams) => {\n  const { data, scroll } = params;\n  const dataRef = useRef(data);\n\n  /** 注意测试：数据长度为空；数据长度小于表格高度等情况。即期望只有数据量达到一定程度才允许开启虚拟滚动 */\n  const [visibleData, setVisibleData] = useState<any[]>([]);\n  // 滚动过程中表格顶部占位距离\n  const [translateY, setTranslateY] = useState(() => (data?.length || 0) * (scroll?.rowHeight || 50));\n  // 滚动高度，用于显示滚动条\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const trScrollTopHeightList = useRef<number[]>([]);\n  // 已经通过节点渲染计算出来的各自行高\n  const [trHeightList, setTrHeightList] = useState<number[]>([]);\n  const containerHeight = useRef(0);\n  const [startAndEndIndex, setStartAndEndIndex] = useState<[number, number]>(() => [0, (scroll?.bufferSize || 10) * 3]);\n\n  // 设置初始值\n  const tScroll = useMemo(() => {\n    if (!scroll) return {};\n    return {\n      bufferSize: scroll.bufferSize || 10,\n      isFixedRowHeight: scroll.isFixedRowHeight ?? false,\n      rowHeight: scroll.rowHeight || 47,\n      threshold: scroll.threshold || 100,\n      type: scroll.type,\n      fixedRows: scroll.fixedRows ?? [0, 0],\n    };\n  }, [scroll]);\n\n  // 当前场景是否满足开启虚拟滚动的条件\n  const isVirtualScroll = useMemo(() => tScroll.type === 'virtual' && tScroll.threshold < data.length, [tScroll, data]);\n  const getTrScrollTopHeightList = (trHeightList: number[]) => {\n    const list: number[] = [];\n    // 大数据场景不建议使用 forEach 一类函数迭代\n    // 当前行滚动高度 = 上一行滚动高度 + 当前行高度\n    for (let i = 0, len = data.length; i < len; i++) {\n      list[i] = (list[i - 1] || 0) + (trHeightList[i] || tScroll.rowHeight);\n    }\n    return list;\n  };\n\n  const updateVisibleData = (trScrollTopHeightList: number[], scrollTop: number) => {\n    let currentIndex = -1;\n    // 获取当前滚动到哪一个元素（大数据场景不建议使用 forEach 一类函数迭代）\n    for (let i = 0, len = trScrollTopHeightList.length; i < len; i++) {\n      if (trScrollTopHeightList[i] >= scrollTop) {\n        currentIndex = i;\n        break;\n      }\n    }\n    let lastIndex = trScrollTopHeightList.length;\n    const containerCurrentHeight = containerHeight.current || container.current.getBoundingClientRect().height;\n    const scrollBottom = scrollTop + containerCurrentHeight;\n    // 获取当前视窗的最后一个元素（大数据场景不建议使用 forEach 一类函数迭代）\n    for (let i = currentIndex, len = trScrollTopHeightList.length; i < len; i++) {\n      if (trScrollTopHeightList[i] >= scrollBottom) {\n        lastIndex = i;\n        break;\n      }\n    }\n    if (currentIndex < 0) return;\n    const startIndex = Math.max(currentIndex - tScroll.bufferSize, 0);\n    const endIndex = Math.min(lastIndex + tScroll.bufferSize, trScrollTopHeightList.length);\n\n    // 计算固定行情况\n    const { fixedRows } = tScroll;\n    const [fixedStart, fixedEnd] = fixedRows;\n    let fixedStartData = fixedStart ? data.slice(0, fixedStart) : [];\n    if (fixedStart && startIndex < fixedStart) {\n      fixedStartData = fixedStartData.slice(0, startIndex);\n    }\n    let fixedEndData = fixedEnd ? data.slice(data.length - fixedEnd) : [];\n    const bottomStartIndex = endIndex - data.length + 1 + (fixedEnd ?? 0);\n    if (fixedEnd && bottomStartIndex > 0) {\n      fixedEndData = fixedEndData.slice(bottomStartIndex);\n    }\n\n    if (startAndEndIndex.join() !== [startIndex, endIndex].join() && startIndex >= 0) {\n      const tmpVisibleData = fixedStartData.concat(data.slice(startIndex, endIndex)).concat(fixedEndData);\n      setVisibleData(tmpVisibleData);\n      const lastScrollTop = trScrollTopHeightList[startIndex - 1];\n      const top = lastScrollTop > 0 ? lastScrollTop : 0;\n      const stickyHeight = trScrollTopHeightList[Math.min(startIndex, fixedStart) - 1] || 0;\n      setTranslateY(top - stickyHeight);\n      setStartAndEndIndex([startIndex, endIndex]);\n    }\n  };\n\n  // 仅非固定高度场景需要\n  const handleRowMounted = (rowData: any) => {\n    if (!isVirtualScroll || !rowData || tScroll.isFixedRowHeight || !container?.current) return;\n    const trHeight = rowData.ref.offsetHeight;\n    // eslint-disable-next-line\n    const rowIndex = rowData.data.__VIRTUAL_SCROLL_INDEX;\n    const newTrHeightList = trHeightList;\n    if (newTrHeightList[rowIndex] !== trHeight) {\n      newTrHeightList[rowIndex] = trHeight;\n      setTrHeightList(newTrHeightList);\n\n      const scrollTopHeightList = getTrScrollTopHeightList(newTrHeightList);\n      trScrollTopHeightList.current = scrollTopHeightList;\n\n      const lastIndex = scrollTopHeightList.length - 1;\n      setScrollHeight(scrollTopHeightList[lastIndex] - containerHeight.current);\n      updateVisibleData(scrollTopHeightList, container.current.scrollTop);\n    }\n  };\n\n  const handleScroll = () => {\n    if (!isVirtualScroll) return;\n    updateVisibleData(trScrollTopHeightList.current, container.current.scrollTop);\n  };\n\n  const addIndexToData = (data: any[]) => {\n    data.forEach((item, index) => {\n      Reflect.set(item, '__VIRTUAL_SCROLL_INDEX', index);\n    });\n  };\n\n  const updateScrollTop = ({ index, top = 0, behavior }: ScrollToElementParams) => {\n    const scrollTop = trScrollTopHeightList.current[index] - top;\n    container.current?.scrollTo({\n      top: scrollTop,\n      behavior: behavior || 'auto',\n    });\n  };\n\n  /**\n   * 滚动到指定元素（对外暴露的方法，谨慎修改）\n   */\n  const scrollToElement = (p: ScrollToElementParams) => {\n    updateScrollTop(p);\n    if (!tScroll.isFixedRowHeight) {\n      requestAnimationFrame(() => {\n        const duration = p.time ?? 60;\n        const timer = setTimeout(() => {\n          updateScrollTop(p);\n          clearTimeout(timer);\n        }, duration);\n      });\n    }\n  };\n\n  // 固定高度场景，可直接通过数据长度计算出最大滚动高度\n  useEffect(\n    () => {\n      if (!isVirtualScroll) {\n        trScrollTopHeightList.current = getTrScrollTopHeightList(trHeightList);\n        return;\n      }\n\n      // 给数据添加下标\n      addIndexToData(data);\n\n      const scrollTopHeightList = trScrollTopHeightList.current;\n      const dataChanged = !isEqual(dataRef.current, data);\n\n      if (scrollTopHeightList?.length === data?.length && !dataChanged) {\n        // 正常滚动时更新可见数据\n        const lastIndex = scrollTopHeightList.length - 1;\n        setScrollHeight(scrollTopHeightList[lastIndex]);\n\n        updateVisibleData(scrollTopHeightList, container.current.scrollTop);\n      } else {\n        /**\n        /* 进入这个分支的场景可能有：\n         * - 初始化\n         * - 从非虚拟滚动切换到虚拟滚动\n         * - 外部数据动态更新（长度变化、内容结构变化等）\n         */\n        dataRef.current = data;\n        setScrollHeight(data.length * tScroll.rowHeight);\n\n        // 如果之前存在滚动，基于原先数据计算位置\n        const currentScrollTop = container.current?.scrollTop || 0;\n        let currentIndex = Math.floor(currentScrollTop / tScroll.rowHeight);\n        const prevScrollTopHeightList = trScrollTopHeightList.current;\n        for (let i = 0; i < prevScrollTopHeightList?.length; i++) {\n          if (prevScrollTopHeightList[i] >= currentScrollTop) {\n            currentIndex = i;\n            break;\n          }\n        }\n\n        const startIndex = Math.max(currentIndex - tScroll.bufferSize, 0);\n        const visibleCount = Math.min(tScroll.bufferSize * 3, data.length);\n        const endIndex = Math.min(startIndex + visibleCount, data.length);\n        const tmpData = data.slice(startIndex, endIndex);\n\n        let translateY = startIndex * tScroll.rowHeight;\n\n        if (prevScrollTopHeightList?.length > 0 && startIndex > 0) {\n          const prevHeight = prevScrollTopHeightList[Math.min(startIndex - 1, prevScrollTopHeightList.length - 1)] || 0;\n          translateY = Math.max(0, prevHeight);\n        }\n\n        setVisibleData(tmpData);\n        setTranslateY(translateY);\n      }\n\n      const timer = setTimeout(() => {\n        if (container.current) {\n          const tmpContainerHeight = container.current.getBoundingClientRect().height;\n          containerHeight.current = tmpContainerHeight;\n          const scrollTopHeightList = getTrScrollTopHeightList(trHeightList);\n          trScrollTopHeightList.current = scrollTopHeightList;\n          clearTimeout(timer);\n        }\n      }, 1);\n    },\n    // eslint-disable-next-line\n    [container, data, tScroll, isVirtualScroll, startAndEndIndex, trHeightList],\n  );\n\n  return {\n    visibleData,\n    translateY,\n    scrollHeight,\n    isVirtualScroll,\n    handleScroll,\n    handleRowMounted,\n    scrollToElement,\n  };\n};\n\nexport type VirtualScrollConfig = ReturnType<typeof useVirtualScroll>;\n\nexport default useVirtualScroll;\n"],"names":["requestAnimationFrame","window","cb","setTimeout","useVirtualScroll","container","params","data","scroll","dataRef","useRef","_useState","useState","_useState2","_slicedToArray","visibleData","setVisibleData","_useState3","length","rowHeight","_useState4","translateY","setTranslateY","_useState5","_useState6","scrollHeight","setScrollHeight","trScrollTopHeightList","_useState7","_useState8","trHeightList","setTrHeightList","containerHeight","_useState9","bufferSize","_useState0","startAndEndIndex","setStartAndEndIndex","tScroll","useMemo","_scroll$isFixedRowHei","_scroll$fixedRows","isFixedRowHeight","threshold","type","fixedRows","isVirtualScroll","getTrScrollTopHeightList","list","i","len","updateVisibleData","scrollTop","currentIndex","lastIndex","containerCurrentHeight","current","getBoundingClientRect","height","scrollBottom","startIndex","Math","max","endIndex","min","_fixedRows","fixedStart","fixedEnd","fixedStartData","slice","fixedEndData","bottomStartIndex","join","tmpVisibleData","concat","lastScrollTop","top","stickyHeight","handleRowMounted","rowData","trHeight","ref","offsetHeight","rowIndex","__VIRTUAL_SCROLL_INDEX","newTrHeightList","scrollTopHeightList","handleScroll","addIndexToData","forEach","item","index","Reflect","set","updateScrollTop","_container$current","_ref$top","behavior","scrollTo","scrollToElement","p","_p$time","duration","time","timer","clearTimeout","useEffect","dataChanged","isEqual","_container$current2","currentScrollTop","floor","prevScrollTopHeightList","visibleCount","tmpData","prevHeight","tmpContainerHeight"],"mappings":"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"}