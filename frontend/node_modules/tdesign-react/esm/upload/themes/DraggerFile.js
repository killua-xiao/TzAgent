/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-87d110df.js';
import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import React, { useRef, useMemo } from 'react';
import classNames from 'classnames';
import { CheckCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-react';
import { a as abridgeName, g as getFileSizeText } from '../../_chunks/dep-8918af14.js';
import { Link } from '../../link/index.js';
import useCommonClassName from '../../hooks/useCommonClassName.js';
import { Loading } from '../../loading/index.js';
import useDrag from '../hooks/useDrag.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import { ImageViewer } from '../../image-viewer/index.js';
import { parseContentTNode } from '../../_util/parseTNode.js';
import { Image } from '../../image/index.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-b908e1fe.js';
import '../../link/Link.js';
import '../../_chunks/dep-6b660ef0.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import 'lodash-es';
import '../../locale/zh_CN.js';
import '../../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../../_chunks/dep-3c9ab31a.js';
import '../../hooks/useDefaultProps.js';
import '../../link/defaultProps.js';
import '../../_chunks/dep-f53c91cd.js';
import '../../link/style/index.js';
import '../../loading/Loading.js';
import '../../_chunks/dep-48805ab8.js';
import '../../_chunks/dep-3a09424a.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../hooks/useLayoutEffect.js';
import '../../loading/gradient.js';
import '../../_chunks/dep-c48e2ca1.js';
import '../../_chunks/dep-1630b9b4.js';
import '../../hooks/useDomRefCallback.js';
import '../../loading/defaultProps.js';
import '../../loading/plugin.js';
import '../../_util/react-render.js';
import '../../_chunks/dep-a74cc5e4.js';
import '../../common/PluginContainer.js';
import '../../config-provider/index.js';
import '../../config-provider/ConfigProvider.js';
import '../../config-provider/type.js';
import '../../loading/style/index.js';
import '../../loading/type.js';
import '../../image-viewer/ImageViewer.js';
import '../../_chunks/dep-90b6cb7a.js';
import '../../_chunks/dep-46c9e4f5.js';
import '../../hooks/useImagePreviewUrl.js';
import '../../locale/LocalReceiver.js';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import '../../_util/ref.js';
import 'react-is';
import '../../_util/isFragment.js';
import '../../hooks/useAnimation.js';
import '../../hooks/useAttach.js';
import '../../hooks/useControlled.js';
import '../../_util/noop.js';
import '../../hooks/useMutationObserver.js';
import '../../hooks/useLatest.js';
import '../../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../../hooks/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../popup/hooks/useTrigger.js';
import '../../_util/composeRefs.js';
import '../../_util/listener.js';
import '../../popup/utils/transition.js';
import '../../popup/PopupPlugin.js';
import '../../popup/style/index.js';
import '../../popup/type.js';
import '../../tooltip/defaultProps.js';
import '../../tooltip/TooltipLite.js';
import '../../hooks/useSwitch.js';
import '../../hooks/usePersistFn.js';
import '../../tooltip/style/index.js';
import '../../tooltip/type.js';
import '../../dialog/index.js';
import '../../dialog/Dialog.js';
import '../../hooks/useDeepEffect.js';
import '../../hooks/useSetState.js';
import '../../dialog/defaultProps.js';
import '../../dialog/DialogCard.js';
import '../../button/index.js';
import '../../button/Button.js';
import '../../hooks/useRipple.js';
import '../../button/defaultProps.js';
import '../../button/style/index.js';
import '../../button/type.js';
import '../../dialog/hooks/useDialogDrag.js';
import '../../hooks/useMouseEvent.js';
import '../../dialog/hooks/useDialogEsc.js';
import '../../dialog/hooks/useDialogPosition.js';
import '../../dialog/hooks/useLockStyle.js';
import '../../_chunks/dep-a3bde62f.js';
import '../../dialog/utils.js';
import '../../dialog/plugin.js';
import '../../dialog/style/index.js';
import '../../dialog/type.js';
import '../../image-viewer/hooks/useIconMap.js';
import '../../image-viewer/hooks/useIndex.js';
import '../../image-viewer/hooks/useMirror.js';
import '../../image-viewer/hooks/usePosition.js';
import '../../image-viewer/hooks/useRotate.js';
import '../../image-viewer/hooks/useScale.js';
import '../../image-viewer/utils.js';
import '../../image-viewer/defaultProps.js';
import '../../image-viewer/hooks/useImageScale.js';
import '../../image-viewer/hooks/useList.js';
import '../../image-viewer/hooks/useViewerScale.js';
import '../../image/Image.js';
import '../../_chunks/dep-4450afc0.js';
import '../../image/defaultProps.js';
import '../../space/index.js';
import '../../space/Space.js';
import '../../space/defaultProps.js';
import '../../space/style/index.js';
import '../../space/type.js';
import '../../image/style/index.js';
import '../../image-viewer/style/index.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DraggerFile = function DraggerFile(props) {
  var displayFiles = props.displayFiles,
    locale = props.locale,
    disabled = props.disabled,
    trigger = props.trigger,
    accept = props.accept;
  var _useCommonClassName = useCommonClassName(),
    SIZE = _useCommonClassName.SIZE;
  var uploadPrefix = "".concat(props.classPrefix, "-upload");
  var drag = useDrag(_objectSpread(_objectSpread({}, props.dragEvents), {}, {
    accept: accept
  }));
  var dragActive = drag.dragActive;
  var draggerFileRef = useRef(null);
  var _useGlobalIcon = useGlobalIcon({
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
    CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
    ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;
  var firstFile = displayFiles[0];
  var firstFileStatus = firstFile === null || firstFile === void 0 ? void 0 : firstFile.status;
  var classes = useMemo(function () {
    return ["".concat(uploadPrefix, "__dragger"), _defineProperty({}, "".concat(uploadPrefix, "__dragger-center"), !firstFile), _defineProperty({}, "".concat(uploadPrefix, "__dragger-error"), firstFileStatus === "fail")];
  }, [firstFile, firstFileStatus, uploadPrefix]);
  var renderImage = function renderImage() {
    var _file$response;
    var file = displayFiles[0];
    var url = (file === null || file === void 0 ? void 0 : file.url) || (file === null || file === void 0 || (_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.url);
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-img-wrap")
    }, /* @__PURE__ */React.createElement(ImageViewer, _objectSpread({
      images: [url],
      trigger: function trigger(_ref3) {
        var open = _ref3.open;
        return /* @__PURE__ */React.createElement(Image, {
          src: url || file.raw,
          onClick: open
        });
      }
    }, props.imageViewerProps)));
  };
  var renderUploading = function renderUploading() {
    var file = displayFiles[0];
    if ((file === null || file === void 0 ? void 0 : file.status) === "progress") {
      return /* @__PURE__ */React.createElement("div", {
        className: "".concat(uploadPrefix, "__single-progress")
      }, /* @__PURE__ */React.createElement(Loading, null), /* @__PURE__ */React.createElement("span", {
        className: "".concat(uploadPrefix, "__single-percent")
      }, file.percent, "%"));
    }
  };
  var renderMainPreview = function renderMainPreview() {
    var file = displayFiles[0];
    var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
    var fileInfo = /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-text")
    }, /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "__single-name")
    }, fileName), file.status === "progress" && renderUploading(), file.status === "success" && /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, null), file.status === "fail" && /* @__PURE__ */React.createElement(ErrorCircleFilledIcon$1, null)), /* @__PURE__ */React.createElement("small", {
      className: "".concat(SIZE.small)
    }, locale.file.fileSizeText, "\uFF1A", getFileSizeText(file.size)), /* @__PURE__ */React.createElement("small", {
      className: "".concat(SIZE.small)
    }, locale.file.fileOperationDateText, "\uFF1A", file.uploadTime || "-"));
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-progress")
    }, props.theme === "image" && renderImage(), /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-progress-info")
    }, props.fileListDisplay ? parseContentTNode(props.fileListDisplay, {
      files: displayFiles
    }) : fileInfo, /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-btns")
    }, ["progress", "waiting"].includes(file.status) && !disabled && /* @__PURE__ */React.createElement(Link, {
      theme: "primary",
      hover: "color",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
      onClick: function onClick(e) {
        var _props$cancelUpload;
        return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
          e: e,
          file: props.toUploadFiles[0] || props.files[0]
        });
      }
    }, locale === null || locale === void 0 ? void 0 : locale.cancelUploadText), !props.autoUpload && file.status === "waiting" && /* @__PURE__ */React.createElement(Link, {
      theme: "primary",
      hover: "color",
      disabled: disabled,
      onClick: function onClick() {
        var _props$uploadFiles;
        return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
      },
      className: "".concat(uploadPrefix, "__dragger-upload-btn")
    }, locale.triggerUploadText.normal)), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled && /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__dragger-btns")
    }, /* @__PURE__ */React.createElement(Link, {
      theme: "primary",
      hover: "color",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-progress-cancel"),
      onClick: props.triggerUpload
    }, locale.triggerUploadText.reupload), /* @__PURE__ */React.createElement(Link, {
      theme: "danger",
      hover: "color",
      disabled: disabled,
      className: "".concat(uploadPrefix, "__dragger-delete-btn"),
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          index: 0,
          file: file
        });
      }
    }, locale.triggerUploadText["delete"]))));
  };
  var renderDefaultDragElement = function renderDefaultDragElement() {
    var _locale$triggerUpload;
    var unActiveElement = /* @__PURE__ */React.createElement("div", null, /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "--highlight")
    }, (_locale$triggerUpload = locale.triggerUploadText) === null || _locale$triggerUpload === void 0 ? void 0 : _locale$triggerUpload.normal), /* @__PURE__ */React.createElement("span", null, "\xA0\xA0/\xA0\xA0", locale.dragger.draggingText));
    var activeElement = /* @__PURE__ */React.createElement("div", null, locale.dragger.dragDropText);
    return dragActive ? activeElement : unActiveElement;
  };
  var getContent = function getContent() {
    var file = displayFiles[0];
    if (file && (["progress", "success", "fail", "waiting"].includes(file.status) || !file.status)) {
      return renderMainPreview();
    }
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__trigger"),
      onClick: props.triggerUpload
    }, props.children || renderDefaultDragElement());
  };
  return /* @__PURE__ */React.createElement("div", {
    ref: draggerFileRef,
    className: classNames(classes),
    onDrop: drag.handleDrop,
    onDragEnter: drag.handleDragenter,
    onDragOver: drag.handleDragover,
    onDragLeave: drag.handleDragleave
  }, (parseContentTNode === null || parseContentTNode === void 0 ? void 0 : parseContentTNode(trigger, {
    files: displayFiles,
    dragActive: dragActive
  })) || getContent());
};
DraggerFile.displayName = "DraggerFile";

export { DraggerFile as default };
//# sourceMappingURL=DraggerFile.js.map
