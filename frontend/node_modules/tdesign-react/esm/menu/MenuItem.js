/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { useContext } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import useDomRefCallback from '../hooks/useDomRefCallback.js';
import useRipple from '../hooks/useRipple.js';
import { MenuContext } from './MenuContext.js';
import { Tooltip } from '../tooltip/index.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useAnimation.js';
import '../_chunks/dep-3a09424a.js';
import '../_util/noop.js';
import '../tooltip/Tooltip.js';
import '../_chunks/dep-6b660ef0.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../hooks/useSwitch.js';
import '../hooks/usePersistFn.js';
import '../tooltip/style/index.js';
import '../tooltip/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MenuItem = function MenuItem(props) {
  var content = props.content,
    _props$children = props.children,
    children = _props$children === void 0 ? content : _props$children,
    disabled = props.disabled,
    href = props.href,
    _props$target = props.target,
    target = _props$target === void 0 ? "_self" : _props$target,
    value = props.value,
    className = props.className,
    style = props.style,
    icon = props.icon,
    onClick = props.onClick;
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useDomRefCallback = useDomRefCallback(),
    _useDomRefCallback2 = _slicedToArray(_useDomRefCallback, 2),
    menuItemDom = _useDomRefCallback2[0],
    setRefCurrent = _useDomRefCallback2[1];
  useRipple(menuItemDom);
  var _useContext = useContext(MenuContext),
    onChange = _useContext.onChange,
    setState = _useContext.setState,
    active = _useContext.active,
    collapsed = _useContext.collapsed;
  var handleClick = function handleClick(e) {
    e.stopPropagation();
    if (disabled) return;
    onClick && onClick({
      e: e,
      value: value
    });
    if (value !== active) onChange(value);
    setState({
      active: value
    });
  };
  var liContent = /* @__PURE__ */React.createElement("li", {
    ref: setRefCurrent,
    className: classNames("".concat(classPrefix, "-menu__item"), className, _defineProperty(_defineProperty(_defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-active"), value === active), "".concat(classPrefix, "-menu__item--plain"), !icon)),
    style: _objectSpread({}, style),
    onClick: handleClick
  }, /* @__PURE__ */React.createElement(React.Fragment, null, icon, href ? /* @__PURE__ */React.createElement("a", {
    href: href,
    target: target,
    className: classNames("".concat(classPrefix, "-menu__item-link"))
  }, /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-menu__content")
  }, children)) : /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-menu__content")
  }, children)));
  if (collapsed && !disabled && !/submenu/i.test(className)) {
    return /* @__PURE__ */React.createElement(Tooltip, _objectSpread({
      content: children,
      placement: "right"
    }, props.tooltipProps), liContent);
  }
  return liContent;
};
MenuItem.displayName = "MenuItem";

export { MenuItem as default };
//# sourceMappingURL=MenuItem.js.map
