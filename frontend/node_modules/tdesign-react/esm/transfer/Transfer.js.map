{"version":3,"file":"Transfer.js","sources":["../../../components/transfer/Transfer.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport { difference, isArray } from 'lodash-es';\nimport classnames from 'classnames';\nimport { ChevronRightIcon as TdChevronRightIcon, ChevronLeftIcon as TdChevronLeftIcon } from 'tdesign-icons-react';\nimport { TdTransferProps, DataOption, TransferValue, TransferListType } from './type';\nimport useConfig from '../hooks/useConfig';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport Button from '../button';\nimport TransferList from './TransferList';\nimport { filterCheckedTreeNodes, getTargetNodes, getDefaultValue, getJSX, getLeafNodes } from './utils';\nimport { TNode, StyledProps } from '../common';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { transferDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface TransferProps extends TdTransferProps, StyledProps {\n  content?: Array<TNode>;\n}\n\ninterface StateInterface {\n  source: DataOption[];\n  target: DataOption[];\n}\n\ninterface CheckedInterface {\n  source: Array<TransferValue>;\n  target: Array<TransferValue>;\n}\n\nconst Transfer: React.FunctionComponent<TransferProps> = (originalProps) => {\n  const props = useDefaultProps<TransferProps>(originalProps, transferDefaultProps);\n  const {\n    data,\n    search,\n    checked,\n    defaultChecked,\n    onCheckedChange,\n    value,\n    defaultValue,\n    onChange,\n    empty,\n    disabled,\n    pagination,\n    title,\n    operation,\n    footer,\n    transferItem,\n    content,\n    tree,\n    showCheckAll,\n    direction = 'both',\n  } = props;\n  const [state, setState] = useState<StateInterface>(() => ({\n    source: data.filter((item) => !defaultValue.includes(item.value)),\n    target: data.filter((item) => defaultValue.includes(item.value)),\n  }));\n  const [checkeds, setCheckeds] = useState<CheckedInterface>(() => ({\n    source: state.source\n      .filter((item) => !item.disabled && defaultChecked.includes(item.value))\n      .map((item) => item.value),\n    target: state.target\n      .filter((item) => !item.disabled && defaultChecked.includes(item.value))\n      .map((item) => item.value),\n  }));\n  const [searchState, setSearchState] = useState<{ source: string; target: string }>({ source: '', target: '' });\n\n  const isTargetControlled = 'value' in props;\n  const isCheckedControlled = 'checked' in props;\n\n  const { classPrefix } = useConfig();\n  const { ChevronRightIcon, ChevronLeftIcon } = useGlobalIcon({\n    ChevronLeftIcon: TdChevronLeftIcon,\n    ChevronRightIcon: TdChevronRightIcon,\n  });\n  const transferClassName = `${classPrefix}-transfer`;\n\n  const [local, t] = useLocaleReceiver('transfer');\n\n  const [sourceData, targetData] = useMemo(() => {\n    const { source, target } = state;\n    const { source: searchSource, target: searchTarget } = searchState;\n    return [\n      source.filter((item) => !searchSource || item.label.indexOf(searchState.source) > -1),\n      target.filter((item) => !searchTarget || item.label.indexOf(searchState.target) > -1),\n    ];\n  }, [searchState, state]);\n\n  const [SourceEmptyCmp, TargetEmptyCmp] = getDefaultValue(empty, t(local.empty)).map((item) => getJSX(item));\n  const sourceDisabled = isArray(disabled) ? disabled[0] : disabled;\n  const targetDisabled = isArray(disabled) ? disabled[1] : disabled;\n\n  const [sourcePagination, targetPagination] = getDefaultValue(pagination);\n  const [sourceTitle, targetTitle] = getDefaultValue(title as any as any).map((item) => getJSX(item));\n  const [leftOperation, rightOperation] = getDefaultValue(operation as any, [\n    () => <ChevronRightIcon />,\n    () => <ChevronLeftIcon />,\n  ]).map((item) => getJSX(item));\n  const [sourceFooter, targetFooter] = getDefaultValue(footer as any).map((item) => getJSX(item));\n\n  const [sourceContent, targetContent] = getDefaultValue(content);\n\n  const [showCheckAllSource, showCheckAllTarget] = useMemo(\n    () =>\n      Array.isArray(showCheckAll) ? [showCheckAll[0] ?? true, showCheckAll[1] ?? true] : [showCheckAll, showCheckAll],\n    [showCheckAll],\n  );\n\n  const transformSource = () => {\n    const { source, target } = state;\n    const sourceCheckeds = source.filter((item) => checkeds.source.includes(item.value));\n    let newSource = difference(source, sourceCheckeds);\n    let newTarget = [...target, ...sourceCheckeds];\n    let newTargetValue = newTarget.map((t) => t.value);\n\n    // 树结构处理 source/target 节点数据\n    if (tree) {\n      newSource = filterCheckedTreeNodes(source, checkeds.source);\n      newTarget = getTargetNodes(newSource, data);\n      newTargetValue = getLeafNodes(newTarget).map((t) => t.value);\n    }\n    if (isTargetControlled) {\n      onChange?.(newTargetValue, {\n        type: 'source',\n        movedValue: sourceCheckeds.map((s) => s.value),\n      });\n    } else {\n      setState({ ...state, source: newSource, target: [...newTarget] });\n      setCheckeds({ ...checkeds, source: [] });\n    }\n  };\n  const transformTarget = () => {\n    const { source, target } = state;\n    const targetCheckeds = target.filter((item) => checkeds.target.includes(item.value));\n    let newSource = [...source, ...targetCheckeds];\n    let newTarget = difference(target, targetCheckeds);\n    let newTargetValue = newTarget.map((t) => t.value);\n\n    // 树结构处理 source/target 节点数据\n    if (tree) {\n      newTarget = filterCheckedTreeNodes(target, checkeds.target);\n      newSource = getTargetNodes(newTarget, data);\n      newTargetValue = getLeafNodes(newTarget).map((t) => t.value);\n    }\n    if (isTargetControlled) {\n      onChange?.(newTargetValue, {\n        type: 'target',\n        movedValue: targetCheckeds.map((s) => s.value),\n      });\n    } else {\n      setState({ ...state, source: newSource, target: newTarget });\n      setCheckeds({ ...checkeds, target: [] });\n    }\n  };\n\n  const OperationsCmp = () => {\n    const isSourceDisabled = sourceDisabled || !checkeds.source.length;\n    const isTargetDisabled = targetDisabled || !checkeds.target.length;\n    const isToRightShow = direction !== 'left';\n    const isToLeftShow = direction !== 'right';\n\n    return (\n      <div className={`${transferClassName}__operations`}>\n        {isToRightShow && (\n          <Button\n            size=\"small\"\n            key={isSourceDisabled ? 'right-outline' : 'right-base'}\n            variant=\"outline\"\n            disabled={isSourceDisabled}\n            onClick={transformSource}\n          >\n            {leftOperation}\n          </Button>\n        )}\n        {isToLeftShow && (\n          <Button\n            size=\"small\"\n            key={isSourceDisabled ? 'left-outline' : 'left-base'}\n            variant=\"outline\"\n            disabled={isTargetDisabled}\n            onClick={transformTarget}\n          >\n            {rightOperation}\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const handleCheckChange = (value: Array<TransferValue>, type: TransferListType) => {\n    const { source: sourceChecked, target: targetChecked } = checkeds;\n    const inverseMap = { source: 'target', target: 'source' };\n    isCheckedControlled\n      ? onCheckedChange?.({\n          type,\n          checked: value.concat(checkeds[inverseMap[type]]),\n          sourceChecked,\n          targetChecked,\n        })\n      : setCheckeds({ ...checkeds, [type]: value });\n  };\n\n  // value 受控\n  useEffect(() => {\n    if (isTargetControlled && Array.isArray(value)) {\n      let newTarget = data.filter((item) => value.includes(item.value));\n      let newSource = difference(data, newTarget);\n      // 树结构处理 source/target 节点数据\n      if (tree) {\n        newSource = filterCheckedTreeNodes(data, value);\n        newTarget = getTargetNodes(newSource, data);\n      }\n      setState({ source: [...newSource], target: [...newTarget] });\n      setCheckeds({ source: [], target: [] });\n    }\n  }, [value, data, isTargetControlled, tree]);\n\n  // checked 受控\n  useEffect(() => {\n    const { source, target } = state;\n    if (isCheckedControlled && Array.isArray(checked)) {\n      const newSourceChecked = source\n        .filter((item) => !item.disabled && checked.includes(item.value))\n        .map((item) => item.value);\n      const newTargetChecked = target\n        .filter((item) => !item.disabled && checked.includes(item.value))\n        .map((item) => item.value);\n      setCheckeds({ source: newSourceChecked, target: newTargetChecked });\n    }\n  }, [checked, state, isCheckedControlled]);\n\n  return (\n    <div\n      className={classnames(transferClassName, {\n        [`${transferClassName}__search`]: search,\n        [`${transferClassName}__pagination`]: pagination,\n        [`${transferClassName}__footer`]: footer,\n        [`${transferClassName}--with-tree`]: tree,\n      })}\n    >\n      <TransferList\n        className={`${transferClassName}__list-source`}\n        listType=\"source\"\n        data={sourceData}\n        search={search}\n        checked={checkeds.source}\n        empty={SourceEmptyCmp}\n        disabled={sourceDisabled}\n        pagination={sourcePagination}\n        title={sourceTitle}\n        footer={sourceFooter}\n        transferItem={transferItem}\n        content={sourceContent}\n        onCheckbox={(value) => handleCheckChange(value, 'source')}\n        onSearch={(val: string) => setSearchState({ ...searchState, source: val })}\n        tree={tree}\n        showCheckAll={showCheckAllSource}\n      ></TransferList>\n      {OperationsCmp()}\n      <TransferList\n        className={`${transferClassName}__list-target`}\n        listType=\"target\"\n        data={targetData}\n        search={search}\n        checked={checkeds.target}\n        empty={TargetEmptyCmp}\n        disabled={targetDisabled}\n        pagination={targetPagination}\n        title={targetTitle}\n        footer={targetFooter}\n        transferItem={transferItem}\n        content={targetContent}\n        onCheckbox={(value) => handleCheckChange(value, 'target')}\n        onSearch={(val: string) => setSearchState({ ...searchState, target: val })}\n        tree={tree}\n        showCheckAll={showCheckAllTarget}\n      ></TransferList>\n    </div>\n  );\n};\n\nTransfer.displayName = 'Transfer';\n\nexport default Transfer;\n"],"names":["Transfer","originalProps","props","useDefaultProps","transferDefaultProps","data","search","checked","defaultChecked","onCheckedChange","value","defaultValue","onChange","empty","disabled","pagination","title","operation","footer","transferItem","content","tree","showCheckAll","_props$direction","direction","_useState","useState","source","filter","item","includes","target","_useState2","_slicedToArray","state","setState","_useState3","map","_useState4","checkeds","setCheckeds","_useState5","_useState6","searchState","setSearchState","isTargetControlled","isCheckedControlled","_useConfig","useConfig","classPrefix","_useGlobalIcon","useGlobalIcon","ChevronLeftIcon","TdChevronLeftIcon","ChevronRightIcon","TdChevronRightIcon","transferClassName","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","local","t","_useMemo","useMemo","searchSource","searchTarget","label","indexOf","_useMemo2","sourceData","targetData","_getDefaultValue$map","getDefaultValue","getJSX","_getDefaultValue$map2","SourceEmptyCmp","TargetEmptyCmp","sourceDisabled","isArray","targetDisabled","_getDefaultValue","_getDefaultValue2","sourcePagination","targetPagination","_getDefaultValue$map3","_getDefaultValue$map4","sourceTitle","targetTitle","_getDefaultValue$map5","_getDefaultValue$map6","leftOperation","rightOperation","_getDefaultValue$map7","_getDefaultValue$map8","sourceFooter","targetFooter","_getDefaultValue3","_getDefaultValue4","sourceContent","targetContent","_useMemo3","_showCheckAll$","_showCheckAll$2","Array","_useMemo4","showCheckAllSource","showCheckAllTarget","transformSource","sourceCheckeds","newSource","difference","newTarget","concat","_toConsumableArray","newTargetValue","filterCheckedTreeNodes","getTargetNodes","getLeafNodes","type","movedValue","s","_objectSpread","transformTarget","targetCheckeds","OperationsCmp","isSourceDisabled","length","isTargetDisabled","isToRightShow","isToLeftShow","React","createElement","className","Button","size","key","variant","onClick","handleCheckChange","sourceChecked","targetChecked","inverseMap","_defineProperty","useEffect","newSourceChecked","newTargetChecked","classnames","TransferList","listType","onCheckbox","onSearch","val","displayName"],"mappings":"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"}