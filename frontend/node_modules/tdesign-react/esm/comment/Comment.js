/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import React, { forwardRef } from 'react';
import classNames from 'classnames';
import { Button } from '../button/index.js';
import useConfig from '../hooks/useConfig.js';
import { commentDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../button/Button.js';
import '../_chunks/dep-cb0a3966.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-6b660ef0.js';
import '../hooks/useDomRefCallback.js';
import '../hooks/useRipple.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useAnimation.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../_chunks/dep-3a09424a.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../loading/gradient.js';
import '../_chunks/dep-1630b9b4.js';
import '../_chunks/dep-87d110df.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-a74cc5e4.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../button/defaultProps.js';
import '../_util/parseTNode.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../button/style/index.js';
import '../button/type.js';

var Comment = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useDefaultProps = useDefaultProps(props, commentDefaultProps),
    actions = _useDefaultProps.actions,
    author = _useDefaultProps.author,
    avatar = _useDefaultProps.avatar,
    content = _useDefaultProps.content,
    datetime = _useDefaultProps.datetime,
    reply = _useDefaultProps.reply,
    quote = _useDefaultProps.quote,
    className = _useDefaultProps.className,
    style = _useDefaultProps.style;
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var avatarElement = avatar ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__avatar")
  }, typeof avatar === "string" ? /* @__PURE__ */React.createElement("img", {
    src: avatar,
    alt: "",
    className: "".concat(classPrefix, "-comment__avatar-image")
  }) : avatar) : null;
  var authorDatetimeContent = (author || datetime) && /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__author")
  }, author && /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-comment__name")
  }, author), datetime && /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-comment__time")
  }, datetime));
  var quoteElement = quote ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__quote")
  }, quote) : null;
  var actionsElement = actions && actions.length ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__actions")
  }, actions.map(function (action, index) {
    return /* @__PURE__ */React.createElement(Button, {
      key: "action-".concat(index),
      size: "small",
      variant: "text"
    }, action);
  })) : null;
  var contentElement = /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__content")
  }, authorDatetimeContent, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__detail")
  }, content), quoteElement, actionsElement);
  var replyElement = reply ? /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-comment__reply"))
  }, reply) : null;
  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    style: style,
    className: classNames("".concat(classPrefix, "-comment"), className)
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-comment__inner")
  }, avatarElement, contentElement), replyElement);
});
Comment.displayName = "Comment";

export { Comment as default };
//# sourceMappingURL=Comment.js.map
