/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React, { useRef, useMemo, useEffect } from 'react';
import { get } from 'lodash-es';
import classNames from 'classnames';
import { formatRowAttributes, formatRowClassNames } from './utils.js';
import { getRowFixedStyles } from './hooks/useFixed.js';
import useClassName from './hooks/useClassName.js';
import useLazyLoad from './hooks/useLazyLoad.js';
import { getCellKey } from './hooks/useRowspanAndColspan.js';
import Cell from './Cell.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-1630b9b4.js';
import '../_chunks/dep-87d110df.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-6b660ef0.js';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-a3bde62f.js';
import '../hooks/useDebounce.js';
import '../hooks/usePersistFn.js';
import '../hooks/usePrevious.js';
import '../_util/listener.js';
import '../_chunks/dep-3a09424a.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../_chunks/dep-4450afc0.js';
import './Ellipsis.js';
import '../_util/scroll.js';
import 'raf';
import '../_util/easing.js';
import '../tooltip/index.js';
import '../tooltip/Tooltip.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../hooks/useSwitch.js';
import '../tooltip/style/index.js';
import '../tooltip/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
function TR(props) {
  var _props$columns;
  var row = props.row,
    rowKey = props.rowKey,
    rowIndex = props.rowIndex,
    rowClassName = props.rowClassName,
    rowAttributes = props.rowAttributes,
    dataLength = props.dataLength,
    fixedRows = props.fixedRows,
    scroll = props.scroll,
    tableContentRef = props.tableContentRef,
    rowAndColFixedPosition = props.rowAndColFixedPosition,
    virtualConfig = props.virtualConfig,
    onRowMounted = props.onRowMounted;
  var trRef = useRef(null);
  var classNames$1 = useClassName();
  var trStyles = getRowFixedStyles(get(row, rowKey || "id"), rowIndex, dataLength, fixedRows, rowAndColFixedPosition, classNames$1.tableRowFixedClasses, virtualConfig.isVirtualScroll ? virtualConfig.translateY : 0);
  var trAttributes = useMemo(function () {
    return formatRowAttributes(rowAttributes, {
      row: row,
      rowIndex: rowIndex,
      type: "body"
    }) || {};
  }, [row, rowAttributes, rowIndex]);
  var classes = useMemo(function () {
    var customClasses = formatRowClassNames(rowClassName, {
      row: row,
      rowIndex: rowIndex,
      rowKey: rowKey,
      type: "body"
    }, rowKey || "id");
    return [trStyles === null || trStyles === void 0 ? void 0 : trStyles.classes, customClasses];
  }, [row, rowClassName, rowIndex, rowKey, trStyles === null || trStyles === void 0 ? void 0 : trStyles.classes]);
  var useLazyLoadParams = useMemo(function () {
    return _objectSpread(_objectSpread({}, scroll), {}, {
      rowIndex: rowIndex
    });
  }, [scroll, rowIndex]);
  var _useLazyLoad = useLazyLoad(tableContentRef.current, trRef, useLazyLoadParams),
    hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
    tRowHeight = _useLazyLoad.tRowHeight;
  useEffect(function () {
    if (virtualConfig.isVirtualScroll && trRef.current) {
      onRowMounted === null || onRowMounted === void 0 || onRowMounted({
        ref: trRef.current,
        data: row
      });
    }
  }, [virtualConfig.isVirtualScroll, trRef, row]);
  var columnVNodeList = (_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : _props$columns.map(function (col, colIndex) {
    var _props$skipSpansMap;
    var cellSpans = {};
    var params = {
      row: row,
      col: col,
      rowIndex: rowIndex,
      colIndex: colIndex
    };
    var spanState = null;
    if ((_props$skipSpansMap = props.skipSpansMap) !== null && _props$skipSpansMap !== void 0 && _props$skipSpansMap.size) {
      var _spanState, _spanState2;
      var cellKey = getCellKey(row, props.rowKey, col.colKey, colIndex);
      spanState = props.skipSpansMap.get(cellKey) || {};
      ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
      ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
      if (spanState.skipped) return null;
    }
    var onClick = function onClick(e) {
      var _props$onCellClick;
      var p = _objectSpread(_objectSpread({}, params), {}, {
        e: e
      });
      if (col.stopPropagation) {
        e.stopPropagation();
      }
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, p);
    };
    return /* @__PURE__ */React.createElement(Cell, {
      key: params.col.colKey,
      cellParams: params,
      dataLength: dataLength,
      rowAndColFixedPosition: rowAndColFixedPosition,
      columnLength: props.columns.length,
      cellSpans: cellSpans,
      cellEmptyContent: props.cellEmptyContent,
      tableClassNames: classNames$1,
      rowspanAndColspan: props.rowspanAndColspan,
      onClick: onClick,
      tableRef: props.tableRef,
      classPrefix: props.classPrefix,
      overlayClassName: props.ellipsisOverlayClassName,
      pagination: props.pagination
    });
  });
  var rowParams = {
    row: row,
    index: rowIndex
  };
  return /* @__PURE__ */React.createElement("tr", _objectSpread(_objectSpread({
    ref: trRef
  }, trAttributes), {}, {
    style: trStyles === null || trStyles === void 0 ? void 0 : trStyles.style,
    className: classNames(classes) || void 0,
    onClick: function onClick(e) {
      var _props$onRowClick;
      return (_props$onRowClick = props.onRowClick) === null || _props$onRowClick === void 0 ? void 0 : _props$onRowClick.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    },
    onDoubleClick: function onDoubleClick(e) {
      var _props$onRowDblclick;
      return (_props$onRowDblclick = props.onRowDblclick) === null || _props$onRowDblclick === void 0 ? void 0 : _props$onRowDblclick.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    },
    onMouseDown: function onMouseDown(e) {
      var _props$onRowMousedown;
      return (_props$onRowMousedown = props.onRowMousedown) === null || _props$onRowMousedown === void 0 ? void 0 : _props$onRowMousedown.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    },
    onMouseEnter: function onMouseEnter(e) {
      var _props$onRowMouseente;
      return (_props$onRowMouseente = props.onRowMouseenter) === null || _props$onRowMouseente === void 0 ? void 0 : _props$onRowMouseente.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    },
    onMouseLeave: function onMouseLeave(e) {
      var _props$onRowMouseleav;
      return (_props$onRowMouseleav = props.onRowMouseleave) === null || _props$onRowMouseleav === void 0 ? void 0 : _props$onRowMouseleav.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    },
    onMouseUp: function onMouseUp(e) {
      var _props$onRowMouseup;
      return (_props$onRowMouseup = props.onRowMouseup) === null || _props$onRowMouseup === void 0 ? void 0 : _props$onRowMouseup.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    },
    onMouseOver: function onMouseOver(e) {
      var _props$onRowMouseover;
      return (_props$onRowMouseover = props.onRowMouseover) === null || _props$onRowMouseover === void 0 ? void 0 : _props$onRowMouseover.call(props, _objectSpread(_objectSpread({}, rowParams), {}, {
        e: e
      }));
    }
  }), hasLazyLoadHolder ? [/* @__PURE__ */React.createElement("td", {
    key: rowIndex,
    style: {
      height: "".concat(tRowHeight, "px"),
      border: "none"
    }
  })] : columnVNodeList);
}
TR.displayName = "TR";

export { ROW_LISTENERS, TABLE_PROPS, TR as default };
//# sourceMappingURL=TR.js.map
