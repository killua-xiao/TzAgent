/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import { _ as _typeof } from '../../_chunks/dep-eca3a3de.js';
import React, { useState, useEffect } from 'react';
import { g as getColumnsResetValue } from '../../_chunks/dep-d1ed7cad.js';
import { isFunction } from 'lodash-es';
import { Button } from '../../button/index.js';
import useControlled from '../../hooks/useControlled.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import TableFilterController from '../FilterController.js';
import useClassName from './useClassName.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../button/Button.js';
import '../../_chunks/dep-6b660ef0.js';
import 'classnames';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../locale/zh_CN.js';
import '../../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../../_chunks/dep-3c9ab31a.js';
import '../../hooks/useDomRefCallback.js';
import '../../hooks/useRipple.js';
import '../../_chunks/dep-c48e2ca1.js';
import '../../hooks/useAnimation.js';
import '../../_chunks/dep-3a09424a.js';
import '../../loading/index.js';
import '../../loading/Loading.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../hooks/useLayoutEffect.js';
import '../../loading/gradient.js';
import '../../_chunks/dep-1630b9b4.js';
import '../../_chunks/dep-87d110df.js';
import '../../loading/defaultProps.js';
import '../../hooks/useDefaultProps.js';
import '../../loading/plugin.js';
import '../../_util/react-render.js';
import '../../_chunks/dep-a74cc5e4.js';
import '../../common/PluginContainer.js';
import '../../config-provider/index.js';
import '../../config-provider/ConfigProvider.js';
import '../../config-provider/type.js';
import '../../loading/style/index.js';
import '../../loading/type.js';
import '../../button/defaultProps.js';
import '../../_util/parseTNode.js';
import '../../_chunks/dep-f53c91cd.js';
import '../../_chunks/dep-b908e1fe.js';
import '../../button/style/index.js';
import '../../button/type.js';
import '../../_util/noop.js';
import 'tdesign-icons-react';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import '../../_util/ref.js';
import 'react-is';
import '../../_util/isFragment.js';
import '../../hooks/useAttach.js';
import '../../hooks/useMutationObserver.js';
import '../../hooks/useLatest.js';
import '../../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../../hooks/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../popup/hooks/useTrigger.js';
import '../../_util/composeRefs.js';
import '../../_util/listener.js';
import '../../popup/utils/transition.js';
import '../../popup/PopupPlugin.js';
import '../../popup/style/index.js';
import '../../popup/type.js';
import '../../checkbox/index.js';
import '../../_chunks/dep-0030a252.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_util/helper.js';
import '../../checkbox/defaultProps.js';
import '../../checkbox/style/index.js';
import '../../checkbox/type.js';
import '../../radio/index.js';
import '../../_chunks/dep-b9f731c7.js';
import '../../_chunks/dep-4450afc0.js';
import '../../hooks/useCommonClassName.js';
import '../../radio/defaultProps.js';
import '../../radio/useKeyboard.js';
import '../../_chunks/dep-55732ade.js';
import '../../radio/style/index.js';
import '../../radio/type.js';
import '../../input/index.js';
import '../../input/Input.js';
import '../../hooks/useGlobalIcon.js';
import '../../input/InputGroup.js';
import '../../input/defaultProps.js';
import '../../input/useLengthLimit.js';
import '../../input/style/index.js';
import '../../input/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function isFilterValueExist(value) {
  var isArrayTrue = value instanceof Array && value.length;
  var isObject = _typeof(value) === "object" && !(value instanceof Array);
  var isObjectTrue = isObject && Object.keys(value || {}).length;
  return isArrayTrue || isObjectTrue || ![null, "", void 0].includes(value);
}
function filterEmptyData(data) {
  var newFilterValue = {};
  Object.keys(data).forEach(function (key) {
    var item = data[key];
    if (isFilterValueExist(item)) {
      newFilterValue[key] = item;
    }
  });
  return newFilterValue;
}
function useFilter(props, primaryTableRef) {
  var columns = props.columns;
  var _useLocaleReceiver = useLocaleReceiver("table"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    locale = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var _useClassName = useClassName(),
    tableFilterClasses = _useClassName.tableFilterClasses,
    isFocusClass = _useClassName.isFocusClass;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    isTableOverflowHidden = _useState2[0],
    setIsTableOverflowHidden = _useState2[1];
  var _useControlled = useControlled(props, "filterValue", props.onFilterChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    tFilterValue = _useControlled2[0],
    setTFilterValue = _useControlled2[1];
  var _useState3 = useState(tFilterValue),
    _useState4 = _slicedToArray(_useState3, 2),
    innerFilterValue = _useState4[0],
    setInnerFilterValue = _useState4[1];
  var hasEmptyCondition = function () {
    var filterEmpty = filterEmptyData(tFilterValue || {});
    return !tFilterValue || !Object.keys(filterEmpty).length;
  }();
  useEffect(function () {
    setInnerFilterValue(tFilterValue);
  }, [tFilterValue]);
  function renderFirstFilterRow() {
    var _props$pagination, _props$data;
    if (hasEmptyCondition) return null;
    var defaultNode = /* @__PURE__ */React.createElement("div", {
      className: tableFilterClasses.result
    }, /* @__PURE__ */React.createElement("span", null, t(locale.searchResultText, {
      result: getFilterResultContent(),
      count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
    })), /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: onResetAll
    }, locale.clearFilterResultButtonText));
    var filterContent = isFunction(props.filterRow) ? props.filterRow() : props.filterRow;
    if (filterContent === null) return null;
    var r = filterContent || defaultNode;
    if (!r) return null;
    return /* @__PURE__ */React.createElement("div", {
      className: tableFilterClasses.inner
    }, r);
  }
  function getFilterResultContent() {
    var arr = [];
    props.columns.filter(function (col) {
      return col.filter;
    }).forEach(function (col) {
      var value = tFilterValue[col.colKey];
      if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
        var formattedValue = value instanceof Array ? value : [value];
        var label = [];
        col.filter.list.forEach(function (option) {
          if (formattedValue.includes(option.value)) {
            label.push(option.label);
          }
        });
        value = label.join();
      }
      if (isFilterValueExist(value)) {
        arr.push("".concat(col.title, "\uFF1A").concat(value));
      }
    });
    return arr.join("\uFF1B");
  }
  function onInnerFilterChange(val, column) {
    var filterValue = _objectSpread(_objectSpread({}, innerFilterValue), {}, _defineProperty({}, column.colKey, val));
    setInnerFilterValue(filterValue);
    if (!column.filter.showConfirmAndReset) {
      emitFilterChange(filterValue, "filter-change", column);
    }
  }
  function emitFilterChange(filterValue, trigger, column) {
    var _props$onChange;
    setTFilterValue(filterValue, {
      col: column,
      trigger: trigger
    });
    (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
      filter: filterValue
    }, {
      trigger: "filter"
    });
    requestAnimationFrame(function () {
      var _primaryTableRef$curr;
      (_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 || _primaryTableRef$curr.scrollToElement({
        index: -1
      });
    });
  }
  function onReset(column) {
    var filterValue = _objectSpread(_objectSpread({}, tFilterValue), {}, _defineProperty({}, column.colKey, {
      single: "",
      multiple: [],
      input: ""
    }[column.filter.type] || column.filter.resetValue || ""));
    emitFilterChange(filterValue, "reset", column);
  }
  function onResetAll() {
    var resetValue = getColumnsResetValue(columns);
    emitFilterChange(resetValue, "clear", void 0);
  }
  function onConfirm(column) {
    emitFilterChange(innerFilterValue, "confirm", column);
  }
  function renderFilterIcon(_ref) {
    var _primaryTableRef$curr2;
    var col = _ref.col,
      colIndex = _ref.colIndex;
    return /* @__PURE__ */React.createElement(TableFilterController, {
      column: col,
      colIndex: colIndex,
      filterIcon: props.filterIcon,
      tFilterValue: tFilterValue,
      innerFilterValue: innerFilterValue,
      tableFilterClasses: tableFilterClasses,
      isFocusClass: isFocusClass,
      popupProps: col.filter.popupProps,
      onReset: onReset,
      onConfirm: onConfirm,
      onInnerFilterChange: onInnerFilterChange,
      primaryTableElement: primaryTableRef === null || primaryTableRef === void 0 || (_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableElement,
      onVisibleChange: onPopupVisibleChange
    });
  }
  function onPopupVisibleChange(visible) {
    if (visible && !isTableOverflowHidden) {
      setIsTableOverflowHidden(!visible);
    }
  }
  return {
    hasEmptyCondition: hasEmptyCondition,
    isTableOverflowHidden: isTableOverflowHidden,
    renderFilterIcon: renderFilterIcon,
    renderFirstFilterRow: renderFirstFilterRow
  };
}

export { useFilter as default };
//# sourceMappingURL=useFilter.js.map
