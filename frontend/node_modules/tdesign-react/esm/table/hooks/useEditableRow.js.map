{"version":3,"file":"useEditableRow.js","sources":["../../../../components/table/hooks/useEditableRow.ts"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { get, isFunction } from 'lodash-es';\nimport { getEditableKeysMap } from '@tdesign/common-js/table/utils';\nimport { PrimaryTableProps } from '../interface';\nimport { validate } from '../../form/formModel';\nimport { AllValidateResult } from '../../form';\nimport { PrimaryTableRowEditContext, TableRowData, TableErrorListMap } from '../type';\n\nexport type ErrorListObjectType = PrimaryTableRowEditContext<TableRowData> & { errorList: AllValidateResult[] };\n\nexport interface TablePromiseErrorData {\n  errors: ErrorListObjectType[];\n  errorMap: TableErrorListMap;\n}\n\nexport function useEditableRow(props: PrimaryTableProps) {\n  const cellRuleMap = useMemo(() => new Map<any, PrimaryTableRowEditContext<TableRowData>[]>(), []);\n  const { editableRowKeys } = props;\n  // 校验不通过的错误信息，其中 key 值为 [rowValue, col.colKey].join('__')\n  const [errorListMap, setErrorListMap] = useState<TableErrorListMap>({});\n  const editableKeysMap = useMemo(\n    () => editableRowKeys && getEditableKeysMap(editableRowKeys, props.data, props.rowKey || 'id'),\n    [editableRowKeys, props.data, props.rowKey],\n  );\n\n  const getErrorListMapByErrors = (errors: ErrorListObjectType[]): TableErrorListMap => {\n    const errorMap: TableErrorListMap = {};\n    errors.forEach(({ row, col, errorList }) => {\n      const rowValue = get(row, props.rowKey || 'id');\n      const key = [rowValue, col.colKey].join('__');\n      if (errorList?.length) {\n        errorMap[key] = errorList;\n      } else {\n        delete errorMap[key];\n      }\n    });\n    return errorMap;\n  };\n\n  // 校验一行的数据\n  const validateOneRowData = (rowValue: any) => {\n    const rowRules = cellRuleMap.get(rowValue);\n    if (!rowRules) return;\n    const list = rowRules.map(\n      (item) =>\n        new Promise<ErrorListObjectType>((resolve) => {\n          const { editedRow, col } = item;\n          const rules = isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;\n          if (!col.edit || !rules || !rules) {\n            resolve({ ...item, errorList: [] });\n            return;\n          }\n          validate(get(editedRow, col.colKey), rules).then((r) => {\n            resolve({ ...item, errorList: r.filter((t) => !t.result) });\n          });\n        }),\n    );\n    return new Promise<TablePromiseErrorData>((resolve, reject) => {\n      Promise.all(list).then((errors) => {\n        resolve({\n          errors: errors.filter((t) => t.errorList?.length),\n          errorMap: getErrorListMapByErrors(errors),\n        });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验表格单行数据（对外开放方法，修改时需慎重）\n   * @param rowValue 行唯一标识\n   */\n  const validateRowData = (rowValue: any) =>\n    new Promise((resolve, reject) => {\n      validateOneRowData(rowValue).then(({ errors, errorMap }) => {\n        setErrorListMap(errorMap);\n        // 缺少校验文本显示\n        const tTrigger = 'parent';\n        props.onRowValidate?.({ trigger: tTrigger, result: errors });\n        resolve({ trigger: tTrigger, result: errors });\n      }, reject);\n    });\n\n  /**\n   * 校验整个表格数据（对外开放方法，修改时需慎重）\n   */\n  const validateTableData = () => {\n    const promiseList: Promise<TablePromiseErrorData>[] = [];\n    const data = props.data || [];\n    for (let i = 0, len = data.length; i < len; i++) {\n      const rowValue = get(data[i], props.rowKey || 'id');\n      promiseList.push(validateOneRowData(rowValue));\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((rList) => {\n        const allErrorListMap: TableErrorListMap = {};\n        rList.forEach(({ errorMap } = { errors: [], errorMap: {} }) => {\n          errorMap && Object.assign(allErrorListMap, errorMap);\n        });\n        setErrorListMap(allErrorListMap);\n        props.onValidate?.({ result: allErrorListMap });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  const onRuleChange = (context: PrimaryTableRowEditContext<TableRowData>) => {\n    // 编辑行，预存校验信息，方便最终校验\n    if (props.editableRowKeys) {\n      const rowValue = get(context.row, props.rowKey || 'id');\n      const rules = cellRuleMap.get(rowValue);\n      if (rules) {\n        const index = rules.findIndex((t) => t.col.colKey === context.col.colKey);\n        if (index === -1) {\n          rules.push(context);\n        } else {\n          rules[index] = context;\n        }\n        cellRuleMap.set(rowValue, rules);\n      } else {\n        cellRuleMap.set(rowValue, [context]);\n      }\n    }\n  };\n\n  const clearValidateData = () => {\n    setErrorListMap({});\n  };\n\n  return {\n    errorListMap,\n    editableKeysMap,\n    validateRowData,\n    validateTableData,\n    clearValidateData,\n    onRuleChange,\n  };\n}\n"],"names":["useEditableRow","props","cellRuleMap","useMemo","Map","editableRowKeys","_useState","useState","_useState2","_slicedToArray","errorListMap","setErrorListMap","editableKeysMap","getEditableKeysMap","data","rowKey","getErrorListMapByErrors","errors","errorMap","forEach","_ref","row","col","errorList","rowValue","get","key","colKey","join","length","validateOneRowData","rowRules","list","map","item","Promise","resolve","editedRow","rules","isFunction","edit","_objectSpread","validate","then","r","filter","t","result","reject","all","_t$errorList","validateRowData","_ref2","_props$onRowValidate","tTrigger","onRowValidate","call","trigger","validateTableData","promiseList","i","len","push","rList","_props$onValidate","allErrorListMap","_ref3","arguments","undefined","Object","assign","onValidate","onRuleChange","context","index","findIndex","set","clearValidateData"],"mappings":"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"}