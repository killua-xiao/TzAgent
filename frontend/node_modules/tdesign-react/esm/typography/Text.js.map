{"version":3,"file":"Text.js","sources":["../../../components/typography/Text.tsx"],"sourcesContent":["import React, { ReactElement, useRef, forwardRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { CheckIcon, CopyIcon } from 'tdesign-icons-react';\n\nimport Ellipsis from './ellipsis/Ellipsis';\nimport useConfig from '../hooks/useConfig';\nimport useEllipsis from './ellipsis/useEllipsis';\nimport Button from '../button/Button';\nimport Tooltip from '../tooltip';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport { textDefaultProps } from './defaultProps';\nimport copyText from '../_util/copyText';\n\nimport type { StyledProps } from '../common';\nimport type { TdTextProps } from './type';\n\nexport type TypographyTextProps = TdTextProps &\n  StyledProps & {\n    children: React.ReactNode;\n  };\n\nconst Text = forwardRef<HTMLSpanElement, TypographyTextProps>((originalProps, ref) => {\n  const { classPrefix } = useConfig();\n  const props = useDefaultProps<TypographyTextProps>(originalProps, textDefaultProps);\n\n  const prefixCls = `${classPrefix}-typography`;\n\n  const [local, t] = useLocaleReceiver('typography');\n  const copiedText = t(local.copiedText);\n\n  const {\n    theme,\n    disabled,\n    className,\n    copyable,\n    strong,\n    mark,\n    code,\n    keyboard,\n    underline,\n    delete: deleteProp,\n    italic,\n    children,\n    ellipsis,\n    ...rest\n  } = props;\n\n  const getComponent = () => {\n    const componentMap = {\n      strong: !!strong,\n      mark: !!mark,\n      code: !!code,\n      kbd: !!keyboard,\n      u: !!underline,\n      del: !!deleteProp,\n      i: !!italic,\n    };\n    return Object.entries(componentMap).find(([, condition]) => !!condition)?.[0] as keyof HTMLElementTagNameMap;\n  };\n\n  const currentRef = useRef(null);\n  const { ellipsisProps } = useEllipsis(ellipsis);\n  const Component = getComponent();\n\n  const textEllipsisProps = {\n    ...ellipsisProps,\n  };\n\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyProps =\n    typeof copyable === 'boolean'\n      ? {\n          text: children.toString(),\n          onCopy: Function.prototype,\n          tooltipProps: isCopied\n            ? {\n                content: copiedText,\n              }\n            : null,\n        }\n      : {\n          text: copyable?.text || children.toString(),\n          onCopy: copyable?.onCopy?.(),\n          tooltipProps: {\n            ...copyable?.tooltipProps,\n            content: isCopied ? copiedText : copyable?.tooltipProps?.content,\n          },\n          suffix: copyable?.suffix,\n        };\n\n  const handleCopy = () => {\n    copyText(copyProps?.text);\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 1500);\n    if (typeof copyProps.onCopy === 'function') copyProps.onCopy();\n  };\n\n  const renderContent = (withChildren: boolean) => {\n    const { tooltipProps } = copyProps;\n    const wrapWithTooltip = (wrapContent: React.ReactNode) =>\n      tooltipProps ? <Tooltip {...tooltipProps}>{wrapContent}</Tooltip> : wrapContent;\n\n    const getSuffix = (): ReactElement => {\n      if (typeof copyProps?.suffix === 'function') {\n        return copyProps.suffix({ copied: isCopied }) as ReactElement;\n      }\n      return isCopied ? <CheckIcon /> : <CopyIcon />;\n    };\n\n    return (\n      <>\n        {withChildren ? children : null}\n        {copyable\n          ? wrapWithTooltip(\n              <Button\n                shape=\"square\"\n                theme=\"primary\"\n                variant=\"text\"\n                icon={getSuffix() as ReactElement}\n                onClick={handleCopy}\n              />,\n            )\n          : null}\n      </>\n    );\n  };\n\n  if (!ellipsis) {\n    return Component ? (\n      <span className={classNames(className, prefixCls)} ref={ref || currentRef} {...rest}>\n        {/* @ts-ignore */}\n        <Component>{renderContent(true)}</Component>\n      </span>\n    ) : (\n      <span\n        className={classNames(className, {\n          [`${prefixCls}--${theme}`]: theme,\n          [`${prefixCls}--disabled`]: disabled,\n        })}\n        {...rest}\n      >\n        {renderContent(true)}\n      </span>\n    );\n  }\n\n  return (\n    <>\n      {Component ? (\n        <span className={classNames(className, prefixCls)} ref={ref || currentRef} {...rest}>\n          <Ellipsis {...textEllipsisProps} component={Component}>\n            {children}\n          </Ellipsis>\n        </span>\n      ) : (\n        <Ellipsis\n          {...textEllipsisProps}\n          className={classNames(className, {\n            [`${prefixCls}--${theme}`]: theme,\n            [`${prefixCls}--disabled`]: disabled,\n          })}\n          {...rest}\n        >\n          {children}\n        </Ellipsis>\n      )}\n      {renderContent(false)}\n    </>\n  );\n});\n\nexport default Text;\n"],"names":["Text","forwardRef","originalProps","ref","_copyable$onCopy","_copyable$tooltipProp","_useConfig","useConfig","classPrefix","props","useDefaultProps","textDefaultProps","prefixCls","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","_slicedToArray","local","t","copiedText","theme","disabled","className","copyable","strong","mark","code","keyboard","underline","deleteProp","italic","children","ellipsis","rest","_objectWithoutProperties","_excluded","getComponent","_Object$entries$find","componentMap","kbd","u","del","i","Object","entries","find","_ref","_ref2","condition","currentRef","useRef","_useEllipsis","useEllipsis","ellipsisProps","Component","textEllipsisProps","_objectSpread","_useState","useState","_useState2","isCopied","setIsCopied","copyProps","text","toString","onCopy","Function","prototype","tooltipProps","content","call","suffix","handleCopy","copyText","setTimeout","renderContent","withChildren","wrapWithTooltip","wrapContent","React","createElement","Tooltip","getSuffix","copied","CheckIcon","CopyIcon","Fragment","Button","shape","variant","icon","onClick","classNames","_defineProperty","concat","Ellipsis","component"],"mappings":"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"}