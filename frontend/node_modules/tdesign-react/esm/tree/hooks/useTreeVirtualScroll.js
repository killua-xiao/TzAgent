/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { useMemo, useEffect } from 'react';
import useVirtualScroll from '../../hooks/useVirtualScroll.js';
import useEventCallback from '../../hooks/useEventCallback.js';
import '../../_chunks/dep-48805ab8.js';
import '../../_chunks/dep-026a4c6b.js';
import 'lodash-es';
import '../../_util/noop.js';

function useTreeVirtualScroll(_ref) {
  var treeRef = _ref.treeRef,
    scroll = _ref.scroll,
    _ref$data = _ref.data,
    data = _ref$data === void 0 ? [] : _ref$data,
    onScroll = _ref.onScroll;
  var scrollThreshold = (scroll === null || scroll === void 0 ? void 0 : scroll.threshold) || 100;
  var scrollType = scroll === null || scroll === void 0 ? void 0 : scroll.type;
  var isVirtual = useMemo(function () {
    return scrollType === "virtual" && (data === null || data === void 0 ? void 0 : data.length) > scrollThreshold;
  }, [scrollType, scrollThreshold, data]);
  var scrollParams = useMemo(function () {
    return {
      type: "virtual",
      isFixedRowHeight: (scroll === null || scroll === void 0 ? void 0 : scroll.isFixedRowHeight) || false,
      rowHeight: (scroll === null || scroll === void 0 ? void 0 : scroll.rowHeight) || 34,
      bufferSize: (scroll === null || scroll === void 0 ? void 0 : scroll.bufferSize) || 20,
      threshold: scrollThreshold
    };
  }, [scroll, scrollThreshold]);
  var _useVirtualScroll = useVirtualScroll(treeRef, {
      data: data || [],
      scroll: scrollParams
    }),
    _useVirtualScroll$vis = _useVirtualScroll.visibleData,
    visibleData = _useVirtualScroll$vis === void 0 ? null : _useVirtualScroll$vis,
    _useVirtualScroll$han = _useVirtualScroll.handleScroll,
    handleVirtualScroll = _useVirtualScroll$han === void 0 ? null : _useVirtualScroll$han,
    _useVirtualScroll$scr = _useVirtualScroll.scrollHeight,
    scrollHeight = _useVirtualScroll$scr === void 0 ? null : _useVirtualScroll$scr,
    _useVirtualScroll$tra = _useVirtualScroll.translateY,
    translateY = _useVirtualScroll$tra === void 0 ? null : _useVirtualScroll$tra,
    _useVirtualScroll$han2 = _useVirtualScroll.handleRowMounted,
    handleRowMounted = _useVirtualScroll$han2 === void 0 ? null : _useVirtualScroll$han2,
    scrollToElement = _useVirtualScroll.scrollToElement;
  var lastScrollY = -1;
  var onInnerVirtualScroll = useEventCallback(function (e) {
    onScroll === null || onScroll === void 0 || onScroll({
      e: e
    });
    if (!isVirtual) {
      return;
    }
    var target = e.target;
    var top = target.scrollTop;
    if (lastScrollY !== top) {
      handleVirtualScroll();
    } else {
      lastScrollY = -1;
    }
    lastScrollY = top;
  });
  useEffect(function () {
    var _treeList$addEventLis;
    var treeList = treeRef === null || treeRef === void 0 ? void 0 : treeRef.current;
    treeList === null || treeList === void 0 || (_treeList$addEventLis = treeList.addEventListener) === null || _treeList$addEventLis === void 0 || _treeList$addEventLis.call(treeList, "scroll", onInnerVirtualScroll);
    return function () {
      var _treeList$removeEvent;
      treeList === null || treeList === void 0 || (_treeList$removeEvent = treeList.removeEventListener) === null || _treeList$removeEvent === void 0 || _treeList$removeEvent.call(treeList, "scroll", onInnerVirtualScroll);
    };
  }, [treeRef, onInnerVirtualScroll]);
  var cursorStyle = {
    position: "absolute",
    width: "1px",
    height: "1px",
    transition: "transform 0.2s",
    transform: "translate(0, ".concat(scrollHeight, "px)"),
    MsTransform: "translate(0, ".concat(scrollHeight, "px)"),
    MozTransform: "translate(0, ".concat(scrollHeight, "px)"),
    WebkitTransform: "translate(0, ".concat(scrollHeight, "px)")
  };
  var treeNodeStyle = {
    transform: "translate(0, ".concat(translateY, "px)"),
    MsTransform: "translate(0, ".concat(translateY, "px)"),
    MozTransform: "translate(0, ".concat(translateY, "px)"),
    WebkitTransform: "translate(0, ".concat(translateY, "px)")
  };
  return {
    scrollHeight: scrollHeight,
    translateY: translateY,
    visibleData: visibleData,
    handleRowMounted: handleRowMounted,
    isVirtual: isVirtual,
    cursorStyle: cursorStyle,
    treeNodeStyle: treeNodeStyle,
    scrollToElement: scrollToElement
  };
}

export { useTreeVirtualScroll as default };
//# sourceMappingURL=useTreeVirtualScroll.js.map
