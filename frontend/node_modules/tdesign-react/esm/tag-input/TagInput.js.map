{"version":3,"file":"TagInput.js","sources":["../../../components/tag-input/TagInput.tsx"],"sourcesContent":["import React, {\n  CompositionEvent,\n  forwardRef,\n  KeyboardEvent,\n  MouseEvent,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from 'react';\nimport { CloseCircleFilledIcon as TdCloseCircleFilledIcon } from 'tdesign-icons-react';\nimport classnames from 'classnames';\nimport { isFunction } from 'lodash-es';\nimport useConfig from '../hooks/useConfig';\nimport useControlled from '../hooks/useControlled';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport useDragSorter from '../hooks/useDragSorter';\nimport useGlobalIcon from '../hooks/useGlobalIcon';\nimport TInput, { type InputRef, type InputValue } from '../input';\nimport { tagInputDefaultProps } from './defaultProps';\nimport useHover from './useHover';\nimport useTagList from './useTagList';\nimport useTagScroll from './useTagScroll';\n\nimport type { TdTagInputProps } from './type';\nimport type { StyledProps } from '../common';\n\nexport interface TagInputProps extends TdTagInputProps, StyledProps {\n  options?: any[]; // 参数穿透options, 给SelectInput/SelectInput 自定义选中项呈现的内容和多选状态下设置折叠项内容\n}\n\nconst TagInput = forwardRef<InputRef, TagInputProps>((originalProps, ref) => {\n  const props = useDefaultProps<TagInputProps>(originalProps, tagInputDefaultProps);\n  const { classPrefix: prefix } = useConfig();\n  const { CloseCircleFilledIcon } = useGlobalIcon({\n    CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n  });\n\n  const {\n    excessTagsDisplayType,\n    autoWidth,\n    borderless,\n    readonly,\n    disabled,\n    clearable,\n    placeholder,\n    valueDisplay,\n    label,\n    inputProps,\n    size,\n    tips,\n    status,\n    suffixIcon,\n    suffix,\n    prefixIcon,\n    maxRows,\n    onClick,\n    onPaste,\n    onFocus,\n    onBlur,\n  } = props;\n\n  const [tInputValue, setTInputValue] = useControlled(props, 'inputValue', props.onInputChange);\n\n  const { isHover, addHover, cancelHover } = useHover(props);\n  const { getDragProps } = useDragSorter({\n    ...props,\n    sortOnDraggable: props.dragSort,\n    onDragOverCheck: {\n      x: true,\n      targetClassNameRegExp: new RegExp(`^${prefix}-tag`),\n    },\n  });\n  const isCompositionRef = useRef(false);\n\n  const { scrollToRight, onWheel, scrollToRightOnEnter, scrollToLeftOnLeave, tagInputRef } = useTagScroll(props);\n\n  // handle tag add and remove\n  const { tagValue, onClose, onInnerEnter, onInputBackspaceKeyUp, clearAll, renderLabel, onInputBackspaceKeyDown } =\n    useTagList({\n      ...props,\n      getDragProps,\n    });\n\n  const NAME_CLASS = `${prefix}-tag-input`;\n  const WITH_SUFFIX_ICON_CLASS = `${prefix}-tag-input__with-suffix-icon`;\n  const CLEAR_CLASS = `${prefix}-tag-input__suffix-clear`;\n  const BREAK_LINE_CLASS = `${prefix}-tag-input--break-line`;\n\n  const tagInputPlaceholder = !tagValue?.length ? placeholder : '';\n\n  const showClearIcon = Boolean(!readonly && !disabled && clearable && isHover && tagValue?.length);\n\n  useImperativeHandle(ref as InputRef, () => ({ ...(tagInputRef.current || {}) }));\n\n  const onInputCompositionstart = (value: InputValue, context: { e: CompositionEvent<HTMLInputElement> }) => {\n    isCompositionRef.current = true;\n    inputProps?.onCompositionstart?.(value, context);\n  };\n\n  const onInputCompositionend = (value: InputValue, context: { e: CompositionEvent<HTMLInputElement> }) => {\n    isCompositionRef.current = false;\n    inputProps?.onCompositionend?.(value, context);\n  };\n\n  const onInputEnter = (value: InputValue, context: { e: KeyboardEvent<HTMLInputElement> }) => {\n    setTInputValue('', { e: context.e, trigger: 'enter' });\n    !isCompositionRef.current && onInnerEnter(value, context);\n    scrollToRight();\n  };\n\n  const onInnerClick = (context: { e: MouseEvent<HTMLDivElement> }) => {\n    if (!props.disabled && !props.readonly) {\n      (tagInputRef.current as any)?.inputElement?.focus?.();\n    }\n    onClick?.(context);\n  };\n\n  const onClearClick = (e: MouseEvent<SVGSVGElement>) => {\n    clearAll({ e });\n    setTInputValue('', { e, trigger: 'clear' });\n    props.onClear?.({ e });\n  };\n\n  const suffixIconNode = showClearIcon ? (\n    <CloseCircleFilledIcon className={CLEAR_CLASS} onClick={onClearClick} />\n  ) : (\n    suffixIcon\n  );\n\n  // 自定义 Tag 节点\n  const displayNode = useMemo(\n    () =>\n      isFunction(valueDisplay)\n        ? valueDisplay({\n            value: tagValue,\n            onClose: (index) => onClose({ index }),\n          })\n        : valueDisplay,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [valueDisplay],\n  );\n\n  const isEmpty = !(Array.isArray(tagValue) && tagValue.length);\n\n  const classes = [\n    NAME_CLASS,\n    {\n      [BREAK_LINE_CLASS]: excessTagsDisplayType === 'break-line',\n      [WITH_SUFFIX_ICON_CLASS]: !!suffixIconNode,\n      [`${prefix}-is-empty`]: isEmpty,\n      [`${prefix}-tag-input--with-tag`]: !isEmpty,\n      [`${prefix}-tag-input--max-rows`]: excessTagsDisplayType === 'break-line' && maxRows,\n      [`${prefix}-tag-input--drag-sort`]: props.dragSort && !disabled && !readonly,\n    },\n    props.className,\n  ];\n\n  const maxRowsStyle = maxRows\n    ? ({\n        '--max-rows': maxRows,\n        '--tag-input-size': size,\n      } as React.CSSProperties)\n    : {};\n\n  return (\n    <TInput\n      ref={tagInputRef as React.RefObject<InputRef>}\n      value={tInputValue}\n      onChange={(val, context) => {\n        setTInputValue(val, { ...context, trigger: 'input' });\n      }}\n      autoWidth={true} // 控制input_inner的宽度 设置为true让内部input不会提前换行\n      onWheel={onWheel}\n      size={size}\n      borderless={borderless}\n      readonly={readonly}\n      disabled={disabled}\n      label={renderLabel({ displayNode, label })}\n      className={classnames(classes)}\n      style={{\n        ...props.style,\n        ...maxRowsStyle,\n      }}\n      tips={tips}\n      status={status}\n      placeholder={tagInputPlaceholder}\n      suffix={suffix}\n      prefixIcon={prefixIcon}\n      suffixIcon={suffixIconNode}\n      showInput={!inputProps?.readonly || !tagValue || !tagValue?.length}\n      keepWrapperWidth={!autoWidth}\n      onPaste={onPaste}\n      onClick={onInnerClick}\n      onEnter={onInputEnter}\n      onKeydown={onInputBackspaceKeyDown}\n      onKeyup={onInputBackspaceKeyUp}\n      onMouseenter={(context) => {\n        addHover(context);\n        scrollToRightOnEnter();\n      }}\n      onMouseleave={(context) => {\n        cancelHover(context);\n        scrollToLeftOnLeave();\n      }}\n      onFocus={(inputValue, context) => {\n        onFocus?.(tagValue, { e: context.e, inputValue });\n      }}\n      onBlur={(inputValue, context) => {\n        if (tInputValue) {\n          setTInputValue('', { e: context.e, trigger: 'blur' });\n        }\n        onBlur?.(tagValue, { e: context.e, inputValue: '' });\n      }}\n      onCompositionstart={onInputCompositionstart}\n      onCompositionend={onInputCompositionend}\n      {...inputProps}\n    />\n  );\n});\n\nTagInput.displayName = 'TagInput';\n\nexport default TagInput;\n"],"names":["TagInput","forwardRef","originalProps","ref","props","useDefaultProps","tagInputDefaultProps","_useConfig","useConfig","prefix","classPrefix","_useGlobalIcon","useGlobalIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","excessTagsDisplayType","autoWidth","borderless","readonly","disabled","clearable","placeholder","valueDisplay","label","inputProps","size","tips","status","suffixIcon","suffix","prefixIcon","maxRows","onClick","onPaste","onFocus","onBlur","_useControlled","useControlled","onInputChange","_useControlled2","_slicedToArray","tInputValue","setTInputValue","_useHover","useHover","isHover","addHover","cancelHover","_useDragSorter","useDragSorter","_objectSpread","sortOnDraggable","dragSort","onDragOverCheck","x","targetClassNameRegExp","RegExp","concat","getDragProps","isCompositionRef","useRef","_useTagScroll","useTagScroll","scrollToRight","onWheel","scrollToRightOnEnter","scrollToLeftOnLeave","tagInputRef","_useTagList","useTagList","tagValue","onClose","onInnerEnter","onInputBackspaceKeyUp","clearAll","renderLabel","onInputBackspaceKeyDown","NAME_CLASS","WITH_SUFFIX_ICON_CLASS","CLEAR_CLASS","BREAK_LINE_CLASS","tagInputPlaceholder","length","showClearIcon","Boolean","useImperativeHandle","current","onInputCompositionstart","value","context","_inputProps$onComposi","onCompositionstart","call","onInputCompositionend","_inputProps$onComposi2","onCompositionend","onInputEnter","e","trigger","onInnerClick","_tagInputRef$current","_tagInputRef$current$","inputElement","focus","onClearClick","_props$onClear","onClear","suffixIconNode","React","createElement","className","displayNode","useMemo","isFunction","index","isEmpty","Array","isArray","classes","_defineProperty","maxRowsStyle","TInput","onChange","val","classnames","style","showInput","keepWrapperWidth","onEnter","onKeydown","onKeyup","onMouseenter","onMouseleave","inputValue","displayName"],"mappings":"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"}