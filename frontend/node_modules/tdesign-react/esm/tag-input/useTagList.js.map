{"version":3,"file":"useTagList.js","sources":["../../../components/tag-input/useTagList.tsx"],"sourcesContent":["import React, { useState, MouseEvent, KeyboardEvent, ReactNode, Fragment } from 'react';\nimport { isFunction } from 'lodash-es';\nimport { TagInputChangeContext, TagInputValue, TdTagInputProps } from './type';\nimport { InputValue } from '../input';\nimport Tag from '../tag';\nimport useConfig from '../hooks/useConfig';\nimport useControlled from '../hooks/useControlled';\nimport { DragSortInnerProps } from '../hooks/useDragSorter';\n\nexport type ChangeParams = [TagInputChangeContext];\n\ninterface TagInputProps extends TdTagInputProps, DragSortInnerProps {\n  options?: any[]; // 参数穿透options, 给SelectInput/SelectInput 自定义选中项呈现的内容和多选状态下设置折叠项内容\n}\n\n// handle tag add and remove\nexport default function useTagList(props: TagInputProps) {\n  const { classPrefix: prefix } = useConfig();\n  const { onRemove, max, minCollapsedNum, size, disabled, readonly, tagProps, tag, collapsedItems, getDragProps } =\n    props;\n  // handle controlled property and uncontrolled property\n  const [tagValue, setTagValue] = useControlled(props, 'value', props.onChange);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [oldInputValue, setOldInputValue] = useState<InputValue>();\n\n  // 点击标签关闭按钮，删除标签\n  const onClose = (p: { e?: MouseEvent<SVGSVGElement>; index: number }) => {\n    const arr = [...tagValue];\n    const [item] = arr.splice(p.index, 1);\n    setTagValue(arr, { trigger: 'tag-remove', ...p, item });\n    onRemove?.({ ...p, item, trigger: 'tag-remove', value: arr });\n  };\n\n  const clearAll = (context: { e: MouseEvent<SVGSVGElement> }) => {\n    setTagValue([], { trigger: 'clear', e: context.e });\n  };\n\n  // 按下 Enter 键，新增标签\n  const onInnerEnter = (value: InputValue, context: { e: KeyboardEvent<HTMLInputElement> }) => {\n    const valueStr = value ? String(value).trim() : '';\n    let newValue: TagInputValue = tagValue;\n    const isLimitExceeded = max && tagValue?.length >= max;\n    if (valueStr && !isLimitExceeded) {\n      newValue = tagValue instanceof Array ? tagValue.concat(String(valueStr)) : [valueStr];\n      setTagValue(newValue, {\n        trigger: 'enter',\n        index: newValue.length - 1,\n        item: valueStr,\n        e: context.e,\n      });\n    }\n    props?.onEnter?.(newValue, { ...context, inputValue: value });\n  };\n\n  const onInputBackspaceKeyUp = (value: InputValue) => {\n    if (!tagValue || !tagValue.length) return;\n    setOldInputValue(value);\n  };\n  // 按下回退键，删除标签\n  const onInputBackspaceKeyDown = (value: InputValue, context: { e: KeyboardEvent<HTMLInputElement> }) => {\n    const { e } = context;\n    if (!tagValue || !tagValue.length || readonly) return;\n    // 回车键删除，输入框值为空时，才允许 Backspace 删除标签\n    if (!value && ['Backspace', 'NumpadDelete'].includes(e.key)) {\n      const index = tagValue.length - 1;\n      const item = tagValue[index];\n      const trigger = 'backspace';\n      const newValue = tagValue.slice(0, -1);\n      setTagValue(newValue, { e, index, item, trigger });\n      onRemove?.({ e, index, item, trigger, value: newValue });\n    }\n  };\n\n  const renderLabel = ({ displayNode, label }: { displayNode: ReactNode; label: ReactNode }) => {\n    const newList = minCollapsedNum ? tagValue.slice(0, minCollapsedNum) : tagValue;\n\n    const list = displayNode\n      ? [<Fragment key=\"display-node\">{displayNode}</Fragment>]\n      : newList?.map((item, index) => {\n          const tagContent = isFunction(tag) ? tag({ value: item }) : tag;\n          return (\n            <Tag\n              key={index}\n              size={size}\n              disabled={disabled}\n              onClose={(context) => onClose({ e: context.e, index })}\n              closable={!readonly && !disabled}\n              {...getDragProps?.(index, item)}\n              {...tagProps}\n            >\n              {tagContent ?? item}\n            </Tag>\n          );\n        });\n    if (label) {\n      list?.unshift(\n        <div className={`${prefix}-tag-input__prefix`} key=\"label\">\n          {label}\n        </div>,\n      );\n    }\n    // 超出省略\n    if (newList.length !== tagValue.length) {\n      const len = tagValue.length - newList.length;\n      // 这里会从selectInput/SelectInput中传递options参数，用于自定义选中项呈现的内容和多选状态下设置折叠项内容\n      const options = Array.isArray(props?.options) ? props.options : tagValue;\n      const params = {\n        value: tagValue,\n        count: tagValue.length - minCollapsedNum,\n        collapsedTags: tagValue.slice(minCollapsedNum, tagValue.length),\n        collapsedSelectedItems: options.slice(minCollapsedNum, tagValue.length),\n        onClose,\n      };\n      const more = isFunction(collapsedItems) ? collapsedItems(params) : collapsedItems;\n      list.push(\n        <Fragment key=\"more\">\n          {more ?? (\n            <Tag size={size} {...tagProps}>\n              +{len}\n            </Tag>\n          )}\n        </Fragment>,\n      );\n    }\n    return list;\n  };\n\n  return {\n    tagValue,\n    clearAll,\n    onClose,\n    onInnerEnter,\n    onInputBackspaceKeyDown,\n    onInputBackspaceKeyUp,\n    renderLabel,\n  };\n}\n"],"names":["useTagList","props","_useConfig","useConfig","prefix","classPrefix","onRemove","max","minCollapsedNum","size","disabled","readonly","tagProps","tag","collapsedItems","getDragProps","_useControlled","useControlled","onChange","_useControlled2","_slicedToArray","tagValue","setTagValue","_useState","useState","_useState2","oldInputValue","setOldInputValue","onClose","p","arr","_toConsumableArray","_arr$splice","splice","index","_arr$splice2","item","trigger","_objectSpread","value","clearAll","context","e","onInnerEnter","_props$onEnter","valueStr","String","trim","newValue","isLimitExceeded","length","Array","concat","onEnter","call","inputValue","onInputBackspaceKeyUp","onInputBackspaceKeyDown","includes","key","slice","renderLabel","_ref","displayNode","label","newList","list","React","createElement","Fragment","map","tagContent","isFunction","Tag","closable","unshift","className","len","options","isArray","params","count","collapsedTags","collapsedSelectedItems","more","push"],"mappings":"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"}