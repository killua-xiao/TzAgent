{"version":3,"file":"useInstance.js","sources":["../../../../components/form/hooks/useInstance.tsx"],"sourcesContent":["import { isEmpty, isFunction, isEqual, merge, get, set } from 'lodash-es';\nimport log from '@tdesign/common-js/log/index';\nimport type {\n  TdFormProps,\n  FormValidateResult,\n  FormResetParams,\n  FormValidateMessage,\n  AllValidateResult,\n  NamePath,\n} from '../type';\nimport useConfig from '../../hooks/useConfig';\nimport { getMapValue, objectToArray, travelMapFromObject, calcFieldValue } from '../utils';\n\n// 检测是否需要校验 默认全量校验\nfunction needValidate(name: NamePath, fields: string[]) {\n  if (!fields || !Array.isArray(fields)) return true;\n  return fields.some((item) => String(item) === String(name));\n}\n\n// 整理校验结果\nfunction formatValidateResult(validateResultList) {\n  const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\n  Object.keys(result).forEach((key) => {\n    if (result[key] === true) {\n      delete result[key];\n    } else {\n      result[key] = result[key].filter((fr: AllValidateResult) => fr.result === false);\n    }\n\n    // 整理嵌套数据\n    if (result[key] && key.includes(',')) {\n      const keyList = key.split(',');\n      const fieldValue = calcFieldValue(keyList, result[key]);\n      merge(result, fieldValue);\n      delete result[key];\n    }\n  });\n  return isEmpty(result) ? true : result;\n}\n\nexport default function useInstance(\n  props: TdFormProps,\n  formRef,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n  floatingFormDataRef: React.RefObject<Record<any, any>>,\n) {\n  const { classPrefix } = useConfig();\n\n  const { scrollToFirstError, preventSubmitDefault = true, onSubmit, onReset } = props;\n\n  // 获取第一个错误表单\n  function getFirstError(r: FormValidateResult<FormData>) {\n    if (r === true) return;\n    const [firstKey] = Object.keys(r);\n    if (scrollToFirstError) {\n      scrollTo(`.${classPrefix}-form--has-error`);\n    }\n    return r[firstKey][0]?.message;\n  }\n\n  // 校验不通过时，滚动到第一个错误表单\n  function scrollTo(selector: string) {\n    const dom = formRef.current.querySelector?.(selector);\n    const behavior = scrollToFirstError as ScrollBehavior;\n    dom && dom.scrollIntoView({ behavior });\n  }\n\n  // 对外方法 手动提交表单\n  function submit(e?: React.FormEvent<HTMLFormElement>) {\n    if (preventSubmitDefault) {\n      e?.preventDefault?.();\n      e?.stopPropagation?.();\n    }\n    validate().then((r) => {\n      const firstError = getFirstError(r);\n      const fields = getFieldsValue(true);\n      onSubmit?.({ validateResult: r, firstError, e, fields });\n    });\n  }\n\n  // 对外方法，该方法会触发全部表单组件错误信息显示\n  async function validate(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    const { fields, trigger = 'all', showErrorMessage } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) => isFunction(formItemRef?.current?.validate) && needValidate(formItemRef?.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef?.current.validate(trigger, showErrorMessage));\n\n    const validateList = await Promise.all(list);\n    return formatValidateResult(validateList);\n  }\n\n  // 对外方法，该方法只会校验不会触发信息提示\n  async function validateOnly(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    const { fields, trigger = 'all' } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) =>\n          isFunction(formItemRef?.current?.validateOnly) && needValidate(formItemRef?.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef?.current.validateOnly?.(trigger));\n\n    const validateList = await Promise.all(list);\n    return formatValidateResult(validateList);\n  }\n\n  // 对外方法，获取对应 formItem 的值\n  function getFieldValue(name: NamePath) {\n    if (!name) return null;\n\n    const formItemRef = getMapValue(name, formMapRef);\n    return formItemRef?.current?.getValue?.();\n  }\n\n  // 对外方法，获取一组字段名对应的值，当调用 getFieldsValue(true) 时返回所有值\n  function getFieldsValue(nameList: string[] | boolean) {\n    const fieldsValue = {};\n\n    if (nameList === true) {\n      // 嵌套数组子节点先添加导致外层数据覆盖因而需要倒序遍历\n      for (const [name, formItemRef] of [...formMapRef.current.entries()].reverse()) {\n        let fieldValue = null;\n        if (formItemRef?.current.isFormList) {\n          fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.());\n        } else {\n          fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.(), !props.supportNumberKey);\n        }\n        merge(fieldsValue, fieldValue);\n      }\n    } else {\n      if (!Array.isArray(nameList)) {\n        log.error('Form', '`getFieldsValue` 参数需要 Array 类型');\n        return {};\n      }\n\n      nameList.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        if (!formItemRef) return;\n\n        const fieldValue = calcFieldValue(name, formItemRef?.current.getValue?.());\n        merge(fieldsValue, fieldValue);\n      });\n    }\n    return fieldsValue;\n  }\n\n  // 对外方法，设置对应 formItem 的值\n  function setFieldsValue(fields = {}) {\n    const nameLists = objectToArray(fields);\n\n    nameLists.forEach((nameList) => {\n      const fieldValue = get(fields, nameList);\n\n      let formItemRef;\n      if (nameList.length > 1) {\n        // 如果是数组，由于内存地址不一致，不能直接使用 Map.get 获取到 formItemRef\n        for (const [mapNameList, _formItemRef] of formMapRef.current.entries()) {\n          if (isEqual(nameList, mapNameList)) {\n            formItemRef = _formItemRef;\n            break;\n          }\n        }\n      } else {\n        formItemRef = formMapRef.current.get(nameList[0]);\n      }\n\n      if (formItemRef?.current) {\n        formItemRef?.current?.setValue?.(fieldValue, fields);\n      } else {\n        set(floatingFormDataRef.current, nameList, fieldValue);\n      }\n    });\n  }\n\n  // 对外方法，设置对应 formItem 的数据\n  function setFields(fields = []) {\n    if (!Array.isArray(fields)) throw new Error('setFields 参数需要 Array 类型');\n\n    fields.forEach((field) => {\n      const { name, ...restFields } = field;\n      const formItemRef = getMapValue(name, formMapRef);\n\n      formItemRef?.current?.setField(restFields, field);\n    });\n  }\n\n  // 对外方法，重置对应 formItem 的数据\n  function reset(params: FormResetParams<FormData>) {\n    // reset all\n    if (typeof params === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetField();\n      });\n    } else {\n      const { type = 'initial', fields = [] } = params;\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetField(type);\n      });\n    }\n    onReset?.({});\n  }\n\n  // 对外方法，重置对应 formItem 的状态\n  function clearValidate(fields?: Array<keyof FormData>) {\n    // reset all\n    if (typeof fields === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetValidate();\n      });\n    } else {\n      if (!Array.isArray(fields)) throw new Error('clearValidate 参数需要 Array 类型');\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetValidate();\n      });\n    }\n  }\n\n  // 对外方法，设置 formItem 的错误信息\n  function setValidateMessage(message: FormValidateMessage<FormData>) {\n    travelMapFromObject(message, formMapRef, (formItemRef, fieldValue) => {\n      formItemRef?.current?.setValidateMessage?.(fieldValue);\n    });\n  }\n\n  // 对外方法，获取 formItem 的错误信息\n  function getValidateMessage(fields?: Array<keyof FormData>) {\n    const message = {};\n\n    if (typeof fields === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        const item = formItemRef?.current?.getValidateMessage?.();\n        if (isEmpty(item)) return;\n        message[formItemRef?.current?.name] = item;\n      });\n    } else {\n      if (!Array.isArray(fields)) throw new Error('getValidateMessage 参数需要 Array 类型');\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        const item = formItemRef?.current?.getValidateMessage?.();\n        if (isEmpty(item)) return;\n        message[formItemRef?.current?.name] = item;\n      });\n    }\n\n    if (isEmpty(message)) return;\n\n    return message;\n  }\n\n  return {\n    submit,\n    reset,\n    validate,\n    validateOnly,\n    clearValidate,\n    setFields,\n    setFieldsValue,\n    setValidateMessage,\n    getValidateMessage,\n    getFieldValue,\n    getFieldsValue,\n    currentElement: formRef.current,\n    getCurrentElement: () => formRef.current,\n  };\n}\n"],"names":["needValidate","name","fields","Array","isArray","some","item","String","formatValidateResult","validateResultList","result","reduce","r","err","Object","assign","keys","forEach","key","filter","fr","includes","keyList","split","fieldValue","calcFieldValue","merge","isEmpty","useInstance","props","formRef","formMapRef","floatingFormDataRef","_useConfig","useConfig","classPrefix","scrollToFirstError","_props$preventSubmitD","preventSubmitDefault","onSubmit","onReset","getFirstError","_r$firstKey$","_Object$keys","_Object$keys2","_slicedToArray","firstKey","scrollTo","concat","message","selector","_formRef$current$quer","_formRef$current","dom","current","querySelector","call","behavior","scrollIntoView","submit","e","_e$preventDefault","_e$stopPropagation","preventDefault","stopPropagation","validate","then","firstError","getFieldsValue","validateResult","_callee","param","_ref","_ref$trigger","trigger","showErrorMessage","list","validateList","_regeneratorRuntime","wrap","_context","prev","next","_toConsumableArray","values","formItemRef","_formItemRef$current16","_formItemRef$current17","isFunction","map","Promise","all","sent","abrupt","stop","_validate","apply","arguments","validateOnly","_callee2","_ref2","_ref2$trigger","_context2","_formItemRef$current18","_formItemRef$current19","_formItemRef$current$5","_formItemRef$current20","_validateOnly","getFieldValue","_formItemRef$current","_formItemRef$current$","getMapValue","getValue","nameList","fieldsValue","_iterator","_createForOfIteratorHelper","entries","reverse","_step","s","n","done","_step$value","value","isFormList","_formItemRef$current$2","_formItemRef$current2","_formItemRef$current$3","_formItemRef$current3","supportNumberKey","f","log","error","_formItemRef$current$4","_formItemRef$current4","setFieldsValue","length","undefined","nameLists","objectToArray","_formItemRef2","get","_iterator2","_step2","_step2$value","mapNameList","_formItemRef","isEqual","_formItemRef3","_formItemRef3$setValu","setValue","set","setFields","Error","field","_formItemRef$current5","restFields","_objectWithoutProperties","_excluded","setField","reset","params","_formItemRef$current6","resetField","_params$type","type","_params$fields","_formItemRef$current7","clearValidate","_formItemRef$current8","resetValidate","_formItemRef$current9","setValidateMessage","travelMapFromObject","_formItemRef$current0","_formItemRef$current1","getValidateMessage","_formItemRef$current10","_formItemRef$current11","_formItemRef$current12","_formItemRef$current13","_formItemRef$current14","_formItemRef$current15","currentElement","getCurrentElement"],"mappings":"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"}