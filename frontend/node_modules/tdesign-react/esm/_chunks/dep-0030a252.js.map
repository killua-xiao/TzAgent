{"version":3,"file":"dep-0030a252.js","sources":["../../../components/checkbox/CheckboxGroup.tsx","../../../components/checkbox/Checkbox.tsx"],"sourcesContent":["import React, { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { isNumber } from 'lodash-es';\nimport useConfig from '../hooks/useConfig';\nimport { CheckContext, CheckContextValue, CheckProps } from '../common/Check';\nimport { CheckboxGroupValue, CheckboxOption, CheckboxOptionObj, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { StyledProps } from '../common';\nimport useControlled from '../hooks/useControlled';\nimport Checkbox from './Checkbox';\nimport { checkboxGroupDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nimport type { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxGroupProps<T extends CheckboxGroupValue = CheckboxGroupValue>\n  extends TdCheckboxGroupProps<T>,\n    StyledProps {\n  children?: React.ReactNode;\n}\n\n// 将 checkBox 的 value 转换为 string|number\nconst getCheckboxValue = (v: CheckboxOption): string | number => {\n  switch (typeof v) {\n    case 'number':\n      return v as number;\n    case 'string':\n      return v as string;\n    case 'object': {\n      const vs = v as CheckboxOptionObj;\n      return vs.value;\n    }\n    default:\n      return undefined;\n  }\n};\n\n/**\n * 多选选项组，里面可以嵌套 <Checkbox />\n */\nconst CheckboxGroup = <T extends CheckboxGroupValue = CheckboxGroupValue>(props: CheckboxGroupProps<T>) => {\n  type ItemType = T[number];\n  const { classPrefix } = useConfig();\n  const {\n    onChange,\n    disabled,\n    className,\n    style,\n    children,\n    max,\n    options = [],\n  } = useDefaultProps<CheckboxGroupProps<T>>(props, checkboxGroupDefaultProps);\n\n  // 去掉所有 checkAll 之后的 options\n  const intervalOptions =\n    Array.isArray(options) && options.length > 0\n      ? options\n      : React.Children.map(\n          children,\n          (child: ReactElement<CheckboxProps>) =>\n            (child?.type as any)?.displayName === Checkbox.displayName && child.props,\n        ) || [];\n\n  const optionsWithoutCheckAll = intervalOptions.filter((t) => typeof t !== 'object' || !t.checkAll);\n  const optionsWithoutCheckAllValues = [];\n  optionsWithoutCheckAll.forEach((v: string | number) => {\n    const vs = getCheckboxValue(v);\n    optionsWithoutCheckAllValues.push(vs);\n  });\n\n  const [internalValue, setInternalValue] = useControlled(props, 'value', onChange);\n  const [localMax, setLocalMax] = useState(max);\n\n  const getCheckedSet = useCallback(() => {\n    if (!Array.isArray(internalValue)) {\n      return new Set<ItemType>([]);\n    }\n    return new Set<ItemType>([].concat(internalValue));\n  }, [internalValue]);\n  const checkedSet = useMemo(() => getCheckedSet(), [getCheckedSet]);\n\n  // 用于决定全选状态的属性\n  const indeterminate = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  const checkAllChecked = useMemo(() => {\n    const list = Array.from(checkedSet);\n    return list.length === optionsWithoutCheckAll.length;\n  }, [checkedSet, optionsWithoutCheckAll]);\n\n  useEffect(() => {\n    if (!isNumber(max)) {\n      return;\n    }\n    if (max < checkedSet.size) {\n      console.warn('[TDesign] max should be less than the length of value, change is invalid');\n    } else {\n      setLocalMax(max);\n    }\n  }, [max, checkedSet]);\n\n  const context: CheckContextValue = {\n    inject: (\n      checkProps: CheckProps & {\n        // check 组件不关心 value 的类型，只关心是否存在，所以为了兼容 checkbox group 的类型\n        // 此处覆盖 checkbox 默认 value 的类型，使用 checkbox group 的 generic type 代替\n        value: ItemType;\n      },\n    ) => {\n      // 如果已经受控，则不注入\n      if (typeof checkProps.checked !== 'undefined') {\n        return checkProps;\n      }\n\n      const { value: checkValue } = checkProps;\n\n      return {\n        ...checkProps,\n        checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),\n        indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,\n        disabled: checkProps.disabled || disabled || (checkedSet.size >= localMax && !checkedSet.has(checkValue)),\n        onChange(checked, { e }) {\n          if (typeof checkProps.onChange === 'function') {\n            checkProps.onChange(checked, { e });\n          }\n\n          const checkedSet = getCheckedSet();\n          // 全选时的逻辑处理\n          if (checkProps.checkAll) {\n            checkedSet.clear();\n            if (checked) {\n              optionsWithoutCheckAllValues.forEach((v) => {\n                checkedSet.add(v);\n              });\n            }\n          } else if (checked) {\n            if (checkedSet.size >= localMax && isNumber(max)) return;\n            checkedSet.add(checkValue);\n          } else {\n            checkedSet.delete(checkValue);\n          }\n\n          const currentOptionChecked = optionsWithoutCheckAll.find((item: CheckboxProps) => item.value === checkValue);\n\n          // 此处 `as` 是因为 `Array.from` 会导致 `checkSet` 的 generic type 丢失\n          setInternalValue(Array.from(checkedSet) as T, {\n            e,\n            current: checkProps.checkAll ? undefined : (checkValue as TdCheckboxProps),\n            type: checked ? 'check' : 'uncheck',\n            option: checkProps.checkAll ? undefined : currentOptionChecked,\n          });\n        },\n      };\n    },\n  };\n\n  // options 和 children 的抉择,在未明确说明时，暂时以 options 优先\n  const useOptions = Array.isArray(options) && options.length !== 0;\n\n  return (\n    <div className={classNames(`${classPrefix}-checkbox-group`, className)} style={style}>\n      <CheckContext.Provider value={context}>\n        {useOptions\n          ? options.map((v: any, index) => {\n              switch (typeof v) {\n                case 'string':\n                  return (\n                    <Checkbox key={index} label={v} value={v}>\n                      {v}\n                    </Checkbox>\n                  );\n                case 'number': {\n                  return (\n                    <Checkbox key={index} label={v} value={v}>\n                      {String(v)}\n                    </Checkbox>\n                  );\n                }\n                case 'object': {\n                  const vs = v as CheckboxOptionObj;\n                  // CheckAll 的 checkBox 不存在 value,故用 checkAll_index 来保证尽量不和用户的 value 冲突.\n                  return vs.checkAll ? (\n                    <Checkbox {...vs} key={`checkAll_${index}`} indeterminate={indeterminate} />\n                  ) : (\n                    <Checkbox {...vs} key={index} disabled={vs.disabled || disabled} />\n                  );\n                }\n                default:\n                  return null;\n              }\n            })\n          : children}\n      </CheckContext.Provider>\n    </div>\n  );\n};\n\nCheckboxGroup.displayName = 'CheckboxGroup';\n\nexport default CheckboxGroup;\n","import React from 'react';\nimport forwardRefWithStatics from '../_util/forwardRefWithStatics';\nimport Check, { CheckProps } from '../common/Check';\nimport CheckboxGroup from './CheckboxGroup';\nimport { checkboxDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport type CheckboxProps = Omit<CheckProps, 'type'>;\n\nconst Checkbox = forwardRefWithStatics(\n  (props: CheckboxProps, ref: React.Ref<HTMLLabelElement>) => (\n    <Check ref={ref} type=\"checkbox\" {...useDefaultProps<CheckboxProps>(props, checkboxDefaultProps)} />\n  ),\n  { Group: CheckboxGroup },\n);\n\nCheckbox.displayName = 'Checkbox';\n\nexport default Checkbox;\n"],"names":["getCheckboxValue","v","_typeof","vs","value","CheckboxGroup","props","_useConfig","useConfig","classPrefix","_useDefaultProps","useDefaultProps","checkboxGroupDefaultProps","onChange","disabled","className","style","children","max","_useDefaultProps$opti","options","intervalOptions","Array","isArray","length","React","Children","map","child","_child$type","type","displayName","Checkbox","optionsWithoutCheckAll","filter","t","checkAll","optionsWithoutCheckAllValues","forEach","push","_useControlled","useControlled","_useControlled2","_slicedToArray","internalValue","setInternalValue","_useState","useState","_useState2","localMax","setLocalMax","getCheckedSet","useCallback","Set","concat","checkedSet","useMemo","indeterminate","list","from","checkAllChecked","useEffect","isNumber","size","console","warn","context","inject","checkProps","checked","checkValue","_objectSpread","has","_ref","e","clear","add","currentOptionChecked","find","item","current","option","useOptions","createElement","classNames","CheckContext","Provider","index","key","label","String","forwardRefWithStatics","ref","Check","checkboxDefaultProps","Group"],"mappings":"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"}