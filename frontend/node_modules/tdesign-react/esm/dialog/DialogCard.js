/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React, { isValidElement, forwardRef } from 'react';
import classNames from 'classnames';
import { isString, isObject, isFunction } from 'lodash-es';
import { CloseIcon, InfoCircleFilledIcon, CheckCircleFilledIcon } from 'tdesign-icons-react';
import { Button } from '../button/index.js';
import parseTNode from '../_util/parseTNode.js';
import useConfig from '../hooks/useConfig.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { dialogCardDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-eca3a3de.js';
import '../button/Button.js';
import '../hooks/useDomRefCallback.js';
import '../hooks/useRipple.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useAnimation.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../_chunks/dep-3a09424a.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../loading/gradient.js';
import '../_chunks/dep-1630b9b4.js';
import '../_chunks/dep-87d110df.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-a74cc5e4.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../button/defaultProps.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../button/style/index.js';
import '../button/type.js';

var _excluded = ["theme", "header", "closeBtn", "footer", "body", "children", "className", "onCancel", "onConfirm", "onCloseBtnClick", "cancelBtn", "confirmBtn", "confirmLoading"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var renderDialogButton = function renderDialogButton(btn, defaultProps) {
  var result = null;
  if (isString(btn)) {
    result = /* @__PURE__ */React.createElement(Button, _objectSpread({}, defaultProps), btn);
  } else if (/*#__PURE__*/isValidElement(btn)) {
    result = btn;
  } else if (isObject(btn)) {
    result = /* @__PURE__ */React.createElement(Button, _objectSpread(_objectSpread({}, defaultProps), btn));
  } else if (isFunction(btn)) {
    result = btn();
  }
  return result;
};
var DialogCard = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var componentCls = "".concat(classPrefix, "-dialog");
  var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      InfoCircleFilledIcon: InfoCircleFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon
    }),
    CloseIcon$1 = _useGlobalIcon.CloseIcon,
    InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
    CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon;
  var _useLocaleReceiver = useLocaleReceiver("dialog"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    local = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var confirmText = t(local.confirm);
  var cancelText = t(local.cancel);
  var _useDefaultProps = useDefaultProps(props, dialogCardDefaultProps),
    theme = _useDefaultProps.theme,
    header = _useDefaultProps.header,
    closeBtn = _useDefaultProps.closeBtn,
    footer = _useDefaultProps.footer,
    body = _useDefaultProps.body,
    children = _useDefaultProps.children,
    className = _useDefaultProps.className,
    onCancel = _useDefaultProps.onCancel,
    onConfirm = _useDefaultProps.onConfirm,
    onCloseBtnClick = _useDefaultProps.onCloseBtnClick,
    _useDefaultProps$canc = _useDefaultProps.cancelBtn,
    cancelBtn = _useDefaultProps$canc === void 0 ? cancelText : _useDefaultProps$canc,
    _useDefaultProps$conf = _useDefaultProps.confirmBtn,
    confirmBtn = _useDefaultProps$conf === void 0 ? confirmText : _useDefaultProps$conf,
    confirmLoading = _useDefaultProps.confirmLoading,
    otherProps = _objectWithoutProperties(_useDefaultProps, _excluded);
  var renderHeaderContent = function renderHeaderContent() {
    var iconMap = {
      info: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-info")
      }),
      warning: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-warning")
      }),
      error: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-error")
      }),
      danger: /* @__PURE__ */React.createElement(InfoCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-error")
      }),
      success: /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, {
        className: "".concat(classPrefix, "-is-success")
      })
    };
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(componentCls, "__header-content")
    }, iconMap[theme], header);
  };
  var renderCloseBtn = function renderCloseBtn() {
    if (!closeBtn) {
      return null;
    }
    var closeIcon = function closeIcon() {
      return closeBtn === true ? /* @__PURE__ */React.createElement(CloseIcon$1, null) : closeBtn;
    };
    return /* @__PURE__ */React.createElement("span", {
      className: "".concat(componentCls, "__close"),
      style: {
        marginLeft: "auto"
      },
      onClick: function onClick(e) {
        return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
          e: e
        });
      }
    }, closeIcon());
  };
  var renderHeader = function renderHeader() {
    return /* @__PURE__ */React.createElement("div", {
      className: classNames("".concat(componentCls, "__header"))
    }, renderHeaderContent(), renderCloseBtn());
  };
  var renderFooter = function renderFooter() {
    var defaultFooter = function defaultFooter() {
      var _cancelBtn$props;
      var renderCancelBtn = renderDialogButton(cancelBtn, {
        variant: "outline",
        onClick: function onClick(e) {
          return onCancel === null || onCancel === void 0 ? void 0 : onCancel({
            e: e
          });
        },
        className: classNames("".concat(componentCls, "__cancel"), cancelBtn === null || cancelBtn === void 0 || (_cancelBtn$props = cancelBtn.props) === null || _cancelBtn$props === void 0 ? void 0 : _cancelBtn$props.className)
      });
      var renderConfirmBtn = renderDialogButton(confirmBtn, {
        theme: "primary",
        loading: confirmLoading,
        onClick: function onClick(e) {
          return onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
            e: e
          });
        },
        className: classNames("".concat(componentCls, "__confirm"), confirmBtn === null || confirmBtn === void 0 ? void 0 : confirmBtn.className)
      });
      return /* @__PURE__ */React.createElement(React.Fragment, null, renderCancelBtn, renderConfirmBtn);
    };
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(componentCls, "__footer")
    }, parseTNode(footer, null, defaultFooter()));
  };
  return /* @__PURE__ */React.createElement("div", _objectSpread(_objectSpread({
    ref: ref
  }, otherProps), {}, {
    className: classNames(componentCls, "".concat(componentCls, "--default"), className)
  }), !!header && renderHeader(), /* @__PURE__ */React.createElement("div", {
    className: "".concat(componentCls, "__body")
  }, body || children), !!footer && renderFooter());
});
DialogCard.displayName = "DialogCard";

export { DialogCard as default };
//# sourceMappingURL=DialogCard.js.map
