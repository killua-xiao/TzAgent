import { TreeNode, CascaderContextType, TdCascaderProps, TreeNodeValue } from '../interface';
/**
 * 点击item的副作用
 * @param propsTrigger
 * @param trigger
 * @param node
 * @param cascaderContext
 */
export declare function expendClickEffect(propsTrigger: TdCascaderProps['trigger'], trigger: TdCascaderProps['trigger'], node: TreeNode, cascaderContext: CascaderContextType): void;
/**
 * 多选状态下选中状态数据变化的副作用
 * @param node
 * @param cascaderContext
 * @returns
 */
export declare function valueChangeEffect(node: TreeNode, cascaderContext: CascaderContextType): void;
/**
 * closeIcon点击副作用
 * @param cascaderContext
 */
export declare function closeIconClickEffect(cascaderContext: CascaderContextType): void;
/**
 * tag 关闭按钮点击副作用
 * @param cascaderContext
 */
export declare function handleRemoveTagEffect(cascaderContext: CascaderContextType, index: number, onRemove: TdCascaderProps['onRemove']): void;
/**
 * input和treeStore变化的副作用
 * @param inputVal
 * @param treeStore
 * @param setTreeNodes
 * @returns
 */
export declare const treeNodesEffect: (inputVal: CascaderContextType["inputVal"], treeStore: CascaderContextType["treeStore"], setTreeNodes: CascaderContextType["setTreeNodes"], filter: CascaderContextType["filter"], checkStrictly: CascaderContextType["checkStrictly"]) => void;
/**
 * 初始化展开阶段与展开状态副作用
 * @param treeStore
 * @param treeValue
 * @param expend
 */
export declare const treeStoreExpendEffect: (treeStore: CascaderContextType["treeStore"], value: CascaderContextType["value"], expend: TreeNodeValue[]) => void;
