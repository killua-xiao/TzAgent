{"version":3,"file":"hooks.js","sources":["../../../components/cascader/hooks.tsx"],"sourcesContent":["import { useState, useEffect, useMemo, useRef } from 'react';\n\nimport { isArray, isEqual, isFunction } from 'lodash-es';\n\nimport TreeStore from '@tdesign/common-js/tree-v1/tree-store';\nimport type { TypeTreeNodeData } from '@tdesign/common-js/tree-v1/types';\nimport { getTreeValue, getCascaderValue, isEmptyValues, isValueInvalid } from './core/helper';\nimport { treeNodesEffect, treeStoreExpendEffect } from './core/effect';\n\nimport useControlled from '../hooks/useControlled';\n\nimport type {\n  TreeNode,\n  TreeNodeValue,\n  TdCascaderProps,\n  TreeNodeModel,\n  CascaderChangeSource,\n  CascaderValue,\n} from './interface';\n\nimport { TreeOptionData } from '../common';\n\nexport const useCascaderContext = (props: TdCascaderProps) => {\n  const [innerValue, setInnerValue] = useControlled(props, 'value', props.onChange);\n  const [innerPopupVisible, setPopupVisible] = useControlled(props, 'popupVisible', props.onPopupVisibleChange);\n\n  const [inputVal, setInputVal] = useState('');\n  const [treeStore, setTreeStore] = useState(null);\n  const [treeNodes, setTreeNodes] = useState<TreeNode[]>([]);\n  const [expend, setExpend] = useState<TreeNodeValue[]>([]);\n  const [scopeVal, setScopeVal] = useState(undefined);\n\n  const cascaderContext = useMemo(() => {\n    const {\n      size,\n      checkStrictly,\n      lazy,\n      multiple,\n      filterable,\n      clearable,\n      checkProps,\n      max,\n      disabled,\n      showAllLevels,\n      minCollapsedNum,\n      valueType,\n    } = props;\n    return {\n      value: scopeVal,\n      size,\n      checkStrictly,\n      lazy,\n      multiple,\n      filterable,\n      clearable,\n      checkProps,\n      max,\n      disabled,\n      showAllLevels,\n      minCollapsedNum,\n      valueType,\n      treeStore,\n      setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => {\n        if (isEqual(val, scopeVal)) return;\n        setInnerValue(val, { source, node });\n      },\n      visible: innerPopupVisible,\n      setVisible: setPopupVisible,\n      treeNodes,\n      setTreeNodes,\n      inputVal,\n      setInputVal,\n      setExpend,\n    };\n  }, [props, scopeVal, innerPopupVisible, treeStore, treeNodes, inputVal, setInnerValue, setPopupVisible]);\n\n  const isFilterable = useMemo(\n    () => Boolean(props.filterable || isFunction(props.filter)),\n    [props.filterable, props.filter],\n  );\n\n  /**\n   * build tree\n   */\n\n  const { disabled, options = [], keys = {}, checkStrictly = false, lazy = true, load, valueMode = 'onlyLeaf' } = props;\n\n  const optionCurrent = useRef([]);\n\n  useEffect(() => {\n    if (!isEqual(optionCurrent.current, options)) {\n      optionCurrent.current = options;\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleTreeStore();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options]);\n\n  const handleTreeStore = () => {\n    if (!treeStore) {\n      if (!options.length) return;\n      const store = new TreeStore({\n        keys: {\n          ...keys,\n          children: typeof keys.children === 'string' ? keys.children : 'children',\n        },\n        onLoad: () => {\n          setTimeout(() => {\n            store.refreshNodes();\n            treeNodesEffect(inputVal, store, setTreeNodes, props.filter, checkStrictly);\n          });\n        },\n      });\n      store.append(options as Array<TypeTreeNodeData>);\n\n      setTreeStore(store);\n    } else {\n      treeStore.reload(options);\n      treeStore.refreshNodes();\n      treeStoreExpendEffect(treeStore, scopeVal, []);\n      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);\n    }\n  };\n\n  useEffect(() => {\n    if (!treeStore) return;\n    const treeProps = {\n      keys: {\n        ...keys,\n        children: typeof keys.children === 'string' ? keys.children : 'children',\n      },\n      checkable: true,\n      expandMutex: true,\n      expandParent: true,\n      checkStrictly,\n      disabled,\n      load,\n      lazy,\n      valueMode,\n    };\n    treeStore.setConfig(treeProps);\n  }, [checkStrictly, disabled, keys, lazy, load, valueMode, treeStore]);\n\n  // value 校验逻辑\n  useEffect(() => {\n    const { setValue, multiple, valueType = 'single' } = cascaderContext;\n\n    if (isValueInvalid(innerValue, cascaderContext)) {\n      setValue(multiple ? [] : '', 'invalid-value');\n    }\n\n    if (!isEmptyValues(innerValue)) {\n      setScopeVal(getCascaderValue(innerValue, valueType, multiple));\n    } else {\n      setScopeVal(multiple ? [] : '');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [innerValue]);\n\n  useEffect(() => {\n    if (!treeStore) return;\n    treeStoreExpendEffect(treeStore, scopeVal, expend);\n  }, [treeStore, scopeVal, expend]);\n\n  useEffect(() => {\n    if (!treeStore) return;\n    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);\n  }, [inputVal, treeStore, props.filter, checkStrictly]);\n\n  useEffect(() => {\n    if (!treeStore) return;\n    treeStore.replaceChecked(getTreeValue(scopeVal));\n  }, [options, scopeVal, treeStore, cascaderContext.multiple]);\n\n  useEffect(() => {\n    if (!innerPopupVisible && isFilterable) {\n      setInputVal('');\n    }\n  }, [innerPopupVisible, isFilterable]);\n\n  useEffect(() => {\n    const { inputVal, treeStore, setTreeNodes } = cascaderContext;\n    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputVal, scopeVal]);\n\n  const getCascaderItems = (\n    arrValue: CascaderValue[],\n    valueType: TdCascaderProps['valueType'],\n    multiple: TdCascaderProps['multiple'],\n  ) => {\n    const { treeStore } = cascaderContext;\n    const optionsData: TreeOptionData[] = [];\n\n    if (!treeStore) return optionsData;\n\n    if (valueType === 'full') {\n      if (multiple) {\n        // 未来需支持全路径拼接搜索\n        arrValue.forEach((value) => {\n          if (isArray(value) && value.length) {\n            const nodeValue = value[value.length - 1];\n            const [node] = treeStore.getNodes(nodeValue) || [];\n            node?.data && optionsData.push(node.data);\n          }\n        });\n      } else if (isArray(arrValue) && arrValue.length) {\n        const nodeValue = arrValue[arrValue.length - 1];\n        const [node] = treeStore.getNodes(nodeValue) || [];\n        node?.data && optionsData.push(node.data);\n      }\n    } else if (valueType === 'single') {\n      arrValue.forEach((value) => {\n        const [node] = treeStore.getNodes(value) || [];\n        node?.data && optionsData.push(node.data);\n      });\n    }\n\n    return optionsData;\n  };\n\n  return {\n    cascaderContext,\n    isFilterable,\n    innerValue,\n    getCascaderItems,\n  };\n};\n"],"names":["useCascaderContext","props","_useControlled","useControlled","onChange","_useControlled2","_slicedToArray","innerValue","setInnerValue","_useControlled3","onPopupVisibleChange","_useControlled4","innerPopupVisible","setPopupVisible","_useState","useState","_useState2","inputVal","setInputVal","_useState3","_useState4","treeStore","setTreeStore","_useState5","_useState6","treeNodes","setTreeNodes","_useState7","_useState8","expend","setExpend","_useState9","_useState0","scopeVal","setScopeVal","cascaderContext","useMemo","size","checkStrictly","lazy","multiple","filterable","clearable","checkProps","max","disabled","showAllLevels","minCollapsedNum","valueType","value","setValue","val","source","node","isEqual","visible","setVisible","isFilterable","Boolean","isFunction","filter","_props$options","options","keys","_props$keys","_props$checkStrictly","_props$lazy","load","_props$valueMode","valueMode","optionCurrent","useRef","useEffect","current","handleTreeStore","length","store","TreeStore","_objectSpread","children","onLoad","setTimeout","refreshNodes","treeNodesEffect","append","reload","treeStoreExpendEffect","treeProps","checkable","expandMutex","expandParent","setConfig","_cascaderContext$valu","isValueInvalid","isEmptyValues","getCascaderValue","replaceChecked","getTreeValue","getCascaderItems","arrValue","optionsData","forEach","isArray","nodeValue","_ref","getNodes","_ref2","data","push","_ref3","_ref4","_ref5","_ref6"],"mappings":"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"}