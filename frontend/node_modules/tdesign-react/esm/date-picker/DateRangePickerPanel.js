/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _toConsumableArray } from '../_chunks/dep-87d110df.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { forwardRef, useState, useMemo } from 'react';
import dayjs from 'dayjs';
import { g as getDefaultFormat, f as formatDate, p as parseToDayjs } from '../_chunks/dep-9036728c.js';
import { s as subtractMonth, a as addMonth, e as extractTimeObj } from '../_chunks/dep-9649fdab.js';
import '../_chunks/dep-f53c91cd.js';
import RangePanel from './panel/RangePanel.js';
import useRange from './hooks/useRangeValue.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import { dateCorrection } from './utils.js';
import { l as log } from '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import 'lodash-es';
import '../_chunks/dep-e29214cb.js';
import '../_chunks/dep-dbf3be07.js';
import '../_chunks/dep-3538034b.js';
import 'classnames';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-3c9ab31a.js';
import './panel/PanelContent.js';
import './base/Header.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_chunks/dep-6b660ef0.js';
import '../_util/composeRefs.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../_util/helper.js';
import '../_util/noop.js';
import '../_util/parseTNode.js';
import '../common/FakeArrow.js';
import '../hooks/useControlled.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../_chunks/dep-1630b9b4.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-a74cc5e4.js';
import '../common/PluginContainer.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../select-input/useSingle.js';
import '../input/index.js';
import '../input/Input.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../input/useLengthLimit.js';
import '../input/style/index.js';
import '../input/type.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../hooks/useDragSorter.js';
import '../hooks/useEventCallback.js';
import '../tag-input/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../_chunks/dep-3c3d29db.js';
import '../tag/defaultProps.js';
import '../tag/CheckTag.js';
import '../_chunks/dep-55732ade.js';
import '../tag/CheckTagGroup.js';
import '../tag/style/index.js';
import '../tag/type.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/style/index.js';
import '../tag-input/type.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../select-input/style/index.js';
import '../select-input/type.js';
import '../select/defaultProps.js';
import '../_chunks/dep-c7ed701c.js';
import '../select/base/OptionGroup.js';
import '../select/base/Option.js';
import '../hooks/useRipple.js';
import '../select/base/PopupContent.js';
import '../select/hooks/usePanelVirtualScroll.js';
import '../hooks/useVirtualScroll.js';
import '../select/style/index.js';
import '../select/type.js';
import '../pagination/index.js';
import '../pagination/Pagination.js';
import '../input-number/index.js';
import '../input-number/InputNumber.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../button/style/index.js';
import '../button/type.js';
import '../input-number/useInputNumber.js';
import '../_chunks/dep-46c9e4f5.js';
import '../hooks/useCommonClassName.js';
import '../input-number/defaultProps.js';
import '../input-number/style/index.js';
import '../input-number/type.js';
import '../input-adornment/index.js';
import '../input-adornment/InputAdornment.js';
import '../input-adornment/style/index.js';
import '../input-adornment/type.js';
import '../pagination/hooks/useBoundaryJumper.js';
import '../pagination/hooks/usePrevNextJumper.js';
import '../pagination/hooks/usePageNumber.js';
import '../pagination/hooks/useTotal.js';
import '../pagination/validators.js';
import '../pagination/defaultProps.js';
import '../pagination/PaginationMini.js';
import '../pagination/style/index.js';
import '../pagination/type.js';
import './base/Table.js';
import './base/Cell.js';
import '../time-picker/index.js';
import '../time-picker/TimePicker.js';
import '../_chunks/dep-f7770f5d.js';
import '../time-picker/hooks/useTimePickerTextConfig.js';
import '../hooks/useDebounce.js';
import '../hooks/usePersistFn.js';
import '../hooks/usePropsRef.js';
import '../time-picker/TimeRangePicker.js';
import '../range-input/index.js';
import '../range-input/RangeInput.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../range-input/style/index.js';
import '../range-input/type.js';
import '../time-picker/panel/TimePickerPanel.js';
import '../time-picker/defaultProps.js';
import '../time-picker/style/index.js';
import '../time-picker/type.js';
import './panel/ExtraContent.js';
import './base/Footer.js';
import './hooks/useTableData.js';
import './hooks/useDisableDate.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DateRangePickerPanel = /*#__PURE__*/forwardRef(function (originalProps, ref) {
  var props = useDefaultProps(originalProps, {
    mode: "date",
    defaultValue: [],
    panelPreselection: true
  });
  var className = props.className,
    style = props.style,
    mode = props.mode,
    enableTimePicker = props.enableTimePicker,
    disableDate = props.disableDate,
    firstDayOfWeek = props.firstDayOfWeek,
    presets = props.presets,
    timePickerProps = props.timePickerProps,
    presetsPlacement = props.presetsPlacement,
    panelPreselection = props.panelPreselection,
    onPanelClick = props.onPanelClick;
  var _useRangeValue = useRange(props),
    value = _useRangeValue.value,
    year = _useRangeValue.year,
    month = _useRangeValue.month,
    _useRangeValue$time = _useRangeValue.time,
    time = _useRangeValue$time === void 0 ? [] : _useRangeValue$time,
    onChange = _useRangeValue.onChange,
    setTime = _useRangeValue.setTime,
    setYear = _useRangeValue.setYear,
    setMonth = _useRangeValue.setMonth,
    isFirstValueSelected = _useRangeValue.isFirstValueSelected,
    setIsFirstValueSelected = _useRangeValue.setIsFirstValueSelected,
    cacheValue = _useRangeValue.cacheValue,
    setCacheValue = _useRangeValue.setCacheValue;
  var _getDefaultFormat = getDefaultFormat({
      mode: mode,
      enableTimePicker: enableTimePicker,
      format: props.format
    }),
    format = _getDefaultFormat.format;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isSelected = _useState2[0],
    setIsSelected = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHoverCell = _useState4[0],
    setIsHoverCell = _useState4[1];
  var _useState5 = useState([]),
    _useState6 = _slicedToArray(_useState5, 2),
    hoverValue = _useState6[0],
    setHoverValue = _useState6[1];
  var activeIndex = useMemo(function () {
    return isFirstValueSelected ? 1 : 0;
  }, [isFirstValueSelected]);
  function onCellMouseEnter(date) {
    setIsHoverCell(true);
    var nextValue = _toConsumableArray(hoverValue);
    nextValue[activeIndex] = formatDate(date, {
      format: format
    });
    setHoverValue(nextValue);
  }
  function onCellMouseLeave() {
    setIsHoverCell(false);
    setHoverValue(cacheValue);
  }
  function onCellClick(date, _ref) {
    var _props$onCellClick;
    var e = _ref.e,
      partial = _ref.partial;
    setIsSelected(true);
    var nextValue = _toConsumableArray(cacheValue);
    nextValue[activeIndex] = formatDate(date, {
      format: format
    });
    setCacheValue(nextValue);
    (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, {
      date: nextValue.map(function (v) {
        return dayjs(v).toDate();
      }),
      e: e,
      partial: activeIndex ? "end" : "start"
    });
    if (mode === "date") {
      var partialIndex = partial === "start" ? 0 : 1;
      var isAdditional = dayjs(date).month() !== month[partialIndex];
      if (isAdditional) {
        if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
        if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
      }
    }
    if (enableTimePicker) return;
    if (nextValue.length === 2 && isFirstValueSelected) {
      onChange(formatDate(nextValue, {
        format: format,
        autoSwap: true
      }), {
        dayjsValue: nextValue.map(function (v) {
          return parseToDayjs(v, format);
        }),
        trigger: "pick"
      });
      setIsFirstValueSelected(false);
    } else {
      setIsFirstValueSelected(true);
    }
  }
  function onJumperClick(_ref2) {
    var trigger = _ref2.trigger,
      partial = _ref2.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    var triggerMap = {
      "-1": "arrow-previous",
      1: "arrow-next"
    };
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year[partialIndex], month[partialIndex]);
    var next = null;
    if (trigger === "prev") {
      next = subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = addMonth(current, monthCount);
    }
    var nextYear = _toConsumableArray(year);
    nextYear[partialIndex] = next.getFullYear();
    var nextMonth = _toConsumableArray(month);
    nextMonth[partialIndex] = next.getMonth();
    var onlyYearSelect = ["year", "quarter", "month"].includes(mode);
    var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
    nextYear = correctedDate.nextYear;
    nextMonth = correctedDate.nextMonth;
    if (year.some(function (y) {
      return !nextYear.includes(y);
    })) {
      var _props$onYearChange;
      (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 || _props$onYearChange.call(props, {
        partial: partial,
        year: nextYear[partialIndex],
        date: value.map(function (v) {
          return parseToDayjs(v, format).toDate();
        }),
        trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
      });
    }
    if (month.some(function (m) {
      return !nextMonth.includes(m);
    })) {
      var _props$onMonthChange;
      (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 || _props$onMonthChange.call(props, {
        partial: partial,
        month: nextMonth[partialIndex],
        date: value.map(function (v) {
          return parseToDayjs(v, format).toDate();
        }),
        trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
      });
    }
    setYear(nextYear);
    setMonth(nextMonth);
  }
  function onTimePickerChange(val) {
    var _props$onTimeChange;
    var _extractTimeObj = extractTimeObj(val),
      hours = _extractTimeObj.hours,
      minutes = _extractTimeObj.minutes,
      seconds = _extractTimeObj.seconds,
      milliseconds = _extractTimeObj.milliseconds,
      meridiem = _extractTimeObj.meridiem;
    var nextInputValue = _toConsumableArray(cacheValue);
    var changedInputValue = cacheValue[activeIndex];
    var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    nextInputValue[activeIndex] = nextDate;
    var nextTime = _toConsumableArray(time);
    nextTime[activeIndex] = val;
    setTime(nextTime);
    setIsSelected(true);
    setCacheValue(formatDate(nextInputValue, {
      format: format
    }));
    (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 || _props$onTimeChange.call(props, {
      time: val,
      partial: activeIndex ? "end" : "start",
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      trigger: "time-hour"
    });
  }
  function onConfirmClick(_ref3) {
    var _props$onConfirm;
    var e = _ref3.e;
    var nextValue = _toConsumableArray(cacheValue);
    if (nextValue.length === 2 && isFirstValueSelected) {
      onChange(formatDate(nextValue, {
        format: format,
        autoSwap: true
      }), {
        dayjsValue: nextValue.map(function (v) {
          return parseToDayjs(v, format);
        }),
        trigger: "confirm"
      });
      setYear(nextValue.map(function (v) {
        return dayjs(v, format).year();
      }));
      setMonth(nextValue.map(function (v) {
        return dayjs(v, format).month();
      }));
      setIsFirstValueSelected(false);
    } else {
      setIsFirstValueSelected(true);
    }
    (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      e: e
    });
  }
  function onPresetClick(presetValue, context) {
    var _props$onPresetClick;
    var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
    if (!Array.isArray(presetVal)) {
      log.error("DateRangePickerPanel", "preset: ".concat(presetValue, " must be Array!"));
    } else {
      onChange(formatDate(presetVal, {
        format: format,
        autoSwap: true
      }), {
        dayjsValue: presetVal.map(function (p) {
          return parseToDayjs(p, format);
        }),
        trigger: "preset"
      });
    }
    (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
  }
  function onYearChange(nextVal, _ref4) {
    var _props$onYearChange2;
    var partial = _ref4.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;
    var nextYear = _toConsumableArray(year);
    nextYear[partialIndex] = nextVal;
    var nextMonth = _toConsumableArray(month);
    nextYear[partialIndex] = nextVal;
    var onlyYearSelect = ["year", "quarter", "month"].includes(mode);
    var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
    nextYear = correctedDate.nextYear;
    nextMonth = correctedDate.nextMonth;
    setYear(nextYear);
    !onlyYearSelect && setMonth(nextMonth);
    (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 || _props$onYearChange2.call(props, {
      partial: partial,
      year: nextYear[partialIndex],
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      trigger: "year-select"
    });
  }
  function onMonthChange(nextVal, _ref5) {
    var _props$onMonthChange2;
    var partial = _ref5.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;
    var nextMonth = _toConsumableArray(month);
    nextMonth[partialIndex] = nextVal;
    if (year[0] === year[1]) {
      if (partialIndex === 0) {
        if (nextMonth[1] <= nextMonth[0]) {
          nextMonth[1] = nextMonth[0] + 1;
          if (nextMonth[1] === 12) {
            nextMonth[1] = 0;
            setYear(function (currentYear) {
              return [currentYear[0], currentYear[1] + 1];
            });
          }
        }
      }
      if (partialIndex === 1) {
        nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        if (nextMonth[0] >= nextMonth[1]) {
          nextMonth[0] -= 1;
          if (nextMonth[0] === -1) {
            nextMonth[0] = 11;
            setYear(function (currentYear) {
              return [currentYear[0] - 1, currentYear[1]];
            });
          }
        }
      }
    }
    setMonth(nextMonth);
    (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 || _props$onMonthChange2.call(props, {
      partial: partial,
      month: nextMonth[partialIndex],
      date: value.map(function (v) {
        return dayjs(v).toDate();
      }),
      trigger: "month-select"
    });
  }
  var panelProps = {
    hoverValue: isHoverCell ? hoverValue : [],
    value: isSelected ? cacheValue : value,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    activeIndex: activeIndex,
    panelPreselection: panelPreselection,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onCellClick: onCellClick,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange,
    onPanelClick: onPanelClick
  };
  return /* @__PURE__ */React.createElement(RangePanel, _objectSpread({
    ref: ref,
    className: className,
    style: style
  }, panelProps));
});
DateRangePickerPanel.displayName = "DateRangePickerPanel";

export { DateRangePickerPanel as default };
//# sourceMappingURL=DateRangePickerPanel.js.map
