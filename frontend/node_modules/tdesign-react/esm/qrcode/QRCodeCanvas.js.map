{"version":3,"file":"QRCodeCanvas.js","sources":["../../../components/qrcode/QRCodeCanvas.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  DEFAULT_BACKGROUND_COLOR,\n  DEFAULT_FRONT_COLOR,\n  DEFAULT_NEED_MARGIN,\n  DEFAULT_LEVEL,\n  DEFAULT_MINVERSION,\n  DEFAULT_SIZE,\n  isSupportPath2d,\n  excavateModules,\n  generatePath,\n} from '@tdesign/common-js/qrcode/utils';\nimport { useQRCode, QRPropsCanvas } from './hooks/useQRCode';\n\nconst QRCodeCanvas = React.forwardRef<HTMLCanvasElement, QRPropsCanvas>((props, ref) => {\n  const {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BACKGROUND_COLOR,\n    fgColor = DEFAULT_FRONT_COLOR,\n    includeMargin = DEFAULT_NEED_MARGIN,\n    minVersion = DEFAULT_MINVERSION,\n    marginSize,\n    style,\n    imageSettings,\n    ...otherProps\n  } = props;\n\n  const imgSrc = imageSettings?.src;\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const imageRef = React.useRef<HTMLImageElement>(null);\n\n  const setCanvasRef = React.useCallback(\n    (node: HTMLCanvasElement) => {\n      canvasRef.current = node;\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        // eslint-disable-next-line no-param-reassign\n        ref.current = node;\n      }\n    },\n    [ref],\n  );\n\n  const [, setIsImageLoaded] = React.useState(false);\n\n  const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n    value,\n    level,\n    minVersion,\n    includeMargin,\n    marginSize,\n    imageSettings,\n    size,\n  });\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        return;\n      }\n\n      let cellsToDraw = cells;\n      const image = imageRef.current;\n      const haveImageToRender =\n        calculatedImageSettings != null &&\n        image !== null &&\n        image.complete &&\n        image.naturalHeight !== 0 &&\n        image.naturalWidth !== 0;\n\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cellsToDraw = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = size * pixelRatio;\n      canvas.width = size * pixelRatio;\n      const scale = (size / numCells) * pixelRatio;\n      ctx.scale(scale, scale);\n\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n\n      ctx.fillStyle = fgColor;\n      if (isSupportPath2d) {\n        ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n      } else {\n        cells.forEach((row, rdx) => {\n          row.forEach((cell, cdx) => {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n\n      if (calculatedImageSettings) {\n        ctx.globalAlpha = calculatedImageSettings.opacity;\n      }\n\n      if (haveImageToRender) {\n        ctx.drawImage(\n          image,\n          calculatedImageSettings.x + margin,\n          calculatedImageSettings.y + margin,\n          calculatedImageSettings.w,\n          calculatedImageSettings.h,\n        );\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n\n  let img = null;\n  if (imgSrc != null) {\n    img = (\n      <img\n        src={imgSrc}\n        key={imgSrc}\n        style={{ display: 'none' }}\n        onLoad={() => {\n          setIsImageLoaded(true);\n        }}\n        ref={imageRef}\n        // when crossOrigin is not set, the image will be tainted\n        // and the canvas cannot be exported to an image\n        crossOrigin={calculatedImageSettings?.crossOrigin}\n      />\n    );\n  }\n  return (\n    <>\n      <canvas style={style} height={size} width={size} ref={setCanvasRef} role=\"img\" {...otherProps} />\n      {img}\n    </>\n  );\n});\n\nQRCodeCanvas.displayName = 'QRCodeCanvas';\n\nexport { QRCodeCanvas };\n"],"names":["QRCodeCanvas","React","forwardRef","props","ref","value","_props$size","size","DEFAULT_SIZE","_props$level","level","DEFAULT_LEVEL","_props$bgColor","bgColor","DEFAULT_BACKGROUND_COLOR","_props$fgColor","fgColor","DEFAULT_FRONT_COLOR","_props$includeMargin","includeMargin","DEFAULT_NEED_MARGIN","_props$minVersion","minVersion","DEFAULT_MINVERSION","marginSize","style","imageSettings","otherProps","_objectWithoutProperties","_excluded","imgSrc","src","canvasRef","useRef","imageRef","setCanvasRef","useCallback","node","current","_React$useState","useState","_React$useState2","_slicedToArray","setIsImageLoaded","_useQRCode","useQRCode","margin","cells","numCells","calculatedImageSettings","useEffect","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","excavation","excavateModules","pixelRatio","window","devicePixelRatio","height","width","scale","fillStyle","fillRect","isSupportPath2d","fill","Path2D","generatePath","forEach","row","rdx","cell","cdx","globalAlpha","opacity","drawImage","x","y","w","h","img","createElement","key","display","onLoad","crossOrigin","_objectSpread","role","displayName"],"mappings":"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"}