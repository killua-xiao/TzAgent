{"version":3,"file":"OptionList.js","sources":["../../../components/auto-complete/OptionList.tsx"],"sourcesContent":["import React, { useMemo, useState, useRef, MouseEvent, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { isFunction, escapeRegExp } from 'lodash-es';\nimport log from '@tdesign/common-js/log/index';\nimport useConfig from '../hooks/useConfig';\nimport { CommonClassNameType } from '../hooks/useCommonClassName';\nimport { AutoCompleteOptionObj, TdAutoCompleteProps } from './type';\nimport HighlightOption from './HighlightOption';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { off, on } from '../_util/listener';\n\nexport interface OptionsListProps {\n  sizeClassNames: CommonClassNameType['sizeClassNames'];\n  value: string;\n  size: TdAutoCompleteProps['size'];\n  options: TdAutoCompleteProps['options'];\n  popupVisible: boolean;\n  highlightKeyword: boolean;\n  filterable: boolean;\n  filter: TdAutoCompleteProps['filter'];\n  empty: TdAutoCompleteProps['empty'];\n  onSelect: (keyword: string, context: { e: MouseEvent<HTMLLIElement> | KeyboardEvent | any }) => void;\n}\n\nexport interface OptionsListRef {\n  addKeyboardListener: () => void;\n  removeKeyboardListener: () => void;\n}\n\nconst OptionsList = forwardRef<OptionsListRef, OptionsListProps>((props: OptionsListProps, ref) => {\n  const { value, popupVisible, onSelect } = props;\n  const { classPrefix } = useConfig();\n  const [active, setActive] = useState('');\n  const activeIndexRef = useRef(-1);\n\n  const [global] = useLocaleReceiver('autoComplete');\n\n  const classes = `${classPrefix}-select__list`;\n  const optionClasses = [\n    `${classPrefix}-select-option`,\n    {\n      [props.sizeClassNames[props.size]]: props.size,\n    },\n  ];\n\n  const tOptions = useMemo(() => {\n    let options = (props.options || []).map((item) => {\n      let option: AutoCompleteOptionObj = {};\n      if (typeof item === 'string') {\n        option = { text: item, label: item };\n      } else {\n        if (item.text && typeof item.text !== 'string') {\n          log.warn('AutoComplete', '`text` must be a string.');\n        }\n        if (!item.text) {\n          if (typeof item.label === 'string') {\n            option = { ...item, text: item.label };\n          } else {\n            log.warn('AutoComplete', 'one of `label` and `text` must be a existed string.');\n          }\n        } else {\n          option = item;\n        }\n      }\n      return option;\n    });\n    // 自定义过滤规则\n    if (props.filter) {\n      options = options.filter((option) => props.filter(value, option));\n    } else if (props.filterable) {\n      // 默认过滤规则\n      const regExp = new RegExp(escapeRegExp(value), 'i');\n      options = options.filter((item) => regExp.test(item.text));\n    }\n\n    return options;\n    // eslint-disable-next-line\n  }, [props.options, value, props.filterable]);\n\n  const onOptionClick = (e: MouseEvent<HTMLLIElement>) => {\n    let liNode = e.target as HTMLElement;\n    while (liNode && liNode.tagName !== 'LI') {\n      liNode = liNode.parentNode as HTMLElement;\n    }\n    const keyword = liNode.getAttribute('title');\n    setActive(keyword);\n    onSelect(keyword, { e });\n  };\n\n  // 键盘事件，上下选择\n  const onKeyInnerPress = (e: KeyboardEvent) => {\n    if (e.code === 'Enter' || e.key === 'Enter') {\n      const currentIndex = activeIndexRef.current;\n\n      if (currentIndex === -1) {\n        return;\n      }\n\n      onSelect(tOptions[activeIndexRef.current].text, { e });\n    } else {\n      const index = activeIndexRef.current;\n      let newIndex;\n      if (e.code === 'ArrowUp' || e.key === 'ArrowUp') {\n        newIndex = index - 1 < 0 ? tOptions.length - 1 : index - 1;\n      } else if (e.code === 'ArrowDown' || e.key === 'ArrowDown') {\n        newIndex = index + 1 >= tOptions.length ? 0 : index + 1;\n      }\n      setActive(tOptions[newIndex]?.text);\n    }\n  };\n\n  const addKeyboardListener = () => {\n    on(document, 'keydown', onKeyInnerPress);\n  };\n\n  const removeKeyboardListener = () => {\n    off(document, 'keydown', onKeyInnerPress);\n  };\n\n  useImperativeHandle(ref, () => ({\n    addKeyboardListener,\n    removeKeyboardListener,\n  }));\n\n  useEffect(() => {\n    if (popupVisible) {\n      addKeyboardListener();\n    } else {\n      removeKeyboardListener();\n    }\n    return () => {\n      removeKeyboardListener();\n    };\n    // eslint-disable-next-line\n  }, [popupVisible]);\n\n  useEffect(() => {\n    if (!value) {\n      setActive('');\n    }\n  }, [value]);\n\n  useEffect(() => {\n    activeIndexRef.current = tOptions.findIndex((item) => item.text === active);\n  }, [active, tOptions]);\n\n  if (!tOptions.length) {\n    return <div className={`${classPrefix}-auto-complete__panel--empty`}>{props.empty || global.empty}</div>;\n  }\n  return (\n    <ul className={classes}>\n      {tOptions.map((item) => {\n        const cls = [...optionClasses];\n        if (item.text === active) {\n          cls.push(`${classPrefix}-select-option--hover`);\n        }\n        const content = (isFunction(item.label) ? item.label() : item.label) || item.text;\n        return (\n          <li key={item.text} className={classNames(cls)} title={item.text} onClick={onOptionClick}>\n            {typeof content === 'string' && props.highlightKeyword ? (\n              <HighlightOption content={content} keyword={value} />\n            ) : (\n              content\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n});\n\nOptionsList.displayName = 'OptionsList';\n\nexport default OptionsList;\n"],"names":["OptionsList","forwardRef","props","ref","value","popupVisible","onSelect","_useConfig","useConfig","classPrefix","_useState","useState","_useState2","_slicedToArray","active","setActive","activeIndexRef","useRef","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","global","classes","optionClasses","concat","_defineProperty","sizeClassNames","size","tOptions","useMemo","options","map","item","option","text","label","log","warn","_objectSpread","filter","filterable","regExp","RegExp","escapeRegExp","test","onOptionClick","e","liNode","target","tagName","parentNode","keyword","getAttribute","onKeyInnerPress","code","key","currentIndex","current","_tOptions$newIndex","index","newIndex","length","addKeyboardListener","on","document","removeKeyboardListener","off","useImperativeHandle","useEffect","findIndex","React","createElement","className","empty","cls","push","content","isFunction","classNames","title","onClick","highlightKeyword","HighlightOption","displayName"],"mappings":"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"}