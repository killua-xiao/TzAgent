/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { forwardRef, useRef, useState, useImperativeHandle } from 'react';
import classNames from 'classnames';
import useControlled from '../hooks/useControlled.js';
import { autoCompleteDefaultProps } from './defaultProps.js';
import useCommonClassName from '../hooks/useCommonClassName.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { Input } from '../input/index.js';
import { Popup } from '../popup/index.js';
import OptionsList from './OptionList.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import 'lodash-es';
import '../_util/noop.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../config-provider/ConfigProvider.js';
import '../input/Input.js';
import '../_chunks/dep-6b660ef0.js';
import 'tdesign-icons-react';
import '../hooks/useLayoutEffect.js';
import '../_chunks/dep-3a09424a.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../_util/parseTNode.js';
import '../_chunks/dep-b908e1fe.js';
import '../input/useLengthLimit.js';
import '../_chunks/dep-6af6bc60.js';
import '../_chunks/dep-87d110df.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-52ff3837.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import './HighlightOption.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AutoComplete = /*#__PURE__*/forwardRef(function (originalProps, ref) {
  var _props$placeholder;
  var props = useDefaultProps(originalProps, autoCompleteDefaultProps);
  var inputRef = useRef(null);
  var popupRef = useRef(null);
  var _useControlled = useControlled(props, "value", props.onChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    tValue = _useControlled2[0],
    setTValue = _useControlled2[1];
  var _useCommonClassName = useCommonClassName(),
    classPrefix = _useCommonClassName.classPrefix,
    sizeClassNames = _useCommonClassName.sizeClassNames;
  var _useLocaleReceiver = useLocaleReceiver("input"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
    global = _useLocaleReceiver2[0];
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    popupVisible = _useState2[0],
    setPopupVisible = _useState2[1];
  var optionListRef = useRef(null);
  useImperativeHandle(ref, function () {
    return {
      inputRef: inputRef.current,
      popupRef: popupRef.current
    };
  });
  var getOverlayStyle = function getOverlayStyle(trigger, popupElement) {
    var _props$popupProps;
    var triggerWidth = trigger.getBoundingClientRect().width || trigger.offsetWidth || trigger.clientWidth;
    var popupWidth = popupElement.getBoundingClientRect().width || popupElement.offsetWidth || popupElement.clientWidth;
    return _objectSpread({
      width: triggerWidth >= popupWidth ? "".concat(triggerWidth, "px") : "auto"
    }, (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle);
  };
  var classes = ["".concat(classPrefix, "-auto-complete")].concat(props.className);
  var popupClasses = function (_props$popupProps2) {
    var classes2 = ["".concat(classPrefix, "-select__dropdown")];
    if ((_props$popupProps2 = props.popupProps) !== null && _props$popupProps2 !== void 0 && _props$popupProps2.overlayClassName) {
      classes2 = classes2.concat(props.popupProps.overlayClassName);
    }
    return classNames(classes2);
  }();
  var popupInnerClasses = function (_props$popupProps3) {
    var classes2 = ["".concat(classPrefix, "-select__dropdown-inner")];
    if ((_props$popupProps3 = props.popupProps) !== null && _props$popupProps3 !== void 0 && _props$popupProps3.overlayInnerClassName) {
      classes2 = classes2.concat(props.popupProps.overlayInnerClassName);
    }
    return classNames(classes2);
  }();
  var onInputChange = function onInputChange(value, context) {
    if (!popupVisible) {
      setPopupVisible(true);
    }
    setTValue(value, context);
  };
  var innerInputProps = function () {
    var tProps = _objectSpread({
      value: tValue,
      size: props.size
    }, props.inputProps);
    return tProps;
  }();
  var onInnerFocus = function onInnerFocus(value, context) {
    var _props$onFocus;
    setPopupVisible(true);
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, _objectSpread(_objectSpread({}, context), {}, {
      value: value
    }));
    var timer = setTimeout(function () {
      var _optionListRef$curren;
      (_optionListRef$curren = optionListRef.current) === null || _optionListRef$curren === void 0 || _optionListRef$curren.addKeyboardListener();
      clearTimeout(timer);
    }, 0);
  };
  var onInnerBlur = function onInnerBlur(value, context) {
    var _props$onBlur;
    (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, _objectSpread(_objectSpread({}, context), {}, {
      value: value
    }));
  };
  var onInnerEnter = function onInnerEnter(value, context) {
    var _props$onEnter;
    (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, _objectSpread(_objectSpread({}, context), {}, {
      value: value
    }));
  };
  var onInnerCompositionend = function onInnerCompositionend(value, context) {
    var _props$onCompositione;
    (_props$onCompositione = props.onCompositionend) === null || _props$onCompositione === void 0 || _props$onCompositione.call(props, _objectSpread(_objectSpread({}, context), {}, {
      value: value
    }));
  };
  var onInnerCompositionstart = function onInnerCompositionstart(value, context) {
    var _props$onCompositions;
    (_props$onCompositions = props.onCompositionstart) === null || _props$onCompositions === void 0 || _props$onCompositions.call(props, _objectSpread(_objectSpread({}, context), {}, {
      value: value
    }));
  };
  var onInnerSelect = function onInnerSelect(value, context) {
    var _props$onSelect;
    if (props.readonly || props.disabled) return;
    setPopupVisible(false);
    setTValue(value, context);
    (_props$onSelect = props.onSelect) === null || _props$onSelect === void 0 || _props$onSelect.call(props, value, context);
  };
  var onPopupVisibleChange = function onPopupVisibleChange(visible, _ref) {
    var trigger = _ref.trigger;
    if (trigger !== "trigger-element-click") {
      setPopupVisible(visible);
    }
  };
  var triggerNode = props.triggerElement || props.children || /* @__PURE__ */React.createElement(Input, _objectSpread({
    ref: inputRef,
    placeholder: (_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : global.placeholder,
    tips: props.tips,
    status: props.status,
    readonly: props.readonly,
    disabled: props.disabled,
    clearable: props.clearable,
    autofocus: props.autofocus,
    borderless: props.borderless,
    onClear: props.onClear,
    onChange: onInputChange,
    onFocus: onInnerFocus,
    onBlur: onInnerBlur,
    onEnter: onInnerEnter,
    onCompositionend: onInnerCompositionend,
    onCompositionstart: onInnerCompositionstart
  }, innerInputProps));
  var listContent = Array.isArray(props.options) && /* @__PURE__ */React.createElement(OptionsList, {
    ref: optionListRef,
    value: tValue,
    options: props.options,
    size: props.size,
    sizeClassNames: sizeClassNames,
    onSelect: onInnerSelect,
    popupVisible: popupVisible,
    highlightKeyword: props.highlightKeyword,
    filterable: props.filterable,
    filter: props.filter,
    empty: props.empty
  });
  var topContent = props.panelTopContent;
  var bottomContent = props.panelBottomContent;
  var panelContent = topContent || listContent || bottomContent ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-auto-complete__panel")
  }, topContent, listContent, bottomContent) : null;
  var popupProps = _objectSpread(_objectSpread({}, props.popupProps), {}, {
    overlayInnerStyle: getOverlayStyle,
    overlayInnerClassName: popupInnerClasses,
    overlayClassName: popupClasses
  });
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(classes),
    style: props.style
  }, /* @__PURE__ */React.createElement(Popup, _objectSpread({
    ref: popupRef,
    visible: popupVisible,
    onVisibleChange: onPopupVisibleChange,
    trigger: "focus",
    placement: "bottom-left",
    hideEmptyPopup: true,
    content: panelContent
  }, popupProps), triggerNode));
});
AutoComplete.displayName = "AutoComplete";

export { AutoComplete as default };
//# sourceMappingURL=AutoComplete.js.map
