{"version":3,"file":"TreeSelect.js","sources":["../../../components/tree-select/TreeSelect.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useRef, forwardRef, ElementRef, useImperativeHandle } from 'react';\nimport { isFunction } from 'lodash-es';\nimport classNames from 'classnames';\nimport type { TdTreeSelectProps, TreeSelectValue } from './type';\nimport type { StyledProps, TreeOptionData } from '../common';\nimport useConfig from '../hooks/useConfig';\nimport useControlled from '../hooks/useControlled';\nimport Tree from '../tree';\nimport type { TreeInstanceFunctions, TreeProps } from '../tree';\nimport SelectInput, { SelectInputProps } from '../select-input/SelectInput';\nimport { usePersistFn } from '../hooks/usePersistFn';\nimport useSwitch from '../hooks/useSwitch';\nimport noop from '../_util/noop';\nimport { useTreeSelectUtils } from './hooks/useTreeSelectUtils';\nimport { SelectArrow } from './SelectArrow';\nimport { useTreeSelectPassThroughProps } from './hooks/useTreeSelectPassthroughProps';\nimport { useTreeSelectLocale } from './hooks/useTreeSelectLocale';\nimport { treeSelectDefaultProps } from './defaultProps';\nimport parseTNode from '../_util/parseTNode';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport { PopupRef } from '../popup';\nimport { InputRef } from '../input';\n\nexport interface TreeSelectProps<DataOption extends TreeOptionData = TreeOptionData>\n  extends TdTreeSelectProps<DataOption>,\n    StyledProps {}\n\nexport interface NodeOptions {\n  label: string;\n  value: string | number;\n}\n\nconst useMergeFn = <T extends any[]>(...fns: Array<(...args: T) => void>) =>\n  usePersistFn((...args: T) => fns.forEach((fn) => fn?.(...args)));\n\ntype TreeSelectRefType = Partial<ElementRef<typeof Tree> & PopupRef & InputRef>;\n\nconst TreeSelect = forwardRef<TreeSelectRefType, TreeSelectProps>((originalProps, ref) => {\n  const props = useDefaultProps<TreeSelectProps<TreeOptionData>>(originalProps, treeSelectDefaultProps);\n  /* ---------------------------------config---------------------------------------- */\n\n  // 国际化文本初始化\n  const { placeholder, empty, loadingItem } = useTreeSelectLocale(props);\n\n  const { classPrefix } = useConfig();\n\n  /* ---------------------------------state---------------------------------------- */\n\n  const {\n    className,\n    onInputChange,\n    readonly,\n    disabled,\n    multiple,\n    prefixIcon,\n    label,\n    loading,\n    size,\n    max,\n    data,\n    panelTopContent,\n    panelBottomContent,\n    filter: rawFilter,\n    filterable: rawFilterable,\n    onClear,\n    valueDisplay,\n    treeProps,\n    inputProps,\n    valueType,\n    collapsedItems,\n    onBlur,\n    onFocus,\n    onSearch,\n    onRemove,\n    onEnter,\n  } = props;\n\n  const selectInputProps = useTreeSelectPassThroughProps(props);\n  const [value, onChange] = useControlled(props, 'value', props.onChange);\n  const [popupVisible, setPopupVisible] = useControlled(props, 'popupVisible', props.onPopupVisibleChange);\n  const [hover, hoverAction] = useSwitch();\n  const [filterInput, setFilterInput] = useControlled(props, 'inputValue', onInputChange);\n\n  const treeRef = useRef<TreeInstanceFunctions<TreeOptionData>>(null);\n  const selectInputRef = useRef<Partial<PopupRef & InputRef>>(null);\n\n  const tKeys = useMemo(\n    () => ({\n      value: 'value',\n      label: 'label',\n      children: 'children',\n      ...props.keys,\n    }),\n    [props.keys],\n  );\n\n  const passThroughDefaultStore = useMemo<TreeSelectProps>(\n    () => ({\n      data,\n      treeProps: {\n        keys: tKeys,\n        ...treeProps,\n      },\n      valueType,\n    }),\n    [tKeys, data, treeProps, valueType],\n  );\n\n  const { normalizeValue, formatValue, getNodeItem } = useTreeSelectUtils(passThroughDefaultStore, treeRef);\n\n  useImperativeHandle(ref, () => ({\n    ...(selectInputRef.current || {}),\n    ...(treeRef.current || {}),\n  }));\n\n  /* ---------------------------------computed value---------------------------------------- */\n\n  const defaultFilter = (text: string, option: TreeOptionData) => {\n    if (!text) return true;\n    // 过滤时会有空节点影响判断\n    if (!option.label && !option.value) return false;\n    if (option.label && typeof option.label === 'string') {\n      return option.label.includes(text);\n    }\n    if (option.data.text && typeof option.data.text === 'string') {\n      return option.data.text.includes(text);\n    }\n    return true;\n  };\n\n  // priority of onSearch is higher than props.filter\n  const filter = onSearch ? undefined : rawFilter || defaultFilter;\n  const filterable = rawFilterable || !!props.filter;\n\n  const normalizedValue = useMemo(() => {\n    const calcValue: TreeSelectValue[] = Array.isArray(value) ? value : [value];\n    return calcValue.reduce<NodeOptions[]>((result, value) => {\n      const normalized = normalizeValue(value);\n      typeof normalized.value !== 'undefined' && result.push(normalized);\n      return result;\n    }, []);\n    // data 发生变更时，normalizedValue 也需要更新\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [normalizeValue, value, data]);\n\n  const internalInputValue = useMemo(() => {\n    if (multiple) return normalizedValue;\n    // 可筛选、单选、弹框时内容为过滤值\n    return filterable && popupVisible ? filterInput : normalizedValue[0] || '';\n  }, [multiple, normalizedValue, filterable, popupVisible, filterInput]);\n\n  // @ts-ignore TODO: remove it\n  const normalizedValueDisplay: SelectInputProps['valueDisplay'] = useMemo(() => {\n    if (!valueDisplay) {\n      return;\n    }\n    if (multiple) {\n      return ({ onClose }) =>\n        isFunction(valueDisplay) ? valueDisplay({ value: normalizedValue, onClose }) : valueDisplay;\n    }\n    const displayNode = isFunction(valueDisplay)\n      ? valueDisplay({ value: normalizedValue[0], onClose: noop })\n      : valueDisplay;\n    return normalizedValue.length ? displayNode : '';\n  }, [valueDisplay, multiple, normalizedValue]);\n\n  const internalInputValueDisplay: SelectInputProps['valueDisplay'] = useMemo(() => {\n    // 只有单选且下拉展开时需要隐藏 valueDisplay\n    if (filterable && !multiple && popupVisible) {\n      return undefined;\n    }\n    return normalizedValueDisplay;\n  }, [filterable, popupVisible, multiple, normalizedValueDisplay]);\n\n  const inputPlaceholder = useMemo(() => {\n    // 可筛选、单选、弹框且有值时提示当前值\n    if (filterable && !multiple && popupVisible && normalizedValue.length) {\n      // 设置了 valueDisplay 时，优先展示 valueDisplay\n      const valueDisplayPlaceholder = normalizedValueDisplay;\n      if (typeof valueDisplayPlaceholder === 'string') {\n        return valueDisplayPlaceholder;\n      }\n\n      return typeof normalizedValue[0].label === 'string' ? normalizedValue[0].label : String(normalizedValue[0].value);\n    }\n    return placeholder;\n  }, [filterable, multiple, popupVisible, normalizedValue, placeholder, normalizedValueDisplay]);\n\n  const showLoading = !disabled && loading;\n\n  /* ---------------------------------handler---------------------------------------- */\n\n  const handleFilter = useCallback<TreeProps['filter']>(\n    (node) => (filterable && filter ? filter(filterInput as string, node) : true),\n    [filter, filterInput, filterable],\n  );\n\n  const handleSingleChange = usePersistFn<TreeProps['onActive']>((value, context) => {\n    const $value = Array.isArray(value) && value.length ? value[0] : undefined;\n    if ($value) {\n      onChange(formatValue($value, context.node.label), {\n        ...context,\n        data: context.node.data,\n        trigger: 'check',\n      });\n    }\n    // 单选选择后收起弹框\n    setPopupVisible(false, { ...context, trigger: 'trigger-element-click' });\n  });\n\n  const handleMultiChange = usePersistFn<TreeProps['onChange']>((value, context) => {\n    if (max === 0 || value.length <= max) {\n      onChange(\n        value.map((value) => formatValue(value, getNodeItem(value)?.label)),\n        {\n          ...context,\n          data: context.node.data,\n          trigger: value.length > normalizedValue.length ? 'check' : 'uncheck',\n        },\n      );\n    }\n  });\n\n  const onInnerPopupVisibleChange: SelectInputProps['onPopupVisibleChange'] = (visible, ctx) => {\n    setPopupVisible(visible, { e: ctx.e });\n  };\n\n  const handleClear = usePersistFn<SelectInputProps['onClear']>((ctx) => {\n    ctx.e.stopPropagation();\n    onChange(multiple ? [] : formatValue(undefined), {\n      node: null,\n      data: null,\n      trigger: 'clear',\n      e: ctx.e as React.MouseEvent<any, any>,\n    });\n    onClear?.(ctx);\n    // 清空后收起弹框\n    setPopupVisible(false, { trigger: 'clear' });\n  });\n\n  const handleTagChange = usePersistFn<SelectInputProps['onTagChange']>((tags, ctx) => {\n    if (ctx.trigger === 'tag-remove' || ctx.trigger === 'backspace') {\n      const { index, e, trigger } = ctx;\n      const node = getNodeItem(normalizedValue[index].value);\n      onChange(\n        normalizedValue.filter((value, i) => i !== index).map(({ value, label }) => formatValue(value, label)),\n        { node, data: node.data, trigger, e },\n      );\n      onRemove?.({\n        value: node.value,\n        node,\n        index,\n        data: { value: node.value, label: node.label, ...node.data },\n        e,\n        trigger,\n      });\n    }\n  });\n\n  const getTreeSelectEventValue = () => {\n    const selectedOptions = Array.isArray(normalizedValue) ? normalizedValue : [normalizedValue];\n    const value = selectedOptions.map((item) => (valueType === 'object' ? item : item[tKeys.value]));\n    return multiple ? value : value[0];\n  };\n\n  const handleBlur = usePersistFn<SelectInputProps['onBlur']>((_, ctx) => {\n    onBlur?.({ value: getTreeSelectEventValue(), ...ctx });\n  });\n\n  const handleFocus = usePersistFn<SelectInputProps['onFocus']>((_, ctx) => {\n    onFocus?.({ value: getTreeSelectEventValue(), e: ctx.e });\n  });\n\n  const handleEnter = usePersistFn<SelectInputProps['onEnter']>((_, ctx) => {\n    onSearch?.(ctx.inputValue, { e: ctx.e });\n    onEnter?.({ inputValue: ctx.inputValue, e: ctx.e, value: getTreeSelectEventValue() });\n  });\n\n  const handleFilterChange = usePersistFn<SelectInputProps['onInputChange']>((value, ctx) => {\n    if (ctx.trigger === 'clear') return;\n\n    setFilterInput(value, ctx);\n    onSearch?.(value, { e: ctx.e });\n  });\n\n  /* ---------------------------------render---------------------------------------- */\n\n  const renderTree = () => {\n    if (readonly) return empty;\n    if (showLoading) return loadingItem;\n    return (\n      <>\n        {panelTopContent}\n        <Tree\n          ref={treeRef}\n          hover\n          transition\n          filter={filterInput ? handleFilter : null}\n          data={data}\n          disabled={disabled}\n          empty={empty}\n          expandOnClickNode={false}\n          allowFoldNodeOnFilter\n          keys={tKeys}\n          {...(multiple\n            ? {\n                checkable: true,\n                onChange: handleMultiChange,\n                value: normalizedValue.map(({ value }) => value),\n              }\n            : {\n                activable: true,\n                actived: normalizedValue.map(({ value }) => value),\n                onActive: handleSingleChange,\n              })}\n          {...treeProps}\n        />\n        {panelBottomContent}\n      </>\n    );\n  };\n\n  return (\n    <SelectInput\n      status={props.status}\n      tips={props.tips}\n      {...props.selectInputProps}\n      {...selectInputProps}\n      ref={selectInputRef}\n      className={classNames(`${classPrefix}-tree-select`, className)}\n      value={internalInputValue}\n      inputValue={filterInput}\n      panel={renderTree()}\n      allowInput={filterable}\n      inputProps={{ ...inputProps, size }}\n      tagInputProps={{ size, excessTagsDisplayType: 'break-line', inputProps, tagProps: props.tagProps }}\n      placeholder={inputPlaceholder}\n      popupVisible={popupVisible && !disabled}\n      onInputChange={handleFilterChange}\n      onPopupVisibleChange={onInnerPopupVisibleChange}\n      onFocus={useMergeFn(handleFocus)}\n      onBlur={useMergeFn(handleBlur)}\n      onClear={handleClear}\n      onTagChange={handleTagChange}\n      onEnter={handleEnter}\n      onMouseenter={hoverAction.on}\n      onMouseleave={hoverAction.off}\n      suffixIcon={\n        props.suffixIcon ||\n        (readonly ? null : (\n          <SelectArrow isActive={popupVisible} isHighlight={hover || popupVisible} disabled={disabled} />\n        ))\n      }\n      collapsedItems={collapsedItems}\n      label={parseTNode(label || prefixIcon)}\n      valueDisplay={internalInputValueDisplay}\n    />\n  );\n});\n\nTreeSelect.displayName = 'TreeSelect';\n\nexport default TreeSelect;\n"],"names":["useMergeFn","_len","arguments","length","fns","Array","_key","usePersistFn","_len2","args","_key2","forEach","fn","apply","TreeSelect","forwardRef","originalProps","ref","props","useDefaultProps","treeSelectDefaultProps","_useTreeSelectLocale","useTreeSelectLocale","placeholder","empty","loadingItem","_useConfig","useConfig","classPrefix","className","onInputChange","readonly","disabled","multiple","prefixIcon","label","loading","size","max","data","panelTopContent","panelBottomContent","rawFilter","filter","rawFilterable","filterable","onClear","valueDisplay","treeProps","inputProps","valueType","collapsedItems","onBlur","onFocus","onSearch","onRemove","onEnter","selectInputProps","useTreeSelectPassThroughProps","_useControlled","useControlled","onChange","_useControlled2","_slicedToArray","value","_useControlled3","onPopupVisibleChange","_useControlled4","popupVisible","setPopupVisible","_useSwitch","useSwitch","_useSwitch2","hover","hoverAction","_useControlled5","_useControlled6","filterInput","setFilterInput","treeRef","useRef","selectInputRef","tKeys","useMemo","_objectSpread","children","keys","passThroughDefaultStore","_useTreeSelectUtils","useTreeSelectUtils","normalizeValue","formatValue","getNodeItem","useImperativeHandle","current","defaultFilter","text","option","includes","normalizedValue","calcValue","isArray","reduce","result","normalized","push","internalInputValue","normalizedValueDisplay","_ref","onClose","isFunction","displayNode","noop","internalInputValueDisplay","inputPlaceholder","valueDisplayPlaceholder","String","showLoading","handleFilter","useCallback","node","handleSingleChange","context","$value","trigger","handleMultiChange","map","_getNodeItem","onInnerPopupVisibleChange","visible","ctx","e","handleClear","stopPropagation","handleTagChange","tags","index","i","_ref2","getTreeSelectEventValue","selectedOptions","item","handleBlur","_","handleFocus","handleEnter","inputValue","handleFilterChange","renderTree","React","createElement","Fragment","Tree","transition","expandOnClickNode","allowFoldNodeOnFilter","checkable","_ref3","activable","actived","_ref4","onActive","SelectInput","status","tips","classNames","concat","panel","allowInput","tagInputProps","excessTagsDisplayType","tagProps","onTagChange","onMouseenter","on","onMouseleave","off","suffixIcon","SelectArrow","isActive","isHighlight","parseTNode","displayName"],"mappings":"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"}