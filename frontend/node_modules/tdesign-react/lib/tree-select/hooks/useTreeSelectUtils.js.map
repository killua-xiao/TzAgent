{"version":3,"file":"useTreeSelectUtils.js","sources":["../../../../components/tree-select/hooks/useTreeSelectUtils.ts"],"sourcesContent":["import { ElementRef, MutableRefObject, useMemo } from 'react';\nimport TreeStore from '@tdesign/common-js/tree-v1/tree-store';\nimport type { TypeTreeNodeData } from '@tdesign/common-js/tree-v1/types';\nimport type { TreeSelectValue } from '../type';\nimport Tree, { TreeNodeValue } from '../../tree';\nimport { usePersistFn } from '../../hooks/usePersistFn';\nimport { treeSelectDefaultProps } from '../defaultProps';\n\nimport type { NodeOptions, TreeSelectProps } from '../TreeSelect';\n\nexport const useTreeSelectUtils = (\n  { data, treeProps, valueType }: TreeSelectProps,\n  treeRef: MutableRefObject<ElementRef<typeof Tree>>,\n) => {\n  const defaultStore = useMemo(() => {\n    const store = new TreeStore({\n      ...treeSelectDefaultProps.treeProps,\n      ...treeProps,\n    });\n    store.append(data as Array<TypeTreeNodeData>);\n    return store;\n  }, [data, treeProps]);\n\n  const getNodeItem = usePersistFn((value: string | number) => {\n    if (treeRef.current) {\n      return treeRef.current.getItem(value);\n    }\n    return defaultStore.getNode(value)?.getModel();\n  });\n\n  const formatValue = usePersistFn((value: TreeNodeValue | null, label = String(value)) => {\n    const valueKey = treeProps?.keys?.value ?? 'value';\n    const labelKey = treeProps?.keys?.label ?? 'label';\n    return value && valueType === 'object' ? { [valueKey]: value, [labelKey]: label } : value;\n  });\n\n  const normalizeValue = usePersistFn((value: TreeSelectValue) => {\n    const valueKey = treeProps?.keys?.value ?? 'value';\n    const labelKey = treeProps?.keys?.label ?? 'label';\n    const realValue = valueType === 'value' ? (value as string) : (value as NodeOptions)?.[valueKey];\n    const node = getNodeItem(realValue);\n    const realLabel = valueType === 'object' ? value?.[labelKey] : undefined;\n    return {\n      value: realValue,\n      label: node?.label ?? realLabel ?? String(realValue),\n    };\n  });\n\n  return {\n    getNodeItem,\n    formatValue,\n    normalizeValue,\n  };\n};\n"],"names":["useTreeSelectUtils","treeRef","data","treeProps","_ref","valueType","defaultStore","useMemo","store","TreeStore","_objectSpread","treeSelectDefaultProps","append","getNodeItem","usePersistFn","value","_defaultStore$getNode","current","getItem","getNode","getModel","formatValue","_treeProps$keys$value","_treeProps$keys","_treeProps$keys$label","_treeProps$keys2","label","arguments","length","undefined","String","valueKey","keys","labelKey","_defineProperty","normalizeValue","_treeProps$keys$value2","_treeProps$keys3","_treeProps$keys$label2","_treeProps$keys4","_ref3","_node$label","realValue","node","realLabel"],"mappings":"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"}