/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { useMemo } from 'react';
import { T as TreeStore } from '../../_chunks/dep-603c8128.js';
import { usePersistFn } from '../../hooks/usePersistFn.js';
import { treeSelectDefaultProps } from '../defaultProps.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-46885238.js';
import 'lodash-es';
import 'mitt';
import '../../_chunks/dep-6575b736.js';
import '../../_chunks/dep-52ff3837.js';
import '../../_chunks/dep-87d110df.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-b908e1fe.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useTreeSelectUtils = function useTreeSelectUtils(_ref, treeRef) {
  var data = _ref.data,
    treeProps = _ref.treeProps,
    valueType = _ref.valueType;
  var defaultStore = useMemo(function () {
    var store = new TreeStore(_objectSpread(_objectSpread({}, treeSelectDefaultProps.treeProps), treeProps));
    store.append(data);
    return store;
  }, [data, treeProps]);
  var getNodeItem = usePersistFn(function (value) {
    var _defaultStore$getNode;
    if (treeRef.current) {
      return treeRef.current.getItem(value);
    }
    return (_defaultStore$getNode = defaultStore.getNode(value)) === null || _defaultStore$getNode === void 0 ? void 0 : _defaultStore$getNode.getModel();
  });
  var formatValue = usePersistFn(function (value) {
    var _treeProps$keys$value, _treeProps$keys, _treeProps$keys$label, _treeProps$keys2;
    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(value);
    var valueKey = (_treeProps$keys$value = treeProps === null || treeProps === void 0 || (_treeProps$keys = treeProps.keys) === null || _treeProps$keys === void 0 ? void 0 : _treeProps$keys.value) !== null && _treeProps$keys$value !== void 0 ? _treeProps$keys$value : "value";
    var labelKey = (_treeProps$keys$label = treeProps === null || treeProps === void 0 || (_treeProps$keys2 = treeProps.keys) === null || _treeProps$keys2 === void 0 ? void 0 : _treeProps$keys2.label) !== null && _treeProps$keys$label !== void 0 ? _treeProps$keys$label : "label";
    return value && valueType === "object" ? _defineProperty(_defineProperty({}, valueKey, value), labelKey, label) : value;
  });
  var normalizeValue = usePersistFn(function (value) {
    var _treeProps$keys$value2, _treeProps$keys3, _treeProps$keys$label2, _treeProps$keys4, _ref3, _node$label;
    var valueKey = (_treeProps$keys$value2 = treeProps === null || treeProps === void 0 || (_treeProps$keys3 = treeProps.keys) === null || _treeProps$keys3 === void 0 ? void 0 : _treeProps$keys3.value) !== null && _treeProps$keys$value2 !== void 0 ? _treeProps$keys$value2 : "value";
    var labelKey = (_treeProps$keys$label2 = treeProps === null || treeProps === void 0 || (_treeProps$keys4 = treeProps.keys) === null || _treeProps$keys4 === void 0 ? void 0 : _treeProps$keys4.label) !== null && _treeProps$keys$label2 !== void 0 ? _treeProps$keys$label2 : "label";
    var realValue = valueType === "value" ? value : value === null || value === void 0 ? void 0 : value[valueKey];
    var node = getNodeItem(realValue);
    var realLabel = valueType === "object" ? value === null || value === void 0 ? void 0 : value[labelKey] : void 0;
    return {
      value: realValue,
      label: (_ref3 = (_node$label = node === null || node === void 0 ? void 0 : node.label) !== null && _node$label !== void 0 ? _node$label : realLabel) !== null && _ref3 !== void 0 ? _ref3 : String(realValue)
    };
  });
  return {
    getNodeItem: getNodeItem,
    formatValue: formatValue,
    normalizeValue: normalizeValue
  };
};

export { useTreeSelectUtils };
//# sourceMappingURL=useTreeSelectUtils.js.map
