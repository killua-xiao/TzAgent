/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React from 'react';
import { render, unmount } from '../_util/react-render.js';
import Loading from './Loading.js';
import PluginContainer from '../common/PluginContainer.js';
import ConfigProvider from '../config-provider/ConfigProvider.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-52ff3837.js';
import 'react-dom';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-026a4c6b.js';
import 'classnames';
import '../_chunks/dep-3a09424a.js';
import 'lodash-es';
import '../hooks/useConfig.js';
import '../common/Portal.js';
import '../hooks/useLayoutEffect.js';
import './gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../_chunks/dep-6af6bc60.js';
import '../_chunks/dep-87d110df.js';
import '../hooks/useDomRefCallback.js';
import './defaultProps.js';
import '../hooks/useDefaultProps.js';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function createContainer(attach) {
  if (typeof attach === "string") return document.querySelector(attach);
  if (typeof attach === "function") return attach();
  return document.body;
}
var LoadingPlugin = function LoadingPlugin(options) {
  if (options === false) return {
    hide: function hide() {
      return null;
    }
  };
  var props = typeof options === "boolean" ? {} : options;
  var attach = props.attach;
  var container = createContainer(attach);
  var div = document.createElement("div");
  div.setAttribute("style", "width: 100%; height: 100%; position: absolute; top: 0;");
  var defaultProps = {
    loading: true,
    attach: null,
    fullscreen: !attach,
    showOverlay: !!attach
  };
  var dGlobalConfig = ConfigProvider.getGlobalConfig();
  render(/* @__PURE__ */React.createElement(PluginContainer, {
    globalConfig: dGlobalConfig
  }, /* @__PURE__ */React.createElement(Loading, _objectSpread(_objectSpread(_objectSpread({}, defaultProps), props), {}, {
    attach: null
  }))), div);
  container.appendChild(div);
  return {
    hide: function hide() {
      unmount(div);
      div.remove();
    }
  };
};

export { LoadingPlugin };
//# sourceMappingURL=plugin.js.map
