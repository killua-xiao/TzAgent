{"version":3,"file":"Breadcrumb.js","sources":["../../../components/breadcrumb/Breadcrumb.tsx"],"sourcesContent":["import React, { Children, useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { EllipsisIcon } from 'tdesign-icons-react';\nimport { isFunction } from 'lodash-es';\nimport log from '@tdesign/common-js/log/index';\nimport useConfig from '../hooks/useConfig';\nimport forwardRefWithStatics from '../_util/forwardRefWithStatics';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { BreadcrumbProps } from './BreadcrumbProps';\nimport { BreadcrumbContext } from './BreadcrumbContext';\nimport { breadcrumbDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport { TdBreadcrumbItemProps } from './type';\n\nconst Breadcrumb = forwardRefWithStatics(\n  (props: BreadcrumbProps, ref: React.Ref<HTMLDivElement>) => {\n    const { children, options, separator, maxItemWidth, className, maxItems, itemsAfterCollapse, itemsBeforeCollapse, ellipsis, ...restProps } = useDefaultProps(\n      props,\n      breadcrumbDefaultProps,\n    );\n    const { classPrefix } = useConfig();\n\n    const renderOptionsToItems = useCallback((options: TdBreadcrumbItemProps[]) => {\n      if (!options || !options.length) {\n        return undefined;\n      }\n\n      return options.map((option, index) => {\n        const targetProps: TdBreadcrumbItemProps = {};\n        if (option.target) {\n          targetProps.target = option.target;\n        }\n        return (\n          <BreadcrumbItem\n            {...targetProps}\n            key={index}\n            maxWidth={option.maxWidth}\n            disabled={option.disabled}\n            href={option.href}\n            to={option.to}\n            router={option.router}\n            replace={option.replace}\n            separator={separator}\n            maxItemWidth={maxItemWidth}\n            icon={option.icon}\n            content={option.content}\n          >\n            {option.content || option.children}\n          </BreadcrumbItem>\n        );\n      });\n    }, [maxItemWidth, separator]);\n\n    const renderEllipsis = useCallback((items: TdBreadcrumbItemProps[]) => {\n      if (!ellipsis) {\n        return <EllipsisIcon />;\n      }\n\n      if (isFunction(ellipsis)) {\n        return ellipsis({items, separator});\n      }\n\n      return ellipsis;\n    }, [ellipsis, separator]);\n\n    const content = useMemo(() => {\n      let items = renderOptionsToItems(options) || Children.toArray(children);\n\n      const itemsCount = items?.length || 0;\n\n      if (!items || !maxItems) {\n        return items;\n      }\n\n      if (maxItems >= itemsCount) {\n        return items;\n      }\n\n      // 配置有误的情况，不显示省略并告警\n      if (\n        maxItems &&\n        (!itemsBeforeCollapse || !itemsAfterCollapse)\n      ) {\n        log.error('Breadcrumb', '需要设置 itemsBeforeCollapse 和 itemsAfterCollapse 属性来控制省略号前后的显示项数。');\n        return items;\n      }\n\n      if (\n        maxItems &&\n        maxItems < (itemsAfterCollapse || 0) + (itemsBeforeCollapse || 0)\n      ) {\n        log.error('Breadcrumb', `maxItems={${maxItems}} 必须大于或等于 itemsBeforeCollapse={${itemsBeforeCollapse}} + itemsAfterCollapse={${itemsAfterCollapse}}`);\n        return items;\n      }\n\n      const startCount = itemsBeforeCollapse;\n      const endCount = itemsAfterCollapse;\n\n      const collapsedItems = items.slice(startCount, itemsCount - endCount);\n\n      const beforeItems = items.slice(0, startCount);\n      const afterItems = items.slice(itemsCount - endCount);\n\n      const ellipsis = renderEllipsis(collapsedItems.map((item) => item.props));\n\n      items = [\n        ...beforeItems,\n        <BreadcrumbItem key=\"ellipsis\" readOnly>{ellipsis}</BreadcrumbItem>,\n        ...afterItems,\n      ];\n\n      return items;\n    }, [renderOptionsToItems, options, children, maxItems, itemsBeforeCollapse, itemsAfterCollapse, renderEllipsis]);\n\n    return (\n      <BreadcrumbContext.Provider\n        value={{\n          maxItemWidthInContext: maxItemWidth,\n          separator,\n        }}\n      >\n        <div ref={ref} className={classNames(`${classPrefix}-breadcrumb`, className)} {...restProps}>\n          {content}\n        </div>\n      </BreadcrumbContext.Provider>\n    );\n  },\n  { BreadcrumbItem },\n);\n\nBreadcrumb.displayName = 'Breadcrumb';\n\nexport default Breadcrumb;\n"],"names":["Breadcrumb","forwardRefWithStatics","props","ref","_useDefaultProps","useDefaultProps","breadcrumbDefaultProps","children","options","separator","maxItemWidth","className","maxItems","itemsAfterCollapse","itemsBeforeCollapse","ellipsis","restProps","_objectWithoutProperties","_excluded","_useConfig","useConfig","classPrefix","renderOptionsToItems","useCallback","length","map","option","index","targetProps","target","React","createElement","BreadcrumbItem","_objectSpread","key","maxWidth","disabled","href","to","router","replace","icon","content","renderEllipsis","items","EllipsisIcon","isFunction","useMemo","_items","Children","toArray","itemsCount","log","error","concat","startCount","endCount","collapsedItems","slice","beforeItems","afterItems","item","_toConsumableArray","readOnly","BreadcrumbContext","Provider","value","maxItemWidthInContext","classNames","displayName"],"mappings":"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"}