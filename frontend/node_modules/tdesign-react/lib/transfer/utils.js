/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { isEmpty, isString, isFunction } from 'lodash-es';
import React from 'react';
import '../_chunks/dep-eca3a3de.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getDefaultValue = function getDefaultValue(value, defaultValue) {
  if (isEmpty(value)) {
    return Array.isArray(defaultValue) ? defaultValue : [defaultValue, defaultValue];
  }
  if (Array.isArray(value)) return value;
  return [defaultValue, defaultValue];
};
var getJSX = function getJSX(value) {
  if (isString(value)) return value;
  if (isFunction(value)) return value();
  if (/*#__PURE__*/React.isValidElement(value)) return value;
  return value;
};
var getLeafNodes = function getLeafNodes(nodes) {
  var resData = [];
  var _map = function map(nodes2) {
    nodes2.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        return _map(child.children);
      }
      resData.push(child);
    });
  };
  _map(nodes);
  return resData;
};
var _filterCheckedTreeNodes = function filterCheckedTreeNodes(nodes, checkeds) {
  return nodes.filter(function (item) {
    return !checkeds.includes(item.value);
  }).map(function (item) {
    var newItem = _objectSpread({}, item);
    if (item.children && item.children.length > 0) {
      newItem.children = _filterCheckedTreeNodes(item.children, checkeds);
    }
    return newItem;
  }).filter(function (item) {
    return item.children && item.children.length !== 0 || !item.children;
  });
};
var getTargetNodes = function getTargetNodes(sourceNodes, data) {
  var source = getLeafNodes(sourceNodes).map(function (item) {
    return item.value;
  });
  return _filterCheckedTreeNodes(data, source);
};

export { _filterCheckedTreeNodes as filterCheckedTreeNodes, getDefaultValue, getJSX, getLeafNodes, getTargetNodes };
//# sourceMappingURL=utils.js.map
