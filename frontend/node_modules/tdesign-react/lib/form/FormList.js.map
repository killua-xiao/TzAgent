{"version":3,"file":"FormList.js","sources":["../../../components/form/FormList.tsx"],"sourcesContent":["import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { flattenDeep, get, merge, set, unset } from 'lodash-es';\nimport log from '@tdesign/common-js/log/index';\nimport { FormListContext, useFormContext } from './FormContext';\nimport type { FormItemInstance } from './FormItem';\nimport { HOOK_MARK } from './hooks/useForm';\nimport type { FormListField, FormListFieldOperation, TdFormListProps } from './type';\nimport { calcFieldValue } from './utils';\n\nlet key = 0;\n\nconst FormList: React.FC<TdFormListProps> = (props) => {\n  const {\n    formMapRef,\n    form,\n    onFormItemValueChange,\n    initialData: initialDataFromForm,\n    resetType: resetTypeFromContext,\n  } = useFormContext();\n  const { name, rules, children } = props;\n\n  const initialData = props.initialData || get(initialDataFromForm, name) || [];\n\n  const [formListValue, setFormListValue] = useState(initialData);\n  const [fields, setFields] = useState<Array<FormListField>>(() =>\n    initialData.map((data, index) => ({\n      data: { ...data },\n      key: (key += 1),\n      name: index,\n      isListField: true,\n    })),\n  );\n  const formListMapRef = useRef(new Map()); // 收集 formItem 实例\n  const formListRef = useRef<FormItemInstance>(null); // 当前 formList 实例\n  const fieldsTaskQueueRef = useRef([]); // 记录更改 fields 数据后 callback 队列\n  const snakeName = []\n    .concat(name)\n    .filter((item) => item !== undefined)\n    .toString(); // 转化 name\n\n  const isMounted = useRef(false);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    [],\n  );\n\n  const operation: FormListFieldOperation = {\n    add(defaultValue?: any, insertIndex?: number) {\n      const cloneFields = [...fields];\n      const index = insertIndex ?? cloneFields.length;\n      cloneFields.splice(index, 0, {\n        key: (key += 1),\n        name: index,\n        isListField: true,\n      });\n      cloneFields.forEach((field, index) => Object.assign(field, { name: index }));\n      setFields(cloneFields);\n\n      const nextFormListValue = [...formListValue];\n      if (typeof defaultValue !== 'undefined') {\n        nextFormListValue[index] = defaultValue;\n        setFormListValue(nextFormListValue);\n      }\n\n      set(form?.store, flattenDeep([name, index]), nextFormListValue);\n\n      const fieldValue = calcFieldValue(name, nextFormListValue);\n      requestAnimationFrame(() => {\n        onFormItemValueChange?.({ ...fieldValue });\n      });\n    },\n    remove(index: number | number[]) {\n      const nextFields = fields\n        .filter((item) => {\n          if (Array.isArray(index)) return !index.includes(item.name);\n          return item.name !== index;\n        })\n        .map((field, i) => ({ ...field, name: i }));\n      setFields(nextFields);\n\n      const nextFormListValue = formListValue.filter((_, idx) => idx !== index);\n      setFormListValue(nextFormListValue);\n\n      unset(form?.store, flattenDeep([name, index]));\n\n      const fieldValue = calcFieldValue(name, nextFormListValue);\n      requestAnimationFrame(() => {\n        onFormItemValueChange?.({ ...fieldValue });\n      });\n    },\n    move(from: number, to: number) {\n      const cloneFields = [...fields];\n      const fromItem = { ...cloneFields[from] };\n      const toItem = { ...cloneFields[to] };\n      cloneFields[to] = fromItem;\n      cloneFields[from] = toItem;\n      set(form?.store, name, []);\n      setFields(cloneFields);\n    },\n  };\n\n  // 外部设置 fields 优先级最高，可以更改渲染的节点\n  function setListFields(fieldData: any[], callback: Function, originData) {\n    setFields(\n      fieldData.map((_, index) => ({\n        key: (key += 1),\n        name: index,\n        isListField: true,\n      })),\n    );\n    // 添加至队列中 等待下次渲染完成执行对应逻辑\n    fieldsTaskQueueRef.current.push({ callback, fieldData, originData });\n  }\n\n  useEffect(() => {\n    if (!name || !formMapRef) return;\n    formMapRef.current.set(name, formListRef);\n\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      formMapRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [snakeName]);\n\n  useEffect(() => {\n    [...formListMapRef.current.values()].forEach((formItemRef) => {\n      if (!formItemRef.current) return;\n      const { name, isUpdated } = formItemRef.current;\n      if (isUpdated) return; // 内部更新过值则跳过\n\n      const data = get(formListValue, name);\n      formItemRef.current.setField({ value: data, status: 'not' });\n    });\n  }, [formListValue]);\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n      return;\n    }\n    // fields 变化通知 watch 事件\n    form?.getInternalHooks?.(HOOK_MARK)?.notifyWatch?.(name);\n\n    // 等待子节点渲染完毕\n    Promise.resolve().then(() => {\n      if (!fieldsTaskQueueRef.current.length) return;\n\n      // fix multiple formlist stuck\n      const currentQueue = fieldsTaskQueueRef.current.pop();\n      const { fieldData, callback, originData } = currentQueue;\n\n      [...formListMapRef.current.values()].forEach((formItemRef) => {\n        if (!formItemRef.current) return;\n\n        const { name: itemName } = formItemRef.current;\n        const data = get(fieldData, itemName);\n        callback(formItemRef, data);\n      });\n\n      // formList 嵌套 formList\n      if (!formMapRef || !formMapRef.current) return;\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        if (!formItemRef.current) return;\n\n        const { name: itemName, isFormList } = formItemRef.current;\n        if (String(itemName) === String(name) || !isFormList) return;\n        const data = get(originData, itemName);\n        if (data) callback(formItemRef, data);\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [form, snakeName, fields, formMapRef]);\n\n  useImperativeHandle(\n    formListRef,\n    (): FormItemInstance => ({\n      name,\n      isFormList: true,\n      getValue() {\n        const formListValue = [];\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          if (!formItemRef.current) return;\n\n          const { name, getValue } = formItemRef.current;\n          const fieldValue = calcFieldValue(name, getValue());\n          merge(formListValue, fieldValue);\n        });\n        return formListValue;\n      },\n      validate: (trigger = 'all') => {\n        const resultList = [];\n        const validates = [...formListMapRef.current.values()].map((formItemRef) =>\n          formItemRef?.current?.validate?.(trigger),\n        );\n        return new Promise((resolve) => {\n          Promise.all(validates).then((validateResult) => {\n            validateResult.forEach((result) => {\n              const errorValue = Object.values(result)[0];\n              merge(resultList, errorValue);\n            });\n            const errorItems = validateResult.filter((item) => Object.values(item)[0] !== true);\n            if (errorItems.length) {\n              resolve({ [snakeName]: resultList });\n            } else {\n              resolve({ [snakeName]: true });\n            }\n          });\n        });\n      },\n      // TODO 支持局部更新数据\n      setValue: (fieldData: any[], originData) => {\n        setListFields(\n          fieldData,\n          (formItemRef, data) => {\n            formItemRef?.current?.setValue?.(data);\n          },\n          originData,\n        );\n      },\n      setField: (fieldData: { value?: any[]; status?: string }, originData) => {\n        const { value, status } = fieldData;\n        setListFields(\n          value,\n          (formItemRef, data) => {\n            formItemRef?.current?.setField?.({ value: data, status });\n          },\n          originData,\n        );\n      },\n      resetField: (type: string) => {\n        const resetType = type || resetTypeFromContext;\n\n        if (resetType === 'initial') {\n          setFormListValue(initialData);\n\n          const newFields = initialData.map((data, index) => ({\n            data: { ...data },\n            key: (key += 1),\n            name: index,\n            isListField: true,\n          }));\n          setFields(newFields);\n          set(form?.store, flattenDeep([name]), initialData);\n\n          requestAnimationFrame(() => {\n            [...formListMapRef.current.values()].forEach((formItemRef) => {\n              if (!formItemRef.current) return;\n              const { name: itemName } = formItemRef.current;\n              const itemValue = get(initialData, itemName);\n              if (itemValue !== undefined) {\n                formItemRef.current.setField({ value: itemValue, status: 'not' });\n              }\n            });\n          });\n        } else {\n          // 重置为空\n          [...formListMapRef.current.values()].forEach((formItemRef) => {\n            formItemRef?.current?.resetField?.();\n          });\n\n          fieldsTaskQueueRef.current = [];\n\n          setFormListValue([]);\n          setFields([]);\n          unset(form?.store, flattenDeep([name]));\n        }\n      },\n      setValidateMessage: (fieldData) => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          if (!formItemRef.current) return;\n\n          const { name } = formItemRef.current;\n          const data = get(fieldData, name);\n\n          formItemRef?.current?.setValidateMessage?.(data);\n        });\n      },\n      resetValidate: () => {\n        [...formListMapRef.current.values()].forEach((formItemRef) => {\n          formItemRef?.current?.resetValidate?.();\n        });\n      },\n    }),\n  );\n\n  if (typeof children !== 'function') {\n    log.error('Form', `FormList's children must be a function!`);\n    return null;\n  }\n\n  return (\n    <FormListContext.Provider value={{ name, rules, formListMapRef, initialData, form }}>\n      {children(fields, operation)}\n    </FormListContext.Provider>\n  );\n};\n\nFormList.displayName = 'FormList';\n\nexport default FormList;\n"],"names":["key","FormList","props","_useFormContext","useFormContext","formMapRef","form","onFormItemValueChange","initialDataFromForm","initialData","resetTypeFromContext","resetType","name","rules","children","get","_useState","useState","_useState2","_slicedToArray","formListValue","setFormListValue","_useState3","map","data","index","_objectSpread","isListField","_useState4","fields","setFields","formListMapRef","useRef","Map","formListRef","fieldsTaskQueueRef","snakeName","concat","filter","item","toString","isMounted","useEffect","current","operation","add","defaultValue","insertIndex","cloneFields","_toConsumableArray","length","splice","forEach","field","Object","assign","nextFormListValue","set","store","flattenDeep","fieldValue","calcFieldValue","requestAnimationFrame","remove","nextFields","Array","isArray","includes","i","_","idx","unset","move","from","to","fromItem","toItem","setListFields","fieldData","callback","originData","push","values","formItemRef","_formItemRef$current","isUpdated","setField","value","status","_form$getInternalHook","_form$getInternalHook2","getInternalHooks","call","HOOK_MARK","notifyWatch","Promise","resolve","then","currentQueue","pop","itemName","_formItemRef$current2","isFormList","String","useImperativeHandle","getValue","_formItemRef$current3","merge","validate","trigger","arguments","undefined","resultList","validates","_formItemRef$current4","_formItemRef$current5","all","validateResult","result","errorValue","errorItems","_defineProperty","setValue","_formItemRef$current6","_formItemRef$current7","_formItemRef$current8","_formItemRef$current9","resetField","type","newFields","itemValue","_formItemRef$current0","_formItemRef$current1","setValidateMessage","_formItemRef$current10","_formItemRef$current11","resetValidate","_formItemRef$current12","_formItemRef$current13","log","error","React","createElement","FormListContext","Provider","displayName"],"mappings":"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"}