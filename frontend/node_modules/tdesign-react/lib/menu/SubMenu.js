/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import React, { useContext, useState, useMemo, useRef } from 'react';
import classNames from 'classnames';
import { CSSTransition } from 'react-transition-group';
import useConfig from '../hooks/useConfig.js';
import { MenuContext } from './MenuContext.js';
import useDomRefCallback from '../hooks/useDomRefCallback.js';
import useRipple from '../hooks/useRipple.js';
import { getSubMenuMaxHeight } from './_util/getSubMenuChildStyle.js';
import _checkSubMenuChildrenActive from './_util/checkSubMenuChildrenActive.js';
import FakeArrow from '../common/FakeArrow.js';
import { checkIsSubMenu, checkIsMenuGroup } from './_util/checkMenuType.js';
import { cacularPaddingLeft } from './_util/cacularPaddingLeft.js';
import { Popup } from '../popup/index.js';
import parseTNode from '../_util/parseTNode.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../_util/noop.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useAnimation.js';
import '../_chunks/dep-3a09424a.js';
import './_util/type.js';
import '../popup/Popup.js';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-52ff3837.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-b908e1fe.js';

var _excluded = ["overlayClassName", "overlayInnerClassName"],
  _excluded2 = ["overlayClassName", "overlayInnerClassName"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var SubAccordion = function SubAccordion(props) {
  var content = props.content,
    _props$children = props.children,
    children = _props$children === void 0 ? content : _props$children,
    disabled = props.disabled,
    icon = props.icon,
    title = props.title,
    value = props.value,
    className = props.className,
    style = props.style,
    _props$level = props.level,
    level = _props$level === void 0 ? 1 : _props$level,
    popupProps = props.popupProps;
  var _ref = popupProps || {},
    overlayClassName = _ref.overlayClassName,
    overlayInnerClassName = _ref.overlayInnerClassName,
    restPopupProps = _objectWithoutProperties(_ref, _excluded);
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useContext = useContext(MenuContext),
    _useContext$expanded = _useContext.expanded,
    expanded = _useContext$expanded === void 0 ? [] : _useContext$expanded,
    onExpand = _useContext.onExpand,
    active = _useContext.active,
    expandType = _useContext.expandType,
    _useContext$theme = _useContext.theme,
    theme = _useContext$theme === void 0 ? "light" : _useContext$theme;
  var isPopUp = expandType === "popup";
  var isExpand = expanded.includes(value) && !disabled && !isPopUp;
  var handleClick = function handleClick(e) {
    e.stopPropagation();
    onExpand(value, expanded);
    setOpen(false);
  };
  var handleVisibleChange = function handleVisibleChange(visible) {
    setOpen(visible);
  };
  var popupChildren = React.Children.map(children, function (child) {
    var _child$props;
    return /*#__PURE__*/React.cloneElement(child, {
      className: classNames("".concat(classPrefix, "-menu__item--plain"), "".concat(classPrefix, "-submenu__item"), "".concat(classPrefix, "-submenu__item--icon"), (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.className)
    });
  });
  var childStyle = {
    maxHeight: isExpand || open && isPopUp ? getSubMenuMaxHeight(children) : 0
  };
  var isOpen = useMemo(function () {
    if (disabled) return false;
    if (isPopUp) return open;
    return isExpand;
  }, [disabled, isPopUp, open, isExpand]);
  var menuPaddingLeft = cacularPaddingLeft(level - 1);
  var fakeArrowStyle = isPopUp && level > 1 ? {
    transform: "rotate(-90deg)"
  } : {};
  var contentRef = useRef(null);
  var transitionCallbacks = {
    onEnter: function onEnter() {
      contentRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.scrollHeight, "px");
    },
    onEntered: function onEntered() {
      contentRef.current.style.height = "auto";
    },
    onExit: function onExit() {
      contentRef.current.style.height = "".concat(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current.scrollHeight, "px");
    },
    onExiting: function onExiting() {
      contentRef.current.style.height = "0px";
    }
  };
  var pupContent = /* @__PURE__ */React.createElement("ul", {
    className: classNames("".concat(classPrefix, "-menu__popup-wrapper"), _defineProperty({}, "".concat(classPrefix, "-is-opened"), isOpen)),
    key: "popup",
    style: childStyle
  }, popupChildren);
  var submenu = /* @__PURE__ */React.createElement("li", {
    className: classNames("".concat(classPrefix, "-submenu"), className, _defineProperty(_defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled), "".concat(classPrefix, "-is-opened"), isOpen)),
    style: style
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-menu__item"), _defineProperty(_defineProperty({}, "".concat(classPrefix, "-is-opened"), isOpen), "".concat(classPrefix, "-is-active"), _checkSubMenuChildrenActive(children, active))),
    onClick: handleClick
  }, parseTNode(icon), /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-menu__content")
  }, title), /* @__PURE__ */React.createElement(FakeArrow, {
    style: fakeArrowStyle,
    isActive: isOpen,
    disabled: disabled
  })), !isPopUp && /* @__PURE__ */React.createElement(CSSTransition, _objectSpread({
    "in": isOpen,
    appear: true,
    timeout: 300,
    nodeRef: contentRef
  }, transitionCallbacks), /* @__PURE__ */React.createElement("ul", {
    key: "normal",
    style: _objectSpread(_objectSpread({}, childStyle), {}, {
      "--padding-left": "".concat(menuPaddingLeft, "px"),
      overflow: "hidden"
    }),
    className: classNames("".concat(classPrefix, "-menu__sub"), "".concat(classPrefix, "-slide-down-enter-active")),
    ref: contentRef
  }, popupChildren)));
  if (isPopUp) {
    return /* @__PURE__ */React.createElement(Popup, _objectSpread(_objectSpread({}, restPopupProps), {}, {
      overlayInnerClassName: ["".concat(classPrefix, "-menu__popup"), "".concat(classPrefix, "-is-vertical"), _defineProperty({}, "".concat(classPrefix, "-is-opened"), isOpen), overlayInnerClassName],
      overlayClassName: ["".concat(classPrefix, "-menu--").concat(theme), _defineProperty({}, "".concat(classPrefix, "-menu-is-nested"), level > 1), overlayClassName],
      visible: open,
      placement: "right-top",
      content: pupContent,
      onVisibleChange: handleVisibleChange
    }), submenu);
  }
  return submenu;
};
var SubTitleMenu = function SubTitleMenu(props) {
  var className = props.className,
    style = props.style,
    children = props.children,
    disabled = props.disabled,
    icon = props.icon,
    title = props.title,
    value = props.value,
    _props$level2 = props.level,
    level = _props$level2 === void 0 ? 1 : _props$level2,
    popupProps = props.popupProps;
  var _ref4 = popupProps || {},
    overlayClassName = _ref4.overlayClassName,
    overlayInnerClassName = _ref4.overlayInnerClassName,
    restPopupProps = _objectWithoutProperties(_ref4, _excluded2);
  var _useContext2 = useContext(MenuContext),
    active = _useContext2.active,
    onChange = _useContext2.onChange,
    expandType = _useContext2.expandType,
    _useContext2$theme = _useContext2.theme,
    theme = _useContext2$theme === void 0 ? "light" : _useContext2$theme;
  var _useConfig2 = useConfig(),
    classPrefix = _useConfig2.classPrefix;
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var handleClick = function handleClick() {
    return onChange(value);
  };
  var handleVisibleChange = function handleVisibleChange(visible) {
    setOpen(visible);
  };
  var _useDomRefCallback = useDomRefCallback(),
    _useDomRefCallback2 = _slicedToArray(_useDomRefCallback, 2),
    subMenuDom = _useDomRefCallback2[0],
    setRefCurrent = _useDomRefCallback2[1];
  useRipple(subMenuDom);
  var isPopUp = expandType === "popup";
  var isActive = _checkSubMenuChildrenActive(children, active) || active === value;
  var isOpen = useMemo(function () {
    if (disabled) return false;
    if (isPopUp) return open;
    return false;
  }, [disabled, isPopUp, open]);
  var fakeArrowStyle = level > 1 ? {
    transform: "rotate(-90deg)"
  } : {};
  var pupContent = /* @__PURE__ */React.createElement("ul", {
    className: classNames("".concat(classPrefix, "-menu__popup-wrapper"), _defineProperty({}, "".concat(classPrefix, "-is-opened"), isOpen))
  }, children);
  var placement = "right-top";
  if (level < 2) {
    placement = "bottom-left";
  }
  var submenu = /* @__PURE__ */React.createElement("li", {
    className: classNames("".concat(classPrefix, "-submenu"), className, _defineProperty({}, "".concat(classPrefix, "-is-opened"), open))
  }, /* @__PURE__ */React.createElement("div", {
    ref: setRefCurrent,
    className: classNames("".concat(classPrefix, "-menu__item"), _defineProperty(_defineProperty({}, "".concat(classPrefix, "-is-active"), isActive), "".concat(classPrefix, "-is-opened"), open)),
    onClick: handleClick,
    style: style
  }, parseTNode(icon), /* @__PURE__ */React.createElement("span", null, title), isPopUp && /* @__PURE__ */React.createElement(FakeArrow, {
    style: fakeArrowStyle,
    isActive: level === 1 && open
  })));
  if (isPopUp) {
    return /* @__PURE__ */React.createElement(Popup, _objectSpread(_objectSpread({}, restPopupProps), {}, {
      overlayInnerClassName: ["".concat(classPrefix, "-menu__popup"), "".concat(classPrefix, "-is-vertical"), _defineProperty({}, "".concat(classPrefix, "-is-opened"), isOpen), overlayInnerClassName],
      overlayClassName: ["".concat(classPrefix, "-menu--").concat(theme), "".concat(classPrefix, "-is-head-menu"), _defineProperty({}, "".concat(classPrefix, "-menu-is-nested"), level > 1), overlayClassName],
      visible: open,
      placement: placement,
      content: pupContent,
      onVisibleChange: handleVisibleChange
    }), submenu);
  }
  return submenu;
};
var SubMenu = function SubMenu(props) {
  var _useContext3 = useContext(MenuContext),
    mode = _useContext3.mode;
  var children = props.children,
    _props$level3 = props.level,
    level = _props$level3 === void 0 ? 1 : _props$level3;
  var _changeItemLevel = function changeItemLevel(item) {
    if (checkIsSubMenu(item)) {
      return /*#__PURE__*/React.cloneElement(item, {
        level: level + 1
      });
    }
    if (checkIsMenuGroup(item)) {
      var groupChildren = React.Children.map(item.props.children, function (item2) {
        return _changeItemLevel(item2);
      });
      return /*#__PURE__*/React.cloneElement(item, {
        level: level + 1
      }, groupChildren);
    }
    return item;
  };
  var childElement = React.Children.map(children, function (item) {
    return _changeItemLevel(item);
  });
  if (mode === "accordion") return /* @__PURE__ */React.createElement(SubAccordion, _objectSpread({}, props), childElement);
  if (mode === "title") return /* @__PURE__ */React.createElement(SubTitleMenu, _objectSpread({}, props), childElement);
  return null;
};
SubMenu.displayName = "SubMenu";

export { SubMenu as default };
//# sourceMappingURL=SubMenu.js.map
