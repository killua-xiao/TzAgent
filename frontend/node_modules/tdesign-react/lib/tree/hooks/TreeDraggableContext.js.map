{"version":3,"file":"TreeDraggableContext.js","sources":["../../../../components/tree/hooks/TreeDraggableContext.tsx"],"sourcesContent":["import { useRef } from 'react';\nimport TreeNode from '@tdesign/common-js/tree-v1/tree-node';\nimport TreeStore from '@tdesign/common-js/tree-v1/tree-store';\nimport { createHookContext } from '../../_util/createHookContext';\nimport type { TreeProps } from '../Tree';\nimport type { TdTreeProps } from '../type';\n\ninterface Value {\n  props: TreeProps;\n  store: TreeStore;\n}\n\nexport type BaseDragContextType = {\n  node: TreeNode;\n  e: React.DragEvent<HTMLDivElement>;\n};\n\nexport type DragContextType = BaseDragContextType & {\n  dropPosition: number;\n};\n\nexport type DropContextType = BaseDragContextType & {\n  dropPosition: number;\n  allowDrop?: TdTreeProps['allowDrop'];\n};\n\nexport const TreeDraggableContext = createHookContext((value: Value) => {\n  const { props, store } = value;\n\n  const dragNode = useRef<TreeNode | null>(null);\n\n  const onDragStart = (context: BaseDragContextType) => {\n    dragNode.current = context.node;\n    props.onDragStart?.({\n      ...context,\n      node: context.node.getModel(),\n    });\n  };\n\n  const onDragEnd = (context: BaseDragContextType) => {\n    dragNode.current = context.node;\n    props.onDragEnd?.({\n      ...context,\n      node: context.node.getModel(),\n    });\n  };\n\n  const onDragOver = (context: DragContextType) => {\n    props.onDragOver?.({\n      ...context,\n      node: context.node.getModel(),\n      dragNode: dragNode.current?.getModel(),\n    });\n  };\n\n  const onDragLeave = (context: DragContextType) => {\n    props.onDragLeave?.({\n      ...context,\n      node: context.node.getModel(),\n      dragNode: dragNode.current?.getModel(),\n    });\n  };\n\n  const onDrop = (context: DropContextType) => {\n    const { node, dropPosition } = context;\n    if (\n      node.value === dragNode.current?.value ||\n      node.getParents().some((_node) => _node.value === dragNode.current?.value)\n    ) {\n      return;\n    }\n    const ctx = {\n      dropNode: node.getModel(),\n      dragNode: dragNode.current.getModel(),\n      dropPosition,\n      e: context.e,\n    };\n\n    if (props.allowDrop?.(ctx) === false) return;\n\n    const nodes = store.getNodes() as TreeNode[];\n    nodes.some((_node) => {\n      if (_node.value === node.value) {\n        if (dropPosition === 0) {\n          dragNode.current?.appendTo(store, _node);\n        } else if (dropPosition < 0) {\n          node.insertBefore(dragNode.current);\n        } else {\n          node.insertAfter(dragNode.current);\n        }\n        return true;\n      }\n      return false;\n    });\n    props.onDrop?.({\n      ...context,\n      dragNode: dragNode.current?.getModel(),\n      dropNode: node.getModel(),\n    });\n  };\n\n  return {\n    onDragStart,\n    onDragEnd,\n    onDragOver,\n    onDragLeave,\n    onDrop,\n  };\n});\n\nexport const useTreeDraggableContext = () => TreeDraggableContext.use();\n"],"names":["TreeDraggableContext","createHookContext","value","props","store","dragNode","useRef","onDragStart","context","_props$onDragStart","current","node","call","_objectSpread","getModel","onDragEnd","_props$onDragEnd","onDragOver","_props$onDragOver","_dragNode$current","onDragLeave","_props$onDragLeave","_dragNode$current2","onDrop","_dragNode$current3","_props$allowDrop","_props$onDrop","_dragNode$current6","dropPosition","getParents","some","_node","_dragNode$current4","ctx","dropNode","e","allowDrop","nodes","getNodes","_dragNode$current5","appendTo","insertBefore","insertAfter","useTreeDraggableContext","use"],"mappings":"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"}