/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import { throttle } from 'lodash-es';
import { useState, useRef } from 'react';
import { useTreeDraggableContext } from './TreeDraggableContext.js';
import { usePersistFn } from '../../hooks/usePersistFn.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_util/createHookContext.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useDraggable(props) {
  var nodeRef = props.nodeRef,
    node = props.node,
    allowDrop = props.allowDrop;
  var _useTreeDraggableCont = useTreeDraggableContext(),
    onDragStart = _useTreeDraggableCont.onDragStart,
    onDragEnd = _useTreeDraggableCont.onDragEnd,
    onDragLeave = _useTreeDraggableCont.onDragLeave,
    onDragOver = _useTreeDraggableCont.onDragOver,
    onDrop = _useTreeDraggableCont.onDrop;
  var _useState = useState({
      isDragOver: false,
      isDragging: false,
      dropPosition: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var setPartialState = usePersistFn(function (newState) {
    setState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), newState);
    });
  });
  var updateDropPosition = useRef(throttle(function (e) {
    if (!nodeRef.current) return;
    var rect = nodeRef.current.getBoundingClientRect();
    var offsetY = window.pageYOffset + rect.top;
    var pageY = e.pageY;
    var gapHeight = rect.height / 4;
    var diff = pageY - offsetY;
    if (diff < gapHeight) {
      setPartialState({
        dropPosition: -1
      });
    } else if (diff < rect.height - gapHeight) {
      setPartialState({
        dropPosition: 0
      });
    } else {
      setPartialState({
        dropPosition: 1
      });
    }
  })).current;
  var setDragStatus = function setDragStatus(status, e) {
    switch (status) {
      case "dragStart":
        setPartialState({
          isDragging: true,
          dropPosition: 0
        });
        onDragStart === null || onDragStart === void 0 || onDragStart({
          node: node,
          e: e
        });
        break;
      case "dragEnd":
        setPartialState({
          isDragging: false,
          isDragOver: false,
          dropPosition: 0
        });
        updateDropPosition.cancel();
        onDragEnd === null || onDragEnd === void 0 || onDragEnd({
          node: node,
          e: e
        });
        break;
      case "dragOver":
        setPartialState({
          isDragOver: true
        });
        updateDropPosition(e);
        onDragOver === null || onDragOver === void 0 || onDragOver({
          node: node,
          dropPosition: state.dropPosition,
          e: e
        });
        break;
      case "dragLeave":
        setPartialState({
          isDragOver: false
        });
        updateDropPosition.cancel();
        onDragLeave === null || onDragLeave === void 0 || onDragLeave({
          node: node,
          dropPosition: state.dropPosition,
          e: e
        });
        break;
      case "drop":
        onDrop === null || onDrop === void 0 || onDrop({
          node: node,
          dropPosition: state.dropPosition,
          e: e,
          allowDrop: allowDrop
        });
        setPartialState({
          isDragOver: false
        });
        updateDropPosition.cancel();
        break;
    }
  };
  return _objectSpread(_objectSpread({}, state), {}, {
    setDragStatus: setDragStatus
  });
}

export { useDraggable as default };
//# sourceMappingURL=useDraggable.js.map
