/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _typeof } from '../_chunks/dep-eca3a3de.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { useMemo } from 'react';
import { isFunction, isObject } from 'lodash-es';
import useControlled from '../hooks/useControlled.js';
import '../_chunks/dep-026a4c6b.js';
import '../_util/noop.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MAX_POPUP_WIDTH = 1e3;
function useOverlayInnerStyle(props, extra) {
  var popupProps = props.popupProps,
    autoWidth = props.autoWidth,
    readonly = props.readonly,
    disabled = props.disabled,
    onPopupVisibleChange = props.onPopupVisibleChange,
    allowInput = props.allowInput;
  var _useControlled = useControlled(props, "popupVisible", onPopupVisibleChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    innerPopupVisible = _useControlled2[0],
    setInnerPopupVisible = _useControlled2[1];
  var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
    if (!triggerElement || !popupElement) return;
    var prevDisplay = popupElement.style.display;
    popupElement.style.display = "";
    var overlayScrollWidth = popupElement.offsetWidth - popupElement.scrollWidth;
    var width = popupElement.offsetWidth - overlayScrollWidth > triggerElement.offsetWidth ? popupElement.scrollWidth : triggerElement.offsetWidth - overlayScrollWidth;
    if (prevDisplay === "none") {
      popupElement.style.display = "none";
    }
    var otherOverlayInnerStyle = {};
    if (popupProps && _typeof(popupProps.overlayInnerStyle) === "object" && !popupProps.overlayInnerStyle.width) {
      otherOverlayInnerStyle = popupProps.overlayInnerStyle;
    }
    return _objectSpread({
      width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
    }, otherOverlayInnerStyle);
  };
  var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
    if (disabled || readonly) {
      return;
    }
    var newVisible = context.trigger === "trigger-element-click" && allowInput ? true : visible;
    if (props.popupVisible !== newVisible) {
      setInnerPopupVisible(newVisible, context);
      if (!newVisible) {
        var _extra$afterHidePopup;
        extra === null || extra === void 0 || (_extra$afterHidePopup = extra.afterHidePopup) === null || _extra$afterHidePopup === void 0 || _extra$afterHidePopup.call(extra, context);
      }
    }
  };
  var tOverlayInnerStyle = useMemo(function () {
    var result = {};
    var overlayInnerStyle = (popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle) || {};
    if (isFunction(overlayInnerStyle) || isObject(overlayInnerStyle) && overlayInnerStyle.width) {
      result = overlayInnerStyle;
    } else if (!autoWidth) {
      result = matchWidthFunc;
    }
    return result;
  }, [autoWidth, popupProps === null || popupProps === void 0 ? void 0 : popupProps.overlayInnerStyle]);
  return {
    tOverlayInnerStyle: tOverlayInnerStyle,
    innerPopupVisible: innerPopupVisible,
    onInnerPopupVisibleChange: onInnerPopupVisibleChange
  };
}

export { useOverlayInnerStyle as default };
//# sourceMappingURL=useOverlayInnerStyle.js.map
