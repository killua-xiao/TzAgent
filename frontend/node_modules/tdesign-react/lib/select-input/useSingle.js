/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { useRef } from 'react';
import { pick, isObject } from 'lodash-es';
import classNames from 'classnames';
import { Input } from '../input/index.js';
import { Loading } from '../loading/index.js';
import useConfig from '../hooks/useConfig.js';
import useControlled from '../hooks/useControlled.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../input/Input.js';
import '../_chunks/dep-6b660ef0.js';
import 'tdesign-icons-react';
import '../hooks/useLayoutEffect.js';
import '../_chunks/dep-3a09424a.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../hooks/useGlobalIcon.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../input/InputGroup.js';
import '../locale/LocalReceiver.js';
import '../config-provider/ConfigProvider.js';
import '../input/defaultProps.js';
import '../_util/parseTNode.js';
import '../_chunks/dep-b908e1fe.js';
import '../input/useLengthLimit.js';
import '../_chunks/dep-6af6bc60.js';
import '../_chunks/dep-87d110df.js';
import '../hooks/useDefaultProps.js';
import '../_util/noop.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-52ff3837.js';
import '../common/PluginContainer.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave", "size", "prefixIcon"];
var DEFAULT_KEYS = {
  label: "label",
  value: "value"
};
function getInputValue(value, keys) {
  var iKeys = keys || DEFAULT_KEYS;
  return isObject(value) ? value[iKeys.label] : value;
}
function useSingle(props) {
  var value = props.value,
    keys = props.keys,
    loading = props.loading;
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var inputRef = useRef(null);
  var _useControlled = useControlled(props, "inputValue", props.onInputChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    inputValue = _useControlled2[0],
    setInputValue = _useControlled2[1];
  var commonInputProps = _objectSpread(_objectSpread({}, pick(props, COMMON_PROPERTIES)), {}, {
    suffixIcon: loading ? /* @__PURE__ */React.createElement(Loading, {
      loading: true,
      size: "small"
    }) : props.suffixIcon
  });
  var onInnerClear = function onInnerClear(context) {
    var _context$e, _props$onClear;
    context === null || context === void 0 || (_context$e = context.e) === null || _context$e === void 0 || _context$e.stopPropagation();
    (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, context);
    setInputValue("", {
      trigger: "clear"
    });
  };
  var onInnerInputChange = function onInnerInputChange(value2, context) {
    if (props.allowInput) {
      setInputValue(value2, _objectSpread(_objectSpread({}, context), {}, {
        trigger: "input"
      }));
    }
  };
  var handleEmptyPanelBlur = function handleEmptyPanelBlur(value2, _ref) {
    var _props$onBlur;
    var e = _ref.e;
    (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, value2, {
      e: e,
      inputValue: value2
    });
  };
  var renderSelectSingle = function renderSelectSingle(popupVisible) {
    var _props$inputProps;
    var singleValueDisplay = !props.multiple ? props.valueDisplay : null;
    var displayedValue = popupVisible && props.allowInput ? inputValue : getInputValue(value, keys);
    return /* @__PURE__ */React.createElement(Input, _objectSpread(_objectSpread(_objectSpread({
      ref: inputRef
    }, commonInputProps), {}, {
      autoWidth: props.autoWidth,
      allowInput: props.allowInput,
      placeholder: singleValueDisplay ? "" : props.placeholder,
      value: singleValueDisplay ? " " : displayedValue,
      label: (props.label || singleValueDisplay) && /* @__PURE__ */React.createElement(React.Fragment, null, props.label, singleValueDisplay),
      onChange: onInnerInputChange,
      onClear: onInnerClear,
      onFocus: function onFocus(val, context) {
        var _props$onFocus;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, value, _objectSpread(_objectSpread({}, context), {}, {
          inputValue: val
        }));
      },
      onEnter: function onEnter(val, context) {
        var _props$onEnter;
        (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, value, _objectSpread(_objectSpread({}, context), {}, {
          inputValue: val
        }));
      },
      onBlur: !props.panel ? handleEmptyPanelBlur : null
    }, props.inputProps), {}, {
      inputClass: classNames((_props$inputProps = props.inputProps) === null || _props$inputProps === void 0 ? void 0 : _props$inputProps.className, _defineProperty(_defineProperty({}, "".concat(classPrefix, "-input--focused"), popupVisible), "".concat(classPrefix, "-is-focused"), popupVisible))
    }));
  };
  return {
    inputRef: inputRef,
    commonInputProps: commonInputProps,
    singleInputValue: inputValue,
    onInnerClear: onInnerClear,
    renderSelectSingle: renderSelectSingle
  };
}

export { useSingle as default };
//# sourceMappingURL=useSingle.js.map
