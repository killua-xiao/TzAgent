/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import React, { forwardRef } from 'react';
import classNames from 'classnames';
import { isString, isNumber } from 'lodash-es';
import useConfig from '../hooks/useConfig.js';
import '../_chunks/dep-eca3a3de.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';

var _excluded = ["prepend", "append", "children", "className", "style"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var InputAdornment = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var prepend = props.prepend,
    append = props.append,
    children = props.children,
    className = props.className,
    style = props.style,
    wrapperProps = _objectWithoutProperties(props, _excluded);
  var renderAddon = function renderAddon(type, classPrefix2, Content) {
    if (typeof Content === "undefined") return null;
    var addonNode;
    var isContentNode = isString(Content) || isNumber(Content);
    if (typeof Content === "function") {
      addonNode = /* @__PURE__ */React.createElement(Content, null);
    } else {
      addonNode = isContentNode ? /* @__PURE__ */React.createElement("span", {
        className: "".concat(classPrefix2, "-input-adornment__text")
      }, Content) : Content;
    }
    return addonNode ? /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix2, "-input-adornment__").concat(type)
    }, addonNode) : addonNode;
  };
  var renderChildren = function renderChildren() {
    return React.Children.map(children, function (child) {
      if (!child) return null;
      if (/*#__PURE__*/React.isValidElement(child)) {
        var childProps = child.props;
        return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread(_objectSpread({}, wrapperProps), childProps), {}, {
          onChange: function onChange() {
            var _wrapperProps$onChang, _wrapperProps$onChang2, _childProps$onChange, _childProps$onChange$;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            wrapperProps === null || wrapperProps === void 0 || (_wrapperProps$onChang = wrapperProps.onChange) === null || _wrapperProps$onChang === void 0 || (_wrapperProps$onChang2 = _wrapperProps$onChang.call) === null || _wrapperProps$onChang2 === void 0 || _wrapperProps$onChang2.call.apply(_wrapperProps$onChang2, [_wrapperProps$onChang, null].concat(args));
            childProps === null || childProps === void 0 || (_childProps$onChange = childProps.onChange) === null || _childProps$onChange === void 0 || (_childProps$onChange$ = _childProps$onChange.call) === null || _childProps$onChange$ === void 0 || _childProps$onChange$.call.apply(_childProps$onChange$, [_childProps$onChange, null].concat(args));
          }
        }));
      }
      return child;
    });
  };
  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    style: style,
    className: classNames("".concat(classPrefix, "-input-adornment"), className)
  }, renderAddon("prepend", classPrefix, prepend), renderChildren(), renderAddon("append", classPrefix, append));
});
InputAdornment.displayName = "InputAdornment";

export { InputAdornment as default };
//# sourceMappingURL=InputAdornment.js.map
