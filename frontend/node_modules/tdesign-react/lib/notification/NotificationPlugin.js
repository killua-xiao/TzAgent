/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-87d110df.js';
import { _ as _typeof } from '../_chunks/dep-eca3a3de.js';
import { l as listMap, f as fetchListInstance } from '../_chunks/dep-f73b49eb.js';
import { setGlobalConfig, getConfig } from './config.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-cb0a3966.js';
import 'react';
import 'classnames';
import 'tdesign-icons-react';
import '../_chunks/dep-48805ab8.js';
import '../_util/react-render.js';
import '../_chunks/dep-52ff3837.js';
import 'react-dom';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../_util/noop.js';
import '../_util/parseTNode.js';
import '../_chunks/dep-b908e1fe.js';
import '../hooks/useGlobalIcon.js';
import './defaultProps.js';
import '../hooks/useDefaultProps.js';
import '../config-provider/ConfigProvider.js';
import '../common/PluginContainer.js';

var renderNotification = function renderNotification(theme, options) {
  if (_typeof(options) !== "object") return;
  var configs = getConfig(options);
  var placement = configs.placement;
  var attach = function () {
    var containerId = "tdesign-notification-".concat(placement);
    var container = document.querySelector("#".concat(containerId));
    if (container && container instanceof HTMLElement) {
      return container;
    }
    var element = document.createElement("div");
    element.setAttribute("id", containerId);
    if (options.attach && typeof options.attach === "string") {
      var container2 = document.querySelector(options.attach);
      if (container2 instanceof HTMLElement) return container2.appendChild(element);
    }
    if (options.attach instanceof HTMLElement) return options.attach.appendChild(element);
    document.body.appendChild(element);
    return element;
  }();
  return fetchListInstance(placement, attach, configs.zIndex).then(function (listInstance) {
    return listInstance.push(theme, configs);
  });
};
var NotificationPlugin = function NotificationPlugin(theme, props) {
  return renderNotification(theme, props);
};
NotificationPlugin.info = function (options) {
  return renderNotification("info", options);
};
NotificationPlugin.success = function (options) {
  return renderNotification("success", options);
};
NotificationPlugin.warning = function (options) {
  return renderNotification("warning", options);
};
NotificationPlugin.error = function (options) {
  return renderNotification("error", options);
};
NotificationPlugin.close = function (promise) {
  return promise.then(function (instance) {
    return instance.close();
  });
};
NotificationPlugin.closeAll = function () {
  return _toConsumableArray(listMap.values()).forEach(function (list) {
    return list.removeAll();
  });
};
NotificationPlugin.config = function (options) {
  return setGlobalConfig(options);
};

export { NotificationPlugin };
//# sourceMappingURL=NotificationPlugin.js.map
