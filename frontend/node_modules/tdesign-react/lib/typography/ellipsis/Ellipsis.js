/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import { _ as _objectWithoutProperties } from '../../_chunks/dep-6b660ef0.js';
import React, { useRef, useEffect, useState } from 'react';
import classNames from 'classnames';
import Truncate from './Truncate.js';
import useConfig from '../../hooks/useConfig.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-46885238.js';
import 'lodash-es';
import 'react-is';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-f97636ce.js';
import '../../_chunks/dep-9dbbf468.js';
import 'dayjs';

var _excluded = ["className", "children", "lines", "ellipsisClassName", "ellipsisPrefix", "onToggleExpand", "width", "onTruncate", "component", "collapsible", "expandable", "more", "less"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Ellipsis = function Ellipsis(_ref) {
  var className = _ref.className,
    children = _ref.children,
    _ref$lines = _ref.lines,
    lines = _ref$lines === void 0 ? 1 : _ref$lines,
    ellipsisClassName = _ref.ellipsisClassName,
    _ref$ellipsisPrefix = _ref.ellipsisPrefix,
    ellipsisPrefix = _ref$ellipsisPrefix === void 0 ? "..." : _ref$ellipsisPrefix,
    onToggleExpand = _ref.onToggleExpand,
    _ref$width = _ref.width,
    width = _ref$width === void 0 ? 0 : _ref$width,
    onTruncate = _ref.onTruncate,
    _ref$component = _ref.component,
    Component = _ref$component === void 0 ? "div" : _ref$component,
    _ref$collapsible = _ref.collapsible,
    collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,
    _ref$expandable = _ref.expandable,
    expandable = _ref$expandable === void 0 ? false : _ref$expandable,
    more = _ref.more,
    less = _ref.less,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var symbolClassName = ellipsisClassName || "".concat(classPrefix, "-typography-ellipsis-symbol");
  var isMountRef = useRef(false);
  useEffect(function () {
    isMountRef.current = true;
  }, []);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isExpanded = _useState2[0],
    setIsExpanded = _useState2[1];
  var handleToggleExpand = function handleToggleExpand(e) {
    if (!expandable) return;
    if (isMountRef.current) {
      setIsExpanded(!isExpanded);
      onToggleExpand === null || onToggleExpand === void 0 || onToggleExpand(!isExpanded, e);
    }
  };
  var truncateRef = useRef(null);
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isTruncated = _useState4[0],
    setTruncated = _useState4[1];
  var handleTruncate = function handleTruncate(truncated) {
    if (isMountRef.current && truncated !== isTruncated) {
      setTruncated(truncated);
      if (truncated && truncateRef.current) {
        var _truncateRef$current$, _truncateRef$current;
        (_truncateRef$current$ = (_truncateRef$current = truncateRef.current).onResize) === null || _truncateRef$current$ === void 0 || _truncateRef$current$.call(_truncateRef$current);
      }
      onTruncate === null || onTruncate === void 0 || onTruncate(truncated);
    }
  };
  var componentProps = _objectSpread({
    className: className
  }, rest);
  return /* @__PURE__ */React.createElement(Component, _objectSpread({}, componentProps), /* @__PURE__ */React.createElement(Truncate, {
    width: width,
    lines: !isExpanded && lines,
    className: "".concat(classPrefix, "-typography-ellipsis"),
    ellipsis: /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-typography-ellipsis-symbol-wrapper")
    }, ellipsisPrefix, /* @__PURE__ */React.createElement("span", {
      className: symbolClassName,
      onClick: handleToggleExpand
    }, more)),
    onTruncate: handleTruncate,
    ref: truncateRef,
    lineClassName: "".concat(classPrefix, "-typography-ellipsis-line")
  }, children), !isTruncated && collapsible && isExpanded && /* @__PURE__ */React.createElement("span", {
    className: classNames(symbolClassName, "".concat(symbolClassName, "--expanded")),
    onClick: handleToggleExpand
  }, less));
};

export { Ellipsis as default };
//# sourceMappingURL=Ellipsis.js.map
