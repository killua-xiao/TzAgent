/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import React, { useState } from 'react';
import { isFunction } from 'lodash-es';
import { Tooltip } from '../../tooltip/index.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../tooltip/Tooltip.js';
import '../../_chunks/dep-6b660ef0.js';
import 'classnames';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import '../../_util/ref.js';
import 'react-is';
import '../../_util/isFragment.js';
import '../../_chunks/dep-3a09424a.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-f97636ce.js';
import '../../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../../hooks/useLayoutEffect.js';
import '../../hooks/useAnimation.js';
import '../../hooks/useAttach.js';
import '../../hooks/useControlled.js';
import '../../_util/noop.js';
import '../../hooks/useDefaultProps.js';
import '../../hooks/useMutationObserver.js';
import '../../hooks/useLatest.js';
import '../../hooks/usePopper.js';
import '../../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../../hooks/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../popup/hooks/useTrigger.js';
import '../../_util/composeRefs.js';
import '../../_util/listener.js';
import '../../popup/utils/transition.js';
import '../../popup/PopupPlugin.js';
import '../../_chunks/dep-52ff3837.js';
import '../../_util/react-render.js';
import '../../common/PluginContainer.js';
import '../../config-provider/ConfigProvider.js';
import '../../tooltip/defaultProps.js';
import '../../tooltip/TooltipLite.js';
import '../../hooks/useSwitch.js';
import '../../hooks/usePersistFn.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useEllipsis(ellipsis) {
  var _useLocaleReceiver = useLocaleReceiver("typography"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    local = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var expandText = t(local.expandText);
  var collapseText = t(local.collapseText);
  var formattedEllipsis = {};
  if (ellipsis) {
    var _ellipsis$expandable, _ellipsis$collapsible;
    formattedEllipsis = ellipsis === true ? {
      row: 1,
      expandable: false,
      tooltipProps: null,
      suffix: function suffix() {
        return "";
      },
      collapsible: true
    } : {
      row: ellipsis.row || 1,
      expandable: (_ellipsis$expandable = ellipsis.expandable) !== null && _ellipsis$expandable !== void 0 ? _ellipsis$expandable : false,
      tooltipProps: ellipsis.tooltipProps || null,
      suffix: function suffix(_ref) {
        var expanded = _ref.expanded;
        return typeof (ellipsis === null || ellipsis === void 0 ? void 0 : ellipsis.suffix) === "function" ? ellipsis === null || ellipsis === void 0 ? void 0 : ellipsis.suffix({
          expanded: expanded
        }) : expanded ? collapseText : ellipsis !== null && ellipsis !== void 0 && ellipsis.expandable ? "".concat(expandText) : "...";
      },
      collapsible: (_ellipsis$collapsible = ellipsis === null || ellipsis === void 0 ? void 0 : ellipsis.collapsible) !== null && _ellipsis$collapsible !== void 0 ? _ellipsis$collapsible : false
    };
  }
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    isClamped = _useState2[0],
    setIsClamped = _useState2[1];
  var handleExpand = function handleExpand(expanded) {
    var _ellipsis$onExpand;
    if (typeof expanded !== "boolean") return;
    setIsClamped(!expanded);
    (_ellipsis$onExpand = ellipsis.onExpand) === null || _ellipsis$onExpand === void 0 || _ellipsis$onExpand.call(ellipsis, !expanded);
  };
  var getEllipsisSuffix = function getEllipsisSuffix() {
    var _formattedEllipsis$su, _formattedEllipsis, _formattedEllipsis2;
    var moreOrLess;
    if (isFunction(formattedEllipsis.suffix)) moreOrLess = (_formattedEllipsis$su = (_formattedEllipsis = formattedEllipsis).suffix) === null || _formattedEllipsis$su === void 0 ? void 0 : _formattedEllipsis$su.call(_formattedEllipsis, {
      expanded: !isClamped
    });else moreOrLess = formattedEllipsis.suffix;
    if ((_formattedEllipsis2 = formattedEllipsis) !== null && _formattedEllipsis2 !== void 0 && _formattedEllipsis2.tooltipProps && !!moreOrLess) {
      var _formattedEllipsis3;
      return /* @__PURE__ */React.createElement(Tooltip, _objectSpread({}, (_formattedEllipsis3 = formattedEllipsis) === null || _formattedEllipsis3 === void 0 ? void 0 : _formattedEllipsis3.tooltipProps), moreOrLess);
    }
    return moreOrLess;
  };
  var getEllipsisPrefix = function getEllipsisPrefix() {
    var _formattedEllipsis$su2, _formattedEllipsis4, _formattedEllipsis5;
    var moreOrLess;
    if (isFunction(formattedEllipsis.suffix)) moreOrLess = (_formattedEllipsis$su2 = (_formattedEllipsis4 = formattedEllipsis).suffix) === null || _formattedEllipsis$su2 === void 0 ? void 0 : _formattedEllipsis$su2.call(_formattedEllipsis4, {
      expanded: !isClamped
    });else moreOrLess = formattedEllipsis.suffix;
    if ((_formattedEllipsis5 = formattedEllipsis) !== null && _formattedEllipsis5 !== void 0 && _formattedEllipsis5.tooltipProps && !moreOrLess) {
      var _formattedEllipsis6;
      return /* @__PURE__ */React.createElement(Tooltip, _objectSpread({}, (_formattedEllipsis6 = formattedEllipsis) === null || _formattedEllipsis6 === void 0 ? void 0 : _formattedEllipsis6.tooltipProps), "...");
    }
    return "...";
  };
  var ellipsisProps = {
    lines: formattedEllipsis.row,
    ellipsisPrefix: getEllipsisPrefix(),
    more: getEllipsisSuffix(),
    less: getEllipsisSuffix(),
    onToggleExpand: handleExpand,
    expandable: formattedEllipsis.expandable,
    collapsible: formattedEllipsis.collapsible
  };
  return {
    ellipsisProps: ellipsisProps
  };
}

export { useEllipsis as default };
//# sourceMappingURL=useEllipsis.js.map
