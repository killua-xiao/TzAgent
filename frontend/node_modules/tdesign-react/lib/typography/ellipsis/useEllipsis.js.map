{"version":3,"file":"useEllipsis.js","sources":["../../../../components/typography/ellipsis/useEllipsis.tsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport React, { useState } from 'react';\nimport { isFunction } from 'lodash-es';\n\nimport { TypographyEllipsis } from '../type';\nimport Tooltip from '../../tooltip';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\n\nexport default function useEllipsis(ellipsis: boolean | TypographyEllipsis) {\n  const [local, t] = useLocaleReceiver('typography');\n  const expandText = t(local.expandText);\n  const collapseText = t(local.collapseText);\n\n  let formattedEllipsis: TypographyEllipsis = {};\n  if (ellipsis) {\n    formattedEllipsis =\n      ellipsis === true\n        ? {\n            row: 1,\n            expandable: false,\n            tooltipProps: null,\n            suffix: () => '',\n            collapsible: true,\n          }\n        : {\n            row: ellipsis.row || 1,\n            expandable: ellipsis.expandable ?? false,\n            tooltipProps: ellipsis.tooltipProps || null,\n            suffix: ({ expanded }) =>\n              typeof ellipsis?.suffix === 'function'\n                ? ellipsis?.suffix({ expanded })\n                : expanded\n                ? collapseText\n                : ellipsis?.expandable\n                ? `${expandText}`\n                : '...',\n            collapsible: ellipsis?.collapsible ?? false,\n          };\n  }\n\n  const [isClamped, setIsClamped] = useState(true);\n  const handleExpand = (expanded: boolean) => {\n    if (typeof expanded !== 'boolean') return;\n    setIsClamped(!expanded);\n    (ellipsis as TypographyEllipsis).onExpand?.(!expanded);\n  };\n\n  const getEllipsisSuffix = () => {\n    let moreOrLess: React.ReactNode;\n    if (isFunction(formattedEllipsis.suffix)) moreOrLess = formattedEllipsis.suffix?.({ expanded: !isClamped });\n    else moreOrLess = formattedEllipsis.suffix;\n\n    if (formattedEllipsis?.tooltipProps && !!moreOrLess) {\n      return <Tooltip {...formattedEllipsis?.tooltipProps}>{moreOrLess}</Tooltip>;\n    }\n    return moreOrLess;\n  };\n\n  const getEllipsisPrefix = () => {\n    let moreOrLess: React.ReactNode;\n    if (isFunction(formattedEllipsis.suffix)) moreOrLess = formattedEllipsis.suffix?.({ expanded: !isClamped });\n    else moreOrLess = formattedEllipsis.suffix;\n\n    if (formattedEllipsis?.tooltipProps && !moreOrLess) {\n      return <Tooltip {...formattedEllipsis?.tooltipProps}>...</Tooltip>;\n    }\n    return '...';\n  };\n\n  const ellipsisProps = {\n    lines: formattedEllipsis.row,\n    ellipsisPrefix: getEllipsisPrefix(),\n    more: getEllipsisSuffix(),\n    less: getEllipsisSuffix(),\n    onToggleExpand: handleExpand,\n    expandable: formattedEllipsis.expandable,\n    collapsible: formattedEllipsis.collapsible,\n  };\n\n  return { ellipsisProps };\n}\n"],"names":["useEllipsis","ellipsis","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","_slicedToArray","local","t","expandText","collapseText","formattedEllipsis","_ellipsis$expandable","_ellipsis$collapsible","row","expandable","tooltipProps","suffix","collapsible","_ref","expanded","concat","_useState","useState","_useState2","isClamped","setIsClamped","handleExpand","_ellipsis$onExpand","onExpand","call","getEllipsisSuffix","_formattedEllipsis$su","_formattedEllipsis","_formattedEllipsis2","moreOrLess","isFunction","_formattedEllipsis3","React","createElement","Tooltip","_objectSpread","getEllipsisPrefix","_formattedEllipsis$su2","_formattedEllipsis4","_formattedEllipsis5","_formattedEllipsis6","ellipsisProps","lines","ellipsisPrefix","more","less","onToggleExpand"],"mappings":"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"}