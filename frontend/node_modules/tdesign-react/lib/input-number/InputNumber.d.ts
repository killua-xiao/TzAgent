import React, { ForwardedRef } from 'react';
import { InputNumberValue, TdInputNumberProps } from './type';
import { StyledProps } from '../common';
export interface InputNumberProps<T = InputNumberValue> extends TdInputNumberProps<T>, StyledProps {
}
export interface InputNumberRef {
    currentElement: ForwardedRef<HTMLDivElement>;
    inputElement: ForwardedRef<HTMLDivElement>;
}
declare function TdInputNumber<T extends InputNumberValue = InputNumberValue>(originalProps: InputNumberProps<T>, ref: ForwardedRef<InputNumberRef>): React.JSX.Element;
export type InputNumberOuterForwardRef = {
    <T>(props: InputNumberProps<T> & {
        ref?: ForwardedRef<InputNumberRef>;
    }): ReturnType<typeof TdInputNumber>;
} & React.ForwardRefExoticComponent<InputNumberProps>;
declare const InputNumber: React.ForwardRefExoticComponent<InputNumberProps<InputNumberValue> & React.RefAttributes<InputNumberRef>>;
export default InputNumber;
