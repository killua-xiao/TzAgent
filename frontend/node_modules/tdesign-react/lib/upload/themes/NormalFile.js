/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-87d110df.js';
import React from 'react';
import { CloseIcon, TimeFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-react';
import classNames from 'classnames';
import { a as abridgeName } from '../../_chunks/dep-f83e4452.js';
import parseTNode from '../../_util/parseTNode.js';
import { Loading } from '../../loading/index.js';
import { Link } from '../../link/index.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-b908e1fe.js';
import 'lodash-es';
import '../../loading/Loading.js';
import '../../_chunks/dep-48805ab8.js';
import '../../_chunks/dep-3a09424a.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-f97636ce.js';
import '../../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../../common/Portal.js';
import 'react-dom';
import '../../hooks/useLayoutEffect.js';
import '../../loading/gradient.js';
import '../../_chunks/dep-c48e2ca1.js';
import '../../_chunks/dep-6af6bc60.js';
import '../../hooks/useDomRefCallback.js';
import '../../loading/defaultProps.js';
import '../../hooks/useDefaultProps.js';
import '../../loading/plugin.js';
import '../../_util/react-render.js';
import '../../_chunks/dep-52ff3837.js';
import '../../common/PluginContainer.js';
import '../../config-provider/ConfigProvider.js';
import '../../link/Link.js';
import '../../_chunks/dep-6b660ef0.js';
import '../../link/defaultProps.js';

function NormalFile(props) {
  var _displayFiles$, _displayFiles$0$respo;
  var theme = props.theme,
    disabled = props.disabled,
    classPrefix = props.classPrefix,
    locale = props.locale;
  var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon,
      TimeFilledIcon: TimeFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon,
      CloseCircleFilledIcon: CloseCircleFilledIcon
    }),
    CloseIcon$1 = _useGlobalIcon.CloseIcon,
    TimeFilledIcon$1 = _useGlobalIcon.TimeFilledIcon,
    CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
    ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
    CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon;
  var uploadPrefix = "".concat(classPrefix, "-upload");
  var renderProgress = function renderProgress(percent) {
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__single-progress")
    }, /* @__PURE__ */React.createElement(Loading, null), /* @__PURE__ */React.createElement("span", {
      className: "".concat(uploadPrefix, "__single-percent")
    }, percent || 0, "%"));
  };
  var renderFilePreviewAsText = function renderFilePreviewAsText(files) {
    var _files$;
    if (theme !== "file") return null;
    if (!props.multiple && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "fail" && props.autoUpload) {
      return null;
    }
    return files.map(function (file, index) {
      var fileName = props.abridgeName && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
      return /* @__PURE__ */React.createElement("div", {
        className: "".concat(uploadPrefix, "__single-display-text ").concat(uploadPrefix, "__display-text--margin"),
        key: file.name + index + file.percent + file.status
      }, file.url ? /* @__PURE__ */React.createElement(Link, {
        href: file.url,
        target: "_blank",
        hover: "color",
        size: "small",
        className: "".concat(uploadPrefix, "__single-name")
      }, fileName) : /* @__PURE__ */React.createElement("span", {
        className: "".concat(uploadPrefix, "__single-name")
      }, fileName), file.status === "fail" && /* @__PURE__ */React.createElement("div", {
        className: "".concat(uploadPrefix, "__flow-status ").concat(uploadPrefix, "__file-fail")
      }, /* @__PURE__ */React.createElement(ErrorCircleFilledIcon$1, null)), file.status === "waiting" && /* @__PURE__ */React.createElement("div", {
        className: "".concat(uploadPrefix, "__flow-status ").concat(uploadPrefix, "__file-waiting")
      }, /* @__PURE__ */React.createElement(TimeFilledIcon$1, null)), file.status === "progress" && renderProgress(file.percent), !disabled && file.status !== "progress" && /* @__PURE__ */React.createElement(CloseIcon$1, {
        className: "".concat(uploadPrefix, "__icon-delete"),
        onClick: function onClick(e) {
          return props.onRemove({
            e: e,
            file: file,
            index: index
          });
        }
      }));
    });
  };
  var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
    var _props$abridgeName;
    var file = props.displayFiles[0];
    var inputTextClass = ["".concat(classPrefix, "-input__inner"), _defineProperty({}, "".concat(uploadPrefix, "__placeholder"), !props.displayFiles[0])];
    var disabledClass = disabled ? "".concat(classPrefix, "-is-disabled") : "";
    var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length && file !== null && file !== void 0 && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file === null || file === void 0 ? void 0 : file.name;
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(uploadPrefix, "__single-input-preview ").concat(classPrefix, "-input ").concat(disabledClass)
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames(inputTextClass)
    }, /* @__PURE__ */React.createElement("span", {
      className: classNames("".concat(uploadPrefix, "__single-input-text"), _defineProperty({}, props.placeholderClass, props.placeholder && !(file !== null && file !== void 0 && file.name)))
    }, file !== null && file !== void 0 && file.name ? fileName : props.placeholder), (file === null || file === void 0 ? void 0 : file.status) === "progress" && renderProgress(file.percent), (file === null || file === void 0 ? void 0 : file.status) === "waiting" && /* @__PURE__ */React.createElement(TimeFilledIcon$1, {
      className: "".concat(uploadPrefix, "__status-icon ").concat(uploadPrefix, "__file-waiting")
    }), (file === null || file === void 0 ? void 0 : file.name) && file.status === "success" && /* @__PURE__ */React.createElement(CheckCircleFilledIcon$1, {
      className: "".concat(uploadPrefix, "__status-icon")
    }), (file === null || file === void 0 ? void 0 : file.name) && file.status === "fail" && /* @__PURE__ */React.createElement(ErrorCircleFilledIcon$1, {
      className: "".concat(uploadPrefix, "__status-icon ").concat(uploadPrefix, "__file-fail")
    }), Boolean(!disabled && (file === null || file === void 0 ? void 0 : file.name)) && /* @__PURE__ */React.createElement(CloseCircleFilledIcon$1, {
      className: "".concat(uploadPrefix, "__single-input-clear"),
      onClick: function onClick(e) {
        return props.onRemove({
          e: e,
          file: file,
          index: 0
        });
      }
    })));
  };
  var displayFiles = props.displayFiles,
    fileListDisplay = props.fileListDisplay;
  var fileListDisplayNode = parseTNode(fileListDisplay, {
    onRemove: props.onRemove,
    toUploadFiles: props.toUploadFiles,
    sizeOverLimitMessage: props.sizeOverLimitMessage,
    locale: props.locale,
    files: displayFiles
  });
  var classes = ["".concat(uploadPrefix, "__single"), "".concat(uploadPrefix, "__single-").concat(theme)];
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(classes)
  }, theme === "file-input" && renderFilePreviewAsInput(), props.children, theme === "file" && props.placeholder && !displayFiles[0] && /* @__PURE__ */React.createElement("small", {
    className: classNames([props.tipsClasses, props.placeholderClass])
  }, props.placeholder), fileListDisplayNode === null ? null : fileListDisplayNode || renderFilePreviewAsText(displayFiles), !props.multiple && ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail" && theme === "file" ? /* @__PURE__ */React.createElement("small", {
    className: classNames(props.errorClasses)
  }, ((_displayFiles$0$respo = displayFiles[0].response) === null || _displayFiles$0$respo === void 0 ? void 0 : _displayFiles$0$respo.error) || locale.progress.failText) : null);
}
NormalFile.displayName = "NormalFile";

export { NormalFile as default };
//# sourceMappingURL=NormalFile.js.map
