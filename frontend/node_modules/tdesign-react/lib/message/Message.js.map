{"version":3,"file":"Message.js","sources":["../../../components/message/Message.tsx"],"sourcesContent":["import React, { CSSProperties, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { render, unmount } from '../_util/react-render';\n\nimport {\n  MessageCloseAllMethod,\n  MessageErrorMethod,\n  MessageInfoMethod,\n  MessageInstance,\n  MessageLoadingMethod,\n  MessageMethod,\n  MessageOptions,\n  MessageQuestionMethod,\n  MessageSuccessMethod,\n  MessageWarningMethod,\n  MessageThemeList,\n  MessageConfigMethod,\n  MessagePlacementList,\n} from './type';\nimport { AttachNodeReturnValue } from '../common';\nimport noop from '../_util/noop';\nimport { PlacementOffset } from './const';\nimport MessageComponent from './MessageComponent';\n\nimport { getMessageConfig, globalConfig, setGlobalConfig } from './config';\nimport { useMessageClass } from './useMessageClass';\nimport ConfigProvider from '../config-provider';\nimport PluginContainer from '../common/PluginContainer';\n\n// 定义全局的 message 列表，closeAll 函数需要使用\nlet MessageList: MessageInstance[] = [];\nlet keyIndex = 1;\n\nexport interface MessagePlugin {\n  (theme: MessageThemeList, message: string | MessageOptions, duration?: number): Promise<MessageInstance>;\n  info: MessageInfoMethod;\n  success: MessageSuccessMethod;\n  warning: MessageWarningMethod;\n  error: MessageErrorMethod;\n  question: MessageQuestionMethod;\n  loading: MessageLoadingMethod;\n  closeAll: MessageCloseAllMethod;\n  close: (message: Promise<MessageInstance>) => void;\n  config: MessageConfigMethod;\n}\n\ninterface MessageContainerProps {\n  placement?: MessagePlacementList;\n  zIndex?: number;\n  id?: string;\n  children?: React.ReactNode;\n  renderCallback?: Function;\n}\n\nconst MessageContainer: React.FC<MessageContainerProps> = (props) => {\n  const { placement, children, zIndex, id, renderCallback } = props;\n\n  const style: CSSProperties = {\n    zIndex,\n  };\n\n  Object.keys(PlacementOffset[placement]).forEach((key) => {\n    style[key] = PlacementOffset[placement][key];\n  });\n\n  if (placement.includes('top')) {\n    style.top = `${globalConfig.top}px`;\n  }\n\n  useEffect(() => {\n    renderCallback();\n    // eslint-disable-next-line\n  }, []);\n\n  const { tdMessagePlacementClassGenerator, tdMessageListClass } = useMessageClass();\n\n  return (\n    <div className={classNames(tdMessageListClass, tdMessagePlacementClassGenerator(placement))} style={style} id={id}>\n      {children}\n    </div>\n  );\n};\n\n/**\n * @desc 创建容器，所有的 message 会填充到容器中\n */\nfunction createContainer({ attach, zIndex, placement = 'top' }: MessageOptions): Promise<Element> {\n  return new Promise((resolve) => {\n    // 默认注入到 body 中，如果用户有指定，以用户指定的为准\n    let mountedDom: AttachNodeReturnValue = document.body;\n\n    // attach 为字符串时认为是选择器\n    if (typeof attach === 'string') {\n      const result = document.querySelectorAll(attach);\n      if (result.length >= 1) {\n        // :todo 编译器提示 nodelist 为类数组类型，并没有实现迭代器，没办法使用数组解构，暂时加上 eslint-disable\n        // eslint-disable-next-line prefer-destructuring\n        mountedDom = result[0];\n      }\n    } else if (typeof attach === 'function') {\n      mountedDom = attach();\n    }\n\n    // 选择器找到一个挂载 message 的容器，不存在则创建\n    const containerId = `tdesign-message-container--${placement}`;\n    const container = Array.from(mountedDom.querySelectorAll(`#${containerId}`));\n    if (container.length < 1) {\n      const div = document.createElement('div');\n      const mGlobalConfig = ConfigProvider.getGlobalConfig();\n\n      render(\n        <PluginContainer globalConfig={mGlobalConfig}>\n          <MessageContainer\n            id={containerId}\n            placement={placement}\n            zIndex={zIndex}\n            renderCallback={() => {\n              mountedDom.appendChild(div);\n              const container = Array.from(mountedDom.querySelectorAll(`#${containerId}`));\n              resolve(container[0]);\n            }}\n          />\n        </PluginContainer>,\n        div,\n      );\n    } else {\n      resolve(container[0]);\n    }\n  });\n}\n\n/**\n * @desc 函数式调用时的 message 渲染函数\n */\nasync function renderElement(theme, config: MessageOptions): Promise<MessageInstance> {\n  const container = (await createContainer(config)) as HTMLElement;\n\n  const { content, offset, onClose = noop } = config;\n  const div = document.createElement('div');\n\n  keyIndex += 1;\n\n  const message = {\n    close: () => {\n      unmount(div);\n      div.remove();\n      message.closed = true;\n      // 关闭消息实例时，从全局的消息列表中移除该实例\n      const index = MessageList.indexOf(message);\n      if (index >= 0) {\n        MessageList.splice(index, 1);\n      }\n    },\n    key: keyIndex,\n    closed: false,\n  };\n\n  let style: React.CSSProperties = { ...config.style };\n  if (Array.isArray(offset) && offset.length === 2) {\n    const [left, top] = offset;\n    style = {\n      left,\n      top,\n      ...style,\n      position: 'relative',\n    };\n  }\n\n  return new Promise((resolve) => {\n    /**\n     * message plugin 调用时走的渲染逻辑\n     * 调用获取全局上下文的方法获取信息，可传递当前组件自身信息（ConfigProvider.getGlobalConfig({message:config})）\n     * message组件不用穿，自身的配置信息都在props中\n     */\n    const mGlobalConfig = ConfigProvider.getGlobalConfig();\n    // 渲染组件\n    render(\n      <PluginContainer globalConfig={mGlobalConfig}>\n        <MessageComponent\n          key={keyIndex}\n          {...config}\n          theme={theme}\n          style={style}\n          onClose={(ctx) => {\n            onClose(ctx);\n            message.close();\n          }}\n        >\n          {content}\n        </MessageComponent>\n      </PluginContainer>,\n      div,\n    );\n\n    // 将当前渲染的 message 挂载到指定的容器中\n    container.appendChild(div);\n    // message 推入 message 列表\n    MessageList.push(message);\n    // 将 message 实例通过 resolve 返回给 promise 调用方\n    resolve(message);\n  });\n}\n\n// 判断是否是 messageOptions\nfunction isConfig(content: MessageOptions | React.ReactNode): content is MessageOptions {\n  return Object.prototype.toString.call(content) === '[object Object]' && 'content' in (content as MessageOptions);\n}\n\n// messageMethod 方法调用 message\nconst messageMethod: MessageMethod = (theme: MessageThemeList, content, duration?: number) => {\n  let config = {} as MessageOptions;\n  if (isConfig(content)) {\n    config = {\n      duration,\n      ...content,\n    };\n  } else {\n    config = {\n      content,\n      duration,\n    };\n  }\n  return renderElement(theme, getMessageConfig(config));\n};\n\n// 创建\nexport const MessagePlugin: MessagePlugin = (theme, message, duration) => messageMethod(theme, message, duration);\nMessagePlugin.info = (content, duration) => messageMethod('info', content, duration);\nMessagePlugin.error = (content, duration) => messageMethod('error', content, duration);\nMessagePlugin.warning = (content, duration) => messageMethod('warning', content, duration);\nMessagePlugin.success = (content, duration) => messageMethod('success', content, duration);\nMessagePlugin.question = (content, duration) => messageMethod('question', content, duration);\nMessagePlugin.loading = (content, duration) => messageMethod('loading', content, duration);\nMessagePlugin.config = (options: MessageOptions) => setGlobalConfig(options);\n\n/**\n * @date 2021-05-16 13:11:24\n * @desc Message 顶层内置函数，传入 message promise，关闭传入的 message.\n */\nMessagePlugin.close = (messageInstance) => {\n  messageInstance.then((instance) => instance.close());\n};\n\n/**\n * @desc 关闭所有的 message\n */\nMessagePlugin.closeAll = (): MessageCloseAllMethod => {\n  MessageList.forEach((message) => {\n    typeof message.close === 'function' && message.close();\n  });\n  MessageList = [];\n  return;\n};\n\nexport default MessageComponent;\n"],"names":["MessageList","keyIndex","MessageContainer","props","placement","children","zIndex","id","renderCallback","style","Object","keys","PlacementOffset","forEach","key","includes","top","concat","globalConfig","useEffect","_useMessageClass","useMessageClass","tdMessagePlacementClassGenerator","tdMessageListClass","React","createElement","className","classNames","createContainer","attach","_ref","_ref$placement","Promise","resolve","mountedDom","document","body","result","querySelectorAll","length","containerId","container","Array","from","div","mGlobalConfig","ConfigProvider","getGlobalConfig","render","PluginContainer","appendChild","renderElement","_x","_x2","_renderElement","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","theme","config","content","offset","_config$onClose","_onClose","message","_offset","left","wrap","_context","prev","next","sent","onClose","noop","close","unmount","remove","closed","index","indexOf","splice","_objectSpread","isArray","_slicedToArray","position","abrupt","MessageComponent","ctx","push","stop","isConfig","prototype","toString","call","messageMethod","duration","getMessageConfig","MessagePlugin","info","error","warning","success","question","loading","options","setGlobalConfig","messageInstance","then","instance","closeAll"],"mappings":"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"}