/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { useRef, useState } from 'react';
import classNames from 'classnames';
import { isNodeOverflow } from '../_util/scroll.js';
import { Tooltip } from '../tooltip/index.js';
import useDebounce from '../hooks/useDebounce.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import 'lodash-es';
import 'raf';
import '../_chunks/dep-3a09424a.js';
import '../_util/easing.js';
import '../tooltip/Tooltip.js';
import '../_chunks/dep-6b660ef0.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-52ff3837.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/ConfigProvider.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../hooks/useSwitch.js';
import '../hooks/usePersistFn.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function Ellipsis(props) {
  var classPrefix = props.classPrefix;
  var root = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isOverflow = _useState2[0],
    setIsOverflow = _useState2[1];
  var ellipsisClasses = classNames(["".concat(classPrefix, "-table__ellipsis"), "".concat(classPrefix, "-text-ellipsis")]);
  var innerEllipsisClassName = ["".concat(classPrefix, "-table__ellipsis-content"), props.overlayClassName];
  var onTriggerMouseenter = function onTriggerMouseenter() {
    if (!root.current) return;
    setIsOverflow(isNodeOverflow(root.current));
  };
  var onTriggerMouseleave = function onTriggerMouseleave() {
    setIsOverflow(isNodeOverflow(root.current));
  };
  var onMouseAround = useDebounce(function (e) {
    e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
  }, 80);
  var cellNode = props.content || props.children;
  var ellipsisContent = /* @__PURE__ */React.createElement("div", {
    ref: root,
    className: ellipsisClasses,
    onMouseEnter: onMouseAround,
    onMouseLeave: onMouseAround
  }, cellNode);
  var content = null;
  var tooltipProps = props.tooltipProps;
  if (isOverflow) {
    var rProps = _objectSpread({
      content: props.popupContent || cellNode,
      destroyOnClose: true,
      zIndex: props.zIndex,
      attach: props.attach,
      placement: props.placement,
      overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? innerEllipsisClassName.concat(tooltipProps.overlayClassName) : innerEllipsisClassName
    }, props.tooltipProps || {});
    content = /* @__PURE__ */React.createElement(Tooltip, _objectSpread({}, rProps), ellipsisContent);
  } else {
    content = ellipsisContent;
  }
  return content;
}
Ellipsis.displayName = "Ellipsis";

export { Ellipsis as default };
//# sourceMappingURL=Ellipsis.js.map
