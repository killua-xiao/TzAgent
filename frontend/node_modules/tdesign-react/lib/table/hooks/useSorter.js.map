{"version":3,"file":"useSorter.js","sources":["../../../../components/table/hooks/useSorter.tsx"],"sourcesContent":["import React, { useState, MouseEvent, useEffect } from 'react';\nimport { isFunction } from 'lodash-es';\nimport { SortInfo, TdPrimaryTableProps, PrimaryTableCol, TableRowData } from '../type';\nimport SorterButton from '../SorterButton';\nimport useControlled from '../../hooks/useControlled';\n\nexport type SortMap = Record<string, SortInfo & { index: number }>;\n\nexport default function useSorter(props: TdPrimaryTableProps) {\n  const [originalData, setOriginalData] = useState<TableRowData[]>();\n  const [tSortInfo, setTSortInfo] = useControlled(props, 'sort', props.onSortChange);\n  const [tData, setTData] = useControlled(props, 'data', props.onDataChange);\n  // 本地数据排序：用于记录哪些字段是自定义排序函数\n  const sorterFuncMap = getSorterFuncMap(props.columns);\n  const [innerSort, setInnerSort] = useState<SortInfo | SortInfo[]>();\n\n  const sortArray = (() => {\n    const sort = tSortInfo;\n    if (!sort) return [];\n    return Array.isArray(sort) ? sort : [sort];\n  })();\n\n  const sortMap = (() => {\n    const sortMap = {};\n    sortArray.forEach((info, index) => {\n      const { sortBy } = info;\n      sortMap[sortBy] = { index, ...info };\n    });\n    return sortMap;\n  })();\n\n  function getSorterFuncMap(columns: PrimaryTableCol[], map: { [key: string]: Function } = {}) {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (isFunction(col.sorter)) {\n        // eslint-disable-next-line no-param-reassign\n        map[col.colKey] = col.sorter;\n      }\n      // 多级表头中的排序功能\n      if (col.children?.length) {\n        getSorterFuncMap(col.children, map);\n      }\n    }\n    return map;\n  }\n\n  function handleDataSort(sortInfo: SortInfo | Array<SortInfo>) {\n    const sort = sortInfo;\n    if (!sorterFuncMap || !Object.keys(sorterFuncMap).length) return;\n    if (!originalData) {\n      setOriginalData(tData);\n    }\n    const isEmptyArraySort = !sort || (sort instanceof Array && !sort.length);\n    const isEmptyObjectSort = !(sort instanceof Array) && !sort?.sortBy;\n    if (isEmptyArraySort || isEmptyObjectSort) {\n      setTData(originalData, { trigger: 'sort' });\n      return originalData;\n    }\n    const formattedSort = sort instanceof Array ? sort : [sort];\n    // data 为受控属性，data.slice() 浅拷贝，防止 sort 导致原数据变异\n    const newData: TableRowData[] = tData.slice().sort((a: TableRowData, b: TableRowData) => {\n      let sortResult = 0;\n      for (let i = 0, len = formattedSort.length; i < len; i++) {\n        const item = formattedSort[i];\n        const sortFunc = sorterFuncMap[item.sortBy];\n        // 上一个排序字段值相同时才会进行下一个字段的大小对比\n        if (sortResult === 0 && sortFunc) {\n          sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);\n        } else {\n          break;\n        }\n      }\n      return sortResult;\n    });\n    // Data 变化返回的是数据引用，为避免死循环，特此检测排序数据前后是否相同，如果相同则不再触发事件\n    if (JSON.stringify(newData) === JSON.stringify(tData)) return;\n    setTData(newData, { trigger: 'sort' });\n    return newData;\n  }\n\n  function handleSortHeaderClick(col: PrimaryTableCol<TableRowData>, p: { descending: boolean }) {\n    let sortInfo: SortInfo | Array<SortInfo>;\n    if (props.multipleSort) {\n      sortInfo = getMultipleNextSort(col, p);\n    } else {\n      const sort = tSortInfo instanceof Array ? tSortInfo[0] : tSortInfo;\n      sortInfo = getSingleNextSort(col, sort, p);\n    }\n    // 本地数据 data 排序，需同时抛出 data-change\n    const newData = handleDataSort(sortInfo);\n    const currentData = newData || tData;\n    const currentDataSource = currentData;\n    setTSortInfo(sortInfo, { currentDataSource, col });\n    props.onChange?.({ sorter: sortInfo }, { currentData, trigger: 'sorter' });\n    setInnerSort(sortInfo);\n  }\n\n  function getSortOrder(descending: boolean) {\n    if (descending === undefined) return;\n    return descending ? 'desc' : 'asc';\n  }\n\n  // 点击新排序字段，则默认按照降序排序；点击原字段，则排序字段不变仅切换排序方式\n  function getSingleNextSort(col: PrimaryTableCol, sortInfo: SortInfo, p: { descending: boolean }): SortInfo {\n    // 排序字段和排序方式均相同，则取消排序\n    if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {\n      return undefined;\n    }\n    return { sortBy: col.colKey, descending: p.descending };\n  }\n\n  function getMultipleNextSort(col: PrimaryTableCol<TableRowData>, p: { descending: boolean }): Array<SortInfo> {\n    const sort = tSortInfo;\n    if (!(sort instanceof Array)) return;\n    const { colKey } = col;\n    const result = [...sort];\n    for (let i = 0, len = sort.length; i < len; i++) {\n      if (sort[i].sortBy === colKey) {\n        const next = getSingleNextSort(col, sort[i], p);\n        next ? (result[i] = next) : result.splice(i, 1);\n        return result;\n      }\n    }\n    result.push({ sortBy: colKey, descending: p.descending });\n    return result;\n  }\n\n  function renderSortIcon({ col }: { col: PrimaryTableCol<TableRowData>; colIndex: number }) {\n    if (!col.sorter) return null;\n    const sorterButtonsProps = {\n      sortType: col.sortType,\n      sortOrder: getSortOrder(sortMap[col.colKey]?.descending),\n      sortIcon: props.sortIcon,\n      hideSortTips: props.hideSortTips,\n    };\n    return (\n      // @ts-ignore TODO 待类型完善后移除\n      <SorterButton\n        key={`sorter-button-${col.colKey}`}\n        {...sorterButtonsProps}\n        onSortIconClick={(_: MouseEvent<HTMLSpanElement>, p: { descending: boolean }) => handleSortHeaderClick(col, p)}\n      />\n    );\n  }\n\n  const isSortInfoSame = (a: SortInfo | SortInfo[], b: SortInfo | SortInfo[]) => {\n    const tmpSortInfo = Array.isArray(a) ? a : [a];\n    const tmpInnerSortInfo = Array.isArray(b) ? b : [b];\n    if (tmpSortInfo.length && !b) return false;\n    // eslint-disable-next-line\n    for (let i = 0, len = tmpSortInfo.length; i < len; i++) {\n      const item = tmpSortInfo[i];\n      const result = tmpInnerSortInfo.find((t) => t.sortBy === item.sortBy);\n      if (!result) return false;\n      return item.descending === result.descending;\n    }\n  };\n\n  useEffect(() => {\n    if (!tSortInfo || !Object.keys(tSortInfo).length || !tData.length) return;\n    // isSortInfoSame 的两个参数顺序不可变\n    if (!isSortInfoSame(tSortInfo, innerSort)) {\n      handleDataSort(tSortInfo);\n    }\n    // eslint-disable-next-line\n  }, [tSortInfo, tData]);\n\n  return {\n    renderSortIcon,\n  };\n}\n"],"names":["useSorter","props","_useState","useState","_useState2","_slicedToArray","originalData","setOriginalData","_useControlled","useControlled","onSortChange","_useControlled2","tSortInfo","setTSortInfo","_useControlled3","onDataChange","_useControlled4","tData","setTData","sorterFuncMap","getSorterFuncMap","columns","_useState3","_useState4","innerSort","setInnerSort","sortArray","sort","Array","isArray","sortMap","forEach","info","index","sortBy","_objectSpread","map","arguments","length","undefined","i","len","_col$children","col","isFunction","sorter","colKey","children","handleDataSort","sortInfo","Object","keys","isEmptyArraySort","isEmptyObjectSort","trigger","formattedSort","newData","slice","a","b","sortResult","item","sortFunc","descending","JSON","stringify","handleSortHeaderClick","p","_props$onChange","multipleSort","getMultipleNextSort","getSingleNextSort","currentData","currentDataSource","onChange","call","getSortOrder","result","_toConsumableArray","next","splice","push","renderSortIcon","_ref","_sortMap$col$colKey","sorterButtonsProps","sortType","sortOrder","sortIcon","hideSortTips","React","createElement","SorterButton","key","concat","onSortIconClick","_","isSortInfoSame","tmpSortInfo","tmpInnerSortInfo","_loop","find","t","v","_ret","useEffect"],"mappings":"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"}