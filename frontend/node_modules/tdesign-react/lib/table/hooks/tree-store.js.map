{"version":3,"file":"tree-store.js","sources":["../../../../components/table/hooks/tree-store.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable no-param-reassign */\nimport { get } from 'lodash-es';\nimport { isRowSelectedDisabled } from '@tdesign/common-js/table/utils';\nimport log from '@tdesign/common-js/log/index';\nimport { PrimaryTableCol, TableRowState, TableRowValue, TableRowData } from '../type';\n\nexport type TableTreeDataMap = Map<string | number, TableRowState>;\n\nexport interface TableRowModel<T> extends TableRowState<T> {\n  setData?: (key: string | number, data: T) => void;\n}\n\nexport interface KeysType {\n  rowKey: string;\n  childrenKey: string;\n}\n\nexport interface SwapParams<T> {\n  current: T;\n  target: T;\n  currentIndex: number;\n  targetIndex: number;\n}\n\nexport const TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {\n  code: 1001,\n  reason: 'The same level of rows can not be swapped.',\n};\n\n/**\n * 表格树形结构处理器\n * Vue 和 React 可以通用\n * 关键函数有以下几个\n * @toggleExpandData 处理树形结构展开收起\n * @setData 更新当行数据\n * @getData 获取单行数据\n * @remove 移除行数据，及其子节点\n * @appendTo 追加子节点到末尾\n */\nclass TableTreeStore<T extends TableRowData = TableRowData> {\n  /** 树形结构 Map 存储 */\n  treeDataMap: TableTreeDataMap = new Map();\n\n  expandAllRowIndex: 0;\n\n  constructor() {\n    this.treeDataMap = new Map();\n  }\n\n  /**\n   * 初始化 treeDataMap，不会改变 dataSource\n   * @param dataSource 树形数据源\n   * @param columns 列配置\n   * @param keys 字段别名\n   */\n  initialTreeStore(dataSource: T[], columns: PrimaryTableCol[], keys: KeysType) {\n    this.treeDataMap?.clear();\n    this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);\n  }\n\n  /**\n   * 获取所有节点的唯一标识\n   */\n  getAllUniqueKeys(data: T[], keys: KeysType, arr: T[] = []) {\n    for (let i = 0, len = data.length; i < len; i++) {\n      const item = data[i];\n      arr.push(get(item, keys.rowKey));\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.getAllUniqueKeys(children, keys, arr);\n      }\n    }\n    return arr;\n  }\n\n  toggleExpandData(p: { rowIndex: number; row: T }, dataSource: T[], keys: KeysType) {\n    if (!p) {\n      log.error('EnhancedTable', 'the node you want to toggleExpand doest not exist in `data`');\n      return dataSource;\n    }\n    const rowValue = get(p.row, keys.rowKey);\n    if (rowValue === undefined) {\n      log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n      return [];\n    }\n    const childrenNodes = get(p.row, keys.childrenKey);\n    // childrenNodes = true，表示懒加载，直接返回，暂时不做展开处理\n    if (childrenNodes === true) return dataSource;\n    const r = this.treeDataMap.get(rowValue);\n    r.rowIndex = p.rowIndex;\n    r.expanded = !r.expanded;\n    this.treeDataMap.set(rowValue, r);\n    return this.updateExpandRow(r, dataSource, keys);\n  }\n\n  updateExpandRow(changeRow: TableRowState, dataSource: T[], keys: KeysType) {\n    const { row, rowIndex, expanded } = changeRow;\n    const { treeDataMap } = this;\n    const childrenNodes = get(row, keys.childrenKey);\n    if (!row || !childrenNodes) return;\n    if (expanded) {\n      updateChildrenRowState(treeDataMap, changeRow, expanded, keys);\n      updateRowExpandLength(treeDataMap, row, childrenNodes.length, 'expand', keys);\n      // eslint-disable-next-line prefer-spread\n      dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));\n    } else {\n      updateChildrenRowState<T>(treeDataMap, changeRow, expanded, keys);\n      const len = changeRow.expandChildrenLength || childrenNodes.length;\n      updateRowExpandLength(treeDataMap, row, -1 * len, 'fold', keys);\n      dataSource.splice(rowIndex + 1, len);\n    }\n    // 展开或收起后，会影响后续节点的 rowIndex，需同步更新\n    updateRowIndex(treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: rowIndex + 1,\n    });\n    return dataSource;\n  }\n\n  /**\n   * 获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  getData(key: TableRowValue): TableRowState {\n    return this.treeDataMap.get(key);\n  }\n\n  /**\n   * 更新当前行数据，并返回当前行下标\n   * @param rowValue 当前行唯一标识值\n   * @param newRowData 新行数据\n   * @returns {number} rowIndex 设置的行下标\n   */\n  updateData(rowValue: TableRowValue, newRowData: T, dataSource: T[], keys: KeysType): number {\n    const newRowValue = get(newRowData, keys.rowKey);\n    const rowState = this.treeDataMap.get(rowValue);\n    // Map 没有查询到，或者查询到的 rowIndex 值为 -1，均表示当前数据不在 dataSource 列表中，未显示在页面中\n    if (!rowState || rowState.rowIndex === -1) {\n      updateRowData(dataSource, rowValue, newRowData, {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      return;\n    }\n\n    // 懒加载处理：children 为 true，则需清空子元素在 map 中的值，而后方便重新加载\n    if (get(newRowData, keys.childrenKey) === true) {\n      const oldChildren = get(rowState.row, keys.childrenKey);\n      if (oldChildren?.length) {\n        for (let i = 0, len = oldChildren.length; i < len; i++) {\n          const rowValue = get(oldChildren[i], keys.rowKey);\n          const state = this.treeDataMap.get(rowValue);\n          state && this.treeDataMap.delete(rowValue);\n        }\n      }\n    }\n\n    const currentRowIndex = rowState.rowIndex;\n    rowState.row = newRowData;\n    rowState.id = newRowValue;\n\n    // 更新父元素中存储的当前元素值\n    if (rowState.parent) {\n      // 更新直接子元素数组\n      const siblings = get(rowState.parent.row, keys.childrenKey);\n      const index = siblings.findIndex((item: T) => get(item, keys.rowKey) === rowValue);\n      siblings[index] = newRowData;\n    }\n\n    this.treeDataMap.set(newRowValue, rowState);\n    // rowValue 也发生了变化，需移除 旧 rowValue 数据\n    if (rowValue !== newRowValue) {\n      this.treeDataMap.delete(rowValue);\n    }\n    return currentRowIndex;\n  }\n\n  /**\n   * 移除指定节点\n   * @param key 行唯一标识\n   */\n  remove(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      // 移除当前节点时，展开的节点的子节点需同步移除\n      const removeNumber = (r.expandChildrenLength || 0) + 1;\n      dataSource.splice(r.rowIndex, removeNumber);\n\n      if (r.parent) {\n        const siblings = get(r.parent.row, keys.childrenKey);\n        const index = siblings.findIndex((item: TableRowData) => get(item, keys.rowKey) === key);\n        siblings.splice(index, 1);\n        updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, 'delete', keys);\n      }\n\n      this.treeDataMap.delete(key);\n\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: r.rowIndex,\n        rowKey: keys.rowKey,\n        type: 'remove',\n      });\n    } else {\n      console.warn('TDesign Table Warn: Do not remove this node, which is not appeared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点。允许添加单个或多个\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  appendTo(rowValue: string | number, newData: T | T[], dataSource: T[], keys: KeysType): T[] {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const children: T[] = get(state.row, keys.childrenKey);\n    // 子节点不存在，则表示为叶子节点\n    const isShowNewNode = state.expanded || !children?.length;\n    // 添加多个子节点时，需去除重复子节点\n    const tmpData = newData instanceof Array ? newData : [newData];\n    const newChildrenData: T[] = [];\n    const newChildrenStates: TableRowState[] = [];\n    let firstNewChildrenIndex = -1;\n    for (let i = 0, len = tmpData.length; i < len; i++) {\n      const oneData = tmpData[i];\n      const newRowValue = get(oneData, keys.rowKey);\n      const mapState = this.treeDataMap.get(newRowValue);\n      if (!this.validateDataDoubleExist(mapState, newRowValue)) {\n        log.warn('Table', `Duplicated Data \\`${newRowValue}\\` has been removed.`);\n      } else {\n        const rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;\n        if (i === 0) {\n          firstNewChildrenIndex = rowIndex;\n        }\n        const newState = {\n          id: newRowValue,\n          row: oneData,\n          rowIndex,\n          level: state.level + 1,\n          expanded: false,\n          expandChildrenLength: 0,\n          disabled: false,\n          path: [...state.path],\n          parent: state,\n        };\n        newState.path = newState.path.concat(newState);\n        newChildrenData.push(oneData);\n        newChildrenStates.push(newState);\n        this.treeDataMap.set(newRowValue, newState);\n      }\n    }\n    if (!newChildrenData.length) return dataSource;\n\n    if (children?.length) {\n      state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);\n    } else {\n      state.row[keys.childrenKey] = newChildrenData;\n      state.expanded = true;\n    }\n\n    // 如果当前节点为展开状态，则需要继续处理\n    if (isShowNewNode) {\n      dataSource.splice(firstNewChildrenIndex, 0, ...newChildrenData);\n      // 更新父元素及祖先元素展开子节点的数量\n      const newChildrenCount = newChildrenData.length || 1;\n      updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, 'insert', {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,\n        rowKey: keys.rowKey,\n        type: 'add',\n        count: 1,\n      });\n    }\n\n    return dataSource;\n  }\n\n  appendToRoot(newData: T | T[], dataSource: T[], keys: KeysType) {\n    const newDataSource = dataSource.concat(newData);\n    const tmpNewData = newData instanceof Array ? newData : [newData];\n    const dataSourceLen = dataSource.length;\n    for (let i = 0, len = tmpNewData.length; i < len; i++) {\n      const rowValue = get(tmpNewData[i], keys.rowKey);\n      if (!rowValue) {\n        log.error('Table', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        continue;\n      }\n      const state: TableRowState = {\n        id: rowValue,\n        row: tmpNewData[i],\n        rowIndex: dataSourceLen + i,\n        level: 0,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: false,\n      };\n      state.path = [state];\n      this.treeDataMap.set(rowValue, state);\n    }\n    return newDataSource;\n  }\n\n  /**\n   * 在当前节点后，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertAfter(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'after');\n  }\n\n  /**\n   * 在当前节点前，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertBefore(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'before');\n  }\n\n  insert(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType, type: 'before' | 'after') {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const newRowValue = get(newData, keys.rowKey);\n    const mapState = this.treeDataMap.get(newRowValue);\n    if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;\n    const rowIndex = type === 'after' ? state.rowIndex + 1 : state.rowIndex;\n    const newState = {\n      id: newRowValue,\n      row: newData,\n      rowIndex,\n      level: state.level,\n      expanded: false,\n      expandChildrenLength: 0,\n      disabled: false,\n      path: state.path.slice(0, -1),\n      parent: state.parent,\n    };\n    newState.path = newState.path.concat(newState);\n    const dataIndex = type === 'after' ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;\n    dataSource.splice(dataIndex, 0, newData);\n    const distance = type === 'after' ? 1 : 0;\n    if (state.parent) {\n      const childrenIndex = state.parent.row[keys.childrenKey].findIndex(\n        (t: TableRowData) => rowValue === get(t, keys.rowKey),\n      );\n      state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);\n      updateRowExpandLength(this.treeDataMap, state.parent.row, 1, 'insert', keys);\n    }\n    this.treeDataMap.set(newRowValue, newState);\n\n    // 更新 rowIndex 之后的下标\n    updateRowIndex(this.treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: state.rowIndex + 1,\n      type: 'add',\n    });\n\n    return dataSource;\n  }\n\n  /**\n   * 交换数据行\n   * @returns 交换失败返回 false\n   */\n  swapData(\n    dataSource: T[],\n    params: SwapParams<T>,\n    keys: KeysType,\n  ): { dataSource: T[]; result: boolean; code?: number; reason?: string } {\n    const startIndex = params.currentIndex;\n    const endIndex = params.targetIndex;\n    if (startIndex === endIndex) return { dataSource, result: true };\n    const startRowValue = get(params.current, keys.rowKey);\n    const endRowValue = get(params.target, keys.rowKey);\n    const startState = this.treeDataMap.get(startRowValue);\n    const endState = this.treeDataMap.get(endRowValue);\n    if (startState.level !== endState.level) {\n      return {\n        dataSource,\n        result: false,\n        code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,\n        reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason,\n      };\n    }\n    const startLastIndex = startIndex + startState.expandChildrenLength + 1;\n    const endLastIndex = endIndex + endState.expandChildrenLength + 1;\n    const startRowList = dataSource.slice(startIndex, startLastIndex);\n    const endRowList = dataSource.slice(endIndex, endLastIndex);\n    if (startIndex > endIndex) {\n      const middleRowList = dataSource.slice(endLastIndex, startIndex);\n      const allSwapList = startRowList.concat(endRowList, middleRowList);\n      dataSource.splice(endIndex, allSwapList.length);\n      dataSource.splice(endIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: endIndex,\n        maxRowIndex: startLastIndex,\n      });\n    } else {\n      const middleRowList = dataSource.slice(startLastIndex, endIndex);\n      const allSwapList = middleRowList.concat(endRowList, startRowList);\n      dataSource.splice(startIndex, allSwapList.length);\n      dataSource.splice(startIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: startIndex,\n        maxRowIndex: endLastIndex,\n      });\n    }\n\n    // 交换父元素中的两个元素位置\n    if (startState.parent) {\n      const children = startState.parent.row[keys.childrenKey];\n      let count = 0;\n      let targetIndex = -1;\n      let currentIndex = -1;\n      for (let i = 0, len = children.length; i < len; i++) {\n        if (get(children[i], keys.rowKey) === startRowValue) {\n          targetIndex = i;\n          count += 1;\n        }\n        if (get(children[i], keys.rowKey) === endRowValue) {\n          currentIndex = i;\n          count += 1;\n        }\n        if (count >= 2) break;\n      }\n      children[targetIndex] = params.target;\n      children[currentIndex] = params.current;\n    }\n\n    return { dataSource, result: true };\n  }\n\n  /**\n   * 展开所有节点\n   */\n  expandAll(dataSource: T[], keys: KeysType) {\n    this.expandAllRowIndex = 0;\n    const expandLoop = (\n      dataSource: T[],\n      keys: KeysType,\n      newData: T[] = [],\n      parentExpanded = false,\n      parent: TableRowState = null,\n    ) => {\n      for (let i = 0, len = dataSource.length; i < len; i++) {\n        const item = dataSource[i];\n        const rowValue = get(item, keys.rowKey);\n        const state = this.treeDataMap.get(rowValue);\n        const children = get(item, keys.childrenKey);\n        const originalExpanded = state.expanded;\n        state.rowIndex = this.expandAllRowIndex;\n        if (children !== true && children?.length) {\n          state.expanded = true;\n        }\n        state.expandChildrenLength = children?.length || 0;\n        this.expandAllRowIndex += 1;\n        if (!parentExpanded) {\n          newData.push(item);\n        }\n        this.treeDataMap.set(rowValue, state);\n        if (children?.length && !originalExpanded) {\n          // 同步更新父元素的展开数量\n          let tmpParent = parent;\n          while (tmpParent?.row) {\n            tmpParent.expandChildrenLength += children.length;\n            this.treeDataMap.set(tmpParent.id, tmpParent);\n            tmpParent = tmpParent.parent;\n          }\n          // 继续子元素\n          expandLoop(children, keys, newData, originalExpanded, state);\n        }\n      }\n      return newData;\n    };\n    return expandLoop(dataSource, keys);\n  }\n\n  /**\n   * 收起所有节点\n   */\n  foldAll(dataSource: T[], keys: KeysType) {\n    const newData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      state.rowIndex = state.level === 0 ? i : -1;\n      state.expanded = false;\n      state.expandChildrenLength = 0;\n      if (state.level === 0) {\n        newData.push(item);\n      }\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.foldAll(children, keys);\n      }\n    }\n    return newData;\n  }\n\n  /** 获取整个树形结构 */\n  getTreeNode(dataSource: T[], keys: KeysType): T[] {\n    // let isStarted = false;\n    const treeData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      // 只需要压入第一层数据\n      if (state.level === 0) {\n        treeData.push(item);\n      }\n    }\n    return treeData;\n  }\n\n  /**\n   * 初始化树形结构 Map\n   * @param treeDataMap 树形结构 Map\n   * @param dataSource 数据源\n   * @param column 树形结构列\n   * @param keys 字段映射关系\n   * @param level 层级\n   * @param parent 父元素\n   * @returns void\n   */\n  initialTreeDataMap(\n    treeDataMap: TableTreeDataMap,\n    dataSource: T[],\n    column: PrimaryTableCol,\n    keys: KeysType,\n    level = 0,\n    parent: TableRowState = null,\n  ) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (rowValue === undefined) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const children = get(item, keys.childrenKey);\n      const state: TableRowState = {\n        id: rowValue,\n        row: item,\n        rowIndex: level === 0 ? i : -1,\n        level,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: isRowSelectedDisabled(column, item, i),\n        parent,\n      };\n      state.path = parent ? parent.path.concat(state) : [state];\n      treeDataMap.set(rowValue, state);\n      if (children?.length) {\n        this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);\n      }\n    }\n  }\n\n  // column.checkProps 和 column.disabled 会影响行的禁用状态，因此当列发生变化时，需要重置禁用状态\n  updateDisabledState(dataSource: T[], column: PrimaryTableCol, keys: KeysType) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (rowValue === undefined) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const state = this.treeDataMap.get(rowValue);\n      state.disabled = isRowSelectedDisabled(column, item, i);\n      this.treeDataMap.set(rowValue, state);\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.updateDisabledState(children, column, keys);\n      }\n    }\n  }\n\n  /**\n   * 校验数据合法性\n   */\n  validateDataExist(state: TableRowState, rowValue: string | number) {\n    if (!state) {\n      console.warn(`TDesign Table Warn: ${rowValue} does not exist.`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 校验数据是否已存在\n   */\n  validateDataDoubleExist(state: TableRowState, rowValue: string | number) {\n    if (state) {\n      console.warn(`TDesign Table Warn: Duplicated Key. ${rowValue} already exists.`);\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default TableTreeStore;\n\n/**\n * 更新展开的子节点数量\n * @param rowSate 行数据和状态\n * @param distance 需要调整的展开子节点长度数量，展开时增加，收起时减少。值为负数，表示减\n * @param expanded 展开/收起\n */\nexport function updateRowExpandLength(\n  treeDataMap: TableTreeDataMap,\n  row: TableRowData,\n  distance: number,\n  type: 'expand' | 'fold' | 'delete' | 'insert',\n  keys: KeysType,\n) {\n  let tmp = row;\n  while (tmp) {\n    const state = treeDataMap.get(get(tmp, keys.rowKey));\n    const expandLen = (state.expandChildrenLength || 0) + distance;\n    state.expandChildrenLength = Math.max(0, expandLen);\n    tmp = state?.parent?.row;\n  }\n  // 如果是收起状态，子节点需全部收起，清空子节点展开行数量，设置 expandChildrenLength 为 0\n  if (type === 'fold') {\n    clearRowExpandLength(treeDataMap, row, keys);\n  }\n}\n\nexport function clearRowExpandLength<T>(treeDataMap: TableTreeDataMap, row: T, keys: KeysType) {\n  const children = get(row, keys.childrenKey);\n  if (children?.length) {\n    children.forEach((item: T[]) => {\n      const state = treeDataMap.get(get(item, keys.rowKey));\n      if (!state) return;\n      state.expandChildrenLength = 0;\n      clearRowExpandLength(treeDataMap, state.row, keys);\n    });\n  }\n}\n\n/**\n * 更新子节点行状态，行数据、父节点、层级、路径等数据\n * @param rowState 行状态数据\n * @param expanded 展开或收起\n * @param keys\n */\nexport function updateChildrenRowState<T>(\n  treeDataMap: TableTreeDataMap,\n  rowState: TableRowState,\n  expanded: boolean,\n  keys: KeysType,\n) {\n  const { row, rowIndex } = rowState;\n  const childrenNodes = get(row, keys.childrenKey);\n  childrenNodes.forEach((item: T, kidRowIndex: number) => {\n    const rowValue = get(item, keys.rowKey);\n    const index = expanded ? rowIndex + 1 + kidRowIndex : -1;\n    const curState = treeDataMap.get(rowValue);\n    const newState: TableRowState = {\n      ...curState,\n      row: item,\n      rowIndex: index,\n      expanded: false,\n      parent: rowState,\n    };\n    treeDataMap.set(rowValue, newState);\n    // 父节点展开，子节点不一定展开；父节点收起，则所有子节点收起\n    if (!expanded) {\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        updateChildrenRowState(\n          treeDataMap,\n          {\n            ...newState,\n            rowIndex: -1,\n            expanded: false,\n          } as any,\n          expanded,\n          keys,\n        );\n      }\n    }\n  });\n}\n\nexport function updateRowData<T extends TableRowData = TableRowData>(\n  data: T[],\n  key: string | number,\n  newData: T,\n  keys: KeysType,\n) {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const item = data[i];\n    if (get(item, keys.rowKey) === key) {\n      // eslint-disable-next-line no-param-reassign\n      data[i] = newData;\n      return;\n    }\n    const children: T[] = get(item, keys.childrenKey) || [];\n    if (children?.length) {\n      updateRowData(children, key, newData, keys);\n    }\n  }\n}\n\nexport function updateRowIndex<T>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  extra: {\n    rowKey: string;\n    minRowIndex?: number;\n    maxRowIndex?: number;\n    type?: 'add' | 'remove';\n    count?: number;\n  },\n) {\n  const start = extra.minRowIndex || 0;\n  const end = extra.maxRowIndex || dataSource.length;\n  for (let rowIndex = start; rowIndex < end; rowIndex++) {\n    const item = dataSource[rowIndex];\n    const state = treeDataMap.get(get(item, extra.rowKey));\n    if (!state) {\n      log.warn('Table', 'tree map went wrong');\n    }\n    state.rowIndex = rowIndex + (extra?.count || 1) - 1;\n  }\n}\n"],"names":["TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL","code","reason","TableTreeStore","_classCallCheck","_defineProperty","Map","treeDataMap","_createClass","key","value","initialTreeStore","dataSource","columns","keys","_this$treeDataMap","clear","initialTreeDataMap","getAllUniqueKeys","data","arr","arguments","length","undefined","i","len","item","push","get","rowKey","children","childrenKey","toggleExpandData","p","log","error","rowValue","row","childrenNodes","r","rowIndex","expanded","set","updateExpandRow","changeRow","updateChildrenRowState","updateRowExpandLength","splice","apply","concat","expandChildrenLength","updateRowIndex","minRowIndex","getData","updateData","newRowData","newRowValue","rowState","updateRowData","oldChildren","state","currentRowIndex","id","parent","siblings","index","findIndex","remove","removeNumber","type","console","warn","appendTo","newData","validateDataExist","isShowNewNode","tmpData","Array","newChildrenData","firstNewChildrenIndex","oneData","mapState","validateDataDoubleExist","newState","level","disabled","path","_toConsumableArray","newChildrenCount","count","appendToRoot","newDataSource","tmpNewData","dataSourceLen","insertAfter","insert","insertBefore","slice","dataIndex","distance","childrenIndex","t","swapData","params","startIndex","currentIndex","endIndex","targetIndex","result","startRowValue","current","endRowValue","target","startState","endState","startLastIndex","endLastIndex","startRowList","endRowList","middleRowList","allSwapList","maxRowIndex","expandAll","_this","expandAllRowIndex","expandLoop","parentExpanded","originalExpanded","tmpParent","_tmpParent","foldAll","getTreeNode","treeData","column","isRowSelectedDisabled","updateDisabledState","tmp","_state$parent","expandLen","Math","max","clearRowExpandLength","forEach","kidRowIndex","curState","_objectSpread","extra","start","end"],"mappings":"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"}