{"version":3,"file":"useColumnController.js","sources":["../../../../components/table/hooks/useColumnController.tsx"],"sourcesContent":["/**\n * 自定义显示列控制器，即列配置\n */\nimport React, { useEffect, ChangeEvent, useRef } from 'react';\nimport { SettingIcon as TdSettingIcon } from 'tdesign-icons-react';\nimport { intersection, xorWith } from 'lodash-es';\nimport classNames from 'classnames';\nimport Checkbox, { CheckboxGroupValue, CheckboxOptionObj, CheckboxGroupChangeContext } from '../../checkbox';\nimport { DialogPlugin } from '../../dialog/plugin';\nimport { renderTitle } from './useTableHeader';\nimport { PrimaryTableCol, TdPrimaryTableProps } from '../type';\nimport useConfig from '../../hooks/useConfig';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\nimport useControlled from '../../hooks/useControlled';\nimport { getCurrentRowByKey } from '../utils';\nimport { DialogInstance } from '../../dialog';\nimport TButton from '../../button';\n\nconst CheckboxGroup = Checkbox.Group;\n\nexport function getColumnKeys(columns: PrimaryTableCol[], keys = new Set<string>()) {\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    col.colKey && keys.add(col.colKey);\n    if (col.children?.length) {\n      getColumnKeys(col.children, keys);\n    }\n  }\n  return keys;\n}\n\nexport default function useColumnController(\n  props: TdPrimaryTableProps,\n  extra?: {\n    onColumnReduce?: (reduceKeys: CheckboxGroupValue) => void;\n  },\n) {\n  const { classPrefix, table } = useConfig();\n  const { SettingIcon } = useGlobalIcon({ SettingIcon: TdSettingIcon });\n  const { columns, columnController, displayColumns = [], columnControllerVisible } = props;\n  const dialogInstance = useRef<DialogInstance>(null);\n\n  const enabledColKeys = (() => {\n    const arr = (columnController?.fields || [...getColumnKeys(columns)] || []).filter((v) => v);\n    return new Set(arr);\n  })();\n\n  const keys = [...getColumnKeys(columns)];\n\n  // 确认后的列配置\n  const [tDisplayColumns, setTDisplayColumns] = useControlled(props, 'displayColumns', props.onDisplayColumnsChange);\n  // 弹框内的多选\n  const defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;\n  // 内部选中的列配置，确认前\n  const columnCheckboxKeys = useRef<CheckboxGroupValue>(defaultColumnCheckboxKeys);\n\n  useEffect(() => {\n    columnCheckboxKeys.current = [...(displayColumns || props.defaultDisplayColumns || keys)];\n    dialogInstance.current?.update({ body: getDialogContent() });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [displayColumns]);\n\n  function getCheckboxOptions(columns: PrimaryTableCol[], arr: CheckboxOptionObj[] = []) {\n    // 减少循环次数\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const item = columns[i];\n      if (item.colKey) {\n        arr.push({\n          label: renderTitle(item, i),\n          value: item.colKey,\n          disabled: !enabledColKeys.has(item.colKey),\n        });\n      }\n      if (item.children?.length) {\n        getCheckboxOptions(item.children, arr);\n      }\n    }\n    return arr;\n  }\n\n  const handleCheckChange = (val: CheckboxGroupValue, ctx: CheckboxGroupChangeContext) => {\n    columnCheckboxKeys.current = val;\n    const params = {\n      columns: val,\n      type: ctx.type,\n      currentColumn: getCurrentRowByKey(columns, String(ctx.current)),\n      e: ctx.e,\n    };\n    props.onColumnChange?.(params);\n    dialogInstance.current.update({ body: getDialogContent() });\n  };\n\n  const handleClickAllShowColumns = (checked: boolean, ctx: { e: ChangeEvent<HTMLDivElement> }) => {\n    if (checked) {\n      const checkboxOptions = getCheckboxOptions(columns);\n      const newData = checkboxOptions?.map((t) => t.value) || [];\n      columnCheckboxKeys.current = newData;\n      props.onColumnChange?.({ type: 'check', columns: newData, e: ctx.e });\n    } else {\n      const disabledColKeys = getCheckboxOptions(columns)\n        .filter((t) => t.disabled)\n        .map((t) => t.value);\n      columnCheckboxKeys.current = disabledColKeys;\n      props.onColumnChange?.({ type: 'uncheck', columns: disabledColKeys, e: ctx.e });\n    }\n    dialogInstance.current.update({ body: getDialogContent() });\n  };\n\n  function getDialogContent() {\n    const checkboxOptions = getCheckboxOptions(columns);\n    const intersectionChecked = intersection(columnCheckboxKeys.current, [...enabledColKeys]);\n    const widthMode = columnController?.displayType === 'fixed-width' ? 'fixed' : 'auto';\n    const checkedLength = intersectionChecked.length;\n    const isCheckedAll = checkedLength === enabledColKeys.size;\n    const isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;\n    return (\n      <div\n        className={classNames([\n          `${classPrefix}-table__column-controller`,\n          `${classPrefix}-table__column-controller--${widthMode}`,\n        ])}\n      >\n        <div className={`${classPrefix}-table__column-controller-body`}>\n          {/* 请选择需要在表格中显示的数据列 */}\n          <p className={`${classPrefix}-table__column-controller-desc`}>{table.columnConfigDescriptionText}</p>\n          <div className={`${classPrefix}-table__column-controller-block`}>\n            <Checkbox indeterminate={isIndeterminate} checked={isCheckedAll} onChange={handleClickAllShowColumns}>\n              {table.selectAllText}\n            </Checkbox>\n          </div>\n          <div className={`${classPrefix}-table__column-controller-block`}>\n            <CheckboxGroup\n              options={checkboxOptions}\n              {...(columnController?.checkboxProps || {})}\n              value={columnCheckboxKeys.current}\n              onChange={handleCheckChange}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleToggleColumnController = () => {\n    dialogInstance.current = DialogPlugin.confirm({\n      header: table.columnConfigTitleText,\n      body: getDialogContent(),\n      confirmBtn: table.confirmText,\n      cancelBtn: table.cancelText,\n      width: 612,\n      onConfirm: () => {\n        if (columnCheckboxKeys.current.length < displayColumns.length) {\n          const reduceKeys = xorWith(displayColumns, columnCheckboxKeys.current);\n          extra?.onColumnReduce?.(reduceKeys);\n        }\n        setTDisplayColumns([...columnCheckboxKeys.current]);\n        // 此处逻辑不要随意改动，涉及到 内置列配置按钮 和 不包含列配置按钮等场景\n        if (columnControllerVisible === undefined) {\n          dialogInstance.current.hide();\n        } else {\n          props.onColumnControllerVisibleChange?.(false, { trigger: 'cancel' });\n        }\n      },\n      onClose: () => {\n        columnCheckboxKeys.current = tDisplayColumns;\n        // 此处逻辑不要随意改动，涉及到 内置列配置按钮 和 不包含列配置按钮等场景\n        if (columnControllerVisible === undefined) {\n          dialogInstance.current.hide();\n        } else {\n          props.onColumnControllerVisibleChange?.(false, { trigger: 'confirm' });\n        }\n      },\n      ...(columnController?.dialogProps || {}),\n    });\n  };\n\n  // columnControllerVisible 一般应用于不包含列配置按钮的场景，有外部直接控制弹框的显示或隐藏\n  useEffect(\n    () => {\n      if (columnControllerVisible === undefined) return;\n      if (dialogInstance.current) {\n        columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();\n      } else {\n        columnControllerVisible && handleToggleColumnController();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [columnControllerVisible, dialogInstance],\n  );\n\n  const renderColumnController = () => {\n    const isColumnController = !!(columnController && Object.keys(columnController).length);\n    const placement = isColumnController ? columnController.placement || 'top-right' : '';\n    if (isColumnController && columnController.hideTriggerButton) return null;\n    const classes = [\n      `${classPrefix}-table__column-controller-trigger`,\n      { [`${classPrefix}-align-${placement}`]: !!placement },\n    ];\n    return (\n      <div className={classNames(classes)}>\n        <TButton\n          theme=\"default\"\n          variant=\"outline\"\n          onClick={handleToggleColumnController}\n          content={table.columnConfigButtonText}\n          icon={<SettingIcon />}\n          {...props.columnController?.buttonProps}\n        ></TButton>\n      </div>\n    );\n  };\n\n  return {\n    tDisplayColumns,\n    renderColumnController,\n  };\n}\n"],"names":["CheckboxGroup","Checkbox","Group","getColumnKeys","columns","keys","arguments","length","undefined","Set","i","len","_col$children","col","colKey","add","children","useColumnController","props","extra","_useConfig","useConfig","classPrefix","table","_useGlobalIcon","useGlobalIcon","SettingIcon","TdSettingIcon","columnController","_props$displayColumns","displayColumns","columnControllerVisible","dialogInstance","useRef","enabledColKeys","arr","fields","_toConsumableArray","filter","v","_useControlled","useControlled","onDisplayColumnsChange","_useControlled2","_slicedToArray","tDisplayColumns","setTDisplayColumns","defaultColumnCheckboxKeys","defaultDisplayColumns","columnCheckboxKeys","useEffect","_dialogInstance$curre","current","update","body","getDialogContent","getCheckboxOptions","_item$children","item","push","label","renderTitle","value","disabled","has","handleCheckChange","val","ctx","_props$onColumnChange","params","type","currentColumn","getCurrentRowByKey","String","e","onColumnChange","call","handleClickAllShowColumns","checked","_props$onColumnChange2","checkboxOptions","newData","map","t","_props$onColumnChange3","disabledColKeys","intersectionChecked","intersection","widthMode","displayType","checkedLength","isCheckedAll","size","isIndeterminate","React","createElement","className","classNames","concat","columnConfigDescriptionText","indeterminate","onChange","selectAllText","_objectSpread","options","checkboxProps","handleToggleColumnController","DialogPlugin","confirm","header","columnConfigTitleText","confirmBtn","confirmText","cancelBtn","cancelText","width","onConfirm","_extra$onColumnReduce","reduceKeys","xorWith","onColumnReduce","hide","_props$onColumnContro","onColumnControllerVisibleChange","trigger","onClose","_props$onColumnContro2","dialogProps","show","renderColumnController","_props$columnControll","isColumnController","Object","placement","hideTriggerButton","classes","_defineProperty","TButton","theme","variant","onClick","content","columnConfigButtonText","icon","buttonProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,IAAMA,gBAAgBC,QAAS,CAAAC,KAAA,CAAA;AAExB,SAASC,aAAcA,CAAAC,OAAA,EAAsD;AAAA,EAAA,IAA1BC,IAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,kBAAA,IAAIG,KAAe,CAAA;AAClF,EAAA,KAAA,IAASC,IAAI,CAAG,EAAAC,GAAA,GAAMP,QAAQG,MAAQ,EAAAG,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAAA,IAAA,IAAAE,aAAA,CAAA;AAClD,IAAA,IAAMC,MAAMT,OAAQ,CAAAM,CAAA,CAAA,CAAA;IACpBG,GAAA,CAAIC,MAAU,IAAAT,IAAA,CAAKU,GAAI,CAAAF,GAAA,CAAIC,MAAM,CAAA,CAAA;IAC7B,IAAAF,CAAAA,aAAA,GAAAC,GAAA,CAAIG,wCAAJJ,KAAAA,CAAAA,IAAAA,aAAA,CAAcL,MAAQ,EAAA;AACVJ,MAAAA,aAAA,CAAAU,GAAA,CAAIG,UAAUX,IAAI,CAAA,CAAA;AAClC,KAAA;AACF,GAAA;AACO,EAAA,OAAAA,IAAA,CAAA;AACT,CAAA;AAEwB,SAAAY,mBAAAA,CACtBC,OACAC,KAGA,EAAA;AACA,EAAA,IAAAC,UAAA,GAA+BC,SAAU,EAAA;IAAjCC,WAAA,GAAAF,UAAA,CAAAE,WAAA;IAAaC,KAAM,GAAAH,UAAA,CAANG,KAAM,CAAA;EAC3B,IAAAC,cAAA,GAAwBC,cAAc;AAAEC,MAAAA,WAAA,EAAaC,WAAAA;AAAc,KAAC,CAAA;IAA5DD,aAAY,GAAAF,cAAA,CAAZE,WAAY,CAAA;AACpB,EAAA,IAAQtB,OAAS,GAAmEc,KAAA,CAA5Ed,OAAS;IAAAwB,gBAAA,GAAmEV,KAAA,CAAnEU,gBAAA;IAAAC,qBAAA,GAAmEX,KAAA,CAAjDY;AAAAA,IAAAA,2CAAiB,KAAA,CAAA,GAAA,EAAC,GAAAD,qBAAA;IAAGE,0BAA4Bb,KAAA,CAA5Ba;AAClD,EAAA,IAAAC,cAAA,GAAiBC,OAAuB,IAAI,CAAA,CAAA;EAElD,IAAMC,iBAAkB,YAAM;IAC5B,IAAMC,GAAO,GAAA,CAAA,CAAAP,gBAAA,KAAAA,IAAAA,IAAAA,gBAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAA,CAAkBQ,MAAU,KAAAC,kBAAA,CAAIlC,aAAA,CAAcC,OAAO,CAAC,CAAS,EAAAkC,MAAA,CAAO,UAACC,CAAA,EAAA;AAAA,MAAA,OAAMA,CAAC,CAAA;KAAA,CAAA,CAAA;AACpF,IAAA,OAAA,IAAI9B,IAAI0B,GAAG,CAAA,CAAA;AACpB,GAAG,EAAA,CAAA;EAEH,IAAM9B,IAAO,GAAAgC,kBAAA,CAAIlC,aAAA,CAAcC,OAAO,CAAC,CAAA,CAAA;EAGjC,IAAAoC,cAAA,GAAwCC,cAAcvB,KAAO,EAAA,gBAAA,EAAkBA,MAAMwB,sBAAsB,CAAA;IAAAC,eAAA,GAAAC,cAAA,CAAAJ,cAAA,EAAA,CAAA,CAAA;AAA1GK,IAAAA;AAAiBC,IAAAA,kBAAkB,GAAAH,eAAA,CAAA,CAAA,CAAA,CAAA;EAEpC,IAAAI,yBAAA,GAA4BjB,cAAkB,IAAAZ,KAAA,CAAM8B,qBAAyB,IAAA3C,IAAA,CAAA;AAE7E,EAAA,IAAA4C,kBAAA,GAAqBhB,OAA2Bc,yBAAyB,CAAA,CAAA;AAE/EG,EAAAA,SAAA,CAAU,YAAM;AAAA,IAAA,IAAAC,qBAAA,CAAA;AACdF,IAAAA,kBAAA,CAAmBG,6BAAetB,cAAkB,IAAAZ,KAAA,CAAM8B,yBAAyB3C,IAAK,CAAA,CAAA;IACxF,CAAA8C,qBAAA,GAAAnB,cAAA,CAAeoB,+CAAfD,KAAAA,CAAAA,IAAAA,qBAAA,CAAwBE,MAAO,CAAA;MAAEC,IAAM,EAAAC,gBAAA,EAAiB;AAAE,KAAC,CAAA,CAAA;AAE7D,GAAA,EAAG,CAACzB,cAAc,CAAC,CAAA,CAAA;EAEnB,SAAS0B,kBAAmBpD,CAAAA,QAAAA,EAA2D;AAAA,IAAA,IAA/B+B,GAA2B,GAAA7B,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAA,EAAI,CAAA;AAErF,IAAA,KAAA,IAASI,IAAI,CAAG,EAAAC,GAAA,GAAMP,SAAQG,MAAQ,EAAAG,CAAA,GAAIC,KAAKD,CAAK,EAAA,EAAA;AAAA,MAAA,IAAA+C,cAAA,CAAA;AAClD,MAAA,IAAMC,OAAOtD,QAAQ,CAAAM,CAAA,CAAA,CAAA;MACrB,IAAIgD,KAAK5C,MAAQ,EAAA;QACfqB,GAAA,CAAIwB,IAAK,CAAA;AACPC,UAAAA,KAAA,EAAOC,WAAY,CAAAH,IAAA,EAAMhD,CAAC,CAAA;UAC1BoD,OAAOJ,IAAK,CAAA5C,MAAA;UACZiD,QAAU,EAAA,CAAC7B,cAAe,CAAA8B,GAAA,CAAIN,KAAK5C,MAAM,CAAA;AAC3C,SAAC,CAAA,CAAA;AACH,OAAA;MACI,IAAA2C,CAAAA,cAAA,GAAAC,IAAA,CAAK1C,yCAALyC,KAAAA,CAAAA,IAAAA,cAAA,CAAelD,MAAQ,EAAA;AACNiD,QAAAA,kBAAA,CAAAE,IAAA,CAAK1C,UAAUmB,GAAG,CAAA,CAAA;AACvC,OAAA;AACF,KAAA;AACO,IAAA,OAAAA,GAAA,CAAA;AACT,GAAA;EAEM,IAAA8B,iBAAA,GAAoB,SAApBA,iBAAAA,CAAqBC,GAAA,EAAyBC,GAAoC,EAAA;AAAA,IAAA,IAAAC,qBAAA,CAAA;IACtFnB,kBAAA,CAAmBG,OAAU,GAAAc,GAAA,CAAA;AAC7B,IAAA,IAAMG,MAAS,GAAA;AACbjE,MAAAA,OAAS,EAAA8D,GAAA;MACTI,MAAMH,GAAI,CAAAG,IAAA;MACVC,eAAeC,kBAAmB,CAAApE,OAAA,EAASqE,MAAO,CAAAN,GAAA,CAAIf,OAAO,CAAC,CAAA;MAC9DsB,GAAGP,GAAI,CAAAO,CAAAA;KACT,CAAA;AACA,IAAA,CAAAN,qBAAA,GAAAlD,KAAA,CAAMyD,sDAANP,KAAAA,CAAAA,IAAAA,qBAAA,CAAAQ,IAAA,CAAA1D,KAAA,EAAuBmD,MAAM,CAAA,CAAA;AAC7BrC,IAAAA,cAAA,CAAeoB,QAAQC,MAAO,CAAA;MAAEC,IAAM,EAAAC,gBAAA,EAAiB;AAAE,KAAC,CAAA,CAAA;GAC5D,CAAA;EAEM,IAAAsB,yBAAA,GAA4B,SAA5BA,yBAAAA,CAA6BC,OAAA,EAAkBX,GAA4C,EAAA;AAC/F,IAAA,IAAIW,OAAS,EAAA;AAAA,MAAA,IAAAC,sBAAA,CAAA;AACL,MAAA,IAAAC,eAAA,GAAkBxB,mBAAmBpD,OAAO,CAAA,CAAA;AAC5C,MAAA,IAAA6E,OAAA,GAAU,CAAAD,oBAAAA,IAAAA,IAAAA,oBAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAiBE,GAAI,CAAA,UAACC;eAAMA,CAAE,CAAArB,KAAK,CAAA;AAAA,OAAA,MAAK,EAAC,CAAA;MACzDb,kBAAA,CAAmBG,OAAU,GAAA6B,OAAA,CAAA;AACvB,MAAA,CAAAF,sBAAA,GAAA7D,KAAA,CAAAyD,cAAA,MAAA,IAAA,IAAAI,sBAAA,KAAA,KAAA,CAAA,IAAAA,sBAAA,CAAAH,IAAA,CAAA1D,KAAA,EAAiB;AAAEoD,QAAAA,IAAM,EAAA,OAAA;AAASlE,QAAAA,SAAS6E,OAAS;QAAAP,CAAA,EAAGP,GAAI,CAAAO,CAAAA;AAAE,OAAC,CAAA,CAAA;AACtE,KAAO,MAAA;AAAA,MAAA,IAAAU,sBAAA,CAAA;MACL,IAAMC,eAAkB,GAAA7B,kBAAA,CAAmBpD,OAAO,CAAA,CAC/CkC,OAAO,UAAC6C,CAAA,EAAA;QAAA,OAAMA,CAAE,CAAApB,QAAQ,CAAA;AAAA,OAAA,CACxB,CAAAmB,GAAA,CAAI,UAACC,CAAA,EAAA;QAAA,OAAMA,EAAErB,KAAK,CAAA;OAAA,CAAA,CAAA;MACrBb,kBAAA,CAAmBG,OAAU,GAAAiC,eAAA,CAAA;AACvB,MAAA,CAAAD,sBAAA,GAAAlE,KAAA,CAAAyD,cAAA,MAAA,IAAA,IAAAS,sBAAA,KAAA,KAAA,CAAA,IAAAA,sBAAA,CAAAR,IAAA,CAAA1D,KAAA,EAAiB;AAAEoD,QAAAA,IAAM,EAAA,SAAA;AAAWlE,QAAAA,SAASiF,eAAiB;QAAAX,CAAA,EAAGP,GAAI,CAAAO,CAAAA;AAAE,OAAC,CAAA,CAAA;AAChF,KAAA;AACA1C,IAAAA,cAAA,CAAeoB,QAAQC,MAAO,CAAA;MAAEC,IAAM,EAAAC,gBAAA,EAAiB;AAAE,KAAC,CAAA,CAAA;GAC5D,CAAA;EAEA,SAASA,gBAAmBA,GAAA;AACpB,IAAA,IAAAyB,eAAA,GAAkBxB,mBAAmBpD,OAAO,CAAA,CAAA;AAClD,IAAA,IAAMkF,sBAAsBC,YAAa,CAAAtC,kBAAA,CAAmBG,4BAAalB,cAAc,CAAC,CAAA,CAAA;AACxF,IAAA,IAAMsD,SAAY,GAAA,CAAA5D,gBAAA,aAAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,gBAAA,CAAkB6D,WAAgB,MAAA,aAAA,GAAgB,OAAU,GAAA,MAAA,CAAA;AAC9E,IAAA,IAAMC,gBAAgBJ,mBAAoB,CAAA/E,MAAA,CAAA;AACpC,IAAA,IAAAoF,YAAA,GAAeD,kBAAkBxD,cAAe,CAAA0D,IAAA,CAAA;IACtD,IAAMC,eAAkB,GAAAH,aAAA,GAAgB,CAAK,IAAAA,aAAA,GAAgBxD,cAAe,CAAA0D,IAAA,CAAA;AAC5E,IAAA,sBACGE,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;AACCC,MAAAA,WAAWC,UAAW,CAAA,CAAA,EAAA,CAAAC,MAAA,CACjB5E,WAAA,EAAA4E,2BAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAA,CACA5E,WAAyC,EAAA,6BAAA,CAAA,CAAA4E,MAAA,CAAAV,SAAA,CAC7C,CAAA,CAAA;AAAA,KAAA,iBAEAM,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;MAAIC,qBAAc1E,WAAA,EAAA,gCAAA,CAAA;AAAA,KAAA,iBAEhBwE,KAAA,CAAAC,aAAA,CAAA,GAAA,EAAA;MAAEC,qBAAc1E,WAAA,EAAA,gCAAA,CAAA;AAA8C,KAAA,EAAAC,KAAA,CAAM4E,2BAA4B,CAAA,iBAChGL,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;MAAIC,qBAAc1E,WAAA,EAAA,iCAAA,CAAA;AAAA,KAAA,iBAChBwE,KAAA,CAAAC,aAAA,CAAA9F,QAAA,EAAA;AAASmG,MAAAA,aAAe,EAAAP,eAAA;AAAiBf,MAAAA,OAAS,EAAAa,YAAA;AAAcU,MAAAA,QAAU,EAAAxB,yBAAAA;AAAA,KAAA,EACxEtD,KAAM,CAAA+E,aACT,CACF,CAAA,iBACCR,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;MAAIC,qBAAc1E,WAAA,EAAA,iCAAA,CAAA;KAAA,iBAChBwE,KAAA,CAAAC,aAAA,CAAA/F,aAAA,EAAAuG,aAAA,CAAAA,aAAA,CAAA;AACCC,MAAAA,OAAS,EAAAxB,eAAAA;KACJ,EAAA,CAAApD,gBAAkB,KAAA,IAAA,IAAlBA,gBAAkB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAlBA,gBAAkB,CAAA6E,aAAA,KAAiB,EAAC,CAAA,EAAA,EAAA,EAAA;MACzC3C,OAAOb,kBAAmB,CAAAG,OAAA;AAC1BiD,MAAAA,QAAU,EAAApC,iBAAAA;KACZ,CAAA,CACF,CACF,CACF,CAAA,CAAA;AAEJ,GAAA;AAEA,EAAA,IAAMyC,+BAA+B,SAA/BA,+BAAqC;AAC1B1E,IAAAA,cAAA,CAAAoB,OAAA,GAAUuD,aAAaC,OAAQ,CAAAL,aAAA,CAAA;MAC5CM,QAAQtF,KAAM,CAAAuF,qBAAA;MACdxD,MAAMC,gBAAiB,EAAA;MACvBwD,YAAYxF,KAAM,CAAAyF,WAAA;MAClBC,WAAW1F,KAAM,CAAA2F,UAAA;AACjBC,MAAAA,KAAO,EAAA,GAAA;AACPC,MAAAA,WAAW,SAAXA,YAAiB;QACf,IAAInE,kBAAmB,CAAAG,OAAA,CAAQ7C,MAAS,GAAAuB,cAAA,CAAevB,MAAQ,EAAA;AAAA,UAAA,IAAA8G,qBAAA,CAAA;UAC7D,IAAMC,UAAa,GAAAC,OAAA,CAAQzF,cAAgB,EAAAmB,kBAAA,CAAmBG,OAAO,CAAA,CAAA;AACrEjC,UAAAA,KAAA,aAAAA,KAAA,KAAA,KAAA,CAAA,IAAA,CAAAkG,qBAAA,GAAAlG,KAAA,CAAOqG,gEAAPH,qBAAA,CAAAzC,IAAA,CAAAzD,KAAA,EAAwBmG,UAAU,CAAA,CAAA;AACpC,SAAA;AACAxE,QAAAA,kBAAA,CAAAT,kBAAA,CAAuBY,kBAAmB,CAAAG,OAAO,CAAC,CAAA,CAAA;AAElD,QAAA,IAAIrB,4BAA4B,KAAW,CAAA,EAAA;AACzCC,UAAAA,cAAA,CAAeoB,QAAQqE,IAAK,EAAA,CAAA;AAC9B,SAAO,MAAA;AAAA,UAAA,IAAAC,qBAAA,CAAA;AACL,UAAA,CAAAA,qBAAA,GAAAxG,KAAA,CAAMyG,+BAAkC,MAAAD,IAAAA,IAAAA,qBAAA,KAAxCA,KAAAA,CAAAA,IAAAA,qBAAA,CAAA9C,IAAA,CAAA1D,KAAA,EAAwC,KAAA,EAAO;AAAE0G,YAAAA,OAAA,EAAS,QAAA;AAAS,WAAC,CAAA,CAAA;AACtE,SAAA;OACF;AACAC,MAAAA,SAAS,SAATA,UAAe;QACb5E,kBAAA,CAAmBG,OAAU,GAAAP,eAAA,CAAA;AAE7B,QAAA,IAAId,4BAA4B,KAAW,CAAA,EAAA;AACzCC,UAAAA,cAAA,CAAeoB,QAAQqE,IAAK,EAAA,CAAA;AAC9B,SAAO,MAAA;AAAA,UAAA,IAAAK,sBAAA,CAAA;AACL,UAAA,CAAAA,sBAAA,GAAA5G,KAAA,CAAMyG,+BAAkC,MAAAG,IAAAA,IAAAA,sBAAA,KAAxCA,KAAAA,CAAAA,IAAAA,sBAAA,CAAAlD,IAAA,CAAA1D,KAAA,EAAwC,KAAA,EAAO;AAAE0G,YAAAA,OAAA,EAAS,SAAA;AAAU,WAAC,CAAA,CAAA;AACvE,SAAA;AACF,OAAA;AAAA,KAAA,EACI,CAAAhG,gBAAkB,KAAlBA,IAAAA,IAAAA,gBAAkB,KAAlBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAkB,CAAAmG,WAAA,KAAe,EAAC,CACvC,CAAA,CAAA;GACH,CAAA;AAGA7E,EAAAA,SAAA,CACE,YAAM;AACJ,IAAA,IAAInB,uBAA4B,KAAA,KAAA,CAAA,EAAW,OAAA;IAC3C,IAAIC,eAAeoB,OAAS,EAAA;AAC1BrB,MAAAA,uBAAA,GAA0BC,eAAeoB,OAAQ,CAAA4E,IAAA,EAAS,GAAAhG,cAAA,CAAeoB,QAAQqE,IAAK,EAAA,CAAA;AACxF,KAAO,MAAA;MACL1F,uBAAA,IAA2B2E,4BAA6B,EAAA,CAAA;AAC1D,KAAA;AACF,GAAA,EAEA,CAAC3E,yBAAyBC,cAAc,CAC1C,CAAA,CAAA;AAEA,EAAA,IAAMiG,yBAAyB,SAAzBA,yBAA+B;AAAA,IAAA,IAAAC,qBAAA,CAAA;AACnC,IAAA,IAAMC,qBAAqB,CAAC,EAAEvG,oBAAoBwG,MAAO,CAAA/H,IAAA,CAAKuB,gBAAgB,CAAE,CAAArB,MAAA,CAAA,CAAA;IAChF,IAAM8H,SAAY,GAAAF,kBAAA,GAAqBvG,gBAAiB,CAAAyG,SAAA,IAAa,WAAc,GAAA,EAAA,CAAA;AACnF,IAAA,IAAIF,sBAAsBvG,gBAAiB,CAAA0G,iBAAA,EAA0B,OAAA,IAAA,CAAA;IACrE,IAAMC,OAAU,GAAA,CAAArC,EAAAA,CAAAA,MAAA,CACX5E,WAAA,EAAA,mCAAA,CAAA,EAAAkH,eAAA,CAAAtC,EAAAA,EAAAA,EAAAA,CAAAA,MAAA,CACG5E,+BAAqB+G,SAAc,GAAA,CAAC,CAACA,SAAU,CACvD,CAAA,CAAA;AACA,IAAA,sBACGvC,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;MAAIC,SAAA,EAAWC,WAAWsC,OAAO,CAAA;KAAA,iBAC/BzC,KAAA,CAAAC,aAAA,CAAA0C,MAAA,EAAAlC,aAAA,CAAA;AACCmC,MAAAA,KAAM,EAAA,SAAA;AACNC,MAAAA,OAAQ,EAAA,SAAA;AACRC,MAAAA,OAAS,EAAAlC,4BAAA;MACTmC,SAAStH,KAAM,CAAAuH,sBAAA;MACfC,IAAA,qCAAOrH,aAAY,EAAA,IAAA,CAAA;AAAA,KAAA,EAAA,CAAAwG,qBAAA,GACfhH,MAAMU,gBAAkB,MAAA,IAAA,IAAAsG,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAxBA,qBAAA,CAAwBc,WAAA,CAC7B,CACH,CAAA,CAAA;GAEJ,CAAA;EAEO,OAAA;AACLnG,IAAAA,eAAA,EAAAA,eAAA;AACAoF,IAAAA,sBAAA,EAAAA,sBAAAA;GACF,CAAA;AACF;;;;"}