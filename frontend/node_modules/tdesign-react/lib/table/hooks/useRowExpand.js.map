{"version":3,"file":"useRowExpand.js","sources":["../../../../components/table/hooks/useRowExpand.tsx"],"sourcesContent":["import React, { MouseEvent, ReactNode, useCallback } from 'react';\nimport { ChevronRightCircleIcon as TdChevronRightCircleIcon } from 'tdesign-icons-react';\nimport { get, isFunction } from 'lodash-es';\nimport classNames from 'classnames';\nimport {\n  TdPrimaryTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  PrimaryTableCellParams,\n  TableExpandedRowParams,\n  RowEventContext,\n  RowClassNameParams,\n} from '../type';\nimport useClassName from './useClassName';\nimport useControlled from '../../hooks/useControlled';\nimport useGlobalIcon from '../../hooks/useGlobalIcon';\nimport { useLocaleReceiver } from '../../locale/LocalReceiver';\nimport { parseContentTNode } from '../../_util/parseTNode';\n\nexport default function useRowExpand(props: TdPrimaryTableProps) {\n  const { expandIcon, expandedRow } = props;\n  const { ChevronRightCircleIcon } = useGlobalIcon({\n    ChevronRightCircleIcon: TdChevronRightCircleIcon,\n  });\n  const [locale] = useLocaleReceiver('table');\n  const { tableExpandClasses, positiveRotate90, tableFullRowClasses } = useClassName();\n  // controlled and uncontrolled\n  const [tExpandedRowKeys, setTExpandedRowKeys] = useControlled(props, 'expandedRowKeys', props.onExpandChange, {\n    defaultExpandedRowKeys: props.defaultExpandedRowKeys || [],\n  });\n\n  const showExpandedRow = Boolean(expandedRow);\n\n  const getExpandedRowClass = useCallback(\n    (params: RowClassNameParams<TableRowData>) => {\n      // 如果没有配置展开行，则不需要增加展开收起相关的类名\n      if (!showExpandedRow) return null;\n      const { row, rowKey } = params;\n      const currentRowKey = get(row, rowKey || 'id');\n      return tableExpandClasses[tExpandedRowKeys?.includes(currentRowKey) ? 'rowExpanded' : 'rowFolded'];\n    },\n    [tExpandedRowKeys, tableExpandClasses, showExpandedRow],\n  );\n\n  const showExpandIconColumn = props.expandIcon !== false && showExpandedRow;\n\n  const isFirstColumnFixed = props.columns?.[0]?.fixed === 'left';\n\n  const onToggleExpand = (e: MouseEvent<HTMLSpanElement>, row: TableRowData) => {\n    props.expandOnRowClick && e.stopPropagation();\n    const currentId = get(row, props.rowKey || 'id');\n    const index = tExpandedRowKeys.indexOf(currentId);\n    const newKeys = [...tExpandedRowKeys];\n    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);\n    setTExpandedRowKeys(newKeys, {\n      expandedRowData: props.data.filter((t) => newKeys.includes(get(t, props.rowKey || 'id'))),\n      currentRowData: row,\n    });\n  };\n\n  const renderExpandIcon = (p: PrimaryTableCellParams<TableRowData>, expandIcon: TdPrimaryTableProps['expandIcon']) => {\n    const { row, rowIndex } = p;\n    const currentId = get(row, props.rowKey || 'id');\n    const expanded = tExpandedRowKeys.includes(currentId);\n    // @ts-ignore TODO 待类型完善后移除\n    const defaultIcon: ReactNode = locale.expandIcon || <ChevronRightCircleIcon />;\n    let icon = defaultIcon;\n    if (expandIcon === false || expandIcon === null) {\n      icon = null;\n    } else if (isFunction(expandIcon)) {\n      // @ts-ignore TODO 待类型完善后移除\n      icon = expandIcon({ row, index: rowIndex });\n    }\n    const classes = [\n      tableExpandClasses.iconBox,\n      tableExpandClasses[expanded ? 'expanded' : 'collapsed'],\n      { [positiveRotate90]: expanded },\n    ];\n    return (\n      <span className={classNames(classes)} onClick={(e: MouseEvent<HTMLSpanElement>) => onToggleExpand(e, row)}>\n        {icon}\n      </span>\n    );\n  };\n\n  const getExpandColumn = () => {\n    const expandCol: PrimaryTableCol<TableRowData> = {\n      colKey: '__EXPAND_ROW_ICON_COLUMN__',\n      width: 46,\n      className: tableExpandClasses.iconCell,\n      fixed: isFirstColumnFixed ? 'left' : undefined,\n      cell: (p) => renderExpandIcon(p, expandIcon),\n      stopPropagation: true,\n    };\n    return expandCol;\n  };\n\n  const renderExpandedRow = (\n    p: TableExpandedRowParams<TableRowData> & { tableWidth: number; isWidthOverflow: boolean },\n  ) => {\n    const rowId = get(p.row, props.rowKey || 'id');\n    if (!tExpandedRowKeys || !tExpandedRowKeys.includes(rowId)) return null;\n    const isFixedLeft = p.isWidthOverflow && props.columns.find((item) => item.fixed === 'left');\n    return (\n      <tr\n        key={`expand_${rowId}`}\n        className={classNames([tableExpandClasses.row, { [tableFullRowClasses.base]: isFixedLeft }])}\n      >\n        <td colSpan={p.columns.length}>\n          <div\n            className={classNames([tableExpandClasses.rowInner, { [tableFullRowClasses.innerFullRow]: isFixedLeft }])}\n            style={isFixedLeft ? { width: `${p.tableWidth}px` } : {}}\n          >\n            <div className={tableFullRowClasses.innerFullElement}>{parseContentTNode(expandedRow, p)}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onInnerExpandRowClick = (p: RowEventContext<TableRowData>) => {\n    onToggleExpand(p.e, p.row);\n  };\n\n  return {\n    showExpandedRow,\n    showExpandIconColumn,\n    getExpandColumn,\n    renderExpandedRow,\n    onInnerExpandRowClick,\n    getExpandedRowClass,\n  };\n}\n"],"names":["useRowExpand","props","_props$columns","expandIcon","expandedRow","_useGlobalIcon","useGlobalIcon","ChevronRightCircleIcon","TdChevronRightCircleIcon","_useLocaleReceiver","useLocaleReceiver","_useLocaleReceiver2","_slicedToArray","locale","_useClassName","useClassName","tableExpandClasses","positiveRotate90","tableFullRowClasses","_useControlled","useControlled","onExpandChange","defaultExpandedRowKeys","_useControlled2","tExpandedRowKeys","setTExpandedRowKeys","showExpandedRow","Boolean","getExpandedRowClass","useCallback","params","row","rowKey","currentRowKey","get","includes","showExpandIconColumn","isFirstColumnFixed","columns","fixed","onToggleExpand","e","expandOnRowClick","stopPropagation","currentId","index","indexOf","newKeys","_toConsumableArray","splice","push","expandedRowData","data","filter","t","currentRowData","renderExpandIcon","p","rowIndex","expanded","defaultIcon","React","createElement","icon","isFunction","classes","iconBox","_defineProperty","className","classNames","onClick","getExpandColumn","expandCol","colKey","width","iconCell","cell","renderExpandedRow","rowId","isFixedLeft","isWidthOverflow","find","item","key","base","colSpan","length","rowInner","innerFullRow","style","concat","tableWidth","innerFullElement","parseContentTNode","onInnerExpandRowClick"],"mappings":"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"}