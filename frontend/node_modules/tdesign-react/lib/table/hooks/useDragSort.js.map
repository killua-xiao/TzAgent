{"version":3,"file":"useDragSort.js","sources":["../../../../common/js/utils/swapDragArrayElement.ts","../../../../components/table/hooks/useDragSort.ts"],"sourcesContent":["// 拖拽排序场景中：调整某个元素的顺序\nexport default function swapDragArrayElement(\n  data: any[], currentIndex: number, targetIndex: number\n) {\n  const newData = [...data];\n  if (targetIndex - currentIndex > 0) {\n    newData.splice(targetIndex + 1, 0, newData[currentIndex]);\n    newData.splice(currentIndex, 1);\n  } else {\n    newData.splice(targetIndex, 0, newData[currentIndex]);\n    newData.splice(currentIndex + 1, 1);\n  }\n  return newData;\n}\n","// 表格 行拖拽 + 列拖拽功能\nimport { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react';\nimport Sortable, { SortableEvent, SortableOptions, MoveEvent } from 'sortablejs';\nimport { get } from 'lodash-es';\nimport log from '@tdesign/common-js/log/index';\nimport swapDragArrayElement from '@tdesign/common-js/utils/swapDragArrayElement';\nimport { getColumnDataByKey, getColumnIndexByKey } from '@tdesign/common-js/table/utils';\nimport { PaginationProps } from '../../pagination';\nimport { TableRowData, TdPrimaryTableProps, DragSortContext } from '../type';\nimport useClassName from './useClassName';\nimport { hasClass } from '../../_util/style';\nimport useLatest from '../../hooks/useLatest';\nimport { BaseTableColumns } from '../interface';\n\nexport default function useDragSort(\n  props: TdPrimaryTableProps,\n  {\n    primaryTableRef,\n    innerPagination,\n  }: {\n    primaryTableRef: MutableRefObject<any>;\n    innerPagination: MutableRefObject<PaginationProps>;\n  },\n) {\n  const { sortOnRowDraggable, dragSort, data, onDragSort } = props;\n  const { tableDraggableClasses, tableBaseClass, tableFullRowClasses } = useClassName();\n  const [columns, setDragSortColumns] = useState<BaseTableColumns>(props.columns || []);\n  // 判断是否有拖拽列。此处重点测试树形结构的拖拽排序\n  const dragCol = useMemo(() => columns.find((item) => item.colKey === 'drag'), [columns]);\n  // 行拖拽判断条件\n  const isRowDraggable = useMemo(() => sortOnRowDraggable || dragSort === 'row', [dragSort, sortOnRowDraggable]);\n  // 行拖拽判断条件-手柄列\n  const isRowHandlerDraggable = useMemo(\n    () => ['row-handler', 'row-handler-col'].includes(dragSort) && !!dragCol,\n    [dragSort, dragCol],\n  );\n  // 列拖拽判断条件\n  const isColDraggable = useMemo(() => ['col', 'row-handler-col'].includes(dragSort), [dragSort]);\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const lastRowList = useRef([]);\n  // React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const tData = useRef<TableRowData[]>(null);\n  const lastColList = useRef([]);\n  const dragColumns = useRef([]);\n  const originalColumns = useRef([]);\n\n  // 拖拽实例\n  let dragColInstanceTmp: Sortable = null;\n\n  if (props.sortOnRowDraggable) {\n    log.warn('Table', \"`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.\");\n  }\n\n  useEffect(() => {\n    // 更新排列顺序\n    lastRowList.current = data.map((item) => String(get(item, props.rowKey)));\n    tData.current = data;\n  }, [data, props.rowKey]);\n\n  useEffect(() => {\n    lastColList.current = props.columns.map((t) => t.colKey);\n    dragColumns.current = props.columns;\n    originalColumns.current = props.columns;\n  }, [props.columns]);\n\n  // fix: https://github.com/Tencent/tdesign/issues/294 修正 onDragSort 会使用旧的变量问题\n  const onDragSortRef = useLatest(onDragSort);\n\n  // 本地分页的表格，index 不同，需加上分页计数\n  function getDataPageIndex(index: number, pagination: PaginationProps) {\n    const current = pagination.current ?? pagination.defaultCurrent;\n    const pageSize = pagination.pageSize ?? pagination.defaultPageSize;\n    // 开启本地分页的场景\n    if (!props.disableDataPage && pagination && data.length > pageSize) {\n      return pageSize * (current - 1) + index;\n    }\n    return index;\n  }\n\n  const registerRowDragEvent = (element: HTMLElement) => {\n    if (!isRowHandlerDraggable && !isRowDraggable) return;\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const dragContainer = element?.querySelector('tbody');\n    if (!dragContainer) {\n      return null;\n    }\n    const baseOptions: SortableOptions = {\n      animation: 150,\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      filter: `.${tableFullRowClasses.base}`, // 过滤首行尾行固定\n      onMove: (evt: MoveEvent) => !hasClass(evt.related, tableFullRowClasses.base),\n      onEnd: (evt: SortableEvent) => {\n        if (evt.newIndex === evt.oldIndex) return;\n        // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n        let { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n\n        dragInstanceTmp?.sort([...lastRowList.current]);\n        if (props.firstFullRow) {\n          currentIndex -= 1;\n          targetIndex -= 1;\n        }\n        if (innerPagination.current) {\n          currentIndex = getDataPageIndex(currentIndex, innerPagination.current);\n          targetIndex = getDataPageIndex(targetIndex, innerPagination.current);\n        }\n        const newData = swapDragArrayElement([...tData.current], currentIndex, targetIndex);\n        const params: DragSortContext<TableRowData> = {\n          currentIndex,\n          current: tData.current[currentIndex],\n          targetIndex,\n          target: tData.current[targetIndex],\n          data: tData.current,\n          newData,\n          e: evt,\n          sort: 'row',\n        };\n        // currentData is going to be deprecated.\n        params.currentData = params.newData;\n\n        onDragSortRef.current?.(params);\n      },\n      ...props.dragSortOptions,\n    };\n\n    if (!dragContainer) return;\n    if (isRowDraggable) {\n      dragInstanceTmp = new Sortable(dragContainer, { ...baseOptions });\n    } else if (isRowHandlerDraggable) {\n      dragInstanceTmp = new Sortable(dragContainer, {\n        ...baseOptions,\n        handle: `.${tableDraggableClasses.handle}`,\n      });\n    }\n    lastRowList.current = dragInstanceTmp?.toArray();\n  };\n\n  const registerOneLevelColDragEvent = (container: HTMLElement, recover: boolean) => {\n    const options: SortableOptions = {\n      animation: 150,\n      dataIdAttr: 'data-colkey',\n      direction: 'vertical',\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      handle: `.${tableBaseClass.thCellInner}`,\n      // 存在类名：t-table__th--drag-sort 的列才允许拖拽调整顺序（注意：添加 draggable 之后，固定列的表头 和 吸顶表头 位置顺序会错位，暂时注释）\n      // draggable: `th.${tableDraggableClasses.dragSortTh}`,\n      onEnd: (evt: SortableEvent) => {\n        if (evt.newIndex === evt.oldIndex) return;\n        if (recover) {\n          // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n          dragColInstanceTmp?.sort([...lastColList.current]);\n        }\n        const { oldIndex, newIndex, target: targetElement } = evt;\n        let currentIndex = recover ? oldIndex : newIndex;\n        let targetIndex = recover ? newIndex : oldIndex;\n        const oldElement = targetElement.children[currentIndex] as HTMLElement;\n        const newElement = targetElement.children[targetIndex] as HTMLElement;\n        const current = getColumnDataByKey(originalColumns.current, oldElement.dataset.colkey);\n        const target = getColumnDataByKey(originalColumns.current, newElement.dataset.colkey);\n        if (!current || !current.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(current)}`);\n        }\n        if (!target || !target.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(target)}`);\n        }\n        // 寻找外部数据 props.columns 中的真正下标\n        currentIndex = getColumnIndexByKey(originalColumns.current, current.colKey);\n        targetIndex = getColumnIndexByKey(originalColumns.current, target.colKey);\n        const params: DragSortContext<TableRowData> = {\n          data: dragColumns.current,\n          currentIndex,\n          current,\n          targetIndex,\n          target,\n          newData: swapDragArrayElement([...originalColumns.current], currentIndex, targetIndex),\n          e: evt,\n          sort: 'col',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        onDragSortRef.current?.(params);\n      },\n      ...props.dragSortOptions,\n    };\n    if (!container) return;\n    dragColInstanceTmp = new Sortable(container, options);\n    return dragColInstanceTmp;\n  };\n\n  const registerColDragEvent = (tableElement: HTMLElement) => {\n    if (!isColDraggable || !tableElement) return;\n    const trList = tableElement.querySelectorAll('thead > tr');\n    if (trList.length <= 1) {\n      const container = trList[0];\n      const dragInstanceTmp = registerOneLevelColDragEvent(container as HTMLElement, true);\n      lastColList.current = dragInstanceTmp?.toArray();\n    } else {\n      // 多级表头只抛出事件，不处理其他未知逻辑（如多层表头之间具体如何交换）\n      trList?.forEach((container) => {\n        registerOneLevelColDragEvent(container as HTMLElement, false);\n      });\n    }\n  };\n\n  // 注册拖拽事件\n  useEffect(() => {\n    if (!primaryTableRef || !primaryTableRef.current) return;\n    registerRowDragEvent(primaryTableRef.current?.tableElement);\n    registerColDragEvent(primaryTableRef.current?.tableHtmlElement);\n    /** 待表头节点准备完成后 */\n    const timer = setTimeout(() => {\n      if (primaryTableRef.current?.affixHeaderElement) {\n        registerColDragEvent(primaryTableRef.current.affixHeaderElement);\n      }\n      clearTimeout(timer);\n    });\n    return () => {\n      clearTimeout(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [primaryTableRef, columns, dragSort, innerPagination]);\n\n  return {\n    isRowDraggable,\n    isRowHandlerDraggable,\n    isColDraggable,\n    setDragSortColumns,\n  };\n}\n"],"names":["swapDragArrayElement","data","currentIndex","targetIndex","newData","_toConsumableArray","splice","useDragSort","props","_ref","primaryTableRef","innerPagination","sortOnRowDraggable","dragSort","onDragSort","_useClassName","useClassName","tableDraggableClasses","tableBaseClass","tableFullRowClasses","_useState","useState","columns","_useState2","_slicedToArray","setDragSortColumns","dragCol","useMemo","find","item","colKey","isRowDraggable","isRowHandlerDraggable","includes","isColDraggable","lastRowList","useRef","tData","lastColList","dragColumns","originalColumns","dragColInstanceTmp","log","warn","useEffect","current","map","String","get","rowKey","t","onDragSortRef","useLatest","getDataPageIndex","index","pagination","_pagination$current","_pagination$pageSize","defaultCurrent","pageSize","defaultPageSize","disableDataPage","length","registerRowDragEvent","element","_dragInstanceTmp2","dragInstanceTmp","dragContainer","querySelector","baseOptions","_objectSpread","animation","ghostClass","ghost","chosenClass","chosen","dragClass","dragging","filter","concat","base","onMove","evt","hasClass","related","onEnd","_dragInstanceTmp","_onDragSortRef$curren","newIndex","oldIndex","sort","firstFullRow","params","target","e","currentData","call","dragSortOptions","Sortable","handle","toArray","registerOneLevelColDragEvent","container","recover","options","dataIdAttr","direction","thCellInner","_onDragSortRef$curren2","_dragColInstanceTmp","targetElement","oldElement","children","newElement","getColumnDataByKey","dataset","colkey","error","JSON","stringify","getColumnIndexByKey","registerColDragEvent","tableElement","trList","querySelectorAll","forEach","_primaryTableRef$curr","_primaryTableRef$curr2","tableHtmlElement","timer","setTimeout","_primaryTableRef$curr3","affixHeaderElement","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACwB,SAAAA,oBAAAA,CACtBC,IAAa,EAAAC,YAAA,EAAsBC,WACnC,EAAA;AACM,EAAA,IAAAC,OAAA,GAAAC,kBAAA,CAAcJ,IAAI,CAAA,CAAA;AACpB,EAAA,IAAAE,WAAA,GAAcD,eAAe,CAAG,EAAA;AAClCE,IAAAA,OAAA,CAAQE,MAAO,CAAAH,WAAA,GAAc,CAAG,EAAA,CAAA,EAAGC,QAAQF,YAAa,CAAA,CAAA,CAAA;AAChDE,IAAAA,OAAA,CAAAE,MAAA,CAAOJ,cAAc,CAAC,CAAA,CAAA;AAChC,GAAO,MAAA;IACLE,OAAA,CAAQE,MAAO,CAAAH,WAAA,EAAa,CAAG,EAAAC,OAAA,CAAQF,YAAa,CAAA,CAAA,CAAA;IAC5CE,OAAA,CAAAE,MAAA,CAAOJ,YAAe,GAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACpC,GAAA;AACO,EAAA,OAAAE,OAAA,CAAA;AACT;;;;ACCA,SAAwBG,YACtBC,KACA,EAAAC,IAAA,EAOA;AAAA,EAAA,IANEC,eAAA,GAAAD,IAAA,CAAAC,eAAA;IACAC,eAAA,GAAAF,IAAA,CAAAE,eAAA,CAAA;AAMF,EAAA,IAAQC,kBAAA,GAAmDJ,KAAA,CAAnDI,kBAAA;IAAoBC,QAAU,GAAqBL,KAAA,CAA/BK,QAAU;IAAAZ,IAAA,GAAqBO,KAAA,CAArBP,IAAA;IAAMa,aAAeN,KAAA,CAAfM;AAC5C,EAAA,IAAAC,aAAA,GAAuEC,YAAa,EAAA;IAA5EC,qBAAA,GAAAF,aAAA,CAAAE,qBAAA;IAAuBC,cAAgB,GAAAH,aAAA,CAAhBG,cAAgB;IAAAC,mBAAA,GAAAJ,aAAA,CAAAI,mBAAA,CAAA;EACzC,IAAAC,SAAA,GAAgCC,SAA2Bb,KAAM,CAAAc,OAAA,IAAW,EAAE,CAAA;IAAAC,UAAA,GAAAC,cAAA,CAAAJ,SAAA,EAAA,CAAA,CAAA;AAA7EE,IAAAA;AAASG,IAAAA,kBAAkB,GAAAF,UAAA,CAAA,CAAA,CAAA,CAAA;EAElC,IAAMG,OAAU,GAAAC,OAAA,CAAQ,YAAA;AAAA,IAAA,OAAML,OAAA,CAAQM,IAAK,CAAA,UAACC,IAAS,EAAA;AAAA,MAAA,OAAAA,IAAA,CAAKC,MAAW,KAAA,MAAM,CAAA;KAAG,CAAA,CAAA;GAAA,EAAA,CAACR,OAAO,CAAC,CAAA,CAAA;EAEjF,IAAAS,cAAA,GAAiBJ,QAAQ,YAAA;AAAA,IAAA,OAAMf,kBAAA,IAAsBC,aAAa,KAAO,CAAA;AAAA,GAAA,EAAA,CAACA,QAAU,EAAAD,kBAAkB,CAAC,CAAA,CAAA;EAE7G,IAAMoB,qBAAwB,GAAAL,OAAA,CAC5B,YAAA;AAAA,IAAA,OAAM,CAAC,aAAe,EAAA,iBAAiB,EAAEM,QAAS,CAAApB,QAAQ,CAAK,IAAA,CAAC,CAACa,OAAA,CAAA;AAAA,GAAA,EACjE,CAACb,UAAUa,OAAO,CACpB,CAAA,CAAA;EAEA,IAAMQ,cAAiB,GAAAP,OAAA,CAAQ,YAAA;IAAA,OAAM,CAAC,KAAO,EAAA,iBAAiB,CAAE,CAAAM,QAAA,CAASpB,QAAQ,CAAA,CAAA;GAAG,EAAA,CAACA,QAAQ,CAAC,CAAA,CAAA;AAExF,EAAA,IAAAsB,WAAA,GAAcC,MAAO,CAAA,EAAE,CAAA,CAAA;AAEvB,EAAA,IAAAC,KAAA,GAAQD,OAAuB,IAAI,CAAA,CAAA;AACnC,EAAA,IAAAE,WAAA,GAAcF,MAAO,CAAA,EAAE,CAAA,CAAA;AACvB,EAAA,IAAAG,WAAA,GAAcH,MAAO,CAAA,EAAE,CAAA,CAAA;AACvB,EAAA,IAAAI,eAAA,GAAkBJ,MAAO,CAAA,EAAE,CAAA,CAAA;EAGjC,IAAIK,kBAA+B,GAAA,IAAA,CAAA;EAEnC,IAAIjC,MAAMI,kBAAoB,EAAA;AACxB8B,IAAAA,GAAA,CAAAC,IAAA,CAAK,SAAS,6EAA6E,CAAA,CAAA;AACjG,GAAA;AAEAC,EAAAA,SAAA,CAAU,YAAM;IAEFT,WAAA,CAAAU,OAAA,GAAU5C,IAAK,CAAA6C,GAAA,CAAI,UAACjB,IAAA,EAAA;MAAA,OAASkB,MAAO,CAAAC,GAAA,CAAInB,IAAM,EAAArB,KAAA,CAAMyC,MAAM,CAAC,CAAC,CAAA;KAAA,CAAA,CAAA;IACxEZ,KAAA,CAAMQ,OAAU,GAAA5C,IAAA,CAAA;GACf,EAAA,CAACA,IAAM,EAAAO,KAAA,CAAMyC,MAAM,CAAC,CAAA,CAAA;AAEvBL,EAAAA,SAAA,CAAU,YAAM;IACdN,WAAA,CAAYO,UAAUrC,KAAM,CAAAc,OAAA,CAAQwB,IAAI,UAACI,CAAA,EAAA;MAAA,OAAMA,EAAEpB,MAAM,CAAA;KAAA,CAAA,CAAA;AACvDS,IAAAA,WAAA,CAAYM,UAAUrC,KAAM,CAAAc,OAAA,CAAA;AAC5BkB,IAAAA,eAAA,CAAgBK,UAAUrC,KAAM,CAAAc,OAAA,CAAA;AAClC,GAAG,EAAA,CAACd,KAAM,CAAAc,OAAO,CAAC,CAAA,CAAA;AAGZ,EAAA,IAAA6B,aAAA,GAAgBC,UAAUtC,UAAU,CAAA,CAAA;AAGjC,EAAA,SAAAuC,gBAAAA,CAAiBC,OAAeC,UAA6B,EAAA;IAAA,IAAAC,mBAAA,EAAAC,oBAAA,CAAA;AAC9D,IAAA,IAAAZ,OAAA,GAAA,CAAAW,mBAAA,GAAUD,UAAW,CAAAV,OAAA,MAAAW,IAAAA,IAAAA,mBAAA,KAAAA,KAAAA,CAAAA,GAAAA,mBAAA,GAAWD,UAAW,CAAAG,cAAA,CAAA;AAC3C,IAAA,IAAAC,QAAA,GAAA,CAAAF,oBAAA,GAAWF,UAAW,CAAAI,QAAA,MAAAF,IAAAA,IAAAA,oBAAA,KAAAA,KAAAA,CAAAA,GAAAA,oBAAA,GAAYF,UAAW,CAAAK,eAAA,CAAA;AAEnD,IAAA,IAAI,CAACpD,KAAM,CAAAqD,eAAA,IAAmBN,UAAc,IAAAtD,IAAA,CAAK6D,SAASH,QAAU,EAAA;AAC3D,MAAA,OAAAA,QAAA,IAAYd,UAAU,CAAK,CAAA,GAAAS,KAAA,CAAA;AACpC,KAAA;AACO,IAAA,OAAAA,KAAA,CAAA;AACT,GAAA;AAEM,EAAA,IAAAS,oBAAA,GAAuB,SAAvBA,oBAAAA,CAAwBC,OAAyB,EAAA;AAAA,IAAA,IAAAC,iBAAA,CAAA;AACjD,IAAA,IAAA,CAACjC,yBAAyB,CAACD,cAAA,EAAgB,OAAA;IAE/C,IAAImC,eAA4B,GAAA,IAAA,CAAA;IAC1B,IAAAC,aAAA,GAAgBH,OAAS,KAATA,IAAAA,IAAAA,OAAS,KAATA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAS,CAAAI,aAAA,CAAc,OAAO,CAAA,CAAA;IACpD,IAAI,CAACD,aAAe,EAAA;AACX,MAAA,OAAA,IAAA,CAAA;AACT,KAAA;IACA,IAAME,WAA+B,GAAAC,aAAA,CAAA;AACnCC,MAAAA,SAAW,EAAA,GAAA;MACXC,YAAYvD,qBAAsB,CAAAwD,KAAA;MAClCC,aAAazD,qBAAsB,CAAA0D,MAAA;MACnCC,WAAW3D,qBAAsB,CAAA4D,QAAA;AACjCC,MAAAA,MAAA,MAAAC,MAAA,CAAY5D,mBAAoB,CAAA6D,IAAA,CAAA;AAChCC,MAAAA,MAAA,EAAQ,SAARA,MAAAA,CAASC,GAAmB,EAAA;QAAA,OAAA,CAACC,SAASD,GAAI,CAAAE,OAAA,EAASjE,oBAAoB6D,IAAI,CAAA,CAAA;AAAA,OAAA;AAC3EK,MAAAA,KAAA,EAAO,SAAPA,KAAAA,CAAQH,GAAuB,EAAA;QAAA,IAAAI,gBAAA,EAAAC,qBAAA,CAAA;AACzB,QAAA,IAAAL,GAAA,CAAIM,aAAaN,GAAI,CAAAO,QAAA,EAAU,OAAA;AAEnC,QAAA,IAAgBvF,YAAc,GAA0BgF,GAAA,CAAlDO,QAAA;UAAkCtF,cAAgB+E,GAAA,CAA1BM,QAAA,CAAA;AAE9B,QAAA,CAAAF,gBAAA,GAAApB,eAAA,MAAAoB,IAAAA,IAAAA,gBAAA,eAAAA,gBAAA,CAAiBI,IAAK,CAAArF,kBAAA,CAAI8B,WAAA,CAAYU,OAAO,CAAC,CAAA,CAAA;QAC9C,IAAIrC,MAAMmF,YAAc,EAAA;AACNzF,UAAAA,YAAA,IAAA,CAAA,CAAA;AACDC,UAAAA,WAAA,IAAA,CAAA,CAAA;AACjB,SAAA;QACA,IAAIQ,gBAAgBkC,OAAS,EAAA;UACZ3C,YAAA,GAAAmD,gBAAA,CAAiBnD,YAAc,EAAAS,eAAA,CAAgBkC,OAAO,CAAA,CAAA;UACvD1C,WAAA,GAAAkD,gBAAA,CAAiBlD,WAAa,EAAAQ,eAAA,CAAgBkC,OAAO,CAAA,CAAA;AACrE,SAAA;AACM,QAAA,IAAAzC,OAAA,GAAUJ,wCAAyBqC,MAAMQ,OAAO,CAAA,EAAG3C,cAAcC,WAAW,CAAA,CAAA;AAClF,QAAA,IAAMyF,MAAwC,GAAA;AAC5C1F,UAAAA,YAAA,EAAAA,YAAA;AACA2C,UAAAA,OAAA,EAASR,MAAMQ,OAAQ,CAAA3C,YAAA,CAAA;AACvBC,UAAAA,WAAA,EAAAA,WAAA;AACA0F,UAAAA,MAAA,EAAQxD,MAAMQ,OAAQ,CAAA1C,WAAA,CAAA;UACtBF,MAAMoC,KAAM,CAAAQ,OAAA;AACZzC,UAAAA,OAAA,EAAAA,OAAA;AACA0F,UAAAA,CAAG,EAAAZ,GAAA;AACHQ,UAAAA,IAAM,EAAA,KAAA;SACR,CAAA;AAEAE,QAAAA,MAAA,CAAOG,cAAcH,MAAO,CAAAxF,OAAA,CAAA;AAE5B,QAAA,CAAAmF,qBAAA,GAAApC,aAAA,CAAcN,+CAAd0C,KAAAA,CAAAA,IAAAA,qBAAA,CAAAS,IAAA,CAAA7C,aAAA,EAAwByC,MAAM,CAAA,CAAA;AAChC,OAAA;KACGpF,EAAAA,KAAM,CAAAyF,eAAA,CACX,CAAA;IAEA,IAAI,CAAC9B,aAAA,EAAe,OAAA;AACpB,IAAA,IAAIpC,cAAgB,EAAA;MAClBmC,eAAA,GAAkB,IAAIgC,QAAS,CAAA/B,aAAA,EAAAG,aAAA,CAAA,EAAA,EAAoBD,YAAa,CAAA,CAAA;eACvDrC,qBAAuB,EAAA;MACdkC,eAAA,GAAA,IAAIgC,SAAS/B,aAAe,EAAAG,aAAA,CAAAA,aAAA,CAAA,EAAA,EACzCD,WAAA,CAAA,EAAA,EAAA,EAAA;AACH8B,QAAAA,MAAA,EAAApB,GAAAA,CAAAA,MAAA,CAAY9D,qBAAsB,CAAAkF,MAAA,CAAA;AAAA,OAAA,CACnC,CAAA,CAAA;AACH,KAAA;AACYhE,IAAAA,WAAA,CAAAU,OAAA,GAAAoB,CAAAA,iBAAA,GAAUC,mDAAAD,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAA,CAAiBmC,OAAQ,EAAA,CAAA;GACjD,CAAA;EAEM,IAAAC,4BAAA,GAA+B,SAA/BA,4BAAAA,CAAgCC,SAAA,EAAwBC,OAAqB,EAAA;IACjF,IAAMC,OAA2B,GAAAlC,aAAA,CAAA;AAC/BC,MAAAA,SAAW,EAAA,GAAA;AACXkC,MAAAA,UAAY,EAAA,aAAA;AACZC,MAAAA,SAAW,EAAA,UAAA;MACXlC,YAAYvD,qBAAsB,CAAAwD,KAAA;MAClCC,aAAazD,qBAAsB,CAAA0D,MAAA;MACnCC,WAAW3D,qBAAsB,CAAA4D,QAAA;AACjCsB,MAAAA,MAAA,MAAApB,MAAA,CAAY7D,cAAe,CAAAyF,WAAA,CAAA;AAG3BtB,MAAAA,KAAA,EAAO,SAAPA,KAAAA,CAAQH,GAAuB,EAAA;AAAA,QAAA,IAAA0B,sBAAA,CAAA;AACzB,QAAA,IAAA1B,GAAA,CAAIM,aAAaN,GAAI,CAAAO,QAAA,EAAU,OAAA;AACnC,QAAA,IAAIc,OAAS,EAAA;AAAA,UAAA,IAAAM,mBAAA,CAAA;AAEX,UAAA,CAAAA,mBAAA,GAAApE,kBAAA,MAAAoE,IAAAA,IAAAA,mBAAA,eAAAA,mBAAA,CAAoBnB,IAAK,CAAArF,kBAAA,CAAIiC,WAAA,CAAYO,OAAO,CAAC,CAAA,CAAA;AACnD,SAAA;AACA,QAAA,IAAQ4C,QAAA,GAA8CP,GAAA,CAA9CO,QAAA;UAAUD,QAAU,GAA0BN,GAAA,CAApCM,QAAU;UAAQsB,gBAAkB5B,GAAA,CAA1BW,MAAA,CAAA;AACxB,QAAA,IAAA3F,YAAA,GAAeqG,UAAUd,QAAW,GAAAD,QAAA,CAAA;AACpC,QAAA,IAAArF,WAAA,GAAcoG,UAAUf,QAAW,GAAAC,QAAA,CAAA;AACjC,QAAA,IAAAsB,UAAA,GAAaD,cAAcE,QAAS,CAAA9G,YAAA,CAAA,CAAA;AACpC,QAAA,IAAA+G,UAAA,GAAaH,cAAcE,QAAS,CAAA7G,WAAA,CAAA,CAAA;AAC1C,QAAA,IAAM0C,UAAUqE,kBAAmB,CAAA1E,eAAA,CAAgBK,OAAS,EAAAkE,UAAA,CAAWI,QAAQC,MAAM,CAAA,CAAA;AACrF,QAAA,IAAMvB,SAASqB,kBAAmB,CAAA1E,eAAA,CAAgBK,OAAS,EAAAoE,UAAA,CAAWE,QAAQC,MAAM,CAAA,CAAA;AACpF,QAAA,IAAI,CAACvE,OAAA,IAAW,CAACA,OAAA,CAAQf,MAAQ,EAAA;AAC/BY,UAAAA,GAAA,CAAI2E,MAAM,OAAS,0BAAAtC,MAAA,CAAwBuC,IAAK,CAAAC,SAAA,CAAU1E,OAAO,CAAG,CAAA,CAAA,CAAA;AACtE,SAAA;AACA,QAAA,IAAI,CAACgD,MAAA,IAAU,CAACA,MAAA,CAAO/D,MAAQ,EAAA;AAC7BY,UAAAA,GAAA,CAAI2E,MAAM,OAAS,0BAAAtC,MAAA,CAAwBuC,IAAK,CAAAC,SAAA,CAAU1B,MAAM,CAAG,CAAA,CAAA,CAAA;AACrE,SAAA;QAEA3F,YAAA,GAAesH,mBAAoB,CAAAhF,eAAA,CAAgBK,OAAS,EAAAA,OAAA,CAAQf,MAAM,CAAA,CAAA;QAC1E3B,WAAA,GAAcqH,mBAAoB,CAAAhF,eAAA,CAAgBK,OAAS,EAAAgD,MAAA,CAAO/D,MAAM,CAAA,CAAA;AACxE,QAAA,IAAM8D,MAAwC,GAAA;UAC5C3F,MAAMsC,WAAY,CAAAM,OAAA;AAClB3C,UAAAA,YAAA,EAAAA,YAAA;AACA2C,UAAAA,OAAA,EAAAA,OAAA;AACA1C,UAAAA,WAAA,EAAAA,WAAA;AACA0F,UAAAA,MAAA,EAAAA,MAAA;AACAzF,UAAAA,OAAA,EAASJ,wCAAyBwC,gBAAgBK,OAAO,CAAG3C,EAAAA,cAAcC,WAAW,CAAA;AACrF2F,UAAAA,CAAG,EAAAZ,GAAA;AACHQ,UAAAA,IAAM,EAAA,KAAA;SACR,CAAA;AAEAE,QAAAA,MAAA,CAAOG,cAAcH,MAAO,CAAAxF,OAAA,CAAA;AAC5B,QAAA,CAAAwG,sBAAA,GAAAzD,aAAA,CAAcN,gDAAd+D,KAAAA,CAAAA,IAAAA,sBAAA,CAAAZ,IAAA,CAAA7C,aAAA,EAAwByC,MAAM,CAAA,CAAA;AAChC,OAAA;KACGpF,EAAAA,KAAM,CAAAyF,eAAA,CACX,CAAA;IACA,IAAI,CAACK,SAAA,EAAW,OAAA;AACK7D,IAAAA,kBAAA,GAAA,IAAIyD,QAAS,CAAAI,SAAA,EAAWE,OAAO,CAAA,CAAA;AAC7C,IAAA,OAAA/D,kBAAA,CAAA;GACT,CAAA;AAEM,EAAA,IAAAgF,oBAAA,GAAuB,SAAvBA,oBAAAA,CAAwBC,YAA8B,EAAA;AACtD,IAAA,IAAA,CAACxF,kBAAkB,CAACwF,YAAA,EAAc,OAAA;AAChC,IAAA,IAAAC,MAAA,GAASD,YAAa,CAAAE,gBAAA,CAAiB,YAAY,CAAA,CAAA;AACrD,IAAA,IAAAD,MAAA,CAAO7D,UAAU,CAAG,EAAA;AACtB,MAAA,IAAMwC,YAAYqB,MAAO,CAAA,CAAA,CAAA,CAAA;AACnB,MAAA,IAAAzD,eAAA,GAAkBmC,4BAA6B,CAAAC,SAAA,EAA0B,IAAI,CAAA,CAAA;MACvEhE,WAAA,CAAAO,OAAA,GAAUqB,4BAAAA,sCAAAA,gBAAiBkC,OAAQ,EAAA,CAAA;AACjD,KAAO,MAAA;MAEGuB,MAAA,KAAA,IAAA,IAAAA,MAAA,KAAAA,KAAAA,CAAAA,IAAAA,MAAA,CAAAE,OAAA,CAAQ,UAACvB,SAAc,EAAA;AAC7BD,QAAAA,4BAAA,CAA6BC,WAA0B,KAAK,CAAA,CAAA;AAC9D,OAAC,CAAA,CAAA;AACH,KAAA;GACF,CAAA;AAGA1D,EAAAA,SAAA,CAAU,YAAM;IAAA,IAAAkF,qBAAA,EAAAC,sBAAA,CAAA;AACV,IAAA,IAAA,CAACrH,eAAmB,IAAA,CAACA,eAAgB,CAAAmC,OAAA,EAAS,OAAA;AAC7BkB,IAAAA,oBAAA,CAAA+D,CAAAA,qBAAA,GAAApH,eAAA,CAAgBmC,+CAAhBiF,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAyBJ,YAAY,CAAA,CAAA;AACrCD,IAAAA,oBAAA,CAAAM,CAAAA,sBAAA,GAAArH,eAAA,CAAgBmC,gDAAhBkF,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAyBC,gBAAgB,CAAA,CAAA;AAExD,IAAA,IAAAC,KAAA,GAAQC,WAAW,YAAM;AAAA,MAAA,IAAAC,sBAAA,CAAA;MACzB,IAAAA,CAAAA,sBAAA,GAAAzH,eAAA,CAAgBmC,gDAAhBsF,KAAAA,CAAAA,IAAAA,sBAAA,CAAyBC,kBAAoB,EAAA;AAC1BX,QAAAA,oBAAA,CAAA/G,eAAA,CAAgBmC,QAAQuF,kBAAkB,CAAA,CAAA;AACjE,OAAA;MACAC,YAAA,CAAaJ,KAAK,CAAA,CAAA;AACpB,KAAC,CAAA,CAAA;AACD,IAAA,OAAO,YAAM;MACXI,YAAA,CAAaJ,KAAK,CAAA,CAAA;KACpB,CAAA;KAEC,CAACvH,eAAA,EAAiBY,OAAS,EAAAT,QAAA,EAAUF,eAAe,CAAC,CAAA,CAAA;EAEjD,OAAA;AACLoB,IAAAA,cAAA,EAAAA,cAAA;AACAC,IAAAA,qBAAA,EAAAA,qBAAA;AACAE,IAAAA,cAAA,EAAAA,cAAA;AACAT,IAAAA,kBAAA,EAAAA,kBAAAA;GACF,CAAA;AACF;;;;"}