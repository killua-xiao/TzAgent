/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-87d110df.js';
import React, { useRef, useEffect } from 'react';
import { SettingIcon } from 'tdesign-icons-react';
import { intersection, xorWith } from 'lodash-es';
import classNames from 'classnames';
import { Checkbox } from '../../checkbox/index.js';
import { DialogPlugin } from '../../dialog/plugin.js';
import { renderTitle } from './useTableHeader.js';
import useConfig from '../../hooks/useConfig.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import useControlled from '../../hooks/useControlled.js';
import { getCurrentRowByKey } from '../utils.js';
import { Button } from '../../button/index.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-872df51f.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_chunks/dep-6b660ef0.js';
import '../../_util/helper.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-f97636ce.js';
import '../../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../../_util/noop.js';
import '../../checkbox/defaultProps.js';
import '../../hooks/useDefaultProps.js';
import '../../_chunks/dep-b908e1fe.js';
import '../../_util/react-render.js';
import '../../_chunks/dep-52ff3837.js';
import 'react-dom';
import '../../dialog/Dialog.js';
import 'react-transition-group';
import '../../common/Portal.js';
import '../../_chunks/dep-3a09424a.js';
import '../../hooks/useLayoutEffect.js';
import '../../hooks/useAttach.js';
import '../../hooks/useDeepEffect.js';
import '../../hooks/useSetState.js';
import '../../locale/LocalReceiver.js';
import '../../config-provider/ConfigProvider.js';
import '../../dialog/defaultProps.js';
import '../../dialog/DialogCard.js';
import '../../_util/parseTNode.js';
import '../../button/Button.js';
import '../../hooks/useDomRefCallback.js';
import '../../hooks/useRipple.js';
import '../../_chunks/dep-c48e2ca1.js';
import '../../hooks/useAnimation.js';
import '../../loading/index.js';
import '../../loading/Loading.js';
import '../../loading/gradient.js';
import '../../_chunks/dep-6af6bc60.js';
import '../../loading/defaultProps.js';
import '../../loading/plugin.js';
import '../../common/PluginContainer.js';
import '../../button/defaultProps.js';
import '../../dialog/hooks/useDialogDrag.js';
import '../../hooks/useMouseEvent.js';
import '../../dialog/hooks/useDialogEsc.js';
import '../../dialog/hooks/useDialogPosition.js';
import '../../dialog/hooks/useLockStyle.js';
import '../../_chunks/dep-51092aec.js';
import '../../dialog/utils.js';
import './useMultiHeader.js';
import './useClassName.js';
import '../Ellipsis.js';
import '../../_util/scroll.js';
import 'raf';
import '../../_util/easing.js';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import '../../_util/ref.js';
import 'react-is';
import '../../_util/isFragment.js';
import '../../hooks/useMutationObserver.js';
import '../../hooks/useLatest.js';
import '../../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../../hooks/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../popup/hooks/useTrigger.js';
import '../../_util/composeRefs.js';
import '../../_util/listener.js';
import '../../popup/utils/transition.js';
import '../../popup/PopupPlugin.js';
import '../../tooltip/defaultProps.js';
import '../../tooltip/TooltipLite.js';
import '../../hooks/useSwitch.js';
import '../../hooks/usePersistFn.js';
import '../../hooks/useDebounce.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CheckboxGroup = Checkbox.Group;
function getColumnKeys(columns) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;
    var col = columns[i];
    col.colKey && keys.add(col.colKey);
    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnKeys(col.children, keys);
    }
  }
  return keys;
}
function useColumnController(props, extra) {
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix,
    table = _useConfig.table;
  var _useGlobalIcon = useGlobalIcon({
      SettingIcon: SettingIcon
    }),
    SettingIcon$1 = _useGlobalIcon.SettingIcon;
  var columns = props.columns,
    columnController = props.columnController,
    _props$displayColumns = props.displayColumns,
    displayColumns = _props$displayColumns === void 0 ? [] : _props$displayColumns,
    columnControllerVisible = props.columnControllerVisible;
  var dialogInstance = useRef(null);
  var enabledColKeys = function () {
    var arr = ((columnController === null || columnController === void 0 ? void 0 : columnController.fields) || _toConsumableArray(getColumnKeys(columns))).filter(function (v) {
      return v;
    });
    return new Set(arr);
  }();
  var keys = _toConsumableArray(getColumnKeys(columns));
  var _useControlled = useControlled(props, "displayColumns", props.onDisplayColumnsChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    tDisplayColumns = _useControlled2[0],
    setTDisplayColumns = _useControlled2[1];
  var defaultColumnCheckboxKeys = displayColumns || props.defaultDisplayColumns || keys;
  var columnCheckboxKeys = useRef(defaultColumnCheckboxKeys);
  useEffect(function () {
    var _dialogInstance$curre;
    columnCheckboxKeys.current = _toConsumableArray(displayColumns || props.defaultDisplayColumns || keys);
    (_dialogInstance$curre = dialogInstance.current) === null || _dialogInstance$curre === void 0 || _dialogInstance$curre.update({
      body: getDialogContent()
    });
  }, [displayColumns]);
  function getCheckboxOptions(columns2) {
    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    for (var i = 0, len = columns2.length; i < len; i++) {
      var _item$children;
      var item = columns2[i];
      if (item.colKey) {
        arr.push({
          label: renderTitle(item, i),
          value: item.colKey,
          disabled: !enabledColKeys.has(item.colKey)
        });
      }
      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      }
    }
    return arr;
  }
  var handleCheckChange = function handleCheckChange(val, ctx) {
    var _props$onColumnChange;
    columnCheckboxKeys.current = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: getCurrentRowByKey(columns, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 || _props$onColumnChange.call(props, params);
    dialogInstance.current.update({
      body: getDialogContent()
    });
  };
  var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
    if (checked) {
      var _props$onColumnChange2;
      var checkboxOptions = getCheckboxOptions(columns);
      var newData = (checkboxOptions === null || checkboxOptions === void 0 ? void 0 : checkboxOptions.map(function (t) {
        return t.value;
      })) || [];
      columnCheckboxKeys.current = newData;
      (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 || _props$onColumnChange2.call(props, {
        type: "check",
        columns: newData,
        e: ctx.e
      });
    } else {
      var _props$onColumnChange3;
      var disabledColKeys = getCheckboxOptions(columns).filter(function (t) {
        return t.disabled;
      }).map(function (t) {
        return t.value;
      });
      columnCheckboxKeys.current = disabledColKeys;
      (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 || _props$onColumnChange3.call(props, {
        type: "uncheck",
        columns: disabledColKeys,
        e: ctx.e
      });
    }
    dialogInstance.current.update({
      body: getDialogContent()
    });
  };
  function getDialogContent() {
    var checkboxOptions = getCheckboxOptions(columns);
    var intersectionChecked = intersection(columnCheckboxKeys.current, _toConsumableArray(enabledColKeys));
    var widthMode = (columnController === null || columnController === void 0 ? void 0 : columnController.displayType) === "fixed-width" ? "fixed" : "auto";
    var checkedLength = intersectionChecked.length;
    var isCheckedAll = checkedLength === enabledColKeys.size;
    var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.size;
    return /* @__PURE__ */React.createElement("div", {
      className: classNames(["".concat(classPrefix, "-table__column-controller"), "".concat(classPrefix, "-table__column-controller--").concat(widthMode)])
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-body")
    }, /* @__PURE__ */React.createElement("p", {
      className: "".concat(classPrefix, "-table__column-controller-desc")
    }, table.columnConfigDescriptionText), /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React.createElement(Checkbox, {
      indeterminate: isIndeterminate,
      checked: isCheckedAll,
      onChange: handleClickAllShowColumns
    }, table.selectAllText)), /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-table__column-controller-block")
    }, /* @__PURE__ */React.createElement(CheckboxGroup, _objectSpread(_objectSpread({
      options: checkboxOptions
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.checkboxProps) || {}), {}, {
      value: columnCheckboxKeys.current,
      onChange: handleCheckChange
    })))));
  }
  var handleToggleColumnController = function handleToggleColumnController() {
    dialogInstance.current = DialogPlugin.confirm(_objectSpread({
      header: table.columnConfigTitleText,
      body: getDialogContent(),
      confirmBtn: table.confirmText,
      cancelBtn: table.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        if (columnCheckboxKeys.current.length < displayColumns.length) {
          var _extra$onColumnReduce;
          var reduceKeys = xorWith(displayColumns, columnCheckboxKeys.current);
          extra === null || extra === void 0 || (_extra$onColumnReduce = extra.onColumnReduce) === null || _extra$onColumnReduce === void 0 || _extra$onColumnReduce.call(extra, reduceKeys);
        }
        setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.current));
        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro;
          (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 || _props$onColumnContro.call(props, false, {
            trigger: "cancel"
          });
        }
      },
      onClose: function onClose() {
        columnCheckboxKeys.current = tDisplayColumns;
        if (columnControllerVisible === void 0) {
          dialogInstance.current.hide();
        } else {
          var _props$onColumnContro2;
          (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 || _props$onColumnContro2.call(props, false, {
            trigger: "confirm"
          });
        }
      }
    }, (columnController === null || columnController === void 0 ? void 0 : columnController.dialogProps) || {}));
  };
  useEffect(function () {
    if (columnControllerVisible === void 0) return;
    if (dialogInstance.current) {
      columnControllerVisible ? dialogInstance.current.show() : dialogInstance.current.hide();
    } else {
      columnControllerVisible && handleToggleColumnController();
    }
  }, [columnControllerVisible, dialogInstance]);
  var renderColumnController = function renderColumnController() {
    var _props$columnControll;
    var isColumnController = !!(columnController && Object.keys(columnController).length);
    var placement = isColumnController ? columnController.placement || "top-right" : "";
    if (isColumnController && columnController.hideTriggerButton) return null;
    var classes = ["".concat(classPrefix, "-table__column-controller-trigger"), _defineProperty({}, "".concat(classPrefix, "-align-").concat(placement), !!placement)];
    return /* @__PURE__ */React.createElement("div", {
      className: classNames(classes)
    }, /* @__PURE__ */React.createElement(Button, _objectSpread({
      theme: "default",
      variant: "outline",
      onClick: handleToggleColumnController,
      content: table.columnConfigButtonText,
      icon: /* @__PURE__ */React.createElement(SettingIcon$1, null)
    }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps)));
  };
  return {
    tDisplayColumns: tDisplayColumns,
    renderColumnController: renderColumnController
  };
}

export { useColumnController as default, getColumnKeys };
//# sourceMappingURL=useColumnController.js.map
