/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-87d110df.js';
import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import React, { useState, useMemo, useEffect } from 'react';
import { intersection, get, isFunction } from 'lodash-es';
import { i as isRowSelectedDisabled } from '../../_chunks/dep-817e7805.js';
import { l as log } from '../../_chunks/dep-b908e1fe.js';
import useControlled from '../../hooks/useControlled.js';
import { Checkbox } from '../../checkbox/index.js';
import { Radio } from '../../radio/index.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_util/noop.js';
import '../../_chunks/dep-872df51f.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_chunks/dep-6b660ef0.js';
import 'classnames';
import '../../_util/helper.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-f97636ce.js';
import '../../_chunks/dep-9dbbf468.js';
import 'dayjs';
import '../../checkbox/defaultProps.js';
import '../../hooks/useDefaultProps.js';
import '../../_chunks/dep-7a2a9fe8.js';
import '../../_chunks/dep-4450afc0.js';
import '../../hooks/useCommonClassName.js';
import '../../radio/defaultProps.js';
import '../../radio/useKeyboard.js';
import '../../_chunks/dep-dbcf7b24.js';
import '../../_util/listener.js';
import '../../_chunks/dep-3a09424a.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var selectedRowDataMap = /* @__PURE__ */new Map();
function useRowSelect(props, tableSelectedClasses) {
  var selectedRowKeys = props.selectedRowKeys,
    columns = props.columns,
    data = props.data,
    rowKey = props.rowKey,
    indeterminateSelectedRowKeys = props.indeterminateSelectedRowKeys;
  var pagination = props.pagination,
    reserveSelectedRowOnPaginate = props.reserveSelectedRowOnPaginate;
  var _useState = useState(data),
    _useState2 = _slicedToArray(_useState, 2),
    currentPaginateData = _useState2[0],
    setCurrentPaginateData = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedRowClassNames = _useState4[0],
    setSelectedRowClassNames = _useState4[1];
  var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange, {
      defaultSelectedRowKeys: props.defaultSelectedRowKeys || []
    }),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    tSelectedRowKeys = _useControlled2[0],
    setTSelectedRowKeys = _useControlled2[1];
  var selectColumn = columns.find(function (_ref) {
    var type = _ref.type;
    return ["multiple", "single"].includes(type);
  });
  var canSelectedRows = useMemo(function () {
    var currentData = reserveSelectedRowOnPaginate ? data : currentPaginateData;
    return (currentData === null || currentData === void 0 ? void 0 : currentData.filter(function (row, rowIndex) {
      return !isDisabled(row, rowIndex);
    })) || [];
  }, [reserveSelectedRowOnPaginate, data, currentPaginateData]);
  var intersectionKeys = intersection(tSelectedRowKeys, canSelectedRows.map(function (t) {
    return get(t, rowKey || "id");
  }));
  useEffect(function () {
    if (reserveSelectedRowOnPaginate) return;
    var pageSize = pagination.pageSize,
      current = pagination.current,
      defaultPageSize = pagination.defaultPageSize,
      defaultCurrent = pagination.defaultCurrent;
    var tPageSize = pageSize || defaultPageSize;
    var tCurrent = current || defaultCurrent;
    var newData = data.slice(tPageSize * (tCurrent - 1), tPageSize * tCurrent);
    setCurrentPaginateData(newData);
  }, [data, reserveSelectedRowOnPaginate]);
  useEffect(function () {
    if (!selectColumn && (!tSelectedRowKeys || !tSelectedRowKeys.length)) return;
    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.disabled(p) ? tableSelectedClasses.disabled : "";
    };
    var disabledRowClass = selectColumn !== null && selectColumn !== void 0 && selectColumn.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys);
    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get(row, rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };
    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    setSelectedRowClassNames([disabledRowClass, selectedRowClass]);
  }, [data, columns, tSelectedRowKeys, selectColumn, rowKey]);
  function isDisabled(row, rowIndex) {
    return isRowSelectedDisabled(selectColumn, row, rowIndex);
  }
  function getSelectedHeader() {
    return function () {
      var isIndeterminate = intersectionKeys.length > 0 && intersectionKeys.length < canSelectedRows.length;
      var isChecked = intersectionKeys.length !== 0 && canSelectedRows.length !== 0 && intersectionKeys.length === canSelectedRows.length;
      return /* @__PURE__ */React.createElement(Checkbox, {
        checked: isChecked,
        indeterminate: isIndeterminate,
        disabled: !canSelectedRows.length,
        onChange: handleSelectAll
      });
    };
  }
  function getRowSelectDisabledData(p) {
    var col = p.col,
      row = p.row,
      rowIndex = p.rowIndex;
    var disabled = typeof col.disabled === "function" ? col.disabled({
      row: row,
      rowIndex: rowIndex
    }) : col.disabled;
    var checkProps = isFunction(col.checkProps) ? col.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : col.checkProps;
    return {
      disabled: disabled || (checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled),
      checkProps: checkProps
    };
  }
  function renderSelectCell(p) {
    var column = p.col,
      _p$row = p.row,
      row = _p$row === void 0 ? {} : _p$row;
    var checked = tSelectedRowKeys.includes(get(row, rowKey || "id"));
    var _getRowSelectDisabled = getRowSelectDisabledData(p),
      disabled = _getRowSelectDisabled.disabled,
      checkProps = _getRowSelectDisabled.checkProps;
    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onChange: function onChange() {
        handleSelectChange(row);
      }
    });
    var onCheckClick = function onCheckClick(p2) {
      var e = "e" in p2 ? p2.e : p2;
      e === null || e === void 0 || e.stopPropagation();
    };
    if (column.type === "single") return /* @__PURE__ */React.createElement(Radio, _objectSpread(_objectSpread({}, selectBoxProps), {}, {
      onClick: onCheckClick
    }));
    if (column.type === "multiple") {
      var isIndeterminate = indeterminateSelectedRowKeys !== null && indeterminateSelectedRowKeys !== void 0 && indeterminateSelectedRowKeys.length ? indeterminateSelectedRowKeys.includes(get(row, rowKey)) : false;
      return /* @__PURE__ */React.createElement(Checkbox, _objectSpread(_objectSpread({
        indeterminate: isIndeterminate
      }, selectBoxProps), {}, {
        onClick: onCheckClick
      }));
    }
    return null;
  }
  var allowUncheck = useMemo(function () {
    var singleSelectCol = columns.find(function (col) {
      return col.type === "single";
    });
    if (!singleSelectCol || !singleSelectCol.checkProps || !("allowUncheck" in singleSelectCol.checkProps)) return false;
    return singleSelectCol.checkProps.allowUncheck;
  }, [columns]);
  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys);
    var reRowKey = rowKey || "id";
    var id = get(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;
    if (selectColumn.type === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectColumn.type === "single") {
      selectedRowKeys2 = isExisted && allowUncheck ? [] : [id];
    } else {
      log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }
    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: selectedRowKeys2.map(function (t) {
        return selectedRowDataMap.get(t);
      }),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }
  function handleSelectAll(checked) {
    var reRowKey = rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.map(function (record) {
      return get(record, reRowKey);
    });
    var disabledSelectedRowKeys = (selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: checked ? allIds.map(function (t) {
        return selectedRowDataMap.get(t);
      }) : [],
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }
  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      className: tableSelectedClasses.checkCell,
      cell: function cell(p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : col.title
    });
  }
  var onInnerSelectRowClick = function onInnerSelectRowClick(_ref3) {
    var row = _ref3.row,
      index = _ref3.index;
    var selectedColIndex = props.columns.findIndex(function (item) {
      return item.colKey === "row-select";
    });
    if (selectedColIndex === -1) return;
    var _getRowSelectDisabled2 = getRowSelectDisabledData({
        row: row,
        rowIndex: index,
        col: props.columns[selectedColIndex],
        colIndex: selectedColIndex
      }),
      disabled = _getRowSelectDisabled2.disabled;
    if (disabled) return;
    handleSelectChange(row);
  };
  useEffect(function () {
    for (var i = 0, len = data.length; i < len; i++) {
      selectedRowDataMap.set(get(data[i], rowKey || "id"), data[i]);
    }
  }, [data, rowKey]);
  return {
    selectedRowClassNames: selectedRowClassNames,
    currentPaginateData: currentPaginateData,
    setCurrentPaginateData: setCurrentPaginateData,
    setTSelectedRowKeys: setTSelectedRowKeys,
    formatToRowSelectColumn: formatToRowSelectColumn,
    onInnerSelectRowClick: onInnerSelectRowClick
  };
}

export { useRowSelect as default };
//# sourceMappingURL=useRowSelect.js.map
