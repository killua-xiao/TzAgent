/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { useMemo } from 'react';
import { camelCase, pick, get } from 'lodash-es';
import classNames from 'classnames';
import TR, { ROW_LISTENERS, TABLE_PROPS } from './TR.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import useRowspanAndColspan from './hooks/useRowspanAndColspan.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import './utils.js';
import '../_chunks/dep-6af6bc60.js';
import '../_chunks/dep-87d110df.js';
import './hooks/useFixed.js';
import '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-51092aec.js';
import '../hooks/useDebounce.js';
import '../hooks/usePersistFn.js';
import '../hooks/usePrevious.js';
import '../_util/listener.js';
import '../_chunks/dep-3a09424a.js';
import './hooks/useClassName.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../_chunks/dep-f97636ce.js';
import '../_chunks/dep-9dbbf468.js';
import 'dayjs';
import './hooks/useLazyLoad.js';
import '../_chunks/dep-4450afc0.js';
import './Cell.js';
import './Ellipsis.js';
import '../_util/scroll.js';
import 'raf';
import '../_util/easing.js';
import '../tooltip/index.js';
import '../tooltip/Tooltip.js';
import '../_chunks/dep-6b660ef0.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-52ff3837.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/ConfigProvider.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../hooks/useSwitch.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat("cell-click");
var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
function TBody(props) {
  var data = props.data,
    columns = props.columns,
    rowKey = props.rowKey,
    firstFullRow = props.firstFullRow,
    lastFullRow = props.lastFullRow,
    virtualConfig = props.virtualConfig,
    allTableClasses = props.allTableClasses;
  var _useLocaleReceiver = useLocaleReceiver("table"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    global = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var tableFullRowClasses = allTableClasses.tableFullRowClasses,
    tableBaseClass = allTableClasses.tableBaseClass;
  var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, props.rowspanAndColspan),
    skipSpansMap = _useRowspanAndColspan.skipSpansMap;
  var columnLength = columns.length;
  var dataLength = data === null || data === void 0 ? void 0 : data.length;
  var tbodyClasses = useMemo(function () {
    return [tableBaseClass.body];
  }, [tableBaseClass.body]);
  var hasFullRowConfig = useMemo(function () {
    return firstFullRow || lastFullRow;
  }, [firstFullRow, lastFullRow]);
  var renderEmpty = function renderEmpty(columns2) {
    return /* @__PURE__ */React.createElement("tr", {
      className: classNames([tableBaseClass.emptyRow, _defineProperty({}, tableFullRowClasses.base, props.isWidthOverflow)])
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: columns2.length
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames([tableBaseClass.empty, _defineProperty({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)]),
      style: props.isWidthOverflow ? {
        width: "".concat(props.tableWidth.current, "px")
      } : {}
    }, props.empty || t(global.empty))));
  };
  var getFullRow = function getFullRow(columnLength2, type) {
    var tType = camelCase(type);
    var fullRowNode = {
      "first-full-row": firstFullRow,
      "last-full-row": lastFullRow
    }[type];
    if (!fullRowNode) return null;
    var isFixedToLeft = props.isWidthOverflow && columns.find(function (col) {
      return col.fixed === "left";
    });
    var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
    return /* @__PURE__ */React.createElement("tr", {
      className: classNames(classes)
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: columnLength2
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames(_defineProperty({}, tableFullRowClasses.innerFullRow, isFixedToLeft)),
      style: isFixedToLeft ? {
        width: "".concat(props.tableWidth.current, "px")
      } : {}
    }, /* @__PURE__ */React.createElement("div", {
      className: tableFullRowClasses.innerFullElement
    }, fullRowNode))));
  };
  var firstFullRowNode = useMemo(function () {
    return getFullRow(columnLength, "first-full-row");
  }, [firstFullRow, columnLength, getFullRow]);
  var lastFullRowNode = useMemo(function () {
    return getFullRow(columnLength, "last-full-row");
  }, [lastFullRow, columnLength, getFullRow]);
  var isSkipSnapsMapNotFinish = Boolean(props.rowspanAndColspan && !skipSpansMap.size);
  var getTRNodeList = function getTRNodeList() {
    if (isSkipSnapsMapNotFinish) return null;
    var trNodeList = [];
    var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableRef", "tableContentRef", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
    var renderData = virtualConfig.isVirtualScroll ? virtualConfig.visibleData : data;
    renderData === null || renderData === void 0 || renderData.forEach(function (row, rowIndex) {
      var trProps = _objectSpread(_objectSpread(_objectSpread({}, pick(props, TABLE_PROPS)), {}, {
        rowKey: props.rowKey || "id",
        row: row,
        columns: columns,
        rowIndex: row.__VIRTUAL_SCROLL_INDEX || rowIndex,
        dataLength: dataLength,
        skipSpansMap: skipSpansMap,
        virtualConfig: virtualConfig,
        classPrefix: props.classPrefix,
        ellipsisOverlayClassName: props.ellipsisOverlayClassName
      }, pick(props, properties)), {}, {
        pagination: props.pagination
      });
      if (props.onCellClick) {
        trProps.onCellClick = props.onCellClick;
      }
      var trNode = /* @__PURE__ */React.createElement(TR, _objectSpread(_objectSpread({
        key: get(row, props.rowKey || "id") || rowIndex
      }, trProps), {}, {
        onRowMounted: props.handleRowMounted
      }));
      trNodeList.push(trNode);
      if (props.renderExpandedRow) {
        var p = {
          row: row,
          index: rowIndex,
          columns: columns,
          tableWidth: props.tableWidth.current,
          isWidthOverflow: props.isWidthOverflow
        };
        var expandedContent = props.renderExpandedRow(p);
        expandedContent && trNodeList.push(expandedContent);
      }
    });
    return trNodeList;
  };
  var isEmpty = !(data !== null && data !== void 0 && data.length) && !props.loading && !hasFullRowConfig;
  var translate = "translateY(".concat(virtualConfig.translateY, "px)");
  var posStyle = virtualConfig.isVirtualScroll ? {
    transform: translate,
    msTransform: translate,
    MozTransform: translate,
    WebkitTransform: translate
  } : void 0;
  var list = /* @__PURE__ */React.createElement(React.Fragment, null, firstFullRowNode, getTRNodeList(), lastFullRowNode);
  return /* @__PURE__ */React.createElement("tbody", {
    className: classNames(tbodyClasses),
    style: _objectSpread({}, posStyle)
  }, isEmpty ? renderEmpty(columns) : list);
}
TBody.displayName = "TBody";

export { ROW_AND_TD_LISTENERS, TBody as default, extendTableProps };
//# sourceMappingURL=TBody.js.map
