{"version":3,"file":"Descriptions.js","sources":["../../../components/descriptions/Descriptions.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { isArray, assign } from 'lodash-es';\nimport { TdDescriptionsItemProps, TdDescriptionsProps } from './type';\nimport { descriptionsItemDefaultProps, descriptionsDefaultProps } from './defaultProps';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport useConfig from '../hooks/useConfig';\nimport useCommonClassName from '../hooks/useCommonClassName';\nimport { StyledProps } from '../common';\nimport { DescriptionsContext } from './DescriptionsContext';\nimport DescriptionsItem from './DescriptionsItem';\nimport Row from './Row';\n\nimport type { DescriptionsItemProps } from './DescriptionsItem';\n\n/**\n * 实现思路\n * 1. 基于 table tbody tr td 来实现布局\n * 2. 通过 span 计算总共有几行以及每一行的 item 个数，特别注意最后一行，要填充满\n * 3. 整体布局：左右布局（column 和 span 生效）/上下布局（column 和 span 失效，一行一个 item）\n * 4. item 布局：左右布局/上下布局\n */\n\n/**\n * TDescriptions：承载 header（title） 和 body（table, tbody）\n * TDescriptionsRow：承载每一行（tr）\n * TDescriptionsItem：获取 item 数据（span, label, content）\n */\n\nexport type DescriptionsProps = TdDescriptionsProps &\n  StyledProps & {\n    children?: React.ReactNode;\n  };\n\nconst Descriptions = (DescriptionsProps: DescriptionsProps) => {\n  const props = useDefaultProps<DescriptionsProps>(DescriptionsProps, descriptionsDefaultProps);\n\n  const { className, style, title, bordered, column, layout, items: rowItems, children, tableLayout } = props;\n\n  const { classPrefix } = useConfig();\n\n  const COMPONENT_NAME = `${classPrefix}-descriptions`;\n\n  const { SIZE } = useCommonClassName();\n\n  // 计算渲染的行内容\n  const getRows = () => {\n    // 1. 两种方式：a. props 传 items b. slots t-descriptions-item; a 优先级更高\n\n    let items: TdDescriptionsItemProps[] = [];\n\n    if (isArray(rowItems)) {\n      /**\n       * 2.1 a 方式获取 items\n       * ! 这里要支持 label: string / <div></div> / () =>  <div></div>\n       * ! 暂时没有这样一个全局的方法，所以先在组件内部写一个临时方法，无论之后是有了更好的处理方式要删除掉，还是其它组件也需要时再放到公共方法里面，都是可行的\n       */\n      items = rowItems.map((item) => {\n        const { span } = assign({}, descriptionsItemDefaultProps, item);\n        return {\n          label: item.label,\n          content: item.content,\n          span,\n        };\n      });\n    } else {\n      // 2.2 b 方式 获取 TDescriptionsItem\n      const childrenList = React.Children.toArray(children).filter(\n        (child: React.ReactElement<DescriptionsItemProps>) =>\n          (child.type as any)?.displayName === DescriptionsItem.displayName,\n      );\n\n      if (childrenList.length !== 0) {\n        items = (childrenList as React.ReactElement[]).map(\n          ({\n            props: child,\n          }: {\n            props: TdDescriptionsItemProps & {\n              children?: React.ReactNode;\n            };\n          }) => {\n            const { span } = assign({}, descriptionsItemDefaultProps, child);\n\n            return {\n              label: child.label,\n              content: child.content ?? child.children,\n              span,\n            };\n          },\n        );\n      }\n    }\n\n    // 2. 判断布局，如果整体布局为 'vertical'，那么直接返回即可。\n    if (layout === 'vertical') {\n      return [items];\n    }\n    // 3. 布局为 horizontal 时，需要计算每一行的 item 个数\n    let temp: TdDescriptionsItemProps[] = [];\n    let reset = column;\n    // 4. 记录结果\n    const res: TdDescriptionsItemProps[][] = [];\n    items.forEach((item, index) => {\n      const { span } = item;\n      if (reset >= span) {\n        // 当前行还剩余空间\n        temp.push(item);\n        reset -= span;\n      } else {\n        // 当前行放不下了，放下一行\n        res.push(temp);\n        temp = [item];\n        reset = column - span;\n      }\n\n      if (index === items.length - 1) {\n        // 最后一个\n        Reflect.set(item, 'span', span + reset);\n        res.push(temp);\n      }\n    });\n\n    return res;\n  };\n\n  // Header\n  const renderHeader = () => (title ? <div className={`${COMPONENT_NAME}__header`}>{title}</div> : '');\n\n  // Body\n  const renderBody = () => {\n    const tableClass = [\n      `${COMPONENT_NAME}__body`,\n      SIZE[props.size],\n      { [`${COMPONENT_NAME}__body--fixed`]: tableLayout === 'fixed' },\n      { [`${COMPONENT_NAME}__body--border`]: bordered },\n    ];\n    return (\n      <table className={classNames(tableClass)}>\n        <tbody>\n          {getRows().map((row, i) => (\n            <Row row={row} key={i} />\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <DescriptionsContext.Provider value={props}>\n      <div className={classNames(className, COMPONENT_NAME)} style={style}>\n        {renderHeader()}\n        {renderBody()}\n      </div>\n    </DescriptionsContext.Provider>\n  );\n};\n\nDescriptions.displayName = 'Descriptions';\n\nDescriptions.DescriptionsItem = DescriptionsItem;\n\nexport default Descriptions;\n"],"names":["Descriptions","DescriptionsProps","props","useDefaultProps","descriptionsDefaultProps","className","style","title","bordered","column","layout","rowItems","items","children","tableLayout","_useConfig","useConfig","classPrefix","COMPONENT_NAME","_useCommonClassName","useCommonClassName","SIZE","getRows","isArray","map","item","_assign","assign","descriptionsItemDefaultProps","span","label","content","childrenList","React","Children","toArray","filter","child","_child$type","type","displayName","DescriptionsItem","length","_ref","_child$content","_assign2","temp","reset","res","forEach","index","push","Reflect","set","renderHeader","createElement","renderBody","tableClass","concat","size","_defineProperty","classNames","row","i","Row","key","DescriptionsContext","Provider","value"],"mappings":"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"}