/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _asyncToGenerator, r as regenerator } from '../_chunks/dep-a74cc5e4.js';
import React, { useEffect } from 'react';
import classNames from 'classnames';
import { render, unmount } from '../_util/react-render.js';
import noop from '../_util/noop.js';
import { PlacementOffset } from './const.js';
import MessageComponent from './MessageComponent.js';
export { default } from './MessageComponent.js';
import { globalConfig, getMessageConfig, setGlobalConfig } from './config.js';
import { useMessageClass } from './useMessageClass.js';
import '../config-provider/index.js';
import PluginContainer from '../common/PluginContainer.js';
import ConfigProvider from '../config-provider/ConfigProvider.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-e29214cb.js';
import 'react-dom';
import './MessageClose.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../locale/zh_CN.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import './MessageIcon.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import '../hooks/useLayoutEffect.js';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../_chunks/dep-1630b9b4.js';
import '../_chunks/dep-87d110df.js';
import '../_chunks/dep-6b660ef0.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../hooks/useDefaultProps.js';
import '../loading/plugin.js';
import '../config-provider/type.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../hooks/usePersistFn.js';
import './defaultProps.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MessageList = [];
var keyIndex = 1;
var MessageContainer = function MessageContainer(props) {
  var placement = props.placement,
    children = props.children,
    zIndex = props.zIndex,
    id = props.id,
    renderCallback = props.renderCallback;
  var style = {
    zIndex: zIndex
  };
  Object.keys(PlacementOffset[placement]).forEach(function (key) {
    style[key] = PlacementOffset[placement][key];
  });
  if (placement.includes("top")) {
    style.top = "".concat(globalConfig.top, "px");
  }
  useEffect(function () {
    renderCallback();
  }, []);
  var _useMessageClass = useMessageClass(),
    tdMessagePlacementClassGenerator = _useMessageClass.tdMessagePlacementClassGenerator,
    tdMessageListClass = _useMessageClass.tdMessageListClass;
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(tdMessageListClass, tdMessagePlacementClassGenerator(placement)),
    style: style,
    id: id
  }, children);
};
function createContainer(_ref) {
  var attach = _ref.attach,
    zIndex = _ref.zIndex,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? "top" : _ref$placement;
  return new Promise(function (resolve) {
    var mountedDom = document.body;
    if (typeof attach === "string") {
      var result = document.querySelectorAll(attach);
      if (result.length >= 1) {
        mountedDom = result[0];
      }
    } else if (typeof attach === "function") {
      mountedDom = attach();
    }
    var containerId = "tdesign-message-container--".concat(placement);
    var container = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));
    if (container.length < 1) {
      var div = document.createElement("div");
      var mGlobalConfig = ConfigProvider.getGlobalConfig();
      render(/* @__PURE__ */React.createElement(PluginContainer, {
        globalConfig: mGlobalConfig
      }, /* @__PURE__ */React.createElement(MessageContainer, {
        id: containerId,
        placement: placement,
        zIndex: zIndex,
        renderCallback: function renderCallback() {
          mountedDom.appendChild(div);
          var container2 = Array.from(mountedDom.querySelectorAll("#".concat(containerId)));
          resolve(container2[0]);
        }
      })), div);
    } else {
      resolve(container[0]);
    }
  });
}
function renderElement(_x, _x2) {
  return _renderElement.apply(this, arguments);
}
function _renderElement() {
  _renderElement = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(theme, config) {
    var container, content, offset, _config$onClose, _onClose, div, message, style, _offset, left, top;
    return regenerator.wrap(function (_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 1;
          return createContainer(config);
        case 1:
          container = _context.sent;
          content = config.content, offset = config.offset, _config$onClose = config.onClose, _onClose = _config$onClose === void 0 ? noop : _config$onClose;
          div = document.createElement("div");
          keyIndex += 1;
          message = {
            close: function close() {
              unmount(div);
              div.remove();
              message.closed = true;
              var index = MessageList.indexOf(message);
              if (index >= 0) {
                MessageList.splice(index, 1);
              }
            },
            key: keyIndex,
            closed: false
          };
          style = _objectSpread({}, config.style);
          if (Array.isArray(offset) && offset.length === 2) {
            _offset = _slicedToArray(offset, 2), left = _offset[0], top = _offset[1];
            style = _objectSpread(_objectSpread({
              left: left,
              top: top
            }, style), {}, {
              position: "relative"
            });
          }
          return _context.abrupt("return", new Promise(function (resolve) {
            var mGlobalConfig = ConfigProvider.getGlobalConfig();
            render(/* @__PURE__ */React.createElement(PluginContainer, {
              globalConfig: mGlobalConfig
            }, /* @__PURE__ */React.createElement(MessageComponent, _objectSpread(_objectSpread({
              key: keyIndex
            }, config), {}, {
              theme: theme,
              style: style,
              onClose: function onClose(ctx) {
                _onClose(ctx);
                message.close();
              }
            }), content)), div);
            container.appendChild(div);
            MessageList.push(message);
            resolve(message);
          }));
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _renderElement.apply(this, arguments);
}
function isConfig(content) {
  return Object.prototype.toString.call(content) === "[object Object]" && "content" in content;
}
var messageMethod = function messageMethod(theme, content, duration) {
  var config = {};
  if (isConfig(content)) {
    config = _objectSpread({
      duration: duration
    }, content);
  } else {
    config = {
      content: content,
      duration: duration
    };
  }
  return renderElement(theme, getMessageConfig(config));
};
var MessagePlugin = function MessagePlugin(theme, message, duration) {
  return messageMethod(theme, message, duration);
};
MessagePlugin.info = function (content, duration) {
  return messageMethod("info", content, duration);
};
MessagePlugin.error = function (content, duration) {
  return messageMethod("error", content, duration);
};
MessagePlugin.warning = function (content, duration) {
  return messageMethod("warning", content, duration);
};
MessagePlugin.success = function (content, duration) {
  return messageMethod("success", content, duration);
};
MessagePlugin.question = function (content, duration) {
  return messageMethod("question", content, duration);
};
MessagePlugin.loading = function (content, duration) {
  return messageMethod("loading", content, duration);
};
MessagePlugin.config = function (options) {
  return setGlobalConfig(options);
};
MessagePlugin.close = function (messageInstance) {
  messageInstance.then(function (instance) {
    return instance.close();
  });
};
MessagePlugin.closeAll = function () {
  MessageList.forEach(function (message) {
    typeof message.close === "function" && message.close();
  });
  MessageList = [];
  return;
};

export { MessagePlugin };
//# sourceMappingURL=Message.js.map
