/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import React, { forwardRef, useState, useRef, useEffect, useImperativeHandle } from 'react';
import classNames from 'classnames';
import { Popup } from '../popup/index.js';
import useConfig from '../hooks/useConfig.js';
import { tooltipDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../popup/Popup.js';
import 'lodash-es';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/css.js';
import '../popup/type.js';

var _excluded = ["theme", "showArrow", "destroyOnClose", "overlayClassName", "children", "duration", "placement", "onVisibleChange"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Tooltip = /*#__PURE__*/forwardRef(function (originalProps, ref) {
  var props = useDefaultProps(originalProps, tooltipDefaultProps);
  var theme = props.theme,
    showArrow = props.showArrow,
    destroyOnClose = props.destroyOnClose,
    overlayClassName = props.overlayClassName,
    children = props.children,
    duration = props.duration,
    placement = props.placement,
    onVisibleChange = props.onVisibleChange,
    restProps = _objectWithoutProperties(props, _excluded);
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    timeUp = _useState2[0],
    setTimeUp = _useState2[1];
  var popupRef = useRef(null);
  var timerRef = useRef(null);
  var toolTipClass = classNames("".concat(classPrefix, "-tooltip"), _defineProperty({}, "".concat(classPrefix, "-tooltip--").concat(theme), theme), overlayClassName);
  function handleVisibleChange(visible, _ref) {
    var e = _ref.e,
      trigger = _ref.trigger;
    setTimeUp(false);
    onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(visible, {
      e: e,
      trigger: trigger
    });
  }
  useEffect(function () {
    if (duration !== 0 && !timeUp) {
      var _popupRef$current, _popupRef$current$set;
      (_popupRef$current = popupRef.current) === null || _popupRef$current === void 0 || (_popupRef$current$set = _popupRef$current.setVisible) === null || _popupRef$current$set === void 0 || _popupRef$current$set.call(_popupRef$current, true);
      timerRef.current = window.setTimeout(function () {
        var _popupRef$current2, _popupRef$current2$se;
        (_popupRef$current2 = popupRef.current) === null || _popupRef$current2 === void 0 || (_popupRef$current2$se = _popupRef$current2.setVisible) === null || _popupRef$current2$se === void 0 || _popupRef$current2$se.call(_popupRef$current2, false);
        setTimeUp(true);
      }, duration);
    }
    return function () {
      window.clearTimeout(timerRef.current);
    };
  }, [duration, timeUp]);
  useImperativeHandle(ref, function () {
    return _objectSpread({}, popupRef.current || {});
  });
  return /* @__PURE__ */React.createElement(Popup, _objectSpread({
    ref: popupRef,
    destroyOnClose: destroyOnClose,
    showArrow: showArrow,
    overlayClassName: toolTipClass,
    onVisibleChange: handleVisibleChange,
    placement: placement
  }, restProps), children);
});
Tooltip.displayName = "Tooltip";

export { Tooltip as default };
//# sourceMappingURL=Tooltip.js.map
