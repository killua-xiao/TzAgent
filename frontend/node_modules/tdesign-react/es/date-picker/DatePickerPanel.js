/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React, { forwardRef } from 'react';
import dayjs from 'dayjs';
import { g as getDefaultFormat, f as formatDate, p as parseToDayjs } from '../_chunks/dep-9036728c.js';
import { s as subtractMonth, a as addMonth, e as extractTimeObj } from '../_chunks/dep-9649fdab.js';
import SinglePanel from './panel/SinglePanel.js';
import useSingleValue from './hooks/useSingleValue.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-eca3a3de.js';
import 'lodash-es';
import '../_chunks/dep-e29214cb.js';
import '../_chunks/dep-dbf3be07.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-3538034b.js';
import 'classnames';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-3c9ab31a.js';
import './panel/PanelContent.js';
import './base/Header.js';
import '../_chunks/dep-87d110df.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_chunks/dep-6b660ef0.js';
import '../_util/composeRefs.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../_util/helper.js';
import '../_util/noop.js';
import '../_util/parseTNode.js';
import '../common/FakeArrow.js';
import '../hooks/useControlled.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../_chunks/dep-1630b9b4.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-a74cc5e4.js';
import '../common/PluginContainer.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../select-input/useSingle.js';
import '../input/index.js';
import '../input/Input.js';
import 'tdesign-icons-react';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../input/useLengthLimit.js';
import '../input/style/css.js';
import '../input/type.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../hooks/useDragSorter.js';
import '../hooks/useEventCallback.js';
import '../tag-input/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../_chunks/dep-3c3d29db.js';
import '../tag/defaultProps.js';
import '../tag/CheckTag.js';
import '../_chunks/dep-55732ade.js';
import '../tag/CheckTagGroup.js';
import '../tag/style/css.js';
import '../tag/type.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/style/css.js';
import '../tag-input/type.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../select-input/style/css.js';
import '../select-input/type.js';
import '../select/defaultProps.js';
import '../_chunks/dep-c7ed701c.js';
import '../select/base/OptionGroup.js';
import '../select/base/Option.js';
import '../hooks/useRipple.js';
import '../select/base/PopupContent.js';
import '../select/hooks/usePanelVirtualScroll.js';
import '../hooks/useVirtualScroll.js';
import '../select/style/css.js';
import '../select/type.js';
import '../pagination/index.js';
import '../pagination/Pagination.js';
import '../input-number/index.js';
import '../input-number/InputNumber.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../button/style/css.js';
import '../button/type.js';
import '../input-number/useInputNumber.js';
import '../_chunks/dep-46c9e4f5.js';
import '../hooks/useCommonClassName.js';
import '../input-number/defaultProps.js';
import '../input-number/style/css.js';
import '../input-number/type.js';
import '../input-adornment/index.js';
import '../input-adornment/InputAdornment.js';
import '../input-adornment/style/css.js';
import '../input-adornment/type.js';
import '../pagination/hooks/useBoundaryJumper.js';
import '../pagination/hooks/usePrevNextJumper.js';
import '../pagination/hooks/usePageNumber.js';
import '../pagination/hooks/useTotal.js';
import '../pagination/validators.js';
import '../pagination/defaultProps.js';
import '../pagination/PaginationMini.js';
import '../pagination/style/css.js';
import '../pagination/type.js';
import './base/Table.js';
import './base/Cell.js';
import '../time-picker/index.js';
import '../time-picker/TimePicker.js';
import '../_chunks/dep-f7770f5d.js';
import '../time-picker/hooks/useTimePickerTextConfig.js';
import '../hooks/useDebounce.js';
import '../hooks/usePersistFn.js';
import '../hooks/usePropsRef.js';
import '../time-picker/TimeRangePicker.js';
import '../range-input/index.js';
import '../range-input/RangeInput.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../range-input/style/css.js';
import '../range-input/type.js';
import '../time-picker/panel/TimePickerPanel.js';
import '../time-picker/defaultProps.js';
import '../time-picker/style/css.js';
import '../time-picker/type.js';
import './panel/ExtraContent.js';
import './base/Footer.js';
import './hooks/useTableData.js';
import './hooks/useDisableDate.js';
import './utils.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DatePickerPanel = /*#__PURE__*/forwardRef(function (originalProps, ref) {
  var props = useDefaultProps(originalProps, {
    mode: "date",
    defaultValue: "",
    needConfirm: true
  });
  var _useSingleValue = useSingleValue(props),
    value = _useSingleValue.value,
    onChange = _useSingleValue.onChange,
    time = _useSingleValue.time,
    setTime = _useSingleValue.setTime,
    month = _useSingleValue.month,
    setMonth = _useSingleValue.setMonth,
    year = _useSingleValue.year,
    setYear = _useSingleValue.setYear,
    cacheValue = _useSingleValue.cacheValue,
    setCacheValue = _useSingleValue.setCacheValue;
  var className = props.className,
    style = props.style,
    mode = props.mode,
    enableTimePicker = props.enableTimePicker,
    disableDate = props.disableDate,
    firstDayOfWeek = props.firstDayOfWeek,
    presets = props.presets,
    timePickerProps = props.timePickerProps,
    presetsPlacement = props.presetsPlacement,
    needConfirm = props.needConfirm,
    onPanelClick = props.onPanelClick,
    disableTime = props.disableTime;
  var _getDefaultFormat = getDefaultFormat({
      mode: mode,
      format: props.format,
      enableTimePicker: enableTimePicker
    }),
    format = _getDefaultFormat.format;
  function onCellClick(date, _ref) {
    var _props$onCellClick;
    var e = _ref.e;
    (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, {
      date: date,
      e: e
    });
    if (mode === "date") {
      setYear(date.getFullYear());
      setMonth(date.getMonth());
    }
    if (enableTimePicker) {
      setCacheValue(formatDate(date, {
        format: format
      }));
    } else {
      onChange(formatDate(date, {
        format: format
      }), {
        dayjsValue: parseToDayjs(date, format),
        trigger: "pick"
      });
    }
  }
  function onJumperClick(_ref2) {
    var trigger = _ref2.trigger;
    var triggerMap = {
      prev: "arrow-previous",
      next: "arrow-next"
    };
    var monthCountMap = {
      date: 1,
      week: 1,
      month: 12,
      quarter: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year, month);
    var next = null;
    if (trigger === "prev") {
      next = subtractMonth(current, monthCount);
    } else if (trigger === "current") {
      next = new Date();
    } else if (trigger === "next") {
      next = addMonth(current, monthCount);
    }
    var nextYear = next.getFullYear();
    var nextMonth = next.getMonth();
    if (year !== nextYear) {
      var _props$onYearChange;
      (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 || _props$onYearChange.call(props, {
        year: nextYear,
        date: parseToDayjs(value, format).toDate(),
        trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
      });
    }
    if (month !== nextMonth) {
      var _props$onMonthChange;
      (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 || _props$onMonthChange.call(props, {
        month: nextMonth,
        date: parseToDayjs(value, format).toDate(),
        trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
      });
    }
    setYear(nextYear);
    setMonth(nextMonth);
  }
  function onTimePickerChange(val) {
    var _props$onTimeChange;
    setTime(val);
    var _extractTimeObj = extractTimeObj(val),
      hours = _extractTimeObj.hours,
      minutes = _extractTimeObj.minutes,
      seconds = _extractTimeObj.seconds,
      milliseconds = _extractTimeObj.milliseconds,
      meridiem = _extractTimeObj.meridiem;
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var currentDate = !dayjs(cacheValue, format).isValid() ? dayjs() : dayjs(cacheValue, format);
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    setCacheValue(formatDate(nextDate, {
      format: format
    }));
    (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 || _props$onTimeChange.call(props, {
      time: val,
      date: parseToDayjs(value, format).toDate(),
      trigger: "time-hour"
    });
  }
  function onConfirmClick(_ref3) {
    var _props$onConfirm;
    var e = _ref3.e;
    onChange(formatDate(cacheValue, {
      format: format
    }), {
      dayjsValue: parseToDayjs(cacheValue, format),
      trigger: "confirm"
    });
    (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
      date: dayjs(value).toDate(),
      e: e
    });
  }
  function onPresetClick(presetValue, context) {
    var _props$onPresetClick;
    var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
    onChange(formatDate(presetVal, {
      format: format
    }), {
      dayjsValue: parseToDayjs(presetVal, format),
      trigger: "preset"
    });
    (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
  }
  function onYearChange(year2) {
    var _props$onYearChange2;
    setYear(year2);
    (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 || _props$onYearChange2.call(props, {
      year: year2,
      date: parseToDayjs(value, format).toDate(),
      trigger: "year-select"
    });
  }
  function onMonthChange(month2) {
    var _props$onMonthChange2;
    setMonth(month2);
    (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 || _props$onMonthChange2.call(props, {
      month: month2,
      date: parseToDayjs(value, format).toDate(),
      trigger: "month-select"
    });
  }
  var panelProps = {
    value: cacheValue,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    time: time,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    presetsPlacement: presetsPlacement,
    needConfirm: needConfirm,
    onCellClick: onCellClick,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange,
    onPanelClick: onPanelClick,
    disableTime: disableTime
  };
  return /* @__PURE__ */React.createElement(SinglePanel, _objectSpread({
    ref: ref,
    className: className,
    style: style
  }, panelProps));
});
DatePickerPanel.displayName = "DatePickerPanel";

export { DatePickerPanel as default };
//# sourceMappingURL=DatePickerPanel.js.map
