{"version":3,"file":"useDragSorter.js","sources":["../../../components/hooks/useDragSorter.tsx"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport useEventCallback from './useEventCallback';\n\ninterface DragSortProps<T> {\n  sortOnDraggable: boolean;\n  onDragSort?: (context: DragSortContext<T>) => void;\n  onDragOverCheck?: {\n    x?: boolean;\n    targetClassNameRegExp?: RegExp;\n  };\n}\n\ntype DragFnType = (e?: React.DragEvent<HTMLTableRowElement>, index?: number, record?: any) => void;\ninterface DragSortInnerData {\n  dragging?: boolean;\n  draggable?: boolean;\n  onDragStart?: DragFnType;\n  onDragOver?: DragFnType;\n  onDrop?: DragFnType;\n  onDragEnd?: DragFnType;\n}\n\nexport interface DragSortInnerProps extends DragSortInnerData {\n  getDragProps?: (index?: number, record?: any) => DragSortInnerData;\n}\n\nexport interface DragSortContext<T> {\n  currentIndex: number;\n  current: T;\n  targetIndex: number;\n  target: T;\n}\n\nfunction useDragSorter<T>(props: DragSortProps<T>): DragSortInnerProps {\n  const { sortOnDraggable, onDragSort, onDragOverCheck } = props;\n  const [draggingIndex, setDraggingIndex] = useState(-1);\n  const [dragStartData, setDragStartData] = useState(null);\n  const [isDropped, setIsDropped] = useState(null);\n  const [startInfo, setStartInfo] = useState({ nodeX: 0, nodeWidth: 0, mouseX: 0 });\n  const onDragSortEvent = useEventCallback(onDragSort);\n\n  const onDragOver = useCallback(\n    (e, index, record: T) => {\n      e.preventDefault();\n      if (draggingIndex === index || draggingIndex === -1) return;\n      if (onDragOverCheck?.targetClassNameRegExp && !onDragOverCheck?.targetClassNameRegExp.test(e.target?.className)) {\n        return;\n      }\n\n      if (onDragOverCheck?.x) {\n        if (!startInfo.nodeWidth) return;\n\n        const { x, width } = e.target.getBoundingClientRect();\n        const targetNodeMiddleX = x + width / 2;\n        const clientX = e.clientX || 0;\n        const draggingNodeLeft = clientX - (startInfo.mouseX - startInfo.nodeX);\n        const draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;\n\n        let overlap = false;\n        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {\n          overlap = draggingNodeLeft < targetNodeMiddleX;\n        } else {\n          overlap = draggingNodeRight > targetNodeMiddleX;\n        }\n        if (!overlap) return;\n      }\n\n      onDragSortEvent({\n        currentIndex: draggingIndex,\n        current: dragStartData,\n        target: record,\n        targetIndex: index,\n      });\n      setDraggingIndex(index);\n    },\n    [\n      draggingIndex,\n      onDragOverCheck?.targetClassNameRegExp,\n      onDragOverCheck?.x,\n      dragStartData,\n      startInfo.nodeWidth,\n      startInfo.mouseX,\n      startInfo.nodeX,\n      onDragSortEvent,\n    ],\n  );\n\n  if (!sortOnDraggable) {\n    return {};\n  }\n\n  function onDragStart(e, index, record: T) {\n    setDraggingIndex(index);\n    setDragStartData(record);\n    if (onDragOverCheck) {\n      const { x, width } = e.target.getBoundingClientRect();\n      setStartInfo({\n        nodeX: x,\n        nodeWidth: width,\n        mouseX: e.clientX || 0,\n      });\n    }\n  }\n\n  function onDrop() {\n    setIsDropped(true);\n  }\n  function onDragEnd() {\n    if (!isDropped) {\n      // 取消排序，待扩展 api，输出 dragStartData\n    }\n    setIsDropped(false);\n    setDraggingIndex(-1);\n    setDragStartData(null);\n  }\n  function getDragProps(index, record: T) {\n    if (sortOnDraggable) {\n      return {\n        draggable: true,\n        onDragStart: (e) => {\n          onDragStart(e, index, record);\n        },\n        onDragOver: (e) => {\n          onDragOver(e, index, record);\n        },\n        onDrop: () => {\n          onDrop();\n        },\n        onDragEnd: () => {\n          onDragEnd();\n        },\n      };\n    }\n    return {};\n  }\n\n  return { onDragStart, onDragOver, onDrop, onDragEnd, getDragProps, dragging: draggingIndex !== -1 };\n}\n\nexport default useDragSorter;\n"],"names":["useDragSorter","props","sortOnDraggable","onDragSort","onDragOverCheck","_useState","useState","_useState2","_slicedToArray","draggingIndex","setDraggingIndex","_useState3","_useState4","dragStartData","setDragStartData","_useState5","_useState6","isDropped","setIsDropped","_useState7","nodeX","nodeWidth","mouseX","_useState8","startInfo","setStartInfo","onDragSortEvent","useEventCallback","onDragOver","useCallback","e","index","record","_e$target","preventDefault","targetClassNameRegExp","test","target","className","x","_e$target$getBounding","getBoundingClientRect","width","targetNodeMiddleX","clientX","draggingNodeLeft","draggingNodeRight","overlap","currentIndex","current","targetIndex","onDragStart","_e$target$getBounding2","onDrop","onDragEnd","getDragProps","draggable","dragging"],"mappings":"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"}