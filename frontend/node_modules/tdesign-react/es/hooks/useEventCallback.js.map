{"version":3,"file":"useEventCallback.js","sources":["../../../components/hooks/useEventCallback.ts"],"sourcesContent":["// https://github.com/scottrippey/react-use-event-hook/blob/75ba34af9175dc311afb3fb302d6fea44e4a5203/src/useEvent.ts\n// [RFC](https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md)\nimport React from 'react';\nimport noop from '../_util/noop';\n\ntype AnyFunction = (...args: unknown[]) => unknown;\n\n/**\n * Suppress the warning when using useLayoutEffect with SSR. (https://reactjs.org/link/uselayouteffect-ssr)\n * Make use of useInsertionEffect if available.\n */\nconst useInsertionEffect = typeof window !== 'undefined' ? React.useInsertionEffect || React.useLayoutEffect : noop;\n\n/**\n * Render methods should be pure, especially when concurrency is used,\n * so we will throw this error if the callback is called while rendering.\n */\nfunction useEventCallbackShouldNotBeInvokedBeforeMount() {\n  throw new Error(\n    'INVALID_USEEVENTCALLBACK_INVOCATION: the callback from useEventCallback cannot be invoked before the component has mounted.',\n  );\n}\n\n/**\n * Similar to useCallback, with a few subtle differences:\n * - The returned function is a stable reference, and will always be the same between renders\n * - No dependency lists required\n * - Properties or state accessed within the callback will always be \"current\"\n */\nexport default function useEventCallback<TCallback extends AnyFunction>(callback: TCallback): TCallback {\n  // Keep track of the latest callback:\n  const latestRef = React.useRef<TCallback>(useEventCallbackShouldNotBeInvokedBeforeMount as any);\n  useInsertionEffect(() => {\n    latestRef.current = callback;\n  }, [callback]);\n\n  // Create a stable callback that always calls the latest callback:\n  // using useRef instead of useCallback avoids creating and empty array on every render\n  const stableRef = React.useRef<TCallback>(null as any);\n  if (!stableRef.current) {\n    stableRef.current = function (this: unknown, ...args: unknown[]) {\n      return latestRef.current.apply(this, args);\n    } as TCallback;\n  }\n\n  return stableRef.current;\n}\n"],"names":["useInsertionEffect","window","React","useLayoutEffect","noop","useEventCallbackShouldNotBeInvokedBeforeMount","Error","useEventCallback","callback","latestRef","useRef","current","stableRef","_len","arguments","length","args","Array","_key","apply"],"mappings":";;;;;;;;;AAWA,IAAMA,qBAAqB,OAAOC,MAAA,KAAW,cAAcC,KAAM,CAAAF,kBAAA,IAAsBE,MAAMC,eAAkB,GAAAC,IAAA,CAAA;AAM/G,SAASC,6CAAgDA,GAAA;AACvD,EAAA,MAAM,IAAIC,KAAA,CACR,6HACF,CAAA,CAAA;AACF,CAAA;AAQA,SAAwBC,iBAAgDC,QAAgC,EAAA;AAEhG,EAAA,IAAAC,SAAA,GAAYP,KAAM,CAAAQ,MAAA,CAAkBL,6CAAoD,CAAA,CAAA;AAC9FL,EAAAA,kBAAA,CAAmB,YAAM;IACvBS,SAAA,CAAUE,OAAU,GAAAH,QAAA,CAAA;AACtB,GAAA,EAAG,CAACA,QAAQ,CAAC,CAAA,CAAA;AAIP,EAAA,IAAAI,SAAA,GAAYV,KAAM,CAAAQ,MAAA,CAAkB,IAAW,CAAA,CAAA;AACjD,EAAA,IAAA,CAACE,UAAUD,OAAS,EAAA;IACZC,SAAA,CAAAD,OAAA,GAAU,YAA6C;AAAA,MAAA,KAAA,IAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAjBC,IAAiB,GAAAC,IAAAA,KAAA,CAAAJ,IAAA,GAAAK,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA,EAAA,EAAA;AAAjBF,QAAAA,IAAiB,CAAAE,IAAA,CAAAJ,GAAAA,SAAA,CAAAI,IAAA,CAAA,CAAA;AAAA,OAAA;MAC/D,OAAOT,SAAU,CAAAE,OAAA,CAAQQ,KAAM,CAAA,IAAA,EAAMH,IAAI,CAAA,CAAA;KAC3C,CAAA;AACF,GAAA;EAEA,OAAOJ,SAAU,CAAAD,OAAA,CAAA;AACnB;;;;"}