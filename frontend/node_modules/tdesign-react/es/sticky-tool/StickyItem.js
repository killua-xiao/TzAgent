/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React, { useMemo, useCallback } from 'react';
import classNames from 'classnames';
import useConfig from '../hooks/useConfig.js';
import { Popup } from '../popup/index.js';
import '../_chunks/dep-eca3a3de.js';
import '../config-provider/ConfigContext.js';
import 'lodash-es';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../popup/Popup.js';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-026a4c6b.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/css.js';
import '../popup/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StickyItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
    label = props.label,
    popup = props.popup,
    popupProps = props.popupProps,
    trigger = props.trigger,
    type = props.type,
    shape = props.shape,
    placement = props.placement,
    basePopupProps = props.basePopupProps,
    baseWidth = props.baseWidth,
    onClick = props.onClick,
    onHover = props.onHover,
    style = props.style,
    className = props.className;
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var popupPlacement = useMemo(function () {
    return placement.includes("right") ? "left" : "right";
  }, [placement]);
  var styles = useMemo(function () {
    var styles2 = _objectSpread({}, style);
    if (baseWidth) {
      var selfWidth = type === "normal" ? "56px" : "40px";
      styles2.margin = "calc((".concat(baseWidth, " - ").concat(selfWidth, ")/2)");
    }
    return styles2;
  }, [baseWidth, style, type]);
  var handleClickItem = useCallback(function (e) {
    var item = {
      icon: icon,
      label: label,
      popup: popup,
      popupProps: popupProps,
      trigger: trigger
    };
    onClick({
      e: e,
      item: item
    });
  }, [icon, label, popup, popupProps, trigger, onClick]);
  var handleHoverItem = useCallback(function (e) {
    var item = {
      icon: icon,
      label: label,
      popup: popup,
      popupProps: popupProps,
      trigger: trigger
    };
    onHover({
      e: e,
      item: item
    });
  }, [icon, label, popup, popupProps, trigger, onHover]);
  var finalPopupProps = _objectSpread(_objectSpread({
    hideEmptyPopup: true
  }, basePopupProps), popupProps);
  return /* @__PURE__ */React.createElement(Popup, _objectSpread({
    overlayInnerClassName: classNames("".concat(classPrefix, "-sticky-tool-popup-content")),
    trigger: props.trigger,
    hideEmptyPopup: true,
    placement: popupPlacement,
    content: popup
  }, finalPopupProps), /* @__PURE__ */React.createElement("div", {
    ref: ref,
    className: classNames("".concat(classPrefix, "-sticky-item"), "".concat(classPrefix, "-sticky-item--").concat(shape), "".concat(classPrefix, "-sticky-item--").concat(type), className),
    style: styles,
    onClick: handleClickItem,
    onMouseEnter: handleHoverItem
  }, icon, props.type === "normal" ? /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-sticky-item__label"))
  }, label) : null));
});
StickyItem.displayName = "StickyItem";

export { StickyItem as default };
//# sourceMappingURL=StickyItem.js.map
