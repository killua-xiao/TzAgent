/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import React, { useState, useRef, useImperativeHandle, useEffect, useCallback } from 'react';
import classNames from 'classnames';
import { isFunction, isEmpty } from 'lodash-es';
import useConfig from '../hooks/useConfig.js';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import { c as canUseDocument } from '../_chunks/dep-3a09424a.js';
import { Affix } from '../affix/index.js';
import { AnchorContext } from './AnchorContext.js';
import { getScroll, getOffsetTop, scrollTo, getScrollContainer } from '../_util/scroll.js';
import AnchorItem from './AnchorItem.js';
import AnchorTarget from './AnchorTarget.js';
import { anchorDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import 'hoist-non-react-statics';
import '../affix/Affix.js';
import '../affix/defaultProps.js';
import '../affix/style/css.js';
import '../affix/type.js';
import 'raf';
import '../_util/easing.js';
import '../_util/noop.js';
import 'tdesign-icons-react';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../message/index.js';
import '../message/Message.js';
import '../message/const.js';
import '../message/MessageComponent.js';
import '../message/MessageClose.js';
import '../hooks/useGlobalIcon.js';
import '../message/useMessageClass.js';
import '../message/MessageIcon.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../_chunks/dep-1630b9b4.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../hooks/usePersistFn.js';
import '../message/config.js';
import '../message/defaultProps.js';
import '../message/style/css.js';
import '../message/type.js';
import '../_util/copyText.js';

var _excluded = ["affixProps", "bounds", "targetOffset", "container", "size", "children", "cursor", "onClick", "onChange", "className", "getCurrentAnchor"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
var Anchor = forwardRefWithStatics(function (props, ref) {
  var _useDefaultProps = useDefaultProps(props, anchorDefaultProps),
    affixProps = _useDefaultProps.affixProps,
    bounds = _useDefaultProps.bounds,
    targetOffset = _useDefaultProps.targetOffset,
    container = _useDefaultProps.container,
    size = _useDefaultProps.size,
    children = _useDefaultProps.children,
    cursor = _useDefaultProps.cursor,
    onClick = _useDefaultProps.onClick,
    onChange = _useDefaultProps.onChange,
    className = _useDefaultProps.className,
    getCurrentAnchor = _useDefaultProps.getCurrentAnchor,
    rest = _objectWithoutProperties(_useDefaultProps, _excluded);
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useState = useState(""),
    _useState2 = _slicedToArray(_useState, 2),
    activeItem = _useState2[0],
    setActiveItem = _useState2[1];
  var _useState3 = useState({
      top: "0px",
      height: "0px",
      opacity: 0
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    cursorStyle = _useState4[0],
    setCursorStyle = _useState4[1];
  var anchorEl = useRef(null);
  var intervalRef = useRef({
    items: [],
    scrollContainer: canUseDocument ? window : null,
    handleScrollLock: false
  });
  useImperativeHandle(ref, function () {
    return anchorEl.current;
  });
  var registerItem = function registerItem(href) {
    var items = intervalRef.current.items;
    if (ANCHOR_SHARP_REGEXP.test(href) && items.indexOf(href) < 0) items.push(href);
  };
  var unregisterItem = function unregisterItem(href) {
    var items = intervalRef.current.items;
    intervalRef.current.items = items.filter(function (item) {
      return href !== item;
    });
  };
  var getAnchorTarget = function getAnchorTarget(href) {
    return document.querySelector(href);
  };
  var handleScrollTo = function handleScrollTo(link) {
    var anchor = getAnchorTarget(link);
    if (!anchor) return;
    onChange === null || onChange === void 0 || onChange(link, activeItem);
    setActiveItem(link);
    intervalRef.current.handleScrollLock = true;
    var scrollContainer = intervalRef.current.scrollContainer;
    var scrollTop = getScroll(scrollContainer);
    var offsetTop = getOffsetTop(anchor, scrollContainer);
    var top = scrollTop + offsetTop - targetOffset;
    scrollTo(top, {
      container: scrollContainer
    }).then(function () {
      intervalRef.current.handleScrollLock = false;
    });
  };
  var handleClick = function handleClick(item, e) {
    onClick === null || onClick === void 0 || onClick(_objectSpread({
      e: e
    }, item));
    handleScrollTo(item.href);
  };
  useEffect(function () {
    var _anchorEl$current$que, _anchorEl$current;
    var pointEl = (_anchorEl$current$que = (_anchorEl$current = anchorEl.current).querySelector) === null || _anchorEl$current$que === void 0 ? void 0 : _anchorEl$current$que.call(_anchorEl$current, ".".concat(classPrefix, "-is-active>a"));
    if (!pointEl) {
      setCursorStyle(null);
    } else {
      var top = pointEl.offsetTop,
        height = pointEl.offsetHeight;
      setCursorStyle({
        top: "".concat(top, "px"),
        height: "".concat(height, "px"),
        opacity: 1
      });
    }
  }, [activeItem, classPrefix]);
  var handleScroll = useCallback(function () {
    var _intervalRef$current = intervalRef.current,
      scrollContainer = _intervalRef$current.scrollContainer,
      handleScrollLock = _intervalRef$current.handleScrollLock;
    if (handleScrollLock) return;
    var items = intervalRef.current.items;
    var filters = [];
    var active = "";
    items.forEach(function (href) {
      var anchor = getAnchorTarget(href);
      if (!anchor) return;
      var top = getOffsetTop(anchor, scrollContainer);
      if (top <= bounds + targetOffset) {
        filters.push({
          href: href,
          top: top
        });
      }
    });
    if (filters.length) {
      var latest = filters.reduce(function (prev, cur) {
        return prev.top > cur.top ? prev : cur;
      });
      active = latest.href;
    }
    if (active !== activeItem) {
      onChange === null || onChange === void 0 || onChange(active, activeItem);
      setActiveItem(active);
    }
  }, [activeItem, bounds, onChange, targetOffset]);
  useEffect(function () {
    intervalRef.current.scrollContainer = getScrollContainer(container);
    var scrollContainer = intervalRef.current.scrollContainer;
    handleScroll();
    scrollContainer === null || scrollContainer === void 0 || scrollContainer.addEventListener("scroll", handleScroll);
    return function () {
      scrollContainer === null || scrollContainer === void 0 || scrollContainer.removeEventListener("scroll", handleScroll);
    };
  }, [container, handleScroll]);
  var anchorClass = classNames("".concat(classPrefix, "-anchor"), _defineProperty(_defineProperty(_defineProperty({}, "".concat(classPrefix, "-size-s"), size === "small"), "".concat(classPrefix, "-size-m"), size === "medium"), "".concat(classPrefix, "-size-l"), size === "large"), className);
  var CursorCmp = function CursorCmp() {
    if (isFunction(cursor)) return cursor();
    if (isEmpty(cursor)) return /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-anchor__line-cursor")
    });
    return cursor;
  };
  var Cmp = /* @__PURE__ */React.createElement(AnchorContext.Provider, {
    value: {
      onClick: handleClick,
      activeItem: (getCurrentAnchor === null || getCurrentAnchor === void 0 ? void 0 : getCurrentAnchor(activeItem)) || activeItem,
      registerItem: registerItem,
      unregisterItem: unregisterItem
    }
  }, /* @__PURE__ */React.createElement("div", _objectSpread(_objectSpread({}, rest), {}, {
    className: anchorClass,
    ref: anchorEl
  }), /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-anchor__line")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-anchor__line-cursor-wrapper"),
    style: cursorStyle
  }, CursorCmp())), children));
  return isEmpty(affixProps) ? Cmp : /* @__PURE__ */React.createElement(Affix, _objectSpread({}, affixProps), Cmp);
}, {
  AnchorItem: AnchorItem,
  AnchorTarget: AnchorTarget
});
Anchor.displayName = "Anchor";

export { Anchor as default };
//# sourceMappingURL=Anchor.js.map
