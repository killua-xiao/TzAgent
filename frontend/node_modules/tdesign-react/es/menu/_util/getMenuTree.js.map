{"version":3,"file":"getMenuTree.js","sources":["../../../../components/menu/_util/getMenuTree.ts"],"sourcesContent":["import { ReactNode, isValidElement } from 'react';\nimport type { MenuValue } from '../type';\n\ninterface MenuNode {\n  parent?: MenuValue;\n  children: MenuValue[];\n}\n\nexport class MenuTree {\n  // 菜单的层级关系映射\n  private menuMap: Map<MenuValue, MenuNode> = new Map();\n\n  // 当前展开的菜单集合\n  private expandedSet: Set<MenuValue> = new Set();\n\n  // 是否开启互斥展开\n  private expandMutex: boolean;\n\n  constructor(children: ReactNode, expandMutex = false) {\n    this.buildTree(children);\n    this.expandMutex = expandMutex;\n  }\n\n  /**\n   * 构建菜单树结构\n   */\n  private buildTree(children: ReactNode) {\n    this.menuMap.clear();\n    this.traverseChildren(children);\n  }\n\n  private traverseChildren(node: ReactNode, parentValue?: MenuValue) {\n    if (Array.isArray(node)) {\n      node.forEach((child) => this.traverseChildren(child, parentValue));\n      return;\n    }\n\n    if (!isValidElement(node)) return;\n\n    const { value, children } = node.props;\n\n    // 当前节点有 value，是一个有效的菜单项\n    if (value !== undefined) {\n      // 初始化节点信息\n      if (!this.menuMap.has(value)) {\n        this.menuMap.set(value, { parent: parentValue, children: [] });\n      }\n\n      // 建立父子关系\n      if (parentValue !== undefined) {\n        const parentNode = this.menuMap.get(parentValue);\n        if (parentNode && !parentNode.children.includes(value)) {\n          parentNode.children.push(value);\n        }\n      }\n\n      // 递归处理子节点\n      if (children) {\n        this.traverseChildren(children, value);\n      }\n    } else if (children) {\n      // 当前节点是其它包装组件，继续递归\n      this.traverseChildren(children, parentValue);\n    }\n  }\n\n  /**\n   * 更新当前展开的菜单列表\n   */\n  setExpanded(expandedList: MenuValue[]) {\n    this.expandedSet = new Set(expandedList);\n  }\n\n  /**\n   * 获取当前展开的菜单列表\n   */\n  getExpanded() {\n    return Array.from(this.expandedSet);\n  }\n\n  /**\n   * 检查节点是否展开\n   */\n  isExpanded(value: MenuValue) {\n    return this.expandedSet.has(value);\n  }\n\n  /**\n   * 获取所有祖先节点\n   */\n  getAncestors(value: MenuValue) {\n    const ancestors: MenuValue[] = [];\n    let current = this.menuMap.get(value)?.parent;\n\n    while (current !== undefined) {\n      ancestors.unshift(current);\n      current = this.menuMap.get(current)?.parent;\n    }\n\n    return ancestors;\n  }\n\n  /**\n   * 获取所有子孙节点\n   */\n  getDescendants(value: MenuValue) {\n    const descendants: MenuValue[] = [];\n    if (!this.menuMap.get(value)) return descendants;\n\n    // 深度优先遍历\n    const dfs = (nodeValue: MenuValue) => {\n      const node = this.menuMap.get(nodeValue);\n      if (!node) return;\n\n      node.children.forEach((child: MenuValue) => {\n        descendants.push(child);\n        dfs(child);\n      });\n    };\n\n    dfs(value);\n    return descendants;\n  }\n\n  /**\n   * 获取所有同级节点\n   */\n  getSiblings(value: MenuValue) {\n    const node = this.menuMap.get(value);\n    if (!node) return [];\n\n    const parentValue = node.parent;\n    if (parentValue === undefined) {\n      const rootNodes: MenuValue[] = [];\n      for (const [nodeValue, info] of this.menuMap.entries()) {\n        if (info.parent === undefined && nodeValue !== value) {\n          rootNodes.push(nodeValue);\n        }\n      }\n      return rootNodes;\n    }\n\n    const parent = this.menuMap.get(parentValue);\n    return parent ? parent.children.filter((child: MenuValue) => child !== value) : [];\n  }\n\n  /**\n   * 更新节点的展开状态\n   */\n  expandNode(value: MenuValue) {\n    const isCurrExpanded = this.isExpanded(value);\n    let nextExpanded: MenuValue[] = this.getExpanded();\n\n    if (isCurrExpanded) {\n      // 收起该菜单及其所有子菜单\n      const descendants = this.getDescendants(value);\n      const toClose = new Set([value, ...descendants]);\n\n      nextExpanded = nextExpanded.filter((item) => !toClose.has(item));\n    } else {\n      const expandedSet = new Set(nextExpanded);\n\n      // 处理互斥逻辑\n      if (this.expandMutex) {\n        const siblings = this.getSiblings(value);\n        const siblingsToClose = new Set();\n\n        // 收起同级的其他展开菜单及其子菜单\n        siblings.forEach((sibling) => {\n          if (expandedSet.has(sibling)) {\n            siblingsToClose.add(sibling);\n            const siblingDescendants = this.getDescendants(sibling);\n            siblingDescendants.forEach((desc) => siblingsToClose.add(desc));\n          }\n        });\n\n        nextExpanded = nextExpanded.filter((item) => !siblingsToClose.has(item));\n      }\n\n      // 确保父级菜单都是展开的\n      const ancestors = this.getAncestors(value);\n      ancestors.forEach((ancestor) => {\n        if (!nextExpanded.includes(ancestor)) {\n          nextExpanded.push(ancestor);\n        }\n      });\n\n      // 展开当前的菜单\n      if (!nextExpanded.includes(value)) {\n        nextExpanded.push(value);\n      }\n    }\n\n    this.setExpanded(nextExpanded);\n  }\n}\n"],"names":["MenuTree","children","expandMutex","arguments","length","undefined","_classCallCheck","_defineProperty","Map","Set","buildTree","_createClass","key","value","menuMap","clear","traverseChildren","node","parentValue","_this","Array","isArray","forEach","child","isValidElement","_node$props","props","has","set","parent","parentNode","get","includes","push","setExpanded","expandedList","expandedSet","getExpanded","from","isExpanded","getAncestors","_this$menuMap$get","ancestors","current","_this$menuMap$get2","unshift","getDescendants","_this2","descendants","dfs","nodeValue","getSiblings","rootNodes","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","info","err","e","f","filter","expandNode","_this3","isCurrExpanded","nextExpanded","toClose","concat","_toConsumableArray","item","siblings","siblingsToClose","sibling","add","siblingDescendants","desc","ancestor"],"mappings":";;;;;;;;;;;;;;;;;AAQO,IAAMA,QAAS,gBAAA,YAAA;EAUpB,SAAAA,QAAAA,CAAYC,QAAqB,EAAqB;AAAA,IAAA,IAArBC,WAAA,GAAAC,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAc,KAAO,CAAA;AAAAG,IAAAA,eAAA,OAAAN,QAAA,CAAA,CAAA;AAAAO,IAAAA,eAAA,CARV,IAAA,EAAA,SAAA,qBAAIC,GAAI,EAAA,CAAA,CAAA;AAAAD,IAAAA,eAAA,CAGd,IAAA,EAAA,aAAA,qBAAIE,GAAI,EAAA,CAAA,CAAA;AAM5C,IAAA,IAAA,CAAKC,UAAUT,QAAQ,CAAA,CAAA;IACvB,IAAA,CAAKC,WAAc,GAAAA,WAAA,CAAA;AACrB,GAAA;EAAA,OAAAS,YAAA,CAAAX,QAAA,EAAA,CAAA;IAAAY,GAAA,EAAA,WAAA;AAAAC,IAAAA,KAAA,EAKQ,SAAAH,UAAUT,QAAqB,EAAA;AACrC,MAAA,IAAA,CAAKa,QAAQC,KAAM,EAAA,CAAA;AACnB,MAAA,IAAA,CAAKC,iBAAiBf,QAAQ,CAAA,CAAA;AAChC,KAAA;AAAA,GAAA,EAAA;IAAAW,GAAA,EAAA,kBAAA;AAAAC,IAAAA,KAAA,EAEQ,SAAAG,gBAAAA,CAAiBC,MAAiBC,WAAyB,EAAA;AAAA,MAAA,IAAAC,KAAA,GAAA,IAAA,CAAA;AAC7D,MAAA,IAAAC,KAAA,CAAMC,OAAQ,CAAAJ,IAAI,CAAG,EAAA;AACvBA,QAAAA,IAAA,CAAKK,QAAQ,UAACC,KAAA,EAAA;AAAA,UAAA,OAAUJ,MAAKH,gBAAiB,CAAAO,KAAA,EAAOL,WAAW,CAAC,CAAA;SAAA,CAAA,CAAA;AACjE,QAAA,OAAA;AACF,OAAA;AAEI,MAAA,IAAA,eAACM,eAAeP,IAAI,CAAA,EAAG,OAAA;AAE3B,MAAA,IAAAQ,WAAA,GAA4BR,IAAK,CAAAS,KAAA;QAAzBb,KAAA,GAAAY,WAAA,CAAAZ,KAAA;QAAOZ,QAAS,GAAAwB,WAAA,CAATxB,QAAS,CAAA;AAGxB,MAAA,IAAIY,UAAU,KAAW,CAAA,EAAA;QAEvB,IAAI,CAAC,IAAA,CAAKC,OAAQ,CAAAa,GAAA,CAAId,KAAK,CAAG,EAAA;AACvB,UAAA,IAAA,CAAAC,OAAA,CAAQc,IAAIf,KAAO,EAAA;AAAEgB,YAAAA,QAAQX,WAAa;AAAAjB,YAAAA,QAAA,EAAU,EAAA;AAAG,WAAC,CAAA,CAAA;AAC/D,SAAA;AAGA,QAAA,IAAIiB,gBAAgB,KAAW,CAAA,EAAA;UAC7B,IAAMY,UAAa,GAAA,IAAA,CAAKhB,OAAQ,CAAAiB,GAAA,CAAIb,WAAW,CAAA,CAAA;UAC/C,IAAIY,cAAc,CAACA,UAAA,CAAW7B,QAAS,CAAA+B,QAAA,CAASnB,KAAK,CAAG,EAAA;AAC3CiB,YAAAA,UAAA,CAAA7B,QAAA,CAASgC,KAAKpB,KAAK,CAAA,CAAA;AAChC,WAAA;AACF,SAAA;AAGA,QAAA,IAAIZ,QAAU,EAAA;AACP,UAAA,IAAA,CAAAe,gBAAA,CAAiBf,UAAUY,KAAK,CAAA,CAAA;AACvC,SAAA;iBACSZ,QAAU,EAAA;AAEd,QAAA,IAAA,CAAAe,gBAAA,CAAiBf,UAAUiB,WAAW,CAAA,CAAA;AAC7C,OAAA;AACF,KAAA;AAAA,GAAA,EAAA;IAAAN,GAAA,EAAA,aAAA;AAAAC,IAAAA,KAAA,EAKA,SAAAqB,YAAYC,YAA2B,EAAA;AAChC,MAAA,IAAA,CAAAC,WAAA,GAAc,IAAI3B,GAAA,CAAI0B,YAAY,CAAA,CAAA;AACzC,KAAA;AAAA,GAAA,EAAA;IAAAvB,GAAA,EAAA,aAAA;AAAAC,IAAAA,KAAA,EAKA,SAAAwB,WAAcA,GAAA;AACL,MAAA,OAAAjB,KAAA,CAAMkB,IAAK,CAAA,IAAA,CAAKF,WAAW,CAAA,CAAA;AACpC,KAAA;AAAA,GAAA,EAAA;IAAAxB,GAAA,EAAA,YAAA;AAAAC,IAAAA,KAAA,EAKA,SAAA0B,WAAW1B,KAAkB,EAAA;AACpB,MAAA,OAAA,IAAA,CAAKuB,WAAY,CAAAT,GAAA,CAAId,KAAK,CAAA,CAAA;AACnC,KAAA;AAAA,GAAA,EAAA;IAAAD,GAAA,EAAA,cAAA;AAAAC,IAAAA,KAAA,EAKA,SAAA2B,aAAa3B,KAAkB,EAAA;AAAA,MAAA,IAAA4B,iBAAA,CAAA;MAC7B,IAAMC,YAAyB,EAAC,CAAA;AAChC,MAAA,IAAIC,OAAU,GAAAF,CAAAA,iBAAA,GAAA,IAAA,CAAK3B,OAAQ,CAAAiB,GAAA,CAAIlB,KAAK,CAAG,MAAA,IAAA,IAAA4B,iBAAA,KAAzBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAA,CAAyBZ,MAAA,CAAA;AAEvC,MAAA,OAAOc,YAAY,KAAW,CAAA,EAAA;AAAA,QAAA,IAAAC,kBAAA,CAAA;AAC5BF,QAAAA,SAAA,CAAUG,QAAQF,OAAO,CAAA,CAAA;AACzBA,QAAAA,OAAA,IAAAC,kBAAA,GAAU,IAAK,CAAA9B,OAAA,CAAQiB,GAAI,CAAAY,OAAO,CAAG,MAAAC,IAAAA,IAAAA,kBAAA,KAA3BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAA,CAA2Bf,MAAA,CAAA;AACvC,OAAA;AAEO,MAAA,OAAAa,SAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAA9B,GAAA,EAAA,gBAAA;AAAAC,IAAAA,KAAA,EAKA,SAAAiC,eAAejC,KAAkB,EAAA;AAAA,MAAA,IAAAkC,MAAA,GAAA,IAAA,CAAA;MAC/B,IAAMC,cAA2B,EAAC,CAAA;MAClC,IAAI,CAAC,IAAA,CAAKlC,OAAQ,CAAAiB,GAAA,CAAIlB,KAAK,CAAA,EAAU,OAAAmC,WAAA,CAAA;AAG/B,MAAA,IAAAC,IAAA,GAAM,SAANA,GAAAA,CAAOC,SAAyB,EAAA;QACpC,IAAMjC,IAAO,GAAA8B,MAAA,CAAKjC,OAAQ,CAAAiB,GAAA,CAAImB,SAAS,CAAA,CAAA;QACvC,IAAI,CAACjC,IAAA,EAAM,OAAA;AAENA,QAAAA,IAAA,CAAAhB,QAAA,CAASqB,OAAQ,CAAA,UAACC,KAAqB,EAAA;AAC1CyB,UAAAA,WAAA,CAAYf,KAAKV,KAAK,CAAA,CAAA;UACtB0B,IAAA,CAAI1B,KAAK,CAAA,CAAA;AACX,SAAC,CAAA,CAAA;OACH,CAAA;MAEA0B,IAAA,CAAIpC,KAAK,CAAA,CAAA;AACF,MAAA,OAAAmC,WAAA,CAAA;AACT,KAAA;AAAA,GAAA,EAAA;IAAApC,GAAA,EAAA,aAAA;AAAAC,IAAAA,KAAA,EAKA,SAAAsC,YAAYtC,KAAkB,EAAA;MAC5B,IAAMI,IAAO,GAAA,IAAA,CAAKH,OAAQ,CAAAiB,GAAA,CAAIlB,KAAK,CAAA,CAAA;AACnC,MAAA,IAAI,CAACI,IAAA,EAAM,OAAO,EAAC,CAAA;AAEnB,MAAA,IAAMC,cAAcD,IAAK,CAAAY,MAAA,CAAA;AACzB,MAAA,IAAIX,gBAAgB,KAAW,CAAA,EAAA;QAC7B,IAAMkC,YAAyB,EAAC,CAAA;QAAA,IAAAC,SAAA,GAAAC,0BAAA,CACA,IAAK,CAAAxC,OAAA,CAAQyC,SAAW,CAAA;UAAAC,KAAA,CAAA;AAAA,QAAA,IAAA;UAAxD,KAAAH,SAAA,CAAAI,CAAA,EAAAD,EAAAA,CAAAA,CAAAA,KAAA,GAAAH,SAAA,CAAAK,CAAA,EAAAC,EAAAA,IAAA,GAAwD;AAAA,YAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAA3C,KAAA,EAAA,CAAA,CAAA;AAA5CqC,cAAAA,SAAW,GAAAU,WAAA,CAAA,CAAA,CAAA;AAAAE,cAAAA,IAAI,GAAAF,WAAA,CAAA,CAAA,CAAA,CAAA;YACzB,IAAIE,IAAK,CAAAjC,MAAA,KAAW,KAAa,CAAA,IAAAqB,SAAA,KAAcrC,KAAO,EAAA;AACpDuC,cAAAA,SAAA,CAAUnB,KAAKiB,SAAS,CAAA,CAAA;AAC1B,aAAA;AACF,WAAA;AAAA,SAAA,CAAA,OAAAa,GAAA,EAAA;UAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAAV,UAAAA,SAAA,CAAAY,CAAA,EAAA,CAAA;AAAA,SAAA;AACO,QAAA,OAAAb,SAAA,CAAA;AACT,OAAA;MAEA,IAAMvB,MAAS,GAAA,IAAA,CAAKf,OAAQ,CAAAiB,GAAA,CAAIb,WAAW,CAAA,CAAA;MACpC,OAAAW,MAAA,GAASA,OAAO5B,QAAS,CAAAiE,MAAA,CAAO,UAAC3C,KAAqB,EAAA;QAAA,OAAAA,KAAA,KAAUV,KAAK,CAAA;AAAA,OAAA,CAAA,GAAI,EAAC,CAAA;AACnF,KAAA;AAAA,GAAA,EAAA;IAAAD,GAAA,EAAA,YAAA;AAAAC,IAAAA,KAAA,EAKA,SAAAsD,WAAWtD,KAAkB,EAAA;AAAA,MAAA,IAAAuD,MAAA,GAAA,IAAA,CAAA;AACrB,MAAA,IAAAC,cAAA,GAAiB,IAAK,CAAA9B,UAAA,CAAW1B,KAAK,CAAA,CAAA;AACxC,MAAA,IAAAyD,YAAA,GAA4B,KAAKjC,WAAY,EAAA,CAAA;AAEjD,MAAA,IAAIgC,cAAgB,EAAA;AAEZ,QAAA,IAAArB,WAAA,GAAc,IAAK,CAAAF,cAAA,CAAejC,KAAK,CAAA,CAAA;AAC7C,QAAA,IAAM0D,yBAAc,IAAA9D,GAAA,CAAKI,CAAAA,KAAO,CAAA2D,CAAAA,MAAA,CAAAC,kBAAA,CAAGzB,WAAW,EAAC,CAAA,CAAA;AAEhCsB,QAAAA,YAAA,GAAAA,YAAA,CAAaJ,OAAO,UAACQ,IAAA,EAAA;AAAA,UAAA,OAAS,CAACH,OAAQ,CAAA5C,GAAA,CAAI+C,IAAI,CAAC,CAAA;SAAA,CAAA,CAAA;AACjE,OAAO,MAAA;AACC,QAAA,IAAAtC,WAAA,GAAc,IAAI3B,GAAA,CAAI6D,YAAY,CAAA,CAAA;QAGxC,IAAI,KAAKpE,WAAa,EAAA;AACd,UAAA,IAAAyE,QAAA,GAAW,IAAK,CAAAxB,WAAA,CAAYtC,KAAK,CAAA,CAAA;AACjC,UAAA,IAAA+D,eAAA,sBAAsBnE,GAAI,EAAA,CAAA;AAGvBkE,UAAAA,QAAA,CAAArD,OAAA,CAAQ,UAACuD,OAAY,EAAA;AACxB,YAAA,IAAAzC,WAAA,CAAYT,GAAI,CAAAkD,OAAO,CAAG,EAAA;AAC5BD,cAAAA,eAAA,CAAgBE,IAAID,OAAO,CAAA,CAAA;AACrB,cAAA,IAAAE,kBAAA,GAAqBX,MAAK,CAAAtB,cAAA,CAAe+B,OAAO,CAAA,CAAA;AACtDE,cAAAA,kBAAA,CAAmBzD,QAAQ,UAAC0D,IAAA,EAAA;AAAA,gBAAA,OAASJ,eAAgB,CAAAE,GAAA,CAAIE,IAAI,CAAC,CAAA;eAAA,CAAA,CAAA;AAChE,aAAA;AACF,WAAC,CAAA,CAAA;AAEcV,UAAAA,YAAA,GAAAA,YAAA,CAAaJ,OAAO,UAACQ,IAAA,EAAA;AAAA,YAAA,OAAS,CAACE,eAAgB,CAAAjD,GAAA,CAAI+C,IAAI,CAAC,CAAA;WAAA,CAAA,CAAA;AACzE,SAAA;AAGM,QAAA,IAAAhC,SAAA,GAAY,IAAK,CAAAF,YAAA,CAAa3B,KAAK,CAAA,CAAA;AAC/B6B,QAAAA,SAAA,CAAApB,OAAA,CAAQ,UAAC2D,QAAa,EAAA;AAC9B,UAAA,IAAI,CAACX,YAAA,CAAatC,QAAS,CAAAiD,QAAQ,CAAG,EAAA;AACpCX,YAAAA,YAAA,CAAarC,KAAKgD,QAAQ,CAAA,CAAA;AAC5B,WAAA;AACF,SAAC,CAAA,CAAA;AAGD,QAAA,IAAI,CAACX,YAAA,CAAatC,QAAS,CAAAnB,KAAK,CAAG,EAAA;AACjCyD,UAAAA,YAAA,CAAarC,KAAKpB,KAAK,CAAA,CAAA;AACzB,SAAA;AACF,OAAA;AAEA,MAAA,IAAA,CAAKqB,YAAYoC,YAAY,CAAA,CAAA;AAC/B,KAAA;AAAA,GAAA,CAAA,CAAA,CAAA;AAAA,CAAA;;;;"}