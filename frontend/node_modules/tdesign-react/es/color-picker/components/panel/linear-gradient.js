/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../../_chunks/dep-87d110df.js';
import { _ as _slicedToArray } from '../../../_chunks/dep-48805ab8.js';
import React, { useRef, useState, useEffect, useCallback } from 'react';
import classNames from 'classnames';
import { cloneDeep } from 'lodash-es';
import '../../../_chunks/dep-af243f7a.js';
import useCommonClassName from '../../../hooks/useCommonClassName.js';
import useMouseEvent from '../../../hooks/useMouseEvent.js';
import { InputNumber } from '../../../input-number/index.js';
import useClassNames from '../../hooks/useClassNames.js';
import { G as GRADIENT_SLIDER_DEFAULT_WIDTH } from '../../../_chunks/dep-3ac1dd01.js';
import { a as genGradientPoint, b as gradientColors2string } from '../../../_chunks/dep-2d7c1f92.js';
import '../../../_chunks/dep-026a4c6b.js';
import '../../../_chunks/dep-83726008.js';
import '../../../_chunks/dep-cb0a3966.js';
import '../../../_chunks/dep-eca3a3de.js';
import '../../../hooks/useConfig.js';
import '../../../config-provider/ConfigContext.js';
import '../../../locale/zh_CN.js';
import '../../../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../../../_chunks/dep-3c9ab31a.js';
import '../../../input-number/InputNumber.js';
import 'tdesign-icons-react';
import '../../../input/index.js';
import '../../../input/Input.js';
import '../../../_chunks/dep-6b660ef0.js';
import '../../../hooks/useLayoutEffect.js';
import '../../../_chunks/dep-3a09424a.js';
import '../../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../../hooks/useGlobalIcon.js';
import '../../../input/InputGroup.js';
import '../../../hooks/useControlled.js';
import '../../../_util/noop.js';
import '../../../locale/LocalReceiver.js';
import '../../../config-provider/index.js';
import '../../../config-provider/ConfigProvider.js';
import '../../../config-provider/type.js';
import '../../../input/defaultProps.js';
import '../../../_util/parseTNode.js';
import '../../../_chunks/dep-f53c91cd.js';
import '../../../_chunks/dep-b908e1fe.js';
import '../../../input/useLengthLimit.js';
import '../../../_chunks/dep-1630b9b4.js';
import '../../../hooks/useDefaultProps.js';
import '../../../input/style/css.js';
import '../../../input/type.js';
import '../../../button/index.js';
import '../../../button/Button.js';
import '../../../hooks/useDomRefCallback.js';
import '../../../hooks/useRipple.js';
import '../../../_chunks/dep-c48e2ca1.js';
import '../../../hooks/useAnimation.js';
import '../../../loading/index.js';
import '../../../loading/Loading.js';
import '../../../common/Portal.js';
import 'react-dom';
import '../../../loading/gradient.js';
import '../../../loading/defaultProps.js';
import '../../../loading/plugin.js';
import '../../../_util/react-render.js';
import '../../../_chunks/dep-a74cc5e4.js';
import '../../../common/PluginContainer.js';
import '../../../loading/style/css.js';
import '../../../loading/type.js';
import '../../../button/defaultProps.js';
import '../../../button/style/css.js';
import '../../../button/type.js';
import '../../../input-number/useInputNumber.js';
import '../../../_chunks/dep-46c9e4f5.js';
import '../../../input-number/defaultProps.js';
import '../../../input-number/style/css.js';
import '../../../input-number/type.js';
import '../../../_chunks/dep-3c3d29db.js';

var DELETE_KEYS = ["delete", "backspace"];
var LinearGradient = function LinearGradient(props) {
  var _allGradientColors$, _allGradientColors;
  var onChange = props.onChange,
    color = props.color,
    disabled = props.disabled;
  var baseClassName = useClassNames();
  var _useCommonClassName = useCommonClassName(),
    statusClassNames = _useCommonClassName.STATUS;
  var sliderRef = useRef(null);
  var sliderRectRef = useRef({
    left: 0,
    width: GRADIENT_SLIDER_DEFAULT_WIDTH
  });
  var degree = useRef(props.color.gradientDegree);
  var selectedRef = useRef(props.color.gradientSelectedId);
  var colors = useRef(cloneDeep(color.gradientColors));
  var _useState = useState(props.color.gradientSelectedId),
    _useState2 = _slicedToArray(_useState, 2),
    selectedId = _useState2[0],
    setSelectedId = _useState2[1];
  var _useState3 = useState(colors.current),
    _useState4 = _slicedToArray(_useState3, 2),
    colorsState = _useState4[0],
    setColorsState = _useState4[1];
  useEffect(function () {
    degree.current = color === null || color === void 0 ? void 0 : color.gradientDegree;
    setSelectedId(color.gradientSelectedId);
    selectedRef.current = color.gradientSelectedId;
    colors.current = cloneDeep(color.gradientColors);
    setColorsState(colors.current);
  }, [color.gradientColors, color === null || color === void 0 ? void 0 : color.gradientDegree, color.gradientSelectedId, color.value, color.saturation]);
  var updateSliderRect = function updateSliderRect() {
    var rect = sliderRef.current.getBoundingClientRect();
    sliderRectRef.current = {
      left: rect.left,
      width: rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH
    };
  };
  var handleChange = useCallback(function (key, payload) {
    if (disabled) return;
    onChange({
      key: key,
      payload: payload
    });
  }, [onChange, disabled]);
  var handleDegreeChange = function handleDegreeChange(value) {
    if (disabled || value === props.color.gradientDegree) {
      return;
    }
    degree.current = value;
    handleChange("degree", value);
  };
  var handleSelectedIdChange = function handleSelectedIdChange(value) {
    if (disabled) return;
    setSelectedId(value);
    selectedRef.current = value;
    handleChange("selectedId", value);
  };
  var handleColorsChange = useCallback(function (value) {
    if (disabled) return;
    colors.current = value;
    setColorsState(value);
    handleChange("colors", value);
  }, [disabled, handleChange]);
  var updateActiveThumbLeft = useCallback(function (left) {
    var index = colors.current.findIndex(function (c) {
      return c.id === selectedRef.current;
    });
    if (index === -1) {
      return;
    }
    var point = colors.current[index];
    var formatLeft = Math.max(0, Math.min(sliderRectRef.current.width, left));
    var percentLeft = formatLeft / sliderRectRef.current.width * 100;
    var newColors = colors.current.map(function (item, i) {
      return index !== i ? item : {
        color: point.color,
        left: percentLeft,
        id: point.id
      };
    });
    handleColorsChange(newColors);
  }, [handleColorsChange]);
  var handleStart = function handleStart(id, e) {
    if (disabled) return;
    e.preventDefault();
    e.stopPropagation();
    handleSelectedIdChange(id);
    sliderRef.current.focus();
  };
  useMouseEvent(sliderRef, {
    onMove: function onMove(_, ctx) {
      if (disabled) return;
      updateActiveThumbLeft(ctx.coordinate.x);
    }
  });
  var handleKeyup = function handleKeyup(e) {
    if (disabled) return;
    var points = _toConsumableArray(colors.current);
    var pos = points.findIndex(function (c) {
      return c.id === selectedRef.current;
    });
    var length = points.length;
    if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
      points.splice(pos, 1);
      if (!points[pos]) {
        pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
      }
      var current = points[pos];
      handleColorsChange(points);
      handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
    }
  };
  var handleThumbBarClick = function handleThumbBarClick(e) {
    if (disabled || !props.enableMultipleGradient) return;
    updateSliderRect();
    var left = e.clientX - sliderRectRef.current.left;
    left = Math.max(0, Math.min(sliderRectRef.current.width, left));
    var percentLeft = left / sliderRectRef.current.width * 100;
    var newPoint = genGradientPoint(percentLeft, props.color.rgba);
    var newColors = _toConsumableArray(colors.current);
    newColors.push(newPoint);
    handleColorsChange(newColors);
    handleSelectedIdChange(newPoint.id);
  };
  useEffect(function () {
    updateSliderRect();
  }, []);
  var gradientColors = props.color.gradientColors;
  var thumbBackground = gradientColors2string({
    points: gradientColors,
    degree: 90
  });
  var handleClickThumb = function handleClickThumb(e, t) {
    handleSelectedIdChange(t.id);
    e.stopPropagation();
  };
  var allGradientColors = _toConsumableArray(colorsState);
  var _genGradientPoint = genGradientPoint(0, (_allGradientColors$ = allGradientColors[0]) === null || _allGradientColors$ === void 0 ? void 0 : _allGradientColors$.color),
    leftColor = _genGradientPoint.color;
  var _genGradientPoint2 = genGradientPoint(100, (_allGradientColors = allGradientColors[allGradientColors.length - 1]) === null || _allGradientColors === void 0 ? void 0 : _allGradientColors.color),
    rightColor = _genGradientPoint2.color;
  return /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__gradient")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__gradient-slider"),
    style: {
      background: "linear-gradient(90deg, ".concat(leftColor, " 0%, ").concat(leftColor, " 50%, ").concat(rightColor, " 50%, ").concat(rightColor, " 100%)")
    }
  }, /* @__PURE__ */React.createElement("div", {
    ref: sliderRef,
    className: classNames("".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")),
    onKeyUp: handleKeyup,
    tabIndex: 0
  }, /* @__PURE__ */React.createElement("ul", {
    className: "gradient-thumbs",
    onClick: handleThumbBarClick,
    style: {
      background: thumbBackground
    }
  }, colorsState.map(function (t) {
    var left = "".concat(Math.round(t.left * 100) / 100, "%");
    return /* @__PURE__ */React.createElement("li", {
      className: classNames(["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""]),
      key: t.id,
      title: "".concat(t.color, " ").concat(left),
      style: {
        color: t.color,
        left: left
      },
      onClick: function onClick(e) {
        return handleClickThumb(e, t);
      },
      onMouseDown: function onMouseDown(e) {
        return handleStart(t.id, e);
      }
    }, /* @__PURE__ */React.createElement("span", {
      className: classNames(["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")])
    }));
  })))), /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__gradient-degree"),
    title: "".concat(degree, "deg")
  }, /* @__PURE__ */React.createElement(InputNumber, {
    theme: "normal",
    min: 0,
    max: 360,
    step: 1,
    size: "small",
    format: function format(value) {
      return "".concat(value, "\xB0");
    },
    value: degree.current,
    onBlur: handleDegreeChange,
    onEnter: handleDegreeChange,
    onChange: handleDegreeChange,
    disabled: props.disabled
  })));
};
var LinearGradient$1 = /*#__PURE__*/React.memo(LinearGradient);

export { LinearGradient$1 as default };
//# sourceMappingURL=linear-gradient.js.map
