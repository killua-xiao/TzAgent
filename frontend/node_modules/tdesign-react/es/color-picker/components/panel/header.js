/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../../_chunks/dep-48805ab8.js';
import React from 'react';
import { c as COLOR_MODES } from '../../../_chunks/dep-3ac1dd01.js';
import { Radio } from '../../../radio/index.js';
import { useLocaleReceiver } from '../../../locale/LocalReceiver.js';
import '../../../_chunks/dep-026a4c6b.js';
import '../../../_chunks/dep-b9f731c7.js';
import '../../../_chunks/dep-cb0a3966.js';
import '../../../_chunks/dep-eca3a3de.js';
import '../../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../../common/Check.js';
import '../../../_chunks/dep-6b660ef0.js';
import 'classnames';
import 'lodash-es';
import '../../../_util/helper.js';
import '../../../hooks/useConfig.js';
import '../../../config-provider/ConfigContext.js';
import '../../../locale/zh_CN.js';
import '../../../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../../../_chunks/dep-3c9ab31a.js';
import '../../../hooks/useControlled.js';
import '../../../_util/noop.js';
import '../../../_chunks/dep-4450afc0.js';
import '../../../hooks/useCommonClassName.js';
import '../../../radio/defaultProps.js';
import '../../../hooks/useDefaultProps.js';
import '../../../radio/useKeyboard.js';
import '../../../_chunks/dep-55732ade.js';
import '../../../_util/listener.js';
import '../../../_chunks/dep-3a09424a.js';
import '../../../radio/style/css.js';
import '../../../radio/type.js';
import '../../../config-provider/index.js';
import '../../../config-provider/ConfigProvider.js';
import '../../../config-provider/type.js';

var Header = function Header(props) {
  var _useLocaleReceiver = useLocaleReceiver("colorPicker"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    local = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var baseClassName = props.baseClassName,
    _props$mode = props.mode,
    mode = _props$mode === void 0 ? "monochrome" : _props$mode,
    colorModes = props.colorModes,
    onModeChange = props.onModeChange;
  var isSingleMode = (colorModes === null || colorModes === void 0 ? void 0 : colorModes.length) === 1;
  if (isSingleMode) {
    return null;
  }
  return /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__head")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(baseClassName, "__mode")
  }, /* @__PURE__ */React.createElement(Radio.Group, {
    variant: "default-filled",
    size: "small",
    value: mode,
    onChange: onModeChange
  }, Object.keys(COLOR_MODES).map(function (key) {
    return /* @__PURE__ */React.createElement(Radio.Button, {
      key: key,
      value: key
    }, t(local[COLOR_MODES[key]]));
  }))));
};
var PanelHeader = /*#__PURE__*/React.memo(Header);

export { PanelHeader as default };
//# sourceMappingURL=header.js.map
