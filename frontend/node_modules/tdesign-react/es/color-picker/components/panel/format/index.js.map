{"version":3,"file":"index.js","sources":["../../../../../../components/color-picker/components/panel/format/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Color, getColorFormatOptions } from '@tdesign/common-js/color-picker/index';\nimport Select from '../../../../select';\nimport type { TdColorPickerProps } from '../../../type';\nimport FormatInputs from './inputs';\n\nexport interface TdColorFormatProps extends TdColorPickerProps {\n  onInputChange: () => void;\n  baseClassName: string;\n  color: Color;\n}\n\nconst FormatPanel = (props: TdColorFormatProps) => {\n  const { enableAlpha, baseClassName, format, selectInputProps } = props;\n  const [formatMode, setFormatMode] = useState(format);\n  const handleModeChange = (v: TdColorPickerProps['format']) => {\n    setFormatMode(v);\n  };\n\n  return (\n    <div className={`${baseClassName}__format`}>\n      <div className={`${baseClassName}__format--item`}>\n        <Select\n          size=\"small\"\n          className={`${baseClassName}__format-mode-select`}\n          popupProps={{\n            overlayClassName: `${baseClassName}__select-options`,\n            ...selectInputProps?.popupProps,\n          }}\n          autoWidth\n          value={formatMode}\n          onChange={handleModeChange}\n        >\n          {getColorFormatOptions(enableAlpha).map((item) => (\n            <Select.Option key={item} value={item} label={item} style={{ fontSize: '12px' }} />\n          ))}\n        </Select>\n      </div>\n      <div className={`${baseClassName}__format--item`}>\n        <FormatInputs {...props} format={formatMode} />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(FormatPanel);\n"],"names":["FormatPanel","props","enableAlpha","baseClassName","format","selectInputProps","_useState","useState","_useState2","_slicedToArray","formatMode","setFormatMode","handleModeChange","v","React","createElement","className","Select","size","popupProps","_objectSpread","overlayClassName","autoWidth","value","onChange","getColorFormatOptions","map","item","Option","key","label","style","fontSize","FormatInputs","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,WAAA,GAAc,SAAdA,WAAAA,CAAeC,KAA8B,EAAA;AACjD,EAAA,IAAQC,WAAA,GAAyDD,KAAA,CAAzDC,WAAA;IAAaC,aAAe,GAA6BF,KAAA,CAA5CE,aAAe;IAAAC,MAAA,GAA6BH,KAAA,CAA7BG,MAAA;IAAQC,mBAAqBJ,KAAA,CAArBI;AAC5C,EAAA,IAAAC,SAAA,GAAoCC,SAASH,MAAM,CAAA;IAAAI,UAAA,GAAAC,cAAA,CAAAH,SAAA,EAAA,CAAA,CAAA;AAA5CI,IAAAA,UAAA,GAAAF,UAAA,CAAA,CAAA,CAAA;AAAYG,IAAAA,aAAa,GAAAH,UAAA,CAAA,CAAA,CAAA,CAAA;AAC1B,EAAA,IAAAI,gBAAA,GAAmB,SAAnBA,gBAAAA,CAAoBC,CAAoC,EAAA;IAC5DF,aAAA,CAAcE,CAAC,CAAA,CAAA;GACjB,CAAA;AAEA,EAAA,sBACGC,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;IAAIC,qBAAcb,aAAA,EAAA,UAAA,CAAA;AAAA,GAAA,iBAChBW,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;IAAIC,qBAAcb,aAAA,EAAA,gBAAA,CAAA;AAAA,GAAA,iBAChBW,KAAA,CAAAC,aAAA,CAAAE,MAAA,EAAA;AACCC,IAAAA,IAAK,EAAA,OAAA;AACLF,IAAAA,qBAAcb,aAAA,EAAA,sBAAA,CAAA;AACdgB,IAAAA,UAAY,EAAAC,aAAA,CAAA;MACVC,4BAAqBlB,aAAA,EAAA,kBAAA,CAAA;AAAA,KAAA,EAClBE,gBAAkB,KAAlBA,IAAAA,IAAAA,gBAAkB,uBAAlBA,gBAAkB,CAAAc,UAAA,CACvB;AACAG,IAAAA,SAAS,EAAA,IAAA;AACTC,IAAAA,KAAO,EAAAb,UAAA;AACPc,IAAAA,QAAU,EAAAZ,gBAAAA;GAET,EAAAa,qBAAA,CAAsBvB,WAAW,CAAE,CAAAwB,GAAA,CAAI,UAACC,IACvC,EAAA;IAAA,sBAAAb,KAAA,CAAAC,aAAA,CAACE,OAAOW,MAAP,EAAA;AAAcC,MAAAA,GAAK,EAAAF,IAAA;AAAMJ,MAAAA,KAAO,EAAAI,IAAA;AAAMG,MAAAA,KAAO,EAAAH,IAAA;AAAMI,MAAAA,KAAA,EAAO;AAAEC,QAAAA,QAAA,EAAU,MAAA;AAAO,OAAA;AAAA,KAAG,CAClF,CAAA;GACH,CAAA,CACF,CAAA,iBACClB,KAAA,CAAAC,aAAA,CAAA,KAAA,EAAA;IAAIC,qBAAcb,aAAA,EAAA,gBAAA,CAAA;AAAA,GAAA,iBAChBW,KAAA,CAAAC,aAAA,CAAAkB,YAAA,EAAAb,aAAA,CAAAA,aAAA,CAAA,EAAA,EAAiBnB,KAAA,CAAA,EAAA,EAAA,EAAA;AAAOG,IAAAA,MAAQ,EAAAM,UAAAA;GAAY,CAAA,CAC/C,CACF,CAAA,CAAA;AAEJ,CAAA,CAAA;AAEA,oBAAA,aAAeI,KAAA,CAAMoB,KAAKlC,WAAW,CAAA;;;;"}