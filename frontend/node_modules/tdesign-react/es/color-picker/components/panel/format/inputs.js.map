{"version":3,"file":"inputs.js","sources":["../../../../../../components/color-picker/components/panel/format/inputs.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { throttle } from 'lodash-es';\nimport { Color, getColorFormatInputs, getColorFormatMap } from '@tdesign/common-js/color-picker/index';\nimport type { TdColorFormatProps } from '.';\nimport Input from '../../../../input';\nimport InputNumber from '../../../../input-number';\n\nconst FormatInputs = (props: TdColorFormatProps) => {\n  const { format, enableAlpha, inputProps, disabled, onInputChange, color } = props;\n  const modelValueRef = useRef({});\n  const lastModelValue = useRef({});\n  const inputKey = useRef<number>(0);\n\n  const updateModelValue = () => {\n    const value = getColorFormatMap(color, 'encode')[format];\n    if (!value) return;\n\n    if (enableAlpha) {\n      // @ts-ignore\n      value.a = Math.round(color.alpha * 100);\n    }\n\n    const changedFormatValue = {};\n    Object.keys(value).forEach((key) => {\n      if (value[key] !== modelValueRef.current[key]) {\n        changedFormatValue[key] = value[key];\n      }\n      lastModelValue.current[key] = value[key];\n    });\n\n    if (Object.keys(changedFormatValue).length > 0) {\n      modelValueRef.current = value;\n    }\n  };\n\n  const handleInputChange = (key: string, v: number | string, max: number) => {\n    inputKey.current = performance.now(); // 重新渲染，处理多次空值的场景\n\n    if (v.toString().trim() === '') {\n      const lastValue = lastModelValue.current[key];\n      color.update(lastValue as string);\n      onInputChange();\n      return;\n    }\n\n    if (!v || v === lastModelValue.current[key] || Number(v) < 0 || Number(v) > max) return;\n    lastModelValue.current[key] = v;\n\n    const newFormatValue = {\n      ...modelValueRef.current,\n      [key]: v,\n    };\n    modelValueRef.current = newFormatValue;\n    // 对应 COLOR_FORMAT_INPUTS 中的 key\n    if (key === 'a') {\n      // 透明通道\n      color.alpha = (v as number) / 100;\n    } else if (key === 'hex' || key === 'css') {\n      // 纯字符串类型的格式\n      color.update(v as string);\n    } else {\n      /* 待进一步优化：手动修改某个输入框，其它输入框的值有时会被覆盖 \n         https://github.com/bgrins/TinyColor/issues/86 */\n      color.update(Color.object2color(newFormatValue, format));\n    }\n    onInputChange();\n  };\n\n  updateModelValue();\n  useEffect(() => {\n    const throttleUpdate = throttle(updateModelValue, 100);\n    throttleUpdate();\n    return () => throttleUpdate.cancel();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [color.saturation, color.hue, color.value, color.alpha, format]);\n\n  return (\n    <div className=\"input-group\">\n      {getColorFormatInputs(format, enableAlpha).map((config) => {\n        const currentValue = modelValueRef.current[config.key];\n        const commonProps = {\n          ...inputProps,\n          disabled,\n          title: currentValue,\n          align: 'center' as const,\n          size: 'small' as const,\n          onBlur: (v: string) => handleInputChange(config.key, v, config.max),\n          onEnter: (v: string) => handleInputChange(config.key, v, config.max),\n        };\n\n        return (\n          <div\n            className=\"input-group__item\"\n            key={config.key}\n            style={{\n              flex: config.flex || 1,\n            }}\n          >\n            {config.type === 'input' ? (\n              <Input\n                {...commonProps}\n                defaultValue={currentValue}\n                key={`${inputKey.current}-${currentValue}`}\n                maxlength={format === 'HEX' ? 9 : undefined}\n              />\n            ) : (\n              <InputNumber\n                {...commonProps}\n                min={config.min}\n                max={config.max}\n                // @ts-ignore\n                format={config.format}\n                step={1}\n                value={currentValue}\n                onChange={(v) => handleInputChange(config.key, v || config.min, config.max)}\n                theme=\"normal\"\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(FormatInputs);\n"],"names":["FormatInputs","props","format","enableAlpha","inputProps","disabled","onInputChange","color","modelValueRef","useRef","lastModelValue","inputKey","updateModelValue","value","getColorFormatMap","a","Math","round","alpha","changedFormatValue","Object","keys","forEach","key","current","length","handleInputChange","v","max","performance","now","toString","trim","lastValue","update","Number","newFormatValue","_objectSpread","_defineProperty","Color","object2color","useEffect","throttleUpdate","throttle","cancel","saturation","hue","React","createElement","className","getColorFormatInputs","map","config","currentValue","commonProps","title","align","size","onBlur","onEnter","style","flex","type","Input","defaultValue","concat","maxlength","InputNumber","min","step","onChange","theme","memo"],"mappings":"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"}