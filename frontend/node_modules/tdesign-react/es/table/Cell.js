/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-eca3a3de.js';
import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import React from 'react';
import classNames from 'classnames';
import { isFunction, get } from 'lodash-es';
import Ellipsis from './Ellipsis.js';
import { getColumnFixedStyles } from './hooks/useFixed.js';
import { formatClassNames } from './utils.js';
import '../_chunks/dep-48805ab8.js';
import '../_chunks/dep-026a4c6b.js';
import '../_util/scroll.js';
import 'raf';
import '../_chunks/dep-3a09424a.js';
import '../_util/easing.js';
import '../tooltip/index.js';
import '../tooltip/Tooltip.js';
import '../_chunks/dep-6b660ef0.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useDefaultProps.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../hooks/useSwitch.js';
import '../hooks/usePersistFn.js';
import '../tooltip/style/css.js';
import '../tooltip/type.js';
import '../hooks/useDebounce.js';
import '../_chunks/dep-1630b9b4.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-a3bde62f.js';
import '../hooks/usePrevious.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function renderCell(params, extra) {
  var col = params.col,
    row = params.row,
    rowIndex = params.rowIndex;
  if (col.colKey === "serial-number") {
    var _ref = (extra === null || extra === void 0 ? void 0 : extra.pagination) || {},
      current = _ref.current,
      pageSize = _ref.pageSize,
      defaultCurrent = _ref.defaultCurrent,
      defaultPageSize = _ref.defaultPageSize;
    var tCurrent = current || defaultCurrent;
    var tPageSize = pageSize || defaultPageSize;
    if (tPageSize && tCurrent) {
      return tPageSize * (tCurrent - 1) + rowIndex + 1;
    }
    return rowIndex + 1;
  }
  if (isFunction(col.cell)) {
    return col.cell(params);
  }
  if (isFunction(col.render)) {
    return col.render(_objectSpread(_objectSpread({}, params), {}, {
      type: "cell"
    }));
  }
  var r = col.cell || col.render || get(row, col.colKey);
  if (![void 0, "", null].includes(r)) return r;
  if (extra !== null && extra !== void 0 && extra.cellEmptyContent) return extra.cellEmptyContent;
  return r;
}
function renderEllipsisCell(cellParams, params) {
  var cellNode = params.cellNode,
    tableElm = params.tableElm,
    columnLength = params.columnLength,
    classPrefix = params.classPrefix,
    overlayClassName = params.overlayClassName;
  var col = cellParams.col,
    colIndex = cellParams.colIndex;
  var content = isFunction(col.ellipsis) ? col.ellipsis(cellParams) : void 0;
  if (_typeof(col.ellipsis) === "object" && "content" in col.ellipsis && isFunction(col.ellipsis.content)) {
    content = col.ellipsis.content(cellParams);
  }
  var tooltipProps = {};
  if (_typeof(col.ellipsis) === "object") {
    tooltipProps = "props" in col.ellipsis ? col.ellipsis.props : col.ellipsis || void 0;
  }
  var tableElement = tableElm;
  var placement = colIndex === 0 ? "top-left" : "top";
  placement = colIndex === columnLength - 1 ? "top-right" : placement;
  return /* @__PURE__ */React.createElement(Ellipsis, {
    placement: placement,
    attach: tableElement ? function () {
      return tableElement;
    } : void 0,
    popupContent: content,
    tooltipProps: tooltipProps,
    overlayClassName: overlayClassName,
    classPrefix: classPrefix
  }, cellNode);
}
var Cell = function Cell(props) {
  var cellParams = props.cellParams,
    tableClassNames = props.tableClassNames,
    tableRef = props.tableRef,
    columnLength = props.columnLength,
    classPrefix = props.classPrefix,
    overlayClassName = props.overlayClassName,
    pagination = props.pagination;
  var col = cellParams.col,
    colIndex = cellParams.colIndex,
    rowIndex = cellParams.rowIndex;
  var cellSpans = props.cellSpans,
    dataLength = props.dataLength,
    rowAndColFixedPosition = props.rowAndColFixedPosition,
    cellEmptyContent = props.cellEmptyContent,
    rowspanAndColspan = props.rowspanAndColspan,
    onClick = props.onClick;
  var tableColFixedClasses = tableClassNames.tableColFixedClasses,
    tdEllipsisClass = tableClassNames.tdEllipsisClass,
    tableBaseClass = tableClassNames.tableBaseClass,
    tdAlignClasses = tableClassNames.tdAlignClasses,
    tableDraggableClasses = tableClassNames.tableDraggableClasses;
  var cellNode = renderCell(cellParams, {
    cellEmptyContent: cellEmptyContent,
    pagination: pagination
  });
  var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, tableColFixedClasses);
  var customClasses = formatClassNames(col.className, _objectSpread(_objectSpread({}, cellParams), {}, {
    type: "td"
  }));
  var classes = [tdStyles.classes, customClasses, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, tdEllipsisClass, col.ellipsis), tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), tableBaseClass.tdFirstCol, colIndex === 0 && rowspanAndColspan), tdAlignClasses[col.align], col.align && col.align !== "left"), tableDraggableClasses.handle, col.colKey === "drag")];
  var normalAttrs = isFunction(col.attrs) ? col.attrs(_objectSpread(_objectSpread({}, cellParams), {}, {
    type: "td"
  })) : col.attrs;
  var attrs = _objectSpread(_objectSpread({}, normalAttrs), {}, {
    rowSpan: cellSpans.rowspan,
    colSpan: cellSpans.colspan
  });
  return /* @__PURE__ */React.createElement("td", _objectSpread(_objectSpread({
    key: col.colKey || colIndex,
    className: classNames(classes) || void 0,
    style: tdStyles.style
  }, attrs), {}, {
    onClick: onClick
  }), col.ellipsis ? renderEllipsisCell(cellParams, {
    cellNode: cellNode,
    tableElm: tableRef.current,
    columnLength: columnLength,
    classPrefix: classPrefix,
    overlayClassName: overlayClassName
  }) : cellNode);
};
Cell.displayName = "Cell";

export { Cell as default, renderCell };
//# sourceMappingURL=Cell.js.map
