{"version":3,"file":"useRowspanAndColspan.js","sources":["../../../../components/table/hooks/useRowspanAndColspan.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { get } from 'lodash-es';\nimport log from '@tdesign/common-js/log/index';\nimport { BaseTableCellParams, BaseTableCol, TableRowData, TableRowspanAndColspanFunc } from '../type';\n\nexport interface SkipSpansValue {\n  colspan?: number;\n  rowspan?: number;\n  skipped?: boolean;\n}\n\nexport function getCellKey(row: TableRowData, rowKey: string, colKey: string, colIndex: number) {\n  const rowValue = get(row, rowKey);\n  if (rowValue === undefined) {\n    log.error('Table', 'rowKey is wrong, can not get unique identifier of row.');\n  }\n  return [rowValue, colKey || colIndex].join('_');\n}\n\nexport default function useRowspanAndColspan(\n  data: TableRowData[],\n  columns: BaseTableCol<TableRowData>[],\n  rowKey: string,\n  rowspanAndColspan: TableRowspanAndColspanFunc<TableRowData>,\n) {\n  const [skipSpansMap, setKipSnapsMap] = useState(() => new Map<string, SkipSpansValue>());\n\n  // 计算单元格是否跳过渲染\n  const onTrRowspanOrColspan = (\n    params: BaseTableCellParams<TableRowData>,\n    skipSpansValue: SkipSpansValue,\n    map: Map<string, SkipSpansValue>,\n  ) => {\n    const { rowIndex, colIndex } = params;\n    if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;\n    const maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);\n    const maxColIndex = colIndex + (skipSpansValue.colspan || 1);\n    for (let i = rowIndex; i < maxRowIndex; i++) {\n      for (let j = colIndex; j < maxColIndex; j++) {\n        if (i !== rowIndex || j !== colIndex) {\n          if (!data[i] || !columns[j]) return;\n          const cellKey = getCellKey(data[i], rowKey, columns[j].colKey, j);\n          const state = map.get(cellKey) || {};\n          state.skipped = true;\n          map.set(cellKey, state);\n        }\n      }\n    }\n  };\n\n  // 计算单元格是否需要设置 rowspan 和 colspan\n  const getSkipSpansMap = (\n    data: TableRowData[],\n    columns: BaseTableCol<TableRowData>[],\n    rowspanAndColspan: TableRowspanAndColspanFunc<TableRowData>,\n  ) => {\n    if (!data || !rowspanAndColspan) return;\n    const map: Map<string, SkipSpansValue> = new Map<string, SkipSpansValue>();\n    for (let i = 0, len = data.length; i < len; i++) {\n      const row = data[i];\n      for (let j = 0, colLen = columns.length; j < colLen; j++) {\n        const col = columns[j];\n        const params = {\n          row,\n          col,\n          rowIndex: i,\n          colIndex: j,\n        };\n        const cellKey = getCellKey(row, rowKey, col.colKey, j);\n        const state = map.get(cellKey) || {};\n        const o = rowspanAndColspan(params) || {};\n        if (o.rowspan || o.colspan || state.rowspan || state.colspan) {\n          o.rowspan && (state.rowspan = o.rowspan);\n          o.colspan && (state.colspan = o.colspan);\n          map.set(cellKey, state);\n        }\n        onTrRowspanOrColspan?.(params, state, map);\n      }\n    }\n    return map;\n  };\n\n  useEffect(() => {\n    if (!rowspanAndColspan) return;\n    skipSpansMap.clear();\n    const result = getSkipSpansMap(data, columns, rowspanAndColspan);\n    setKipSnapsMap(result);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, columns, rowspanAndColspan]);\n\n  return { skipSpansMap, getSkipSpansMap };\n}\n"],"names":["getCellKey","row","rowKey","colKey","colIndex","rowValue","get","log","error","join","useRowspanAndColspan","data","columns","rowspanAndColspan","_useState","useState","Map","_useState2","_slicedToArray","skipSpansMap","setKipSnapsMap","onTrRowspanOrColspan","params","skipSpansValue","map","rowIndex","rowspan","colspan","maxRowIndex","maxColIndex","i","j","cellKey","state","skipped","set","getSkipSpansMap","len","length","colLen","col","o","useEffect","clear","result"],"mappings":"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"}