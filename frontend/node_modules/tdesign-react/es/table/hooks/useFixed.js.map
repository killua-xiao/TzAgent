{"version":3,"file":"useFixed.js","sources":["../../../../components/table/hooks/useFixed.ts"],"sourcesContent":["import { useEffect, useState, useMemo, useRef, WheelEvent, useCallback, MutableRefObject } from 'react';\nimport { get, pick, xorWith } from 'lodash-es';\nimport { getIEVersion } from '@tdesign/common-js/utils/helper';\nimport log from '@tdesign/common-js/log/index';\nimport { getScrollbarWidthWithCSS } from '@tdesign/common-js/utils/getScrollbarWidth';\nimport { ClassName, Styles } from '../../common';\nimport { BaseTableCol, TableRowData, TdBaseTableProps } from '../type';\nimport { FixedColumnInfo, TableRowFixedClasses, RowAndColFixedPosition, TableColFixedClasses } from '../interface';\nimport useDebounce from '../../hooks/useDebounce';\nimport usePrevious from '../../hooks/usePrevious';\nimport { resizeObserverElement, isLessThanIE11OrNotHaveResizeObserver } from '../utils';\nimport { off, on } from '../../_util/listener';\nimport { AffixRef } from '../../affix';\n\n// 固定列相关类名处理\nexport function getColumnFixedStyles(\n  col: TdBaseTableProps['columns'][0],\n  index: number,\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableColFixedClasses: TableColFixedClasses,\n): { style?: Styles; classes?: ClassName } {\n  const fixedPos = rowAndColFixedPosition?.get(col.colKey || index);\n  if (!fixedPos) return {};\n  const thClasses = {\n    [tableColFixedClasses.left]: col.fixed === 'left',\n    [tableColFixedClasses.right]: col.fixed === 'right',\n    [tableColFixedClasses.lastLeft]: col.fixed === 'left' && fixedPos.lastLeftFixedCol,\n    [tableColFixedClasses.firstRight]: col.fixed === 'right' && fixedPos.firstRightFixedCol,\n  };\n  const thStyles = {\n    left: col.fixed === 'left' ? `${fixedPos.left}px` : undefined,\n    right: col.fixed === 'right' ? `${fixedPos.right}px` : undefined,\n  };\n  return {\n    style: thStyles,\n    classes: thClasses,\n  };\n}\n\n// 固定行相关类名处理\nexport function getRowFixedStyles(\n  rowId: string | number,\n  rowIndex: number,\n  rowLength: number,\n  fixedRows: TdBaseTableProps['fixedRows'],\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableRowFixedClasses: TableRowFixedClasses,\n  // 和虚拟滚动搭配使用时，需要增加 style 的偏移量\n  virtualTranslateY = 0,\n): { style: Styles; classes: ClassName } {\n  if (!fixedRows || !fixedRows.length) return { style: undefined, classes: undefined };\n  const fixedTop = rowIndex < fixedRows[0];\n  const fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];\n  const firstFixedBottomRow = rowLength - fixedRows[1];\n  const fixedPos = rowAndColFixedPosition?.get(rowId) || {};\n  const rowClasses = {\n    [tableRowFixedClasses.top]: fixedTop,\n    [tableRowFixedClasses.bottom]: fixedBottom,\n    [tableRowFixedClasses.firstBottom]: rowIndex === firstFixedBottomRow,\n    [tableRowFixedClasses.withoutBorderBottom]: rowIndex === firstFixedBottomRow - 1,\n  };\n  const rowStyles = {\n    top: fixedTop ? `${fixedPos.top - virtualTranslateY}px` : undefined,\n    bottom: fixedBottom ? `${fixedPos.bottom + virtualTranslateY}px` : undefined,\n  };\n  return {\n    style: rowStyles,\n    classes: rowClasses,\n  };\n}\n\nexport default function useFixed(\n  props: TdBaseTableProps,\n  finalColumns: BaseTableCol<TableRowData>[],\n  affixRef?: {\n    paginationAffixRef: MutableRefObject<AffixRef>;\n    horizontalScrollAffixRef: MutableRefObject<AffixRef>;\n    headerTopAffixRef: MutableRefObject<AffixRef>;\n    footerBottomAffixRef: MutableRefObject<AffixRef>;\n  },\n) {\n  const {\n    columns,\n    tableLayout,\n    tableContentWidth,\n    fixedRows,\n    firstFullRow,\n    lastFullRow,\n    maxHeight,\n    headerAffixedTop,\n    bordered,\n  } = props;\n  const preFinalColumns = usePrevious(finalColumns);\n  const [data, setData] = useState<TableRowData[]>([]);\n  const tableContentRef = useRef<HTMLDivElement>(null);\n  const [isFixedHeader, setIsFixedHeader] = useState(false);\n  const [isWidthOverflow, setIsWidthOverflow] = useState(false);\n  const tableElmRef = useRef<HTMLTableElement>(null);\n  // CSS 样式设置了固定 6px\n  const [scrollbarWidth, setScrollbarWidth] = useState(6);\n  // 固定列、固定表头、固定表尾等内容的位置信息\n  const [rowAndColFixedPosition, setRowAndColFixedPosition] = useState<RowAndColFixedPosition>(() => new Map());\n  const [showColumnShadow, setShowColumnShadow] = useState({\n    left: false,\n    right: false,\n  });\n  // 虚拟滚动无法使用 CSS sticky 固定表头\n  const [virtualScrollHeaderPos, setVirtualScrollHeaderPos] = useState<{ left: number; top: number }>({\n    left: 0,\n    top: 0,\n  });\n  const tableWidth = useRef(0);\n  const tableElmWidth = useRef(0);\n  const thWidthList = useRef<{ [colKey: string]: number }>({});\n\n  const [isFixedColumn, setIsFixedColumn] = useState(false);\n  const [isFixedRightColumn, setIsFixedRightColumn] = useState(false);\n  const [isFixedLeftColumn, setIsFixedLeftColumn] = useState(false);\n\n  const columnResizable = props.resizable;\n\n  // 没有表头吸顶，没有虚拟滚动，则不需要表头宽度计算\n  const notNeedThWidthList = useMemo(\n    () =>\n      !(\n        props.headerAffixedTop ||\n        props.footerAffixedBottom ||\n        props.horizontalScrollAffixedBottom ||\n        props.scroll?.type === 'virtual'\n      ),\n    [props.footerAffixedBottom, props.headerAffixedTop, props.horizontalScrollAffixedBottom, props.scroll?.type],\n  );\n\n  function setUseFixedTableElmRef(val: HTMLTableElement) {\n    tableElmRef.current = val;\n  }\n\n  function getColumnMap(\n    columns: BaseTableCol[],\n    map: RowAndColFixedPosition = new Map(),\n    levelNodes: FixedColumnInfo[][] = [],\n    level = 0,\n    parent?: FixedColumnInfo,\n  ) {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (['left', 'right'].includes(col.fixed)) {\n        setIsFixedColumn(true);\n      }\n      if (col.fixed === 'right') {\n        setIsFixedRightColumn(true);\n      }\n      if (col.fixed === 'left') {\n        setIsFixedLeftColumn(true);\n      }\n      const key = col.colKey || i;\n      const columnInfo: FixedColumnInfo = { col, parent, index: i };\n      map.set(key, columnInfo);\n      if (col.children?.length) {\n        getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);\n      }\n      if (levelNodes[level]) {\n        levelNodes[level].push(columnInfo);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        levelNodes[level] = [columnInfo];\n      }\n    }\n    return {\n      newColumnsMap: map,\n      levelNodes,\n    };\n  }\n\n  const setFixedLeftPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (col.fixed === 'right') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i - 1;\n      while (lastColIndex >= 0 && columns[lastColIndex].fixed !== 'left') {\n        lastColIndex -= 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === 0 ? parent?.left || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i - 1);\n      colInfo.left = (lastColInfo?.left || defaultWidth) + (lastColInfo?.width || 0);\n      // 多级表头\n      if (col.children?.length) {\n        setFixedLeftPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  const setFixedRightPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = columns.length - 1; i >= 0; i--) {\n      const col = columns[i];\n      if (col.fixed === 'left') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i + 1;\n      while (lastColIndex < columns.length && columns[lastColIndex].fixed !== 'right') {\n        lastColIndex += 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === columns.length - 1 ? parent?.right || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i + 1);\n      colInfo.right = (lastColInfo?.right || defaultWidth) + (lastColInfo?.width || 0);\n      // 多级表头\n      if (col.children?.length) {\n        setFixedRightPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  // 获取固定列位置信息。先获取节点宽度，再计算\n  const setFixedColPosition = (trList: HTMLCollection, initialColumnMap: RowAndColFixedPosition) => {\n    if (!trList) return;\n    for (let i = 0, len = trList.length; i < len; i++) {\n      const thList = trList[i].children;\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        if (!colKey) {\n          log.warn('TDesign Table', `${th.innerText} missing colKey. colKey is required for fixed column feature.`);\n        }\n        const obj = initialColumnMap.get(colKey || j);\n        if (obj?.col?.fixed) {\n          initialColumnMap.set(colKey, { ...obj, width: th?.getBoundingClientRect?.().width });\n        }\n      }\n    }\n    setFixedLeftPos(columns, initialColumnMap);\n    setFixedRightPos(columns, initialColumnMap);\n  };\n\n  // 设置固定行位置信息 top/bottom\n  const setFixedRowPosition = (\n    trList: HTMLCollection,\n    initialColumnMap: RowAndColFixedPosition,\n    thead: HTMLTableSectionElement,\n    tfoot: HTMLTableSectionElement,\n  ) => {\n    const [fixedTopRows, fixedBottomRows] = fixedRows || [];\n    const { data, rowKey = 'id' } = props;\n    for (let i = 0; i < fixedTopRows; i++) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i - 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === 0) {\n        defaultBottom = thead?.getBoundingClientRect?.().height || 0;\n      }\n      thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr?.getBoundingClientRect?.().height });\n    }\n    for (let i = data.length - 1; i >= data.length - fixedBottomRows; i--) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i + 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === data.length - 1) {\n        defaultBottom = tfoot?.getBoundingClientRect?.().height || 0;\n      }\n      thisRowInfo.bottom = (lastRowInfo.bottom || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr?.getBoundingClientRect?.().height });\n    }\n  };\n\n  const updateRowAndColFixedPosition = (tableContentElm: HTMLElement, initialColumnMap: RowAndColFixedPosition) => {\n    rowAndColFixedPosition.clear();\n    if (!tableContentElm) return;\n    const thead = tableContentElm.querySelector('thead');\n    // 处理固定列\n    thead && setFixedColPosition(thead.children, initialColumnMap);\n    // 处理冻结行\n    const tbody = tableContentElm.querySelector('tbody');\n    const tfoot = tableContentElm.querySelector('tfoot');\n    tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);\n    // 更新最终 Map\n    setRowAndColFixedPosition(initialColumnMap);\n  };\n\n  let shadowLastScrollLeft: number;\n  const updateColumnFixedShadow = (target: HTMLElement, extra?: { skipScrollLimit?: boolean }) => {\n    if (!isFixedColumn || !target) return;\n    const { scrollLeft } = target;\n    // 只有左右滚动，需要更新固定列阴影\n    if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;\n    shadowLastScrollLeft = scrollLeft;\n    const isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;\n    const isShowLeft = scrollLeft > 0;\n    if (showColumnShadow.left === isShowLeft && showColumnShadow.right === isShowRight) return;\n    setShowColumnShadow({\n      left: isShowLeft && isFixedLeftColumn,\n      right: isShowRight && isFixedRightColumn,\n    });\n  };\n\n  // 多级表头场景较为复杂：为了滚动的阴影效果，需要知道哪些列是边界列，左侧固定列的最后一列，右侧固定列的第一列，每一层表头都需要兼顾\n  const setIsLastOrFirstFixedCol = (levelNodes: FixedColumnInfo[][]) => {\n    for (let t = 0; t < levelNodes.length; t++) {\n      const nodes = levelNodes[t];\n      for (let i = 0, len = nodes.length; i < len; i++) {\n        const colMapInfo = nodes[i];\n        const nextColMapInfo = nodes[i + 1];\n        const { parent } = colMapInfo;\n        const isParentLastLeftFixedCol = !parent || parent?.lastLeftFixedCol;\n        if (isParentLastLeftFixedCol && colMapInfo.col.fixed === 'left' && nextColMapInfo?.col.fixed !== 'left') {\n          colMapInfo.lastLeftFixedCol = true;\n        }\n        const lastColMapInfo = nodes[i - 1];\n        const isParentFirstRightFixedCol = !parent || parent?.firstRightFixedCol;\n        if (isParentFirstRightFixedCol && colMapInfo.col.fixed === 'right' && lastColMapInfo?.col.fixed !== 'right') {\n          colMapInfo.firstRightFixedCol = true;\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const updateFixedStatus = () => {\n    const { newColumnsMap, levelNodes } = getColumnMap(columns);\n    setIsLastOrFirstFixedCol(levelNodes);\n    const timer = setTimeout(() => {\n      if (isFixedColumn || fixedRows?.length) {\n        updateRowAndColFixedPosition(tableContentRef.current, newColumnsMap);\n      }\n      clearTimeout(timer);\n    }, 0);\n    return () => {\n      clearTimeout(timer);\n    };\n  };\n\n  // 使用 useCallback 来优化性能\n  const updateFixedHeader = useCallback(() => {\n    const tRef = tableContentRef?.current;\n    if (!tRef) return;\n\n    const isHeightOverflow = tRef.scrollHeight > tRef.clientHeight;\n    setIsFixedHeader(isHeightOverflow);\n    setIsWidthOverflow(tRef.scrollWidth > tRef.clientWidth);\n    const pos = tRef?.getBoundingClientRect?.();\n    setVirtualScrollHeaderPos({\n      top: pos?.top,\n      left: pos?.left,\n    });\n\n    // updateTableWidth(isHeightOverflow);\n    // updateThWidthListHandler();\n  }, []);\n\n  const setTableElmWidth = (width: number) => {\n    if (tableElmWidth.current === width) return;\n    tableElmWidth.current = width;\n  };\n\n  const updateTableWidth = () => {\n    const rect = tableContentRef.current?.getBoundingClientRect?.();\n    if (!rect) return;\n    // 存在纵向滚动条，且固定表头时，需去除滚动条宽度\n    const reduceWidth = isFixedHeader ? scrollbarWidth : 0;\n    tableWidth.current = rect.width - reduceWidth - (props.bordered ? 1 : 0);\n    const elmRect = tableElmRef?.current?.getBoundingClientRect();\n    if (elmRect?.width) {\n      setTableElmWidth(elmRect?.width);\n    }\n  };\n\n  // 在表格高度变化的时候 需要手动调整affix的位置 因为affix本身无法监听到这些变化触发重新计算\n  const updateAffixPosition = () => {\n    affixRef.paginationAffixRef.current?.handleScroll?.();\n    affixRef.horizontalScrollAffixRef.current?.handleScroll?.();\n    affixRef.headerTopAffixRef.current?.handleScroll?.();\n    affixRef.footerBottomAffixRef.current?.handleScroll?.();\n  };\n\n  const calculateThWidthList = (trList: HTMLCollection) => {\n    const widthMap: { [colKey: string]: number } = {};\n    for (let i = 0, len = trList?.length; i < len; i++) {\n      const thList = trList[i].children;\n      // second for used for multiple row header\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        widthMap[colKey] = th.getBoundingClientRect().width;\n      }\n    }\n    return widthMap;\n  };\n\n  const updateThWidthList = (trList: HTMLCollection | { [colKey: string]: number }) => {\n    if (trList instanceof HTMLCollection) {\n      if (columnResizable) return;\n      thWidthList.current = calculateThWidthList(trList);\n    } else {\n      thWidthList.current = thWidthList.current || {};\n      Object.entries(trList).forEach(([colKey, width]) => {\n        thWidthList.current[colKey] = width;\n      });\n    }\n    return thWidthList.current;\n  };\n\n  const updateThWidthListHandler = () => {\n    const timer = setTimeout(() => {\n      updateTableWidth();\n      if (notNeedThWidthList) return;\n      const thead = tableContentRef.current?.querySelector('thead');\n      if (!thead) return;\n      updateThWidthList(thead.children);\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const emitScrollEvent = (e: WheelEvent<HTMLDivElement>) => {\n    props.onScrollX?.({ e });\n    props.onScrollY?.({ e });\n    props.onScroll?.({ e });\n  };\n\n  const getThWidthList = (type?: 'default' | 'calculate') => {\n    if (type === 'calculate') {\n      const trList = tableContentRef.current?.querySelector('thead')?.children;\n      return calculateThWidthList(trList);\n    }\n    return thWidthList.current || {};\n  };\n\n  const updateTableElmWidthOnColumnChange = (\n    finalColumns: BaseTableCol<TableRowData>[] = [],\n    preFinalColumns: BaseTableCol<TableRowData>[] = [],\n  ) => {\n    const finalColKeys = finalColumns.map((t) => t.colKey);\n    const preColKeys = (preFinalColumns ?? []).map((t) => t.colKey);\n\n    if (finalColKeys.length < preColKeys.length) {\n      const reduceKeys = xorWith(preColKeys, finalColKeys);\n      const thWidthList = getThWidthList('calculate');\n      let reduceWidth = 0;\n      reduceKeys.forEach((key) => {\n        reduceWidth += thWidthList[key];\n      });\n      const rootThWidthList = pick(thWidthList, preColKeys);\n      if (!Object.values(rootThWidthList).length) return;\n      const oldTotalWidth = Object.values(rootThWidthList).reduce((r = 0, n) => r + n);\n      // 保留原有可能编辑过的列宽度，但是当剩余列过小时，表头小于内容宽，需要缩放回内容宽度\n      // 使用不包含滚动条的可视化区域宽度，意味着当不再溢出的时候，将宽度设置回完整宽度\n      const contentWidth = tableContentRef.current.clientWidth;\n      const widthToReserve = oldTotalWidth - reduceWidth;\n      setTableElmWidth(Math.max(contentWidth, widthToReserve));\n    }\n  };\n\n  useEffect(\n    updateFixedStatus,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      data,\n      columns,\n      bordered,\n      tableLayout,\n      tableContentWidth,\n      isFixedHeader,\n      isWidthOverflow,\n      isFixedColumn,\n      fixedRows,\n      firstFullRow,\n      lastFullRow,\n      tableContentRef,\n    ],\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (isFixedColumn) {\n        updateColumnFixedShadow(tableContentRef.current);\n      }\n      clearTimeout(timer);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFixedColumn, columns, tableContentRef]);\n\n  // 使用防抖函数，避免频繁触发\n  const updateFixedHeaderByUseDebounce = useDebounce(() => {\n    updateFixedHeader();\n  }, 30);\n\n  /**\n   * 通过监测表格大小变化，来调用 updateFixedHeader 修改状态\n   */\n  useEffect(() => {\n    if (tableContentRef.current) {\n      return resizeObserverElement(tableContentRef.current, updateFixedHeaderByUseDebounce);\n    }\n  }, [updateFixedHeaderByUseDebounce]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(updateFixedHeaderByUseDebounce, [maxHeight, data, columns, bordered, tableContentRef]);\n\n  useEffect(() => {\n    updateTableElmWidthOnColumnChange(finalColumns, preFinalColumns);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [finalColumns]);\n\n  // 影响表头宽度的元素\n  useEffect(\n    () => {\n      const timer = setTimeout(() => {\n        // updateTableWidth(isFixedHeader);\n        updateThWidthListHandler();\n        updateAffixPosition();\n        clearTimeout(timer);\n      }, 10);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // data,\n      bordered,\n      columns,\n      tableLayout,\n      fixedRows,\n      headerAffixedTop,\n      tableContentWidth,\n      notNeedThWidthList,\n      tableContentRef,\n    ],\n  );\n\n  const refreshTable = () => {\n    updateThWidthListHandler();\n    updateFixedHeader();\n    updateAffixPosition();\n\n    if (isFixedColumn || isFixedHeader) {\n      updateFixedStatus();\n      updateColumnFixedShadow(tableContentRef.current, { skipScrollLimit: true });\n    }\n  };\n\n  const onResize = useDebounce(() => {\n    refreshTable();\n  }, 30);\n\n  function addTableResizeObserver(tableElement: HTMLDivElement) {\n    /**\n     * IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n     * 抽离相关判断为单独的方法\n     */\n    if (isLessThanIE11OrNotHaveResizeObserver()) return;\n    off(window, 'resize', onResize);\n    if (!tableElmWidth.current) return;\n    // 抽离 resize 为单独的方法，通过回调来执行操作\n    return resizeObserverElement(tableElement, () => {\n      const timer = setTimeout(() => {\n        refreshTable();\n        clearTimeout(timer);\n      }, 60);\n    });\n  }\n\n  useEffect(() => {\n    const scrollWidth = getScrollbarWidthWithCSS();\n    setScrollbarWidth(scrollWidth);\n\n    const isWatchResize = isFixedColumn || isFixedHeader || !notNeedThWidthList || !data.length;\n    const hasWindow = typeof window !== 'undefined';\n    const hasResizeObserver = hasWindow && typeof window.ResizeObserver !== 'undefined';\n    updateTableWidth();\n    updateThWidthListHandler();\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    if ((isWatchResize && getIEVersion() < 11) || !hasResizeObserver) {\n      on(window, 'resize', onResize);\n    }\n\n    return () => {\n      if ((isWatchResize && getIEVersion() < 11) || !hasResizeObserver) {\n        if (typeof window !== 'undefined') {\n          off(window, 'resize', onResize);\n        }\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFixedColumn]);\n\n  const updateTableAfterColumnResize = () => {\n    updateFixedStatus();\n    updateFixedHeader();\n  };\n\n  return {\n    tableWidth,\n    tableElmWidth,\n    thWidthList,\n    isFixedHeader,\n    isWidthOverflow,\n    tableContentRef,\n    isFixedColumn,\n    showColumnShadow,\n    rowAndColFixedPosition,\n    virtualScrollHeaderPos,\n    scrollbarWidth,\n    setData,\n    refreshTable,\n    setTableElmWidth,\n    emitScrollEvent,\n    updateThWidthListHandler,\n    updateColumnFixedShadow,\n    setUseFixedTableElmRef,\n    getThWidthList,\n    updateThWidthList,\n    addTableResizeObserver,\n    updateTableAfterColumnResize,\n  };\n}\n"],"names":["getColumnFixedStyles","col","index","rowAndColFixedPosition","tableColFixedClasses","fixedPos","get","colKey","thClasses","_defineProperty","left","fixed","right","lastLeft","lastLeftFixedCol","firstRight","firstRightFixedCol","thStyles","concat","style","classes","getRowFixedStyles","rowId","rowIndex","rowLength","fixedRows","tableRowFixedClasses","virtualTranslateY","length","fixedTop","fixedBottom","firstFixedBottomRow","rowClasses","top","bottom","firstBottom","withoutBorderBottom","rowStyles","useFixed","props","finalColumns","affixRef","_props$scroll2","columns","tableLayout","tableContentWidth","firstFullRow","lastFullRow","maxHeight","headerAffixedTop","bordered","preFinalColumns","usePrevious","_useState","useState","_useState2","_slicedToArray","data","setData","tableContentRef","useRef","_useState3","_useState4","isFixedHeader","setIsFixedHeader","_useState5","_useState6","isWidthOverflow","setIsWidthOverflow","tableElmRef","_useState7","_useState8","scrollbarWidth","setScrollbarWidth","_useState9","Map","_useState0","setRowAndColFixedPosition","_useState1","_useState10","showColumnShadow","setShowColumnShadow","_useState11","_useState12","virtualScrollHeaderPos","setVirtualScrollHeaderPos","tableWidth","tableElmWidth","thWidthList","_useState13","_useState14","isFixedColumn","setIsFixedColumn","_useState15","_useState16","isFixedRightColumn","setIsFixedRightColumn","_useState17","_useState18","isFixedLeftColumn","setIsFixedLeftColumn","columnResizable","resizable","notNeedThWidthList","useMemo","_props$scroll","footerAffixedBottom","horizontalScrollAffixedBottom","scroll","type","setUseFixedTableElmRef","val","current","getColumnMap","map","arguments","undefined","levelNodes","level","parent","i","len","_col$children","includes","key","columnInfo","set","children","push","newColumnsMap","setFixedLeftPos","initialColumnMap","_col$children2","colInfo","lastColIndex","lastCol","defaultWidth","lastColInfo","width","setFixedRightPos","_col$children3","setFixedColPosition","trList","thList","j","thLen","_obj$col","th","dataset","colkey","log","warn","innerText","obj","_th$getBoundingClient","_objectSpread","getBoundingClientRect","call","setFixedRowPosition","thead","tfoot","_ref","_ref2","fixedTopRows","fixedBottomRows","_props$rowKey","rowKey","_tr$getBoundingClient","tr","thisRowInfo","lastRowId","lastRowInfo","defaultBottom","_thead$getBoundingCli","height","_tr$getBoundingClient2","_tfoot$getBoundingCli","updateRowAndColFixedPosition","tableContentElm","clear","querySelector","tbody","shadowLastScrollLeft","updateColumnFixedShadow","target","extra","scrollLeft","skipScrollLimit","isShowRight","clientWidth","scrollWidth","isShowLeft","setIsLastOrFirstFixedCol","t","nodes","colMapInfo","nextColMapInfo","isParentLastLeftFixedCol","lastColMapInfo","isParentFirstRightFixedCol","updateFixedStatus","_getColumnMap","timer","setTimeout","clearTimeout","updateFixedHeader","useCallback","_tRef$getBoundingClie","tRef","isHeightOverflow","scrollHeight","clientHeight","pos","setTableElmWidth","updateTableWidth","_tableContentRef$curr","_tableContentRef$curr2","_tableElmRef$current","rect","reduceWidth","elmRect","updateAffixPosition","_affixRef$paginationA","_affixRef$paginationA2","_affixRef$horizontalS","_affixRef$horizontalS2","_affixRef$headerTopAf","_affixRef$headerTopAf2","_affixRef$footerBotto","_affixRef$footerBotto2","paginationAffixRef","handleScroll","horizontalScrollAffixRef","headerTopAffixRef","footerBottomAffixRef","calculateThWidthList","widthMap","updateThWidthList","HTMLCollection","Object","entries","forEach","_ref3","_ref4","updateThWidthListHandler","_tableContentRef$curr3","emitScrollEvent","e","_props$onScrollX","_props$onScrollY","_props$onScroll","onScrollX","onScrollY","onScroll","getThWidthList","_tableContentRef$curr4","updateTableElmWidthOnColumnChange","finalColKeys","preColKeys","reduceKeys","xorWith","rootThWidthList","pick","values","oldTotalWidth","reduce","r","n","contentWidth","widthToReserve","Math","max","useEffect","updateFixedHeaderByUseDebounce","useDebounce","resizeObserverElement","refreshTable","onResize","addTableResizeObserver","tableElement","isLessThanIE11OrNotHaveResizeObserver","off","window","getScrollbarWidthWithCSS","isWatchResize","hasWindow","hasResizeObserver","ResizeObserver","getIEVersion","on","updateTableAfterColumnResize"],"mappings":"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"}