{"version":3,"file":"useColumnResize.js","sources":["../../../../components/table/hooks/useColumnResize.tsx"],"sourcesContent":["/**\n * important info: only resize happened, th width calculating allowed\n * 验证场景：多级表头调整叶子结点列宽、吸顶表头调整列宽、列数量发生变化、表格未超出、表格已超出\n * - 固定列，调整列宽，需要更新固定位置；右侧固定列，调整列宽，需特殊处理\n * - 当表格内容没有超出时，即没有出现横向滚动条时，此时认为表格有足够的列宽呈现内容，修改宽度为相邻宽度调整\n * - 当表格内容超出，出现横向滚动条时，会自动调整当前列宽和表格总列宽，不影响相邻列宽\n */\nimport React, { useState, useRef, MutableRefObject, CSSProperties, useEffect } from 'react';\nimport { isNumber } from 'lodash-es';\nimport { BaseTableCol, TableRowData, TdBaseTableProps } from '../type';\nimport { off, on } from '../../_util/listener';\n\nconst DEFAULT_MIN_WIDTH = 80;\nconst DEFAULT_MAX_WIDTH = 600;\n// 当离右边框的距离不超过 8 时，显示拖拽图标\nconst distance = 8;\n// 鼠标右键 event.button = 2\nconst CONTEXTMENU = 2;\n\nlet originalSelectStart: (this: GlobalEventHandlers, ev: Event) => any;\nlet originalDragStart: (this: GlobalEventHandlers, ev: Event) => any;\n\nexport default function useColumnResize(params: {\n  isWidthOverflow: boolean;\n  tableContentRef: MutableRefObject<HTMLDivElement>;\n  showColumnShadow: {\n    left: boolean;\n    right: boolean;\n  };\n  getThWidthList: (type?: 'default' | 'calculate') => { [colKeys: string]: number };\n  updateThWidthList: (data: { [colKeys: string]: number }) => void;\n  setTableElmWidth: (width: number) => void;\n  updateTableAfterColumnResize: () => void;\n  onColumnResizeChange: TdBaseTableProps['onColumnResizeChange'];\n}) {\n  const {\n    isWidthOverflow,\n    tableContentRef,\n    showColumnShadow,\n    getThWidthList,\n    updateThWidthList,\n    setTableElmWidth,\n    updateTableAfterColumnResize,\n    onColumnResizeChange,\n  } = params;\n\n  const resizeLineRef = useRef<HTMLDivElement>(null);\n  const effectColMap = useRef<{ [colKey: string]: any }>({});\n  const [leafColumns, setLeafColumns] = useState([]);\n\n  useEffect(() => {\n    const hasDocument = typeof document !== 'undefined';\n    originalSelectStart = hasDocument ? document.onselectstart : null;\n    originalDragStart = hasDocument ? document.ondragstart : null;\n  }, []);\n\n  const getSiblingResizableCol = (nodes: BaseTableCol<TableRowData>[], index: number, type: 'prev' | 'next') => {\n    let i = index;\n    while (nodes[i] && nodes[i].resizable === false) {\n      if (type === 'next') {\n        i += 1;\n      } else {\n        i -= 1;\n      }\n    }\n    return nodes[i];\n  };\n\n  // 递归查找列宽度变化后，受影响的相关列\n  const setEffectColMap = (nodes: BaseTableCol<TableRowData>[], parent: BaseTableCol<TableRowData> | null) => {\n    if (!nodes) return;\n    setLeafColumns(nodes);\n    nodes.forEach((n, index) => {\n      const prevNode = getSiblingResizableCol(nodes, index - 1, 'prev');\n      const nextNode = getSiblingResizableCol(nodes, index + 1, 'next');\n      const parentPrevCol = parent ? effectColMap.current[parent.colKey].prev : nextNode;\n      const parentNextCol = parent ? effectColMap.current[parent.colKey].next : prevNode;\n      const prev = index === 0 ? parentPrevCol : prevNode;\n      const next = index === nodes.length - 1 ? parentNextCol : nextNode;\n      effectColMap.current[n.colKey] = {\n        prev,\n        next,\n        current: {\n          prevSibling: getSiblingResizableCol(nodes, index - 1, 'prev'),\n          nextSibling: getSiblingResizableCol(nodes, index + 1, 'next'),\n        },\n      };\n      setEffectColMap(n.children, n);\n    });\n  };\n\n  const resizeLineParams = {\n    isDragging: false,\n    draggingCol: null as HTMLElement,\n    draggingStart: 0,\n    // 列宽调整类型：影响右侧列宽度、影响左侧列宽度、或者仅影响自身\n    effectCol: 'next' as 'next' | 'prev',\n    resizeLineStyle: {} as CSSProperties,\n  };\n\n  const [resizeLineStyle, setResizeLineStyle] = useState<CSSProperties>({\n    display: 'none',\n    left: '10px',\n    height: '10px',\n    bottom: '0',\n  });\n\n  // 当前列是否配置右侧固定并且处于固定激活状态\n  const isColRightFixActive = (col: BaseTableCol<TableRowData>) => col.fixed === 'right' && showColumnShadow.right;\n\n  // 表格列宽拖拽事件\n  // 只在表头显示拖拽图标\n  const onColumnMouseover = (\n    e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>,\n    col: BaseTableCol<TableRowData>,\n  ) => {\n    // 当前列是否可以拖拽宽度，因为外层有判断props.resizable，所以这里只需要确定col.resizable\n    const colResizable = col.resizable ?? true;\n    // calculate mouse cursor before drag start\n    if (!resizeLineRef.current || resizeLineParams.isDragging || !e.target) return;\n    const target = (e.target as HTMLElement).closest('th');\n    if (!target) return;\n    // 判断是否为叶子阶段，仅叶子结点允许拖拽\n    const colKey = target.getAttribute('data-colkey');\n    if (!leafColumns.find((t) => t.colKey === colKey)) return;\n    const targetBoundRect = target.getBoundingClientRect();\n    const thRightCursor = targetBoundRect.right - e.pageX <= distance;\n    const thLeftCursor = e.pageX - targetBoundRect.left <= distance;\n    const isFixedToRight = isColRightFixActive(col);\n\n    // 在单元格分割线的右侧\n    if (thRightCursor || isFixedToRight) {\n      if (colResizable) {\n        target.style.cursor = thRightCursor || (isFixedToRight && thLeftCursor) ? 'col-resize' : '';\n        const isCurrent = (thRightCursor && !isFixedToRight) || (isFixedToRight && thLeftCursor);\n        resizeLineParams.draggingCol = isCurrent ? target : (target.nextElementSibling as HTMLElement);\n        resizeLineParams.effectCol = 'next';\n        return;\n      }\n    } // 在单元格分割线的左侧操作\n    else if (thLeftCursor) {\n      const prevEl = target.previousElementSibling;\n      if (prevEl && colResizable) {\n        target.style.cursor = 'col-resize';\n        resizeLineParams.draggingCol = prevEl as HTMLElement;\n        resizeLineParams.effectCol = 'prev';\n        return;\n      }\n    }\n    // 重置记录值\n    target.style.cursor = '';\n    resizeLineParams.draggingCol = null;\n    resizeLineParams.effectCol = null;\n  };\n\n  const getMinMaxColWidth = (targetCol: BaseTableCol<TableRowData>) => {\n    const propMinWidth = isNumber(targetCol?.minWidth) ? targetCol.minWidth : parseInt(targetCol?.minWidth || '0', 10);\n    return {\n      minColWidth: Math.max(targetCol?.resize?.minWidth || DEFAULT_MIN_WIDTH, propMinWidth),\n      maxColWidth: targetCol?.resize?.maxWidth || DEFAULT_MAX_WIDTH,\n    };\n  };\n\n  const getNormalResizeInfo = (\n    col: BaseTableCol,\n    effectPrevCol: BaseTableCol,\n    targetBoundRect: DOMRect,\n    tableBoundRect: DOMRect,\n  ) => {\n    const resizeLinePos = targetBoundRect.right - tableBoundRect.left;\n    const colLeft = targetBoundRect.left - tableBoundRect.left;\n    const targetCol = resizeLineParams.effectCol === 'next' ? col : effectPrevCol;\n    const { minColWidth, maxColWidth } = getMinMaxColWidth(targetCol);\n    return {\n      resizeLinePos,\n      minResizeLineLeft: colLeft + minColWidth,\n      maxResizeLineLeft: colLeft + maxColWidth,\n    };\n  };\n\n  const getFixedToRightResizeInfo = (\n    target: HTMLElement,\n    col: BaseTableCol,\n    effectPrevCol: BaseTableCol,\n    targetBoundRect: DOMRect,\n    tableBoundRect: DOMRect,\n  ) => {\n    const resizeLinePos = targetBoundRect.left - tableBoundRect.left;\n    const targetCol = target.dataset.colkey === col.colKey ? col : effectPrevCol;\n    const colLeft = targetBoundRect.left - tableBoundRect.left;\n    const { minColWidth, maxColWidth } = getMinMaxColWidth(targetCol);\n    return {\n      resizeLinePos,\n      minResizeLineLeft: colLeft + (targetBoundRect.width - maxColWidth),\n      maxResizeLineLeft: colLeft + (targetBoundRect.width - minColWidth),\n    };\n  };\n\n  const getTotalTableWidth = (thWidthList: { [key: string]: number }): number => {\n    let tableWidth = 0;\n    leafColumns.forEach((col) => {\n      tableWidth += thWidthList[col.colKey];\n    });\n    return tableWidth;\n  };\n\n  const getSiblingColCanResizable = (\n    newThWidthList: { [key: string]: number },\n    effectNextCol: BaseTableCol,\n    distance: number,\n    index: number,\n  ) => {\n    let isWidthAbnormal = true;\n    if (effectNextCol) {\n      const { minColWidth, maxColWidth } = getMinMaxColWidth(effectNextCol);\n      const targetNextColWidth = newThWidthList[effectNextCol.colKey] + distance;\n      isWidthAbnormal = targetNextColWidth < minColWidth || targetNextColWidth > maxColWidth;\n    }\n    return !(isWidthAbnormal || isWidthOverflow || index === leafColumns.length - 1);\n  };\n\n  // 调整表格列宽\n  const onColumnMousedown = (\n    e: React.MouseEvent<HTMLTableHeaderCellElement, MouseEvent>,\n    col: BaseTableCol<TableRowData>,\n    index: number,\n  ) => {\n    if (e.button === CONTEXTMENU || !resizeLineParams.draggingCol) return;\n    const target = resizeLineParams.draggingCol;\n    const targetBoundRect = target.getBoundingClientRect();\n    const tableBoundRect = tableContentRef.current?.getBoundingClientRect();\n    const effectNextCol = effectColMap.current[col.colKey]?.next;\n    const effectPrevCol = effectColMap.current[col.colKey]?.prev;\n    const { resizeLinePos, minResizeLineLeft, maxResizeLineLeft } = isColRightFixActive(col)\n      ? getFixedToRightResizeInfo(target, col, effectNextCol, targetBoundRect, tableBoundRect)\n      : getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect);\n\n    // 开始拖拽，记录下鼠标起始位置\n    resizeLineParams.isDragging = true;\n    resizeLineParams.draggingStart = e.pageX || 0;\n\n    // 初始化 resizeLine 标记线\n    if (resizeLineRef?.current) {\n      const styles: CSSProperties = { ...resizeLineStyle };\n      styles.display = 'block';\n      styles.height = `${tableBoundRect.bottom - targetBoundRect.top}px`;\n      styles.left = `${resizeLinePos}px`;\n      const parent = tableContentRef.current.parentElement.getBoundingClientRect();\n      styles.bottom = `${parent.bottom - tableBoundRect.bottom}px`;\n      setResizeLineStyle(styles);\n      resizeLineParams.resizeLineStyle = styles;\n    }\n\n    const onDragOver: EventListener = (e: MouseEvent) => {\n      if (resizeLineParams.isDragging) {\n        const left = resizeLinePos + e.x - resizeLineParams.draggingStart;\n        const styles = {\n          ...resizeLineParams.resizeLineStyle,\n          left: `${Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft)}px`,\n        };\n        resizeLineParams.resizeLineStyle = styles;\n        setResizeLineStyle(styles);\n      }\n    };\n\n    // 拖拽时鼠标可能会超出 table 范围，需要给 document 绑定拖拽相关事件\n    const onDragEnd = () => {\n      if (!resizeLineParams.isDragging) return;\n      const moveDistance = resizeLinePos - (parseFloat(String(resizeLineParams.resizeLineStyle?.left || '')) || 0);\n      /**\n       * 计算列宽\n       *  - 若表格宽度已经超出，存在横向滚动，则直接改变当前列宽，也意味着改变表格总宽度\n       *  - 操作边框右侧，改变当前列和上一列；若上一列禁用宽度调整，则改变上一列的上一列，依次往前寻找\n       *  - 操作边框左侧，改变当前列和下一列；若下一列禁用宽度调整，则改变下一列的下一列，依次往后寻找\n       */\n      const thWidthList = getThWidthList('calculate');\n      const currentCol = effectColMap.current[col.colKey]?.current;\n      const currentSibling = resizeLineParams.effectCol === 'next' ? currentCol.prevSibling : currentCol.nextSibling;\n      // 多行表头，列宽为最后一层的宽度，即叶子结点宽度\n      const newThWidthList = { ...thWidthList };\n      const initTableElmWidth = getTotalTableWidth(newThWidthList);\n      // 当前列不允许修改宽度，就调整相邻列的宽度\n      const tmpCurrentCol = col.resizable !== false ? col : currentSibling;\n      // 是否允许调整相邻列宽：列宽未超出时，且并非是最后一列（最后一列的右侧拉伸会认为是表格整体宽度调整）\n      const rightCol = resizeLineParams.effectCol === 'next' ? currentCol.nextSibling : col;\n      const canResizeSiblingColWidth = getSiblingColCanResizable(newThWidthList, rightCol, moveDistance, index);\n\n      if (resizeLineParams.effectCol === 'next') {\n        // 右侧激活态的固定列，需特殊调整\n        if (isColRightFixActive(col)) {\n          // 如果不相同，则表示改变相临的右侧列宽\n          if (target.dataset.colkey !== col.colKey) {\n            newThWidthList[effectNextCol.colKey] += moveDistance;\n          } else {\n            newThWidthList[tmpCurrentCol.colKey] += moveDistance;\n          }\n        } else {\n          // 非右侧激活态的固定列\n          newThWidthList[tmpCurrentCol.colKey] -= moveDistance;\n          if (canResizeSiblingColWidth) {\n            newThWidthList[effectNextCol.colKey] += moveDistance;\n          }\n        }\n      } else if (resizeLineParams.effectCol === 'prev') {\n        if (canResizeSiblingColWidth) {\n          newThWidthList[tmpCurrentCol.colKey] += moveDistance;\n        }\n        effectPrevCol && (newThWidthList[effectPrevCol.colKey] -= moveDistance);\n      }\n\n      updateThWidthList(newThWidthList);\n      const tableWidth = getTotalTableWidth(newThWidthList);\n      // 整个表格只有一列可以调整的场景\n      if (!effectNextCol?.colKey) setTableElmWidth(Math.max(initTableElmWidth, Math.round(tableWidth)));\n      else setTableElmWidth(Math.round(tableWidth));\n      updateTableAfterColumnResize();\n\n      // 恢复设置\n      resizeLineParams.isDragging = false;\n      resizeLineParams.draggingCol = null;\n      resizeLineParams.effectCol = null;\n      resizeLineParams.resizeLineStyle = null;\n      target.style.cursor = '';\n      setResizeLineStyle({\n        ...resizeLineStyle,\n        display: 'none',\n        left: undefined,\n      });\n      off(document, 'mouseup', onDragEnd);\n      off(document, 'mousemove', onDragOver);\n      document.onselectstart = originalSelectStart;\n      document.ondragstart = originalDragStart;\n      onColumnResizeChange?.({ columnsWidth: newThWidthList });\n    };\n\n    on(document, 'mouseup', onDragEnd);\n    on(document, 'mousemove', onDragOver);\n\n    // 禁用鼠标的选中文字和拖放\n    document.onselectstart = () => false;\n    document.ondragstart = () => false;\n  };\n\n  /**\n   * 对外暴露函数：更新列数量减少时的表格宽度\n   * @params colKeys 减少的列\n   */\n  const updateTableWidthOnColumnChange = (colKeys: string[]) => {\n    const thWidthList = getThWidthList('calculate');\n    let reduceWidth = 0;\n    colKeys.forEach((key) => {\n      reduceWidth += thWidthList[key] || 0;\n    });\n    const oldTotalWidth = Object.values(thWidthList).reduce((r = 0, n) => r + n);\n    setTableElmWidth(oldTotalWidth - reduceWidth);\n  };\n\n  return {\n    resizeLineRef,\n    resizeLineStyle,\n    onColumnMouseover,\n    onColumnMousedown,\n    setEffectColMap,\n    updateTableWidthOnColumnChange,\n  };\n}\n"],"names":["DEFAULT_MIN_WIDTH","DEFAULT_MAX_WIDTH","distance","CONTEXTMENU","originalSelectStart","originalDragStart","useColumnResize","params","isWidthOverflow","tableContentRef","showColumnShadow","getThWidthList","updateThWidthList","setTableElmWidth","updateTableAfterColumnResize","onColumnResizeChange","resizeLineRef","useRef","effectColMap","_useState","useState","_useState2","_slicedToArray","leafColumns","setLeafColumns","useEffect","hasDocument","document","onselectstart","ondragstart","getSiblingResizableCol","nodes","index","type","i","resizable","setEffectColMap","parent","forEach","n","prevNode","nextNode","parentPrevCol","current","colKey","prev","parentNextCol","next","length","prevSibling","nextSibling","children","resizeLineParams","isDragging","draggingCol","draggingStart","effectCol","resizeLineStyle","_useState3","display","left","height","bottom","_useState4","setResizeLineStyle","isColRightFixActive","col","fixed","right","onColumnMouseover","e","_col$resizable","colResizable","target","closest","getAttribute","find","t","targetBoundRect","getBoundingClientRect","thRightCursor","pageX","thLeftCursor","isFixedToRight","style","cursor","isCurrent","nextElementSibling","prevEl","previousElementSibling","getMinMaxColWidth","targetCol","_targetCol$resize","_targetCol$resize2","propMinWidth","isNumber","minWidth","parseInt","minColWidth","Math","max","resize","maxColWidth","maxWidth","getNormalResizeInfo","effectPrevCol","tableBoundRect","resizeLinePos","colLeft","_getMinMaxColWidth","minResizeLineLeft","maxResizeLineLeft","getFixedToRightResizeInfo","dataset","colkey","_getMinMaxColWidth2","width","getTotalTableWidth","thWidthList","tableWidth","getSiblingColCanResizable","newThWidthList","effectNextCol","isWidthAbnormal","_getMinMaxColWidth3","targetNextColWidth","onColumnMousedown","_tableContentRef$curr","_effectColMap$current","_effectColMap$current2","button","_ref","styles","_objectSpread","concat","top","parentElement","onDragOver","x","min","onDragEnd","_resizeLineParams$res","_effectColMap$current3","moveDistance","parseFloat","String","currentCol","currentSibling","initTableElmWidth","tmpCurrentCol","rightCol","canResizeSiblingColWidth","round","off","columnsWidth","on","updateTableWidthOnColumnChange","colKeys","reduceWidth","key","oldTotalWidth","Object","values","reduce","r","arguments","undefined"],"mappings":"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"}