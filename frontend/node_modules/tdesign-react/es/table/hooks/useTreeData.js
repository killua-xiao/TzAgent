/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-87d110df.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import classNames from 'classnames';
import { get } from 'lodash-es';
import React, { useState, useMemo, useEffect } from 'react';
import { AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-react';
import { T as TableTreeStore, u as useTreeDataExpand } from '../../_chunks/dep-6d4b61ed.js';
import { parseContentTNode } from '../../_util/parseTNode.js';
import useGlobalIcon from '../../hooks/useGlobalIcon.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import { renderCell } from '../Cell.js';
import useClassName from './useClassName.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import '../../_chunks/dep-83726008.js';
import '../../_chunks/dep-d1ed7cad.js';
import '../../_chunks/dep-f53c91cd.js';
import '../../_chunks/dep-b908e1fe.js';
import '../../hooks/useControlled.js';
import '../../_util/noop.js';
import '../../hooks/usePrevious.js';
import '../../hooks/useConfig.js';
import '../../config-provider/ConfigContext.js';
import '../../locale/zh_CN.js';
import '../../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../../_chunks/dep-3c9ab31a.js';
import '../../config-provider/index.js';
import '../../config-provider/ConfigProvider.js';
import '../../config-provider/type.js';
import '../Ellipsis.js';
import '../../_util/scroll.js';
import 'raf';
import '../../_chunks/dep-3a09424a.js';
import '../../_util/easing.js';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../_chunks/dep-6b660ef0.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import '../../_util/ref.js';
import 'react-is';
import '../../_util/isFragment.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../hooks/useLayoutEffect.js';
import '../../hooks/useAnimation.js';
import '../../hooks/useAttach.js';
import '../../hooks/useDefaultProps.js';
import '../../hooks/useMutationObserver.js';
import '../../hooks/useLatest.js';
import '../../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../../hooks/useWindowSize.js';
import '../../popup/defaultProps.js';
import '../../popup/hooks/useTrigger.js';
import '../../_util/composeRefs.js';
import '../../_util/listener.js';
import '../../popup/utils/transition.js';
import '../../popup/PopupPlugin.js';
import '../../_chunks/dep-a74cc5e4.js';
import '../../_util/react-render.js';
import '../../common/PluginContainer.js';
import '../../popup/style/css.js';
import '../../popup/type.js';
import '../../tooltip/defaultProps.js';
import '../../tooltip/TooltipLite.js';
import '../../hooks/useSwitch.js';
import '../../hooks/usePersistFn.js';
import '../../tooltip/style/css.js';
import '../../tooltip/type.js';
import '../../hooks/useDebounce.js';
import './useFixed.js';
import '../../_chunks/dep-1630b9b4.js';
import '../../_chunks/dep-a3bde62f.js';
import '../utils.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useTreeData(props) {
  var _props$tree;
  var data = props.data,
    columns = props.columns,
    tree = props.tree,
    rowKey = props.rowKey,
    treeExpandAndFoldIcon = props.treeExpandAndFoldIcon,
    expandedTreeNodes = props.expandedTreeNodes;
  var _useState = useState(function () {
      return new TableTreeStore();
    }),
    _useState2 = _slicedToArray(_useState, 1),
    store = _useState2[0];
  var _useState3 = useState(function () {
      return getTreeNodeColumnCol();
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    treeNodeCol = _useState4[0],
    setTreeNodeCol = _useState4[1];
  var _useState5 = useState(data || []),
    _useState6 = _slicedToArray(_useState5, 2),
    dataSource = _useState6[0],
    setDataSource = _useState6[1];
  var _useClassName = useClassName(),
    tableTreeClasses = _useClassName.tableTreeClasses;
  var _useLocaleReceiver = useLocaleReceiver("table"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    locale = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var _useGlobalIcon = useGlobalIcon({
      AddRectangleIcon: AddRectangleIcon,
      MinusRectangleIcon: MinusRectangleIcon
    }),
    AddRectangleIcon$1 = _useGlobalIcon.AddRectangleIcon,
    MinusRectangleIcon$1 = _useGlobalIcon.MinusRectangleIcon;
  var rowDataKeys = useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  var _useTreeDataExpand = useTreeDataExpand(props, {
      store: store,
      dataSource: dataSource,
      rowDataKeys: rowDataKeys,
      setDataSource: setDataSource
    }),
    expandAll = _useTreeDataExpand.expandAll,
    foldAll = _useTreeDataExpand.foldAll,
    updateExpandOnDataChange = _useTreeDataExpand.updateExpandOnDataChange,
    onExpandFoldIconClick = _useTreeDataExpand.onExpandFoldIconClick;
  var checkedColumn = useMemo(function () {
    return columns.find(function (col) {
      return col.colKey === "row-select";
    });
  }, [columns]);
  useEffect(function () {
    if (!store || !checkedColumn) return;
    var rowValue = get(dataSource[0], rowDataKeys.rowKey);
    if (!store.treeDataMap.get(rowValue)) return;
    store.updateDisabledState(dataSource, checkedColumn, rowDataKeys);
  }, [checkedColumn]);
  useEffect(function () {
    if (!data || !store) return;
    if (tree) {
      resetData(data);
    } else {
      setDataSource(data);
    }
  }, [data, expandedTreeNodes]);
  useEffect(function () {
    var treeNodeColTmp = getTreeNodeColumnCol();
    setTreeNodeCol(treeNodeColTmp);
  }, [columns, (_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.treeNodeColumnIndex]);
  function resetData(data2) {
    var columns2 = props.columns;
    store.initialTreeStore(data2, columns2, rowDataKeys);
    updateExpandOnDataChange(_toConsumableArray(data2));
  }
  function getTreeNodeStyle(level) {
    var _props$tree2, _props$tree3;
    if (level === void 0) return;
    var indent = ((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.indent) === void 0 ? 24 : (_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent;
    return indent ? {
      paddingLeft: "".concat(level * indent || 1, "px")
    } : {};
  }
  function toggleExpandData(p, trigger) {
    var _props$onTreeExpandCh, _store$treeDataMap;
    var currentData = _objectSpread({}, p);
    if (p.row.__VIRTUAL_SCROLL_INDEX !== void 0) {
      currentData.rowIndex = p.row.__VIRTUAL_SCROLL_INDEX;
    }
    var newData = store.toggleExpandData(currentData, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));
    var rowValue = get(p.row, rowDataKeys.rowKey);
    (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 || _props$onTreeExpandCh.call(props, {
      row: p.row,
      rowIndex: p.rowIndex,
      rowState: store === null || store === void 0 || (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue),
      trigger: trigger
    });
  }
  function getTreeNodeColumnCol() {
    var _props$tree4;
    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.treeNodeColumnIndex) || 0;
    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;
      treeNodeColumnIndex += 1;
    }
    return columns2[treeNodeColumnIndex];
  }
  function formatTreeColumn(col) {
    if (!col || !treeNodeCol || !store) return {};
    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;
    var newCol = _objectSpread({}, treeNodeCol);
    newCol.cell = function (p) {
      var cellInfo = renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol)
      }), {
        cellEmptyContent: props.cellEmptyContent
      });
      var currentState = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
      var classes = _defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);
      var childrenNodes = get(p.row, rowDataKeys.childrenKey);
      if (Array.isArray(childrenNodes) && childrenNodes.length > 0 || childrenNodes === true) {
        var _store$treeDataMap$ge;
        var expanded = (_store$treeDataMap$ge = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey))) === null || _store$treeDataMap$ge === void 0 ? void 0 : _store$treeDataMap$ge.expanded;
        var type = expanded ? "fold" : "expand";
        var defaultIconNode = t(locale.treeExpandAndFoldIcon, {
          type: type
        }) || (expanded ? /* @__PURE__ */React.createElement(MinusRectangleIcon$1, null) : /* @__PURE__ */React.createElement(AddRectangleIcon$1, null));
        var iconNode = treeExpandAndFoldIcon ? parseContentTNode(treeExpandAndFoldIcon, _objectSpread({
          type: type
        }, p)) : defaultIconNode;
        return /* @__PURE__ */React.createElement("div", {
          className: classNames([tableTreeClasses.col, classes]),
          style: colStyle
        }, !!(childrenNodes.length || childrenNodes === true) && /* @__PURE__ */React.createElement("span", {
          className: tableTreeClasses.icon,
          onClick: function onClick(e) {
            onExpandFoldIconClick(p, "expand-fold-icon");
            e.stopPropagation();
          }
        }, iconNode), cellInfo);
      }
      return /* @__PURE__ */React.createElement("div", {
        style: colStyle,
        className: classNames([classes, tableTreeClasses.leafNode])
      }, /* @__PURE__ */React.createElement("span", {
        className: tableTreeClasses.icon
      }), cellInfo);
    };
    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (p) {
        return renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol)
        }));
      };
    }
    return newCol;
  }
  function setData(key, newRowData) {
    var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);
    var newData = _toConsumableArray(dataSource);
    newData[rowIndex] = newRowData;
    setDataSource(_toConsumableArray(newData));
  }
  function getData(key) {
    return store.getData(key);
  }
  function remove(key) {
    var newData = store.remove(key, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));
  }
  function removeChildren(key) {
    var newData = store.removeChildren(key, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));
  }
  function appendTo(key, newData) {
    if (!key) {
      setDataSource(_toConsumableArray(store.appendToRoot(newData, dataSource, rowDataKeys)));
      return;
    }
    setDataSource(_toConsumableArray(store.appendTo(key, newData, dataSource, rowDataKeys)));
  }
  function insertAfter(rowValue, newData) {
    setDataSource(_toConsumableArray(store.insertAfter(rowValue, newData, dataSource, rowDataKeys)));
  }
  function insertBefore(rowValue, newData) {
    setDataSource(_toConsumableArray(store.insertBefore(rowValue, newData, dataSource, rowDataKeys)));
  }
  function swapData(params) {
    var r = store.swapData(params.data, params, rowDataKeys);
    if (r.result) {
      setDataSource(_toConsumableArray(r.dataSource));
    } else {
      var _props$onAbnormalDrag;
      var params2 = {
        code: r.code,
        reason: r.reason
      };
      (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 || _props$onAbnormalDrag.call(props, params2);
    }
  }
  function getTreeNode() {
    return store.getTreeNode(dataSource, rowDataKeys);
  }
  function getTreeExpandedRow() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
    return store.getTreeExpandedRow(dataSource, rowDataKeys, type);
  }
  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    swapData: swapData,
    setData: setData,
    getData: getData,
    remove: remove,
    removeChildren: removeChildren,
    appendTo: appendTo,
    insertAfter: insertAfter,
    insertBefore: insertBefore,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData,
    expandAll: expandAll,
    foldAll: foldAll,
    getTreeNode: getTreeNode,
    resetData: resetData,
    getTreeExpandedRow: getTreeExpandedRow,
    onExpandFoldIconClick: onExpandFoldIconClick
  };
}

export { useTreeData as default };
//# sourceMappingURL=useTreeData.js.map
