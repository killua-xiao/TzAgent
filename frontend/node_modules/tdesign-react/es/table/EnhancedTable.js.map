{"version":3,"file":"EnhancedTable.js","sources":["../../../components/table/EnhancedTable.tsx"],"sourcesContent":["import React, { RefAttributes, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { get } from 'lodash-es';\nimport PrimaryTable from './PrimaryTable';\nimport { PrimaryTableCol, TableRowData, DragSortContext, TdPrimaryTableProps } from './type';\nimport useTreeData from './hooks/useTreeData';\nimport useTreeSelect from './hooks/useTreeSelect';\nimport { EnhancedTableProps, EnhancedTableRef, PrimaryTableProps } from './interface';\nimport useConfig from '../hooks/useConfig';\n\nimport { StyledProps } from '../common';\n\nexport interface TEnhancedTableProps extends EnhancedTableProps, StyledProps {}\n\nconst EnhancedTable = forwardRef<EnhancedTableRef, TEnhancedTableProps>((props, ref) => {\n  const { tree, columns, style, className } = props;\n  const { classPrefix } = useConfig();\n  const primaryTableRef = useRef<EnhancedTableRef>(null);\n\n  // treeInstanceFunctions 属于对外暴露的 Ref 方法\n  const { store, dataSource, formatTreeColumn, swapData, onExpandFoldIconClick, ...treeInstanceFunctions } =\n    useTreeData(props);\n\n  const treeDataMap = store?.treeDataMap;\n\n  const { tIndeterminateSelectedRowKeys, onInnerSelectChange } = useTreeSelect(props, treeDataMap);\n\n  // 影响列和单元格内容的因素有：树形节点需要添加操作符 [+] [-]\n  const getColumns = (columns: PrimaryTableCol<TableRowData>[]) => {\n    const arr: PrimaryTableCol<TableRowData>[] = [];\n    for (let i = 0, len = columns.length; i < len; i++) {\n      let item = { ...columns[i] };\n      item = formatTreeColumn(item);\n      if (item.children?.length) {\n        item.children = getColumns(item.children);\n      }\n      // 多级表头和自定义列配置特殊逻辑：要么子节点不存在，要么子节点长度大于 1，方便做自定义列配置\n      if (!item.children || item.children?.length) {\n        arr.push(item);\n      }\n    }\n    return arr;\n  };\n\n  const tColumns = (() => {\n    // 暂时只有树形结构需要处理 column.cell\n    const isTreeData = !tree || !Object.keys(tree).length;\n    return isTreeData ? columns : getColumns(columns);\n  })();\n\n  const onEnhancedTableRowClick: TdPrimaryTableProps['onRowClick'] = (p) => {\n    if (props.tree?.expandTreeNodeOnClick) {\n      onExpandFoldIconClick(\n        {\n          row: p.row,\n          rowIndex: p.index,\n        },\n        'row-click',\n      );\n    }\n    props.onRowClick?.(p);\n  };\n\n  useImperativeHandle(ref, () => ({\n    treeDataMap,\n    ...treeInstanceFunctions,\n    ...primaryTableRef.current,\n  }));\n\n  const onDragSortChange = (params: DragSortContext<TableRowData>) => {\n    if (props.beforeDragSort && !props.beforeDragSort(params)) return;\n    swapData({\n      data: params.data,\n      current: params.current,\n      target: params.target,\n      currentIndex: params.currentIndex,\n      targetIndex: params.targetIndex,\n    });\n    props.onDragSort?.(params);\n  };\n\n  const primaryTableProps: PrimaryTableProps = {\n    ...props,\n    data: dataSource,\n    columns: tColumns,\n    // 半选状态节点\n    indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys,\n    // 树形结构不允许本地数据分页\n    disableDataPage: Boolean(tree && Object.keys(tree).length),\n    onSelectChange: onInnerSelectChange,\n    onDragSort: onDragSortChange,\n    rowClassName: ({ row }) => {\n      const rowValue = get(row, props.rowKey || 'id');\n      const rowState = treeDataMap.get(rowValue);\n      if (!rowState) return [props.rowClassName];\n      return [`${classPrefix}-table-tr--level-${rowState.level}`, props.rowClassName];\n    },\n    style,\n    className,\n  };\n  if (props.tree?.expandTreeNodeOnClick) {\n    primaryTableProps.onRowClick = onEnhancedTableRowClick;\n  }\n  return <PrimaryTable {...primaryTableProps} ref={primaryTableRef} />;\n});\n\nEnhancedTable.displayName = 'EnhancedTable';\n\nexport default EnhancedTable as <T extends TableRowData = TableRowData>(\n  props: EnhancedTableProps<T> & RefAttributes<EnhancedTableRef>,\n) => React.ReactElement;\n"],"names":["EnhancedTable","forwardRef","props","ref","_props$tree2","tree","columns","style","className","_useConfig","useConfig","classPrefix","primaryTableRef","useRef","_useTreeData","useTreeData","store","dataSource","formatTreeColumn","swapData","onExpandFoldIconClick","treeInstanceFunctions","_objectWithoutProperties","_excluded","treeDataMap","_useTreeSelect","useTreeSelect","tIndeterminateSelectedRowKeys","onInnerSelectChange","getColumns","arr","i","len","length","_item$children","_item$children2","item","_objectSpread","children","push","tColumns","isTreeData","Object","keys","onEnhancedTableRowClick","p","_props$tree","_props$onRowClick","expandTreeNodeOnClick","row","rowIndex","index","onRowClick","call","useImperativeHandle","current","onDragSortChange","params","_props$onDragSort","beforeDragSort","data","target","currentIndex","targetIndex","onDragSort","primaryTableProps","indeterminateSelectedRowKeys","disableDataPage","Boolean","onSelectChange","rowClassName","_ref","rowValue","get","rowKey","rowState","concat","level","React","createElement","PrimaryTable","displayName"],"mappings":"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"}