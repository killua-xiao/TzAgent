/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-87d110df.js';
import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { forwardRef, useState, useRef, useCallback, useImperativeHandle, useMemo } from 'react';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import { get } from 'lodash-es';
import '../_chunks/dep-f53c91cd.js';
import TreeItem from './TreeItem.js';
import useControllable from './hooks/useControllable.js';
import { useStore } from './hooks/useStore.js';
import { useTreeConfig } from './hooks/useTreeConfig.js';
import { TreeDraggableContext } from './hooks/TreeDraggableContext.js';
import parseTNode from '../_util/parseTNode.js';
import { usePersistFn } from '../hooks/usePersistFn.js';
import useTreeVirtualScroll from './hooks/useTreeVirtualScroll.js';
import { treeDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import { l as log } from '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-6b660ef0.js';
import 'tdesign-icons-react';
import '../loading/index.js';
import '../loading/Loading.js';
import '../_chunks/dep-3a09424a.js';
import '../hooks/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../_chunks/dep-1630b9b4.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-a74cc5e4.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../hooks/useRipple.js';
import '../hooks/useAnimation.js';
import '../hooks/useGlobalIcon.js';
import '../checkbox/index.js';
import '../_chunks/dep-0030a252.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../checkbox/defaultProps.js';
import '../checkbox/style/css.js';
import '../checkbox/type.js';
import './hooks/useDraggable.js';
import '../_util/composeRefs.js';
import '../_chunks/dep-6b3ac896.js';
import '../_chunks/dep-83726008.js';
import 'mitt';
import '../_chunks/dep-1d1c579e.js';
import '../hooks/useUpdateLayoutEffect.js';
import '../hooks/useIsFirstRender.js';
import '../hooks/usePrevious.js';
import '../locale/LocalReceiver.js';
import '../_util/createHookContext.js';
import '../hooks/useVirtualScroll.js';
import '../hooks/useEventCallback.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Tree = /*#__PURE__*/forwardRef(function (originalProps, ref) {
  var _useTreeConfig = useTreeConfig(),
    treeClassNames = _useTreeConfig.treeClassNames,
    transitionNames = _useTreeConfig.transitionNames,
    transitionClassNames = _useTreeConfig.transitionClassNames,
    transitionDuration = _useTreeConfig.transitionDuration,
    locale = _useTreeConfig.locale;
  var _useControllable = useControllable(originalProps),
    value = _useControllable.value,
    onChange = _useControllable.onChange,
    expanded = _useControllable.expanded,
    onExpand = _useControllable.onExpand,
    onActive = _useControllable.onActive,
    actived = _useControllable.actived,
    setTreeIndeterminate = _useControllable.setTreeIndeterminate,
    indeterminate = _useControllable.indeterminate;
  var props = useDefaultProps(originalProps, treeDefaultProps);
  var empty = props.empty,
    activable = props.activable,
    disabled = props.disabled,
    checkable = props.checkable,
    checkProps = props.checkProps,
    disableCheck = props.disableCheck,
    hover = props.hover,
    icon = props.icon,
    line = props.line,
    label = props.label,
    operations = props.operations,
    transition = props.transition,
    expandOnClickNode = props.expandOnClickNode,
    onClick = props.onClick,
    scroll = props.scroll,
    className = props.className,
    style = props.style,
    allowDrop = props.allowDrop,
    onScroll = props.onScroll;
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    visibleNodes = _useState2[0],
    setVisibleNodes = _useState2[1];
  var emptyText = empty || locale("empty");
  var store = useStore(_objectSpread(_objectSpread({}, props), {}, {
    value: value,
    onChange: onChange,
    expanded: expanded,
    onExpand: onExpand,
    onActive: onActive,
    actived: actived,
    indeterminate: indeterminate,
    setTreeIndeterminate: setTreeIndeterminate
  }), initial);
  function initial() {
    var nodes = store === null || store === void 0 ? void 0 : store.getNodes();
    var newVisibleNodes = nodes === null || nodes === void 0 ? void 0 : nodes.filter(function (node) {
      return node.visible;
    });
    setVisibleNodes(newVisibleNodes);
  }
  var setExpanded = usePersistFn(function (node, isExpanded, ctx) {
    var e = ctx.e,
      trigger = ctx.trigger;
    var expanded2 = node.setExpanded(isExpanded);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    (e || trigger) && (onExpand === null || onExpand === void 0 ? void 0 : onExpand(expanded2, {
      node: treeNodeModel,
      e: e,
      trigger: trigger
    }));
    return expanded2;
  });
  var setIndeterminate = usePersistFn(function (node, isIndeterminate, ctx) {
    var e = ctx.e,
      trigger = ctx.trigger;
    var indeterminate2 = node.setIndeterminate(isIndeterminate);
    return indeterminate2;
  });
  var treeRef = useRef(null);
  var _useTreeVirtualScroll = useTreeVirtualScroll({
      treeRef: treeRef,
      scroll: scroll,
      data: visibleNodes,
      onScroll: onScroll
    }),
    visibleData = _useTreeVirtualScroll.visibleData,
    isVirtual = _useTreeVirtualScroll.isVirtual,
    virtualTreeNodeStyle = _useTreeVirtualScroll.treeNodeStyle,
    cursorStyle = _useTreeVirtualScroll.cursorStyle,
    handleRowMounted = _useTreeVirtualScroll.handleRowMounted,
    scrollToElement = _useTreeVirtualScroll.scrollToElement;
  var setActived = usePersistFn(function (node, isActived, ctx) {
    var actived2 = node.setActived(isActived);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    onActive === null || onActive === void 0 || onActive(actived2, _objectSpread({
      node: treeNodeModel
    }, ctx));
    return actived2;
  });
  var setChecked = usePersistFn(function (node, isChecked, ctx) {
    var checked = node.setChecked(isChecked);
    var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
    onChange === null || onChange === void 0 || onChange(checked, _objectSpread({
      node: treeNodeModel
    }, ctx));
    return checked;
  });
  var handleItemClick = function handleItemClick(node, options) {
    if (!node) {
      return;
    }
    var isDisabled = disabled || node.disabled;
    var expand = options.expand,
      active = options.active,
      e = options.e,
      trigger = options.trigger;
    if (expand) setExpanded(node, !node.isExpanded(), {
      e: e,
      trigger: trigger
    });
    if (!isDisabled) {
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      if (active) {
        setActived(node, !node.isActived(), {
          e: e,
          trigger: "node-click"
        });
        onClick === null || onClick === void 0 || onClick({
          node: treeNodeModel,
          e: e
        });
      } else {
        onClick === null || onClick === void 0 || onClick({
          node: treeNodeModel,
          e: e
        });
      }
    }
  };
  var handleChange = function handleChange(node, ctx) {
    if (!node || disabled || node.disabled) {
      return;
    }
    setChecked(node, !node.isChecked(), _objectSpread(_objectSpread({}, ctx), {}, {
      trigger: "node-click"
    }));
  };
  var handleScrollToElement = useCallback(function (params) {
    var index = params.index;
    if (!index && index !== 0) {
      if (!params.key) {
        log.error("Tree", "scrollToElement: one of `index` or `key` must exist.");
        return;
      }
      var data = visibleNodes;
      index = data === null || data === void 0 ? void 0 : data.findIndex(function (item) {
        return [get(item.data, "key"), get(item.data, "value")].includes(params.key);
      });
      if (index < 0) {
        log.error("Tree", "".concat(params.key, " does not exist in data, check `key` or `data` please."));
      }
    }
    scrollToElement(_objectSpread(_objectSpread({}, params), {}, {
      index: index
    }));
  }, [scrollToElement, visibleNodes]);
  useImperativeHandle(ref, function () {
    return {
      store: store,
      scrollTo: function scrollTo(p) {
        return handleScrollToElement(p);
      },
      appendTo: function appendTo(value2, newData) {
        var list = [];
        if (Array.isArray(newData)) {
          list = newData;
        } else {
          list = [newData];
        }
        list.forEach(function (item) {
          store.appendNodes(value2, item);
        });
      },
      getIndex: function getIndex(value2) {
        return store.getNodeIndex(value2);
      },
      getItem: function getItem(value2) {
        var node = store.getNode(value2);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getItems: function getItems(value2) {
        var nodes = store.getNodes(value2);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getParent: function getParent(value2) {
        var node = store.getParent(value2);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getParents: function getParents(value2) {
        var nodes = store.getParents(value2);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getPath: function getPath(value2) {
        var node = store.getNode(value2);
        var pathNodes = [];
        if (node) {
          pathNodes = node.getPath().map(function (node2) {
            return node2.getModel();
          });
        }
        return pathNodes;
      },
      insertAfter: function insertAfter(value2, newData) {
        return store.insertAfter(value2, newData);
      },
      insertBefore: function insertBefore(value2, newData) {
        return store.insertBefore(value2, newData);
      },
      remove: function remove(value2) {
        return store.remove(value2);
      },
      setItem: function setItem(value2, options) {
        var node = this.store.getNode(value2);
        var spec = options;
        if (node && spec) {
          if ("expanded" in options) {
            setExpanded(node, spec.expanded, {
              trigger: "setItem"
            });
            delete spec.expanded;
          }
          if ("actived" in options) {
            setActived(node, spec.actived, {
              trigger: "setItem"
            });
            delete spec.actived;
          }
          if ("checked" in options) {
            setChecked(node, spec.checked, {
              trigger: "setItem"
            });
            delete spec.checked;
          }
          if ("indeterminate" in options) {
            setTreeIndeterminate(function (prevIndeterminate) {
              return [].concat(_toConsumableArray(prevIndeterminate), [value2]);
            });
            setIndeterminate(node, spec.indeterminate, {
              trigger: "setItem"
            });
            delete spec.indeterminate;
          }
          node.set(spec);
        }
      }
    };
  }, [store, setExpanded, setActived, setTreeIndeterminate, setChecked, setIndeterminate, handleScrollToElement]);
  var nodeList = useMemo(function () {
    return visibleNodes.map(function () {
      return /*#__PURE__*/React.createRef();
    });
  }, [visibleNodes]);
  var renderEmpty = function renderEmpty() {
    return parseTNode(emptyText);
  };
  var renderItems = function renderItems(renderNode) {
    if (renderNode.length <= 0) {
      return renderEmpty();
    }
    if (isVirtual) return /* @__PURE__ */React.createElement("div", {
      className: treeClassNames.treeList,
      style: virtualTreeNodeStyle
    }, renderNode.map(function (node, index) {
      return /* @__PURE__ */React.createElement(TreeItem, {
        ref: nodeList[index],
        key: node.value,
        node: node,
        keys: props.keys,
        empty: empty,
        icon: icon,
        label: label,
        line: line,
        allowDrop: allowDrop,
        transition: transition,
        expandOnClickNode: expandOnClickNode,
        activable: activable,
        operations: operations,
        checkProps: checkProps,
        disableCheck: disableCheck,
        onClick: handleItemClick,
        onChange: handleChange,
        onTreeItemMounted: handleRowMounted,
        isVirtual: isVirtual
      });
    }));
    return /* @__PURE__ */React.createElement(TransitionGroup, {
      name: transitionNames.treeNode,
      className: treeClassNames.treeList
    }, renderNode.map(function (node, index) {
      return /* @__PURE__ */React.createElement(CSSTransition, {
        nodeRef: nodeList[index],
        key: node.value,
        timeout: transitionDuration,
        classNames: transitionClassNames
      }, /* @__PURE__ */React.createElement(TreeItem, {
        ref: nodeList[index],
        node: node,
        keys: props.keys,
        empty: empty,
        icon: icon,
        label: label,
        line: line,
        allowDrop: allowDrop,
        transition: transition,
        expandOnClickNode: expandOnClickNode,
        activable: activable,
        operations: operations,
        checkProps: checkProps,
        disableCheck: disableCheck,
        onClick: handleItemClick,
        onChange: handleChange
      }));
    }));
  };
  var draggable = useMemo(function () {
    return {
      props: props,
      store: store
    };
  }, [props, store]);
  return /* @__PURE__ */React.createElement(TreeDraggableContext.Provider, {
    value: draggable
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames(treeClassNames.tree, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, treeClassNames.disabled, disabled), treeClassNames.treeHoverable, hover), treeClassNames.treeCheckable, checkable), treeClassNames.treeFx, transition), treeClassNames.treeBlockNode, expandOnClickNode), treeClassNames.treeVscroll, props.scroll)),
    style: style,
    ref: treeRef
  }, isVirtual ? /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("div", {
    className: treeClassNames.treeVscrollCursor,
    style: cursorStyle
  }), renderItems(visibleData)) : renderItems(visibleNodes)));
});
Tree.displayName = "Tree";

export { Tree as default };
//# sourceMappingURL=Tree.js.map
