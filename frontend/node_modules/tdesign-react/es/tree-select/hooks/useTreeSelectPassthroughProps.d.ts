import type { TreeSelectProps } from '../TreeSelect';
import type { SelectInputProps } from '../../select-input';
export declare const useTreeSelectPassThroughProps: (props: TreeSelectProps) => {
    popupProps: {
        overlayClassName: string;
        expandAnimation?: boolean;
        updateScrollTop?: (content: HTMLDivElement) => void;
        attach?: import("../../common").AttachNode;
        children?: import("../../common").TNode;
        content?: import("../../common").TNode;
        delay?: number | Array<number>;
        destroyOnClose?: boolean;
        disabled?: boolean;
        hideEmptyPopup?: boolean;
        overlayInnerClassName?: import("../../common").ClassName;
        overlayInnerStyle?: import("../../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../../common").Styles);
        overlayStyle?: import("../../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../../common").Styles);
        placement?: import("../..").PopupPlacement;
        popperOptions?: object;
        showArrow?: boolean;
        trigger?: "hover" | "click" | "focus" | "mousedown" | "context-menu";
        triggerElement?: import("../../common").TNode;
        visible?: boolean;
        defaultVisible?: boolean;
        zIndex?: number;
        onScroll?: (context: {
            e: import("react").WheelEvent<HTMLDivElement>;
        }) => void;
        onScrollToBottom?: (context: {
            e: import("react").WheelEvent<HTMLDivElement>;
        }) => void;
        onVisibleChange?: (visible: boolean, context: import("../..").PopupVisibleChangeContext) => void;
    };
    autoWidth?: boolean;
    autofocus?: boolean;
    borderless?: boolean;
    clearable?: boolean;
    collapsedItems?: import("react").ReactNode | ((props: {
        value: import("../../common").TreeOptionData[];
        collapsedSelectedItems: import("../../common").TreeOptionData[];
        count: number;
        onClose: (context: {
            index: number;
            e?: import("react").MouseEvent;
        }) => void;
    }) => import("react").ReactNode);
    data?: import("../../common").TreeOptionData[];
    disabled?: boolean;
    empty?: import("../../common").TNode;
    filter?: (filterWords: string, option: import("../../common").TreeOptionData) => boolean;
    filterable?: boolean;
    inputProps?: import("../..").InputProps;
    inputValue?: string;
    defaultInputValue?: string;
    keys?: import("../..").TreeKeysType;
    label?: import("../../common").TNode;
    loading?: boolean;
    loadingText?: import("../../common").TNode;
    max?: number;
    minCollapsedNum?: number;
    multiple?: boolean;
    panelBottomContent?: import("../../common").TNode;
    panelTopContent?: import("../../common").TNode;
    placeholder?: string;
    popupVisible?: boolean;
    defaultPopupVisible?: boolean;
    prefixIcon?: import("../../common").TElement;
    readonly?: boolean;
    reserveKeyword?: boolean;
    selectInputProps?: SelectInputProps;
    size?: "small" | "medium" | "large";
    status?: "default" | "success" | "warning" | "error";
    suffix?: import("../../common").TNode;
    suffixIcon?: import("../../common").TElement;
    tagProps?: import("../..").TagProps;
    tips?: import("../../common").TNode;
    treeProps?: import("../..").TreeProps;
    value?: import("..").TreeSelectValue;
    defaultValue?: import("..").TreeSelectValue;
    valueDisplay?: string | import("../../common").TNode<{
        value: import("../../common").TreeOptionData | import("../../common").TreeOptionData[];
        onClose: (index: number) => void;
    }>;
    valueType?: "value" | "object";
    onBlur?: (context: import("../../select-input").SelectInputBlurContext & {
        value: import("..").TreeSelectValue;
    }) => void;
    onChange?: (value: import("..").TreeSelectValue, context: import("..").TreeSelectChangeContext<import("../../common").TreeOptionData>) => void;
    onClear?: (context: {
        e: import("react").MouseEvent<SVGSVGElement>;
    }) => void;
    onEnter?: (context: {
        inputValue: string;
        e: import("react").KeyboardEvent<HTMLDivElement>;
        value: import("..").TreeSelectValue;
    }) => void;
    onFocus?: (context: {
        value: import("..").TreeSelectValue;
        e: import("react").FocusEvent<HTMLDivElement>;
    }) => void;
    onInputChange?: (value: string, context: import("../../select-input").SelectInputValueChangeContext) => void;
    onPopupVisibleChange?: (visible: boolean, context: import("..").TreeSelectPopupVisibleContext<import("../../common").TreeOptionData>) => void;
    onRemove?: (options: import("..").RemoveOptions<import("../../common").TreeOptionData, import("..").TreeSelectValue>) => void;
    onSearch?: (filterWords: string, context: {
        e: import("react").KeyboardEvent<HTMLDivElement> | import("../../select-input").SelectInputValueChangeContext["e"];
    }) => void;
    className?: string;
    style?: import("react").CSSProperties;
};
