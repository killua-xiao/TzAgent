import React from 'react';
import { TdFormProps, TdFormListProps, NamePath } from './type';
import { FormItemInstance } from './FormItem';
import { InternalFormInstance } from './hooks/interface';
declare const FormContext: React.Context<{
    form?: InternalFormInstance;
    labelWidth?: TdFormProps["labelWidth"];
    statusIcon?: TdFormProps["statusIcon"];
    labelAlign: TdFormProps["labelAlign"];
    layout: TdFormProps["layout"];
    colon: TdFormProps["colon"];
    initialData: TdFormProps["initialData"];
    requiredMark: TdFormProps["requiredMark"];
    requiredMarkPosition: TdFormProps["requiredMarkPosition"];
    scrollToFirstError: TdFormProps["scrollToFirstError"];
    showErrorMessage: TdFormProps["showErrorMessage"];
    resetType: TdFormProps["resetType"];
    disabled: TdFormProps["disabled"];
    rules: TdFormProps["rules"];
    errorMessage: TdFormProps["errorMessage"];
    formMapRef: React.RefObject<Map<any, React.RefObject<FormItemInstance>>>;
    floatingFormDataRef: React.RefObject<Record<any, any>>;
    onFormItemValueChange: (changedValue: Record<string, unknown>) => void;
}>;
export declare const useFormContext: () => {
    form?: InternalFormInstance;
    labelWidth?: TdFormProps["labelWidth"];
    statusIcon?: TdFormProps["statusIcon"];
    labelAlign: TdFormProps["labelAlign"];
    layout: TdFormProps["layout"];
    colon: TdFormProps["colon"];
    initialData: TdFormProps["initialData"];
    requiredMark: TdFormProps["requiredMark"];
    requiredMarkPosition: TdFormProps["requiredMarkPosition"];
    scrollToFirstError: TdFormProps["scrollToFirstError"];
    showErrorMessage: TdFormProps["showErrorMessage"];
    resetType: TdFormProps["resetType"];
    disabled: TdFormProps["disabled"];
    rules: TdFormProps["rules"];
    errorMessage: TdFormProps["errorMessage"];
    formMapRef: React.RefObject<Map<any, React.RefObject<FormItemInstance>>>;
    floatingFormDataRef: React.RefObject<Record<any, any>>;
    onFormItemValueChange: (changedValue: Record<string, unknown>) => void;
};
export default FormContext;
export declare const FormListContext: React.Context<{
    name: NamePath;
    rules: TdFormListProps["rules"];
    formListMapRef: React.RefObject<Map<any, React.RefObject<FormItemInstance>>>;
    initialData: TdFormListProps["initialData"];
    form?: InternalFormInstance;
}>;
export declare const useFormListContext: () => {
    name: NamePath;
    rules: TdFormListProps["rules"];
    formListMapRef: React.RefObject<Map<any, React.RefObject<FormItemInstance>>>;
    initialData: TdFormListProps["initialData"];
    form?: InternalFormInstance;
};
