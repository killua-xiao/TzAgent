{"version":3,"file":"index.js","sources":["../../../../components/form/utils/index.ts"],"sourcesContent":["import { has, get, isObject, isArray, isEmpty } from 'lodash-es';\nimport type { NamePath } from '../type';\n\n// 获取 formMap 管理的数据\nexport function getMapValue(name: NamePath, formMapRef: React.MutableRefObject<Map<any, any>>) {\n  if (!formMapRef.current) return;\n\n  // 提取所有 map key\n  const mapKeys = [...formMapRef.current.keys()];\n  // 转译为字符串后比对 key 兼容数组格式\n  const key = mapKeys.find((key) => String(key) === String(name));\n  // 拿到 key 引用地址获取 value\n  return formMapRef.current.get(key);\n}\n\n// { user: { name: '' } } => [['user', 'name']]\n// 不处理数组类型\n// { user: [{ name: '' }]} => [['user']]\nexport function objectToArray(obj: Record<string | number, any>) {\n  const result: (string | number)[][] = [];\n\n  function traverse(current: any, path: string[] = []) {\n    if (isObject(current) && !isArray(current) && !isEmpty(current)) {\n      Object.keys(current).forEach((key) => {\n        traverse(current[key], [...path, key]);\n      });\n    } else {\n      result.push(path);\n    }\n  }\n\n  traverse(obj);\n  return result;\n}\n\n// 将数据整理成对象，数组 name 转化嵌套对象: ['user', 'name'] => { user: { name: '' } }\nexport function calcFieldValue(name: NamePath, value: any, isFormList = true) {\n  if (Array.isArray(name)) {\n    if (isFormList) {\n      const fieldValue = name.reduceRight((prev, curr) => {\n        const arr = [];\n        if (/^\\d+$/.test(String(curr))) arr[curr] = prev;\n        return arr.length ? arr : { [curr]: prev };\n      }, value);\n      return { ...fieldValue };\n    }\n    return name.reduceRight((prev, curr, currentIndex) => {\n      if (currentIndex === name.length - 1) {\n        return { [curr]: value };\n      }\n      return { [curr]: prev };\n    }, {});\n  }\n\n  return { [name]: value };\n}\n\n// 通过对象数据类型获取 map 引用: { user: { name: '' } } => formMap.get(['user', 'name'])\nexport function travelMapFromObject(\n  obj: Record<any, any>,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n  callback: Function,\n) {\n  for (const [mapName, formItemRef] of formMapRef.current.entries()) {\n    if (has(obj, mapName)) {\n      callback(formItemRef, get(obj, mapName));\n    }\n  }\n}\n"],"names":["getMapValue","name","formMapRef","current","mapKeys","keys","key","find","String","get","objectToArray","obj","result","traverse","path","arguments","length","undefined","isObject","isArray","isEmpty","Object","forEach","concat","_toConsumableArray","push","calcFieldValue","value","isFormList","Array","fieldValue","reduceRight","prev","curr","arr","test","_defineProperty","_objectSpread","currentIndex","travelMapFromObject","callback","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","mapName","formItemRef","has","err","e","f"],"mappings":";;;;;;;;;;;;;;;;;;AAIgB,SAAAA,WAAAA,CAAYC,MAAgBC,UAAmD,EAAA;AAC7F,EAAA,IAAI,CAACA,UAAW,CAAAC,OAAA,EAAS,OAAA;EAGzB,IAAMC,6BAAcF,UAAW,CAAAC,OAAA,CAAQE,MAAM,CAAA,CAAA;AAEvC,EAAA,IAAAC,GAAA,GAAMF,OAAQ,CAAAG,IAAA,CAAK,UAACD,IAAAA,EAAAA;IAAAA,OAAQE,OAAOF,IAAG,CAAA,KAAME,MAAO,CAAAP,IAAI,CAAC,CAAA;GAAA,CAAA,CAAA;AAEvD,EAAA,OAAAC,UAAA,CAAWC,OAAQ,CAAAM,GAAA,CAAIH,GAAG,CAAA,CAAA;AACnC,CAAA;AAKO,SAASI,cAAcC,GAAmC,EAAA;EAC/D,IAAMC,SAAgC,EAAC,CAAA;EAEvC,SAASC,QAASA,CAAAV,OAAA,EAAmC;AAAA,IAAA,IAArBW,IAAiB,GAAAC,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAA,EAAI,CAAA;AAC/C,IAAA,IAAAG,QAAA,CAASf,OAAO,CAAA,IAAK,CAACgB,OAAA,CAAQhB,OAAO,CAAK,IAAA,CAACiB,OAAQ,CAAAjB,OAAO,CAAG,EAAA;MAC/DkB,MAAA,CAAOhB,IAAK,CAAAF,OAAO,CAAE,CAAAmB,OAAA,CAAQ,UAAChB,GAAQ,EAAA;AACpCO,QAAAA,QAAA,CAASV,QAAQG,GAAM,CAAA,EAAAiB,EAAAA,CAAAA,MAAA,CAAAC,kBAAA,CAAIV,IAAA,CAAMR,EAAAA,CAAAA,GAAG,EAAC,CAAA,CAAA;AACvC,OAAC,CAAA,CAAA;AACH,KAAO,MAAA;AACLM,MAAAA,MAAA,CAAOa,KAAKX,IAAI,CAAA,CAAA;AAClB,KAAA;AACF,GAAA;EAEAD,QAAA,CAASF,GAAG,CAAA,CAAA;AACL,EAAA,OAAAC,MAAA,CAAA;AACT,CAAA;AAGO,SAASc,cAAeA,CAAAzB,IAAA,EAAgB0B,KAAY,EAAmB;AAAA,EAAA,IAAnBC,UAAA,GAAAb,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAa,IAAM,CAAA;AACxE,EAAA,IAAAc,KAAA,CAAMV,OAAQ,CAAAlB,IAAI,CAAG,EAAA;AACvB,IAAA,IAAI2B,UAAY,EAAA;MACd,IAAME,UAAa,GAAA7B,IAAA,CAAK8B,WAAY,CAAA,UAACC,MAAMC,IAAS,EAAA;QAClD,IAAMC,MAAM,EAAC,CAAA;AACb,QAAA,IAAI,OAAQ,CAAAC,IAAA,CAAK3B,MAAO,CAAAyB,IAAI,CAAC,CAAA,EAAGC,GAAA,CAAID,IAAQ,CAAA,GAAAD,IAAA,CAAA;QAC5C,OAAOE,IAAIlB,MAAS,GAAAkB,GAAA,GAAAE,eAAA,CAASH,EAAAA,EAAAA,MAAOD,IAAK,CAAA,CAAA;SACxCL,KAAK,CAAA,CAAA;MACD,OAAAU,aAAA,KAAKP,UAAW,CAAA,CAAA;AACzB,KAAA;IACA,OAAO7B,IAAK,CAAA8B,WAAA,CAAY,UAACC,IAAA,EAAMC,MAAMK,YAAiB,EAAA;AAChD,MAAA,IAAAA,YAAA,KAAiBrC,IAAK,CAAAe,MAAA,GAAS,CAAG,EAAA;AAC7B,QAAA,OAAAoB,eAAA,CAAA,EAAA,EAAGH,IAAA,EAAON,KAAM,CAAA,CAAA;AACzB,OAAA;AACO,MAAA,OAAAS,eAAA,CAAA,EAAA,EAAGH,IAAA,EAAOD,IAAK,CAAA,CAAA;KACxB,EAAG,EAAE,CAAA,CAAA;AACP,GAAA;AAEO,EAAA,OAAAI,eAAA,CAAA,EAAA,EAAGnC,IAAA,EAAO0B,KAAM,CAAA,CAAA;AACzB,CAAA;AAGgB,SAAAY,mBAAAA,CACd5B,GACA,EAAAT,UAAA,EACAsC,QACA,EAAA;EAAA,IAAAC,SAAA,GAAAC,0BAAA,CACqCxC,UAAW,CAAAC,OAAA,CAAQwC,SAAW,CAAA;IAAAC,KAAA,CAAA;AAAA,EAAA,IAAA;IAAnE,KAAAH,SAAA,CAAAI,CAAA,EAAAD,EAAAA,CAAAA,CAAAA,KAAA,GAAAH,SAAA,CAAAK,CAAA,EAAAC,EAAAA,IAAA,GAAmE;AAAA,MAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAAjB,KAAA,EAAA,CAAA,CAAA;AAAvDuB,QAAAA,OAAS,GAAAF,WAAA,CAAA,CAAA,CAAA;AAAAG,QAAAA,WAAW,GAAAH,WAAA,CAAA,CAAA,CAAA,CAAA;AAC1B,MAAA,IAAAI,GAAA,CAAIzC,GAAK,EAAAuC,OAAO,CAAG,EAAA;QACrBV,QAAA,CAASW,WAAa,EAAA1C,GAAA,CAAIE,GAAK,EAAAuC,OAAO,CAAC,CAAA,CAAA;AACzC,OAAA;AACF,KAAA;AAAA,GAAA,CAAA,OAAAG,GAAA,EAAA;IAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA,CAAA,CAAA;AAAA,GAAA,SAAA;AAAAZ,IAAAA,SAAA,CAAAc,CAAA,EAAA,CAAA;AAAA,GAAA;AACF;;;;"}