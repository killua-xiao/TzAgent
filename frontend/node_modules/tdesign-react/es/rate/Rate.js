/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-87d110df.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import React, { useState } from 'react';
import classNames from 'classnames';
import { StarFilledIcon } from 'tdesign-icons-react';
import { TooltipLite } from '../tooltip/index.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import useConfig from '../hooks/useConfig.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import useControlled from '../hooks/useControlled.js';
import { rateDefaultProps } from './defaultProps.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-eca3a3de.js';
import '../tooltip/Tooltip.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'lodash-es';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../hooks/useAttach.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../_util/noop.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../tooltip/defaultProps.js';
import '../tooltip/TooltipLite.js';
import '../hooks/useSwitch.js';
import '../hooks/usePersistFn.js';
import '../tooltip/style/css.js';
import '../tooltip/type.js';

var _excluded = ["icon"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var RateIcon = function RateIcon(_ref) {
  var icon = _ref.icon,
    props = _objectWithoutProperties(_ref, _excluded);
  var _useGlobalIcon = useGlobalIcon({
      StarFilledIcon: StarFilledIcon
    }),
    StarFilledIcon$1 = _useGlobalIcon.StarFilledIcon;
  if (/*#__PURE__*/React.isValidElement(icon)) {
    return /*#__PURE__*/React.cloneElement(icon, props);
  }
  return /* @__PURE__ */React.createElement(StarFilledIcon$1, _objectSpread({}, props));
};
var Rate = /*#__PURE__*/React.forwardRef(function (originalProps, ref) {
  var props = useDefaultProps(originalProps, rateDefaultProps);
  var allowHalf = props.allowHalf,
    color = props.color,
    count = props.count,
    disabled = props.disabled,
    gap = props.gap,
    showText = props.showText,
    size = props.size,
    icon = props.icon,
    className = props.className,
    style = props.style,
    onChange = props.onChange,
    texts = props.texts,
    clearable = props.clearable;
  var _useLocaleReceiver = useLocaleReceiver("rate"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    locale = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var displayTexts = texts.length ? texts : t(locale.rateText);
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useControlled = useControlled(props, "value", onChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    starValue = _useControlled2[0],
    setStarValue = _useControlled2[1];
  var _useState = useState(void 0),
    _useState2 = _slicedToArray(_useState, 2),
    hoverValue = _useState2[0],
    setHoverValue = _useState2[1];
  var displayValue = hoverValue || starValue;
  var rootRef = React.useRef(null);
  var activeColor = Array.isArray(color) ? color[0] : color;
  var defaultColor = Array.isArray(color) ? color[1] : "var(--td-bg-color-component)";
  var getStarValue = function getStarValue(event, index) {
    if (allowHalf) {
      var rootNode = rootRef.current;
      var _rootNode$getBounding = rootNode.getBoundingClientRect(),
        left = _rootNode$getBounding.left;
      var firstStar = rootNode.firstChild;
      var _firstStar$getBoundin = firstStar.getBoundingClientRect(),
        width = _firstStar$getBoundin.width;
      var clientX = event.clientX;
      var starMiddle = width * (index - 0.5) + gap * (index - 1);
      if (clientX - left >= starMiddle) {
        return index;
      }
      if (clientX - left < starMiddle) {
        return index - 0.5;
      }
    }
    return index;
  };
  var mouseEnterHandler = function mouseEnterHandler(event, index) {
    if (disabled) {
      return;
    }
    setHoverValue(getStarValue(event, index));
  };
  var mouseLeaveHandler = function mouseLeaveHandler() {
    if (disabled) {
      return;
    }
    setHoverValue(void 0);
  };
  var clickHandler = function clickHandler(event, index) {
    if (disabled) {
      return;
    }
    var value = getStarValue(event, index);
    if (clearable && value === starValue) {
      value = 0;
      setHoverValue(void 0);
    }
    setStarValue(value);
  };
  var getStarCls = function getStarCls(index) {
    if (allowHalf && index + 0.5 === displayValue) {
      return "".concat(classPrefix, "-rate__item--half");
    }
    if (index >= displayValue) {
      return "";
    }
    if (index < displayValue) {
      return "".concat(classPrefix, "-rate__item--full");
    }
  };
  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    style: style,
    className: classNames("".concat(classPrefix, "-rate"), className),
    onMouseLeave: mouseLeaveHandler
  }, /* @__PURE__ */React.createElement("ul", {
    className: "".concat(classPrefix, "-rate__list"),
    style: {
      gap: gap
    },
    ref: rootRef
  }, _toConsumableArray(Array(count)).map(function (_, index) {
    return /* @__PURE__ */React.createElement("li", {
      key: index,
      className: classNames("".concat(classPrefix, "-rate__item"), getStarCls(index)),
      onClick: function onClick(event) {
        return clickHandler(event, index + 1);
      },
      onMouseMove: function onMouseMove(event) {
        return mouseEnterHandler(event, index + 1);
      }
    }, showText ? /* @__PURE__ */React.createElement(TooltipLite, {
      key: index,
      content: displayTexts[displayValue - 1]
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-rate__star-top")
    }, /* @__PURE__ */React.createElement(RateIcon, {
      size: size,
      color: activeColor,
      icon: icon
    })), /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-rate__star-bottom")
    }, /* @__PURE__ */React.createElement(RateIcon, {
      size: size,
      color: defaultColor,
      icon: icon
    }))) : /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-rate__star-top")
    }, /* @__PURE__ */React.createElement(RateIcon, {
      size: size,
      color: activeColor,
      icon: icon
    })), /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-rate__star-bottom")
    }, /* @__PURE__ */React.createElement(RateIcon, {
      size: size,
      color: defaultColor,
      icon: icon
    }))));
  })), showText && /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-rate__text")
  }, displayTexts[displayValue - 1]));
});
Rate.displayName = "Rate";

export { Rate as default };
//# sourceMappingURL=Rate.js.map
