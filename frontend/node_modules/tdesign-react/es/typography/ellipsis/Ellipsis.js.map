{"version":3,"file":"Ellipsis.js","sources":["../../../../components/typography/ellipsis/Ellipsis.tsx"],"sourcesContent":["import React, { ReactNode, useEffect, useRef, useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport Truncate from './Truncate';\nimport useConfig from '../../hooks/useConfig';\n\nexport type TdEllipsis = {\n  className?: string;\n  children: ReactNode;\n  lines: number;\n  ellipsisClassName?: string;\n  ellipsisPrefix?: ReactNode;\n  onToggleExpand?: (isExpanded: boolean, e: React.MouseEvent) => void;\n  width?: number;\n  onTruncate?: (truncated: boolean) => void;\n  component?: keyof HTMLElementTagNameMap;\n  collapsible: boolean;\n  expandable: boolean;\n  more: ReactNode;\n  less: ReactNode;\n};\n\nconst Ellipsis = ({\n  className,\n  children,\n  lines = 1,\n  ellipsisClassName,\n  ellipsisPrefix = '...',\n  onToggleExpand,\n  width = 0,\n  onTruncate,\n  component: Component = 'div',\n  collapsible = false,\n  expandable = false,\n  more,\n  less,\n  ...rest\n}: TdEllipsis & { children: React.ReactNode }) => {\n  const { classPrefix } = useConfig();\n  const symbolClassName = ellipsisClassName || `${classPrefix}-typography-ellipsis-symbol`;\n\n  const isMountRef = useRef(false);\n  useEffect(() => {\n    isMountRef.current = true;\n  }, []);\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const handleToggleExpand = (e: React.MouseEvent) => {\n    if (!expandable) return;\n\n    if (isMountRef.current) {\n      setIsExpanded(!isExpanded);\n      onToggleExpand?.(!isExpanded, e);\n    }\n  };\n\n  const truncateRef = useRef<Truncate>(null);\n  const [isTruncated, setTruncated] = useState(false);\n  const handleTruncate = (truncated) => {\n    if (isMountRef.current && truncated !== isTruncated) {\n      setTruncated(truncated);\n\n      if (truncated && truncateRef.current) {\n        truncateRef.current.onResize?.();\n      }\n      onTruncate?.(truncated);\n    }\n  };\n\n  const componentProps = {\n    className,\n    ...rest,\n  };\n\n  return (\n    // @ts-ignore\n    <Component {...componentProps}>\n      <Truncate\n        width={width}\n        lines={!isExpanded && lines}\n        className={`${classPrefix}-typography-ellipsis`}\n        ellipsis={\n          <span className={`${classPrefix}-typography-ellipsis-symbol-wrapper`}>\n            {ellipsisPrefix}\n            <span className={symbolClassName} onClick={handleToggleExpand}>\n              {more}\n            </span>\n          </span>\n        }\n        onTruncate={handleTruncate}\n        ref={truncateRef}\n        lineClassName={`${classPrefix}-typography-ellipsis-line`}\n      >\n        {children}\n      </Truncate>\n      {!isTruncated && collapsible && isExpanded && (\n        <span className={classNames(symbolClassName, `${symbolClassName}--expanded`)} onClick={handleToggleExpand}>\n          {less}\n        </span>\n      )}\n    </Component>\n  );\n};\n\nexport default Ellipsis;\n"],"names":["Ellipsis","className","_ref","children","_ref$lines","lines","ellipsisClassName","_ref$ellipsisPrefix","ellipsisPrefix","onToggleExpand","_ref$width","width","onTruncate","_ref$component","component","Component","_ref$collapsible","collapsible","_ref$expandable","expandable","more","less","rest","_objectWithoutProperties","_excluded","_useConfig","useConfig","classPrefix","symbolClassName","isMountRef","useRef","useEffect","current","_useState","useState","_useState2","_slicedToArray","isExpanded","setIsExpanded","handleToggleExpand","e","truncateRef","_useState3","_useState4","isTruncated","setTruncated","handleTruncate","truncated","_truncateRef$current$","_truncateRef$current","onResize","call","componentProps","_objectSpread","React","createElement","Truncate","ellipsis","onClick","ref","lineClassName","classNames","concat"],"mappings":"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"}