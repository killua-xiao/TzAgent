{"version":3,"file":"dep-b87893e5.js","sources":["../../../components/avatar/AvatarGroup.tsx","../../../components/avatar/Avatar.tsx"],"sourcesContent":["import React, { Fragment } from 'react';\nimport classNames from 'classnames';\nimport Avatar from './Avatar';\nimport useConfig from '../hooks/useConfig';\nimport { AvatarContextProvider } from './AvatarContext';\nimport { TdAvatarGroupProps } from './type';\nimport { StyledProps } from '../common';\nimport { avatarGroupDefaultProps } from './defaultProps';\nimport parseTNode from '../_util/parseTNode';\nimport useDefaultProps from '../hooks/useDefaultProps';\nimport type { AvatarProps } from './Avatar';\n\nexport interface AvatarGroupProps extends TdAvatarGroupProps, StyledProps {\n  children?: React.ReactNode;\n}\n\nconst AvatarGroup: React.FC<AvatarGroupProps> = (props) => {\n  const { classPrefix } = useConfig();\n  const preClass = `${classPrefix}-avatar`;\n  const { className, cascading, collapseAvatar, max, size, children, ...avatarGroupProps } =\n    useDefaultProps<AvatarGroupProps>(props, avatarGroupDefaultProps);\n\n  const childrenList = React.Children.toArray(children);\n  let allChildrenList: React.ReactElement[];\n  if (childrenList.length > 0) {\n    allChildrenList = childrenList.map((child: React.ReactElement<AvatarProps>, index: number) =>\n      React.cloneElement(child, { key: `avatar-group-item-${index}`, ...child.props }),\n    );\n  }\n  const groupClass = classNames(`${preClass}-group`, className, {\n    [`${preClass}--offset-right`]: cascading === 'right-up',\n    [`${preClass}--offset-left`]: cascading === 'left-up',\n  });\n\n  const childrenCount = childrenList.length;\n  if (max && childrenCount > max) {\n    const showList = allChildrenList.slice(0, max);\n    const ellipsisAvatar = (\n      <Avatar className={`${preClass}__collapse`}>{parseTNode(collapseAvatar) || `+${childrenCount - max}`}</Avatar>\n    );\n    showList.push(<Fragment key=\"t-avatar__collapse\">{ellipsisAvatar}</Fragment>);\n    return (\n      <AvatarContextProvider size={size}>\n        <div className={groupClass}>{showList}</div>\n      </AvatarContextProvider>\n    );\n  }\n  return (\n    <AvatarContextProvider size={size}>\n      <div className={groupClass} {...avatarGroupProps}>\n        {allChildrenList}\n      </div>\n    </AvatarContextProvider>\n  );\n};\n\nAvatarGroup.displayName = 'AvatarGroup';\n\nexport default AvatarGroup;\n","import React, { useRef, useState, useEffect, useContext, Ref } from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../hooks/useConfig';\nimport forwardRefWithStatics from '../_util/forwardRefWithStatics';\nimport useCommonClassName from '../hooks/useCommonClassName';\nimport composeRefs from '../_util/composeRefs';\nimport { TdAvatarProps } from './type';\nimport { StyledProps } from '../common';\nimport AvatarContext from './AvatarContext';\nimport AvatarGroup from './AvatarGroup';\nimport { avatarDefaultProps } from './defaultProps';\nimport useResizeObserver from '../hooks/useResizeObserver';\nimport Image, { ImageProps } from '../image';\nimport useDefaultProps from '../hooks/useDefaultProps';\n\nexport interface AvatarProps extends TdAvatarProps, StyledProps {\n  children?: React.ReactNode;\n}\n\nconst Avatar = forwardRefWithStatics(\n  (props: AvatarProps, ref: Ref<HTMLElement>) => {\n    const {\n      alt,\n      hideOnLoadFailed,\n      icon,\n      image,\n      shape,\n      size: avatarSize,\n      onError,\n      onClick,\n      onHover,\n      onContextmenu,\n      children,\n      content,\n      style,\n      imageProps,\n      className,\n      ...avatarProps\n    } = useDefaultProps<AvatarProps>(props, avatarDefaultProps);\n    const groupSize = useContext(AvatarContext);\n\n    const { classPrefix } = useConfig();\n    const [scale, setScale] = useState(1);\n    const [isImgExist, setIsImgExist] = useState(true);\n    const avatarRef = useRef<HTMLElement>(null);\n    const avatarChildrenRef = useRef<HTMLElement>(null);\n    const size = avatarSize === undefined ? groupSize : avatarSize;\n    const gap = 4;\n    const handleScale = () => {\n      if (!avatarChildrenRef.current || !avatarRef.current) {\n        return;\n      }\n      const childrenWidth = avatarChildrenRef.current.offsetWidth;\n      const avatarWidth = avatarRef.current.offsetWidth;\n\n      if (childrenWidth !== 0 && avatarWidth !== 0) {\n        if (gap * 2 < avatarWidth) {\n          setScale(avatarWidth - gap * 2 < childrenWidth ? (avatarWidth - gap * 2) / childrenWidth : 1);\n        }\n      }\n    };\n    useResizeObserver(avatarChildrenRef, handleScale);\n\n    const handleImgLoadError: ImageProps['onError'] = (ctx) => {\n      onError?.(ctx);\n      !hideOnLoadFailed && setIsImgExist(false);\n    };\n\n    useEffect(() => {\n      setIsImgExist(true);\n      setScale(1);\n    }, [image]);\n\n    useEffect(() => {\n      handleScale();\n    }, []);\n\n    const { SIZE } = useCommonClassName();\n    const numSizeStyle: React.CSSProperties =\n      size && !SIZE[size]\n        ? {\n            width: size,\n            height: size,\n            fontSize: `${Number.parseInt(size, 10) / 2}px`,\n          }\n        : {};\n    const imageStyle: React.CSSProperties =\n      size && !SIZE[size]\n        ? {\n            width: size,\n            height: size,\n          }\n        : {};\n\n    const preClass = `${classPrefix}-avatar`;\n\n    const avatarClass = classNames(preClass, className, {\n      [SIZE[size]]: !!SIZE[size],\n      [`${preClass}--${shape}`]: !!shape,\n      [`${preClass}__icon`]: !!icon,\n    });\n    let renderChildren: React.ReactNode;\n    if (image && isImgExist) {\n      renderChildren = <Image src={image} alt={alt} style={imageStyle} onError={handleImgLoadError} {...imageProps} />;\n    } else if (icon) {\n      renderChildren = icon;\n    } else {\n      const childrenStyle: React.CSSProperties = {\n        transform: `scale(${scale})`,\n      };\n      renderChildren = (\n        <span ref={composeRefs(ref, avatarChildrenRef)} style={childrenStyle}>\n          {children || content}\n        </span>\n      );\n    }\n    return (\n      <div\n        ref={composeRefs(ref, avatarRef) as any}\n        className={avatarClass}\n        style={{ ...numSizeStyle, ...style }}\n        onClick={(e) => onClick?.({ e })}\n        onMouseEnter={(e) => onHover?.({ e })}\n        onContextMenu={(e) => onContextmenu?.({ e })}\n        {...avatarProps}\n      >\n        {renderChildren}\n      </div>\n    );\n  },\n  { Group: AvatarGroup },\n);\n\nAvatar.displayName = 'Avatar';\n\nexport default Avatar;\n"],"names":["AvatarGroup","props","_useConfig","useConfig","classPrefix","preClass","_useDefaultProps","useDefaultProps","avatarGroupDefaultProps","className","cascading","collapseAvatar","max","size","children","avatarGroupProps","_objectWithoutProperties","_excluded","childrenList","React","Children","toArray","allChildrenList","length","map","child","index","cloneElement","_objectSpread","key","concat","groupClass","classNames","_defineProperty","childrenCount","showList","slice","ellipsisAvatar","createElement","Avatar","parseTNode","push","Fragment","AvatarContextProvider","displayName","forwardRefWithStatics","ref","avatarDefaultProps","alt","hideOnLoadFailed","icon","image","shape","avatarSize","onError","onClick","onHover","onContextmenu","content","style","imageProps","avatarProps","groupSize","useContext","AvatarContext","_useState","useState","_useState2","_slicedToArray","scale","setScale","_useState3","_useState4","isImgExist","setIsImgExist","avatarRef","useRef","avatarChildrenRef","gap","handleScale","current","childrenWidth","offsetWidth","avatarWidth","useResizeObserver","handleImgLoadError","ctx","useEffect","_useCommonClassName","useCommonClassName","SIZE","numSizeStyle","width","height","fontSize","Number","parseInt","imageStyle","avatarClass","renderChildren","Image","src","childrenStyle","transform","composeRefs","e","onMouseEnter","onContextMenu","Group"],"mappings":"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"}