{"version":3,"file":"dep-af243f7a.js","sources":["../../../common/js/color-picker/draggable.ts","../../../common/js/color-picker/format.ts"],"sourcesContent":["/* eslint-disable no-use-before-define */\nexport interface Coordinate {\n  x: number;\n  y: number;\n}\n\nexport type DraggableEvent = MouseEvent;\n\ninterface DraggableCallback {\n  (coordinate: Coordinate, event?: DraggableEvent): void;\n}\n\nexport interface DraggableProps {\n  start?: DraggableCallback;\n  drag?: DraggableCallback;\n  end?: DraggableCallback;\n}\n\ninterface DraggableHandles {\n  start: (event: DraggableEvent) => void;\n  drag: (event: DraggableEvent) => void;\n  end: (event: DraggableEvent) => void;\n}\n\n// 配置项\nconst defaultsOptions: DraggableProps = {\n  start: (coordinate: Coordinate, event: DraggableEvent) => {},\n  drag: (coordinate: Coordinate, event: DraggableEvent) => {},\n  end: (coordinate: Coordinate, event: DraggableEvent) => {},\n};\n\nexport class Draggable {\n  private dragging = false;\n\n  private $el: HTMLElement;\n\n  private props: DraggableProps;\n\n  private handles: DraggableHandles;\n\n  constructor(el: HTMLElement, options?: DraggableProps) {\n    this.$el = el;\n    this.props = { ...defaultsOptions, ...options };\n    this.handles = {\n      start: this.#dragStart.bind(this),\n      drag: this.#drag.bind(this),\n      end: this.#dragEnd.bind(this),\n    };\n    this.$el.addEventListener('mousedown', this.handles.start, false);\n  }\n\n  #dragStart(event: DraggableEvent) {\n    if (this.dragging) {\n      return;\n    }\n    // event.preventDefault();\n    window.addEventListener('mousemove', this.handles.drag, false);\n    window.addEventListener('mouseup', this.handles.end, false);\n    window.addEventListener('contextmenu', this.handles.end, false);\n    this.dragging = true;\n    this.props.start(this.#getCoordinate(event), event);\n  }\n\n  #drag(event: DraggableEvent) {\n    if (!this.dragging) {\n      return;\n    }\n    this.props.drag(this.#getCoordinate(event), event);\n  }\n\n  #dragEnd(event: DraggableEvent) {\n    setTimeout(() => {\n      this.dragging = false;\n      this.props.end(this.#getCoordinate(event), event);\n    }, 0);\n    window.removeEventListener('mousemove', this.handles.drag, false);\n    window.removeEventListener('mouseup', this.handles.end, false);\n    window.removeEventListener('contextmenu', this.handles.end, false);\n  }\n\n  #getCoordinate(event: DraggableEvent) {\n    const rect = this.$el.getBoundingClientRect();\n    const mouseEvent = event;\n    const left = mouseEvent.clientX - rect.left;\n    const top = mouseEvent.clientY - rect.top;\n    return {\n      y: Math.min(Math.max(0, top), rect.height),\n      x: Math.min(Math.max(0, left), rect.width),\n    };\n  }\n\n  destroy() {\n    this.$el.removeEventListener('mousedown', this.handles.start, false);\n    window.removeEventListener('mousemove', this.handles.drag, false);\n    window.removeEventListener('mouseup', this.handles.end, false);\n    window.removeEventListener('contextmenu', this.handles.end, false);\n  }\n}\n\nexport default Draggable;\n","import Color from './color';\nimport { ALPHA_FORMAT_MAP, COLOR_FORMAT_INPUTS, FORMATS } from './constants';\nimport type { AlphaConvertibleFormat, BasicColorFormat, ColorFormat } from './types';\n\n/**\n * 兜底处理用户传入的格式，例如：\n * - 传入 `RGB`， 但 `enableAlpha` ，则返回 `RGBA`\n */\nexport const initColorFormat = (format: ColorFormat, enableAlpha: boolean) => {\n  if (enableAlpha && format in ALPHA_FORMAT_MAP) {\n    return format in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[format as AlphaConvertibleFormat] : format;\n  }\n  return format as BasicColorFormat;\n};\n\n/**\n * 获取不同格式的输入输出值\n * - encode：将字符串转换为单独的颜色值，例如 `{r: 255, g: 255, b: 255}`\n * - decode：获取完整的颜色字符串，例如 `rgb(255, 255, 255)`\n */\nexport const getColorFormatMap = (color: Color, type: 'encode' | 'decode') => {\n  if (type === 'encode') {\n    return {\n      HSV: color.getHsva(),\n      HSVA: color.getHsva(),\n      HSL: color.getHsla(),\n      HSLA: color.getHsla(),\n      RGB: color.getRgba(),\n      RGBA: color.getRgba(),\n      CMYK: color.getCmyk(),\n      CSS: {\n        css: color.css,\n      },\n      HEX: {\n        hex: color.hex,\n      },\n      HEX8: {\n        hex: color.hex8, // 为了减少转换 hex8 的 key 也对应 hex\n      },\n    };\n  }\n\n  // decode\n  return color.getFormatsColorMap();\n};\n\n/**\n * 获取下拉框的格式选项\n */\nexport const getColorFormatOptions = (enableAlpha: boolean) => (\n  enableAlpha\n    ? FORMATS.map((item) => (item in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[item as AlphaConvertibleFormat] : item))\n    : FORMATS\n);\n\n/**\n * 获取当前格式的输入框配置\n */\nexport const getColorFormatInputs = (\n  format: ColorFormat = 'RGB',\n  enableAlpha: boolean\n) => {\n  let finalFormat;\n\n  /* 为了减少 `ALPHA_FORMAT_MAP` 中的重复代码\n     `RGBA/HEX8/HSLA/HSVA` 会被转换为 `RGB/HEX/HSL/HSV` 后再匹配\n     但在下一步会 push 一个代表透明度的输入框 */\n  if (enableAlpha) {\n    finalFormat = Object.keys(ALPHA_FORMAT_MAP).find(\n      (key) => key in ALPHA_FORMAT_MAP && ALPHA_FORMAT_MAP[key as AlphaConvertibleFormat] === format\n    ) || format;\n  } else {\n    finalFormat = format;\n  }\n\n  if (!COLOR_FORMAT_INPUTS[finalFormat as BasicColorFormat]) return [];\n\n  const configs = [\n    ...(COLOR_FORMAT_INPUTS[finalFormat as BasicColorFormat]),\n  ];\n\n  // CMYK 格式不支持透明度\n  if (enableAlpha && format !== 'CMYK') {\n    configs.push({\n      type: 'inputNumber',\n      key: 'a',\n      min: 0,\n      max: 100,\n      format: (value: number) => `${value}%`,\n      flex: 1.15,\n    });\n  }\n\n  return configs;\n};\n"],"names":["defaultsOptions","start","coordinate","event","drag","end","_Draggable_brand","WeakSet","Draggable","el","options","_classCallCheck","_classPrivateMethodInitSpec","_defineProperty","$el","props","_objectSpread","handles","_assertClassBrand","_dragStart","bind","_drag","_dragEnd","addEventListener","_createClass","key","value","destroy","removeEventListener","window","dragging","_getCoordinate","call","_this","setTimeout","rect","getBoundingClientRect","mouseEvent","left","clientX","top","clientY","y","Math","min","max","height","x","width","initColorFormat","format","enableAlpha","ALPHA_FORMAT_MAP","getColorFormatMap","color","type","HSV","getHsva","HSVA","HSL","getHsla","HSLA","RGB","getRgba","RGBA","CMYK","getCmyk","CSS","css","HEX","hex","HEX8","hex8","getFormatsColorMap","getColorFormatOptions","FORMATS","map","item","getColorFormatInputs","arguments","length","undefined","finalFormat","Object","keys","find","COLOR_FORMAT_INPUTS","configs","_toConsumableArray","push","concat","flex"],"mappings":"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"}