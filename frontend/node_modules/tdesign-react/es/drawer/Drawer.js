/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-6b660ef0.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { forwardRef, useRef, isValidElement, useState, useMemo, useImperativeHandle, useEffect } from 'react';
import { CSSTransition } from 'react-transition-group';
import { CloseIcon } from 'tdesign-icons-react';
import classNames from 'classnames';
import { isString, isObject, isFunction, isUndefined } from 'lodash-es';
import parseTNode from '../_util/parseTNode.js';
import { Button } from '../button/index.js';
import Portal from '../common/Portal.js';
import useAttach from '../hooks/useAttach.js';
import useConfig from '../hooks/useConfig.js';
import useDeepEffect from '../hooks/useDeepEffect.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import useGlobalIcon from '../hooks/useGlobalIcon.js';
import useSetState from '../hooks/useSetState.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { drawerDefaultProps } from './defaultProps.js';
import useDrag from './hooks/useDrag.js';
import useLockStyle from './hooks/useLockStyle.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../button/Button.js';
import '../hooks/useDomRefCallback.js';
import '../hooks/useRipple.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useAnimation.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../_chunks/dep-3a09424a.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_chunks/dep-1630b9b4.js';
import '../_chunks/dep-87d110df.js';
import '../loading/defaultProps.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../loading/plugin.js';
import '../_util/react-render.js';
import '../_chunks/dep-a74cc5e4.js';
import '../common/PluginContainer.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../button/defaultProps.js';
import '../button/style/css.js';
import '../button/type.js';
import '../_chunks/dep-a3bde62f.js';
import '../_util/scroll.js';
import 'raf';
import '../_util/easing.js';

var _excluded = ["body", "children", "header", "footer"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CloseTriggerType = {
  CLICK_OVERLAY: "overlay",
  CLICK_CLOSE_BTN: "close-btn",
  CLICK_CANCEL_BTN: "cancel",
  KEYDOWN_ESC: "esc"
};
var Drawer = /*#__PURE__*/forwardRef(function (originalProps, ref) {
  var _useLocaleReceiver = useLocaleReceiver("drawer"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
    local = _useLocaleReceiver2[0],
    t = _useLocaleReceiver2[1];
  var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
    CloseIcon$1 = _useGlobalIcon.CloseIcon;
  var confirmText = t(local.confirm);
  var cancelText = t(local.cancel);
  var props = useDefaultProps(originalProps, drawerDefaultProps);
  var body = props.body,
    children = props.children,
    header = props.header,
    footer = props.footer,
    restProps = _objectWithoutProperties(props, _excluded);
  var _useSetState = useSetState(_objectSpread({
      isPlugin: false
    }, restProps)),
    _useSetState2 = _slicedToArray(_useSetState, 2),
    state = _useSetState2[0],
    setState = _useSetState2[1];
  var className = state.className,
    style = state.style,
    visible = state.visible,
    attach = state.attach,
    showOverlay = state.showOverlay,
    propsSize = state.size,
    placement = state.placement,
    onBeforeOpen = state.onBeforeOpen,
    onBeforeClose = state.onBeforeClose,
    onCancel = state.onCancel,
    onConfirm = state.onConfirm,
    onClose = state.onClose,
    onCloseBtnClick = state.onCloseBtnClick,
    onOverlayClick = state.onOverlayClick,
    onEscKeydown = state.onEscKeydown,
    onSizeDragEnd = state.onSizeDragEnd,
    showInAttachedElement = state.showInAttachedElement,
    closeOnOverlayClick = state.closeOnOverlayClick,
    closeOnEscKeydown = state.closeOnEscKeydown,
    closeBtn = state.closeBtn,
    _state$cancelBtn = state.cancelBtn,
    cancelBtn = _state$cancelBtn === void 0 ? cancelText : _state$cancelBtn,
    _state$confirmBtn = state.confirmBtn,
    confirmBtn = _state$confirmBtn === void 0 ? confirmText : _state$confirmBtn,
    zIndex = state.zIndex,
    destroyOnClose = state.destroyOnClose,
    sizeDraggable = state.sizeDraggable,
    forceRender = state.forceRender,
    isPlugin = state.isPlugin,
    lazy = state.lazy;
  var size = propsSize !== null && propsSize !== void 0 ? propsSize : local.size;
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var drawerAttach = useAttach("drawer", attach);
  var maskRef = useRef(null);
  var containerRef = useRef(null);
  var drawerWrapperRef = useRef(null);
  var prefixCls = "".concat(classPrefix, "-drawer");
  var closeIcon = /*#__PURE__*/isValidElement(closeBtn) ? closeBtn : /* @__PURE__ */React.createElement(CloseIcon$1, null);
  var _useDrag = useDrag(placement, sizeDraggable, onSizeDragEnd),
    dragSizeValue = _useDrag.dragSizeValue,
    enableDrag = _useDrag.enableDrag,
    draggableLineStyles = _useDrag.draggableLineStyles;
  var _useState = useState(visible),
    _useState2 = _slicedToArray(_useState, 2),
    animationStart = _useState2[0],
    setAnimationStart = _useState2[1];
  var sizeValue = useMemo(function () {
    var sizeMap = {
      small: "300px",
      medium: "500px",
      large: "760px"
    };
    return dragSizeValue || sizeMap[size] || size;
  }, [dragSizeValue, size]);
  useLockStyle(_objectSpread(_objectSpread({}, state), {}, {
    sizeValue: sizeValue,
    drawerWrapper: drawerWrapperRef.current
  }));
  useImperativeHandle(ref, function () {
    return {
      show: function show() {
        setState({
          visible: true
        });
      },
      hide: function hide() {
        setState({
          visible: false
        });
      },
      destroy: function destroy() {
        setState({
          visible: false,
          destroyOnClose: true
        });
      },
      update: function update(options) {
        setState(function (prevState) {
          return _objectSpread(_objectSpread({}, prevState), options);
        });
      }
    };
  });
  useEffect(function () {
    if (visible) {
      var _containerRef$current, _containerRef$current2;
      (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 || (_containerRef$current2 = _containerRef$current.focus) === null || _containerRef$current2 === void 0 || _containerRef$current2.call(_containerRef$current);
    }
  }, [visible]);
  useDeepEffect(function () {
    if (isPlugin) return;
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), props);
    });
  }, [props, setState]);
  function onMaskClick(e) {
    onOverlayClick === null || onOverlayClick === void 0 || onOverlayClick({
      e: e
    });
    (closeOnOverlayClick !== null && closeOnOverlayClick !== void 0 ? closeOnOverlayClick : local.closeOnOverlayClick) && (onClose === null || onClose === void 0 ? void 0 : onClose({
      e: e,
      trigger: CloseTriggerType.CLICK_OVERLAY
    }));
  }
  function onClickCloseBtn(e) {
    onCloseBtnClick === null || onCloseBtnClick === void 0 || onCloseBtnClick({
      e: e
    });
    onClose === null || onClose === void 0 || onClose({
      e: e,
      trigger: CloseTriggerType.CLICK_CLOSE_BTN
    });
  }
  function onKeyDownEsc(e) {
    if (e.key !== "Escape") return;
    onEscKeydown === null || onEscKeydown === void 0 || onEscKeydown({
      e: e
    });
    (closeOnEscKeydown !== null && closeOnEscKeydown !== void 0 ? closeOnEscKeydown : local.closeOnEscKeydown) && (onClose === null || onClose === void 0 ? void 0 : onClose({
      e: e,
      trigger: CloseTriggerType.KEYDOWN_ESC
    }));
  }
  function onCancelClick(e) {
    onCancel === null || onCancel === void 0 || onCancel({
      e: e
    });
    onClose === null || onClose === void 0 || onClose({
      e: e,
      trigger: CloseTriggerType.CLICK_CANCEL_BTN
    });
  }
  function onConfirmClick(e) {
    onConfirm === null || onConfirm === void 0 || onConfirm({
      e: e
    });
  }
  var contentWrapperStyle = useMemo(function () {
    return {
      transform: visible && animationStart ? "translateX(0)" : void 0,
      width: ["left", "right"].includes(placement) ? sizeValue : "",
      height: ["top", "bottom"].includes(placement) ? sizeValue : ""
    };
  }, [visible, placement, sizeValue, animationStart]);
  var renderDrawerButton = function renderDrawerButton(btn, defaultProps) {
    var result = null;
    if (isString(btn)) {
      result = /* @__PURE__ */React.createElement(Button, _objectSpread({}, defaultProps), btn);
    } else if (/*#__PURE__*/isValidElement(btn)) {
      result = btn;
    } else if (isObject(btn)) {
      result = /* @__PURE__ */React.createElement(Button, _objectSpread(_objectSpread({}, defaultProps), btn));
    } else if (isFunction(btn)) {
      result = btn();
    }
    return result;
  };
  var renderFooter = function renderFooter() {
    var defaultFooter = function defaultFooter() {
      var renderCancelBtn = renderDrawerButton(cancelBtn, {
        theme: "default",
        onClick: function onClick(e) {
          return onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick(e);
        },
        className: "".concat(prefixCls, "__cancel")
      });
      var renderConfirmBtn = renderDrawerButton(confirmBtn, {
        theme: "primary",
        onClick: function onClick(e) {
          return onConfirmClick === null || onConfirmClick === void 0 ? void 0 : onConfirmClick(e);
        },
        className: "".concat(prefixCls, "__confirm")
      });
      var footerStyle = {
        display: "flex",
        justifyContent: placement === "right" ? "flex-start" : "flex-end"
      };
      return /* @__PURE__ */React.createElement("div", {
        style: footerStyle
      }, placement === "right" ? /* @__PURE__ */React.createElement(React.Fragment, null, renderConfirmBtn, " ", renderCancelBtn) : /* @__PURE__ */React.createElement(React.Fragment, null, renderCancelBtn, " ", renderConfirmBtn));
    };
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__footer")
    }, parseTNode(footer, null, defaultFooter()));
  };
  var renderOverlay = showOverlay && /* @__PURE__ */React.createElement(CSSTransition, {
    "in": visible,
    timeout: 200,
    classNames: "".concat(prefixCls, "-fade"),
    nodeRef: maskRef
  }, /* @__PURE__ */React.createElement("div", {
    ref: maskRef,
    className: "".concat(prefixCls, "__mask"),
    onClick: onMaskClick
  }));
  var renderCloseBtn = closeBtn && /* @__PURE__ */React.createElement("div", {
    onClick: onClickCloseBtn,
    className: "".concat(prefixCls, "__close-btn")
  }, closeIcon);
  var renderHeader = header && /* @__PURE__ */React.createElement("div", {
    className: "".concat(prefixCls, "__header")
  }, header);
  var renderBody = /* @__PURE__ */React.createElement("div", {
    className: "".concat(prefixCls, "__body")
  }, body || children);
  return /* @__PURE__ */React.createElement(CSSTransition, {
    "in": visible,
    nodeRef: drawerWrapperRef,
    mountOnEnter: isUndefined(forceRender) ? lazy : !forceRender,
    unmountOnExit: destroyOnClose,
    timeout: {
      appear: 10,
      enter: 10,
      exit: 300
    },
    onEnter: function onEnter() {
      return onBeforeOpen === null || onBeforeOpen === void 0 ? void 0 : onBeforeOpen();
    },
    onEntered: function onEntered() {
      return setAnimationStart(true);
    },
    onExit: function onExit() {
      return onBeforeClose === null || onBeforeClose === void 0 ? void 0 : onBeforeClose();
    },
    onExited: function onExited() {
      return setAnimationStart(false);
    }
  }, /* @__PURE__ */React.createElement(Portal, {
    attach: drawerAttach,
    ref: drawerWrapperRef
  }, /* @__PURE__ */React.createElement("div", {
    ref: containerRef,
    className: classNames(prefixCls, className, "".concat(prefixCls, "--").concat(placement), _defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "--open"), visible), "".concat(prefixCls, "--attach"), showInAttachedElement), "".concat(prefixCls, "--without-mask"), !showOverlay)),
    style: _objectSpread({
      zIndex: zIndex
    }, style),
    tabIndex: -1,
    onKeyDown: onKeyDownEsc
  }, renderOverlay, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(prefixCls, "__content-wrapper"), "".concat(prefixCls, "__content-wrapper--").concat(placement)),
    style: contentWrapperStyle
  }, renderCloseBtn, renderHeader, renderBody, !!footer && renderFooter(), sizeDraggable && /* @__PURE__ */React.createElement("div", {
    style: draggableLineStyles,
    onMouseDown: enableDrag
  })))));
});
Drawer.displayName = "Drawer";

export { CloseTriggerType, Drawer as default };
//# sourceMappingURL=Drawer.js.map
