/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import { useState, useMemo, useRef, useEffect } from 'react';
import { isEqual, isFunction, isArray } from 'lodash-es';
import { T as TreeStore } from '../_chunks/dep-6b3ac896.js';
import { isValueInvalid, isEmptyValues, getCascaderValue, getTreeValue } from './core/helper.js';
import { treeNodesEffect, treeStoreExpendEffect } from './core/effect.js';
import useControlled from '../hooks/useControlled.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-83726008.js';
import 'mitt';
import '../_chunks/dep-1d1c579e.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_chunks/dep-e29214cb.js';
import '../_chunks/dep-87d110df.js';
import '../_chunks/dep-b908e1fe.js';
import '../_chunks/dep-f53c91cd.js';
import '../_util/noop.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useCascaderContext = function useCascaderContext(props) {
  var _useControlled = useControlled(props, "value", props.onChange),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    innerValue = _useControlled2[0],
    setInnerValue = _useControlled2[1];
  var _useControlled3 = useControlled(props, "popupVisible", props.onPopupVisibleChange),
    _useControlled4 = _slicedToArray(_useControlled3, 2),
    innerPopupVisible = _useControlled4[0],
    setPopupVisible = _useControlled4[1];
  var _useState = useState(""),
    _useState2 = _slicedToArray(_useState, 2),
    inputVal = _useState2[0],
    setInputVal = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    treeStore = _useState4[0],
    setTreeStore = _useState4[1];
  var _useState5 = useState([]),
    _useState6 = _slicedToArray(_useState5, 2),
    treeNodes = _useState6[0],
    setTreeNodes = _useState6[1];
  var _useState7 = useState([]),
    _useState8 = _slicedToArray(_useState7, 2),
    expend = _useState8[0],
    setExpend = _useState8[1];
  var _useState9 = useState(void 0),
    _useState0 = _slicedToArray(_useState9, 2),
    scopeVal = _useState0[0],
    setScopeVal = _useState0[1];
  var cascaderContext = useMemo(function () {
    var size = props.size,
      checkStrictly2 = props.checkStrictly,
      lazy2 = props.lazy,
      multiple = props.multiple,
      filterable = props.filterable,
      clearable = props.clearable,
      checkProps = props.checkProps,
      max = props.max,
      disabled2 = props.disabled,
      showAllLevels = props.showAllLevels,
      minCollapsedNum = props.minCollapsedNum,
      valueType = props.valueType;
    return {
      value: scopeVal,
      size: size,
      checkStrictly: checkStrictly2,
      lazy: lazy2,
      multiple: multiple,
      filterable: filterable,
      clearable: clearable,
      checkProps: checkProps,
      max: max,
      disabled: disabled2,
      showAllLevels: showAllLevels,
      minCollapsedNum: minCollapsedNum,
      valueType: valueType,
      treeStore: treeStore,
      setValue: function setValue(val, source, node) {
        if (isEqual(val, scopeVal)) return;
        setInnerValue(val, {
          source: source,
          node: node
        });
      },
      visible: innerPopupVisible,
      setVisible: setPopupVisible,
      treeNodes: treeNodes,
      setTreeNodes: setTreeNodes,
      inputVal: inputVal,
      setInputVal: setInputVal,
      setExpend: setExpend
    };
  }, [props, scopeVal, innerPopupVisible, treeStore, treeNodes, inputVal, setInnerValue, setPopupVisible]);
  var isFilterable = useMemo(function () {
    return Boolean(props.filterable || isFunction(props.filter));
  }, [props.filterable, props.filter]);
  var disabled = props.disabled,
    _props$options = props.options,
    options = _props$options === void 0 ? [] : _props$options,
    _props$keys = props.keys,
    keys = _props$keys === void 0 ? {} : _props$keys,
    _props$checkStrictly = props.checkStrictly,
    checkStrictly = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
    _props$lazy = props.lazy,
    lazy = _props$lazy === void 0 ? true : _props$lazy,
    load = props.load,
    _props$valueMode = props.valueMode,
    valueMode = _props$valueMode === void 0 ? "onlyLeaf" : _props$valueMode;
  var optionCurrent = useRef([]);
  useEffect(function () {
    if (!isEqual(optionCurrent.current, options)) {
      optionCurrent.current = options;
      handleTreeStore();
    }
  }, [options]);
  var handleTreeStore = function handleTreeStore() {
    if (!treeStore) {
      if (!options.length) return;
      var store = new TreeStore({
        keys: _objectSpread(_objectSpread({}, keys), {}, {
          children: typeof keys.children === "string" ? keys.children : "children"
        }),
        onLoad: function onLoad() {
          setTimeout(function () {
            store.refreshNodes();
            treeNodesEffect(inputVal, store, setTreeNodes, props.filter, checkStrictly);
          });
        }
      });
      store.append(options);
      setTreeStore(store);
    } else {
      treeStore.reload(options);
      treeStore.refreshNodes();
      treeStoreExpendEffect(treeStore, scopeVal, []);
      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);
    }
  };
  useEffect(function () {
    if (!treeStore) return;
    var treeProps = {
      keys: _objectSpread(_objectSpread({}, keys), {}, {
        children: typeof keys.children === "string" ? keys.children : "children"
      }),
      checkable: true,
      expandMutex: true,
      expandParent: true,
      checkStrictly: checkStrictly,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    };
    treeStore.setConfig(treeProps);
  }, [checkStrictly, disabled, keys, lazy, load, valueMode, treeStore]);
  useEffect(function () {
    var setValue = cascaderContext.setValue,
      multiple = cascaderContext.multiple,
      _cascaderContext$valu = cascaderContext.valueType,
      valueType = _cascaderContext$valu === void 0 ? "single" : _cascaderContext$valu;
    if (isValueInvalid(innerValue, cascaderContext)) {
      setValue(multiple ? [] : "", "invalid-value");
    }
    if (!isEmptyValues(innerValue)) {
      setScopeVal(getCascaderValue(innerValue, valueType, multiple));
    } else {
      setScopeVal(multiple ? [] : "");
    }
  }, [innerValue]);
  useEffect(function () {
    if (!treeStore) return;
    treeStoreExpendEffect(treeStore, scopeVal, expend);
  }, [treeStore, scopeVal, expend]);
  useEffect(function () {
    if (!treeStore) return;
    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter, checkStrictly);
  }, [inputVal, treeStore, props.filter, checkStrictly]);
  useEffect(function () {
    if (!treeStore) return;
    treeStore.replaceChecked(getTreeValue(scopeVal));
  }, [options, scopeVal, treeStore, cascaderContext.multiple]);
  useEffect(function () {
    if (!innerPopupVisible && isFilterable) {
      setInputVal("");
    }
  }, [innerPopupVisible, isFilterable]);
  useEffect(function () {
    var inputVal2 = cascaderContext.inputVal,
      treeStore2 = cascaderContext.treeStore,
      setTreeNodes2 = cascaderContext.setTreeNodes;
    treeNodesEffect(inputVal2, treeStore2, setTreeNodes2, props.filter, checkStrictly);
  }, [inputVal, scopeVal]);
  var getCascaderItems = function getCascaderItems(arrValue, valueType, multiple) {
    var treeStore2 = cascaderContext.treeStore;
    var optionsData = [];
    if (!treeStore2) return optionsData;
    if (valueType === "full") {
      if (multiple) {
        arrValue.forEach(function (value) {
          if (isArray(value) && value.length) {
            var nodeValue = value[value.length - 1];
            var _ref = treeStore2.getNodes(nodeValue) || [],
              _ref2 = _slicedToArray(_ref, 1),
              node = _ref2[0];
            (node === null || node === void 0 ? void 0 : node.data) && optionsData.push(node.data);
          }
        });
      } else if (isArray(arrValue) && arrValue.length) {
        var nodeValue = arrValue[arrValue.length - 1];
        var _ref3 = treeStore2.getNodes(nodeValue) || [],
          _ref4 = _slicedToArray(_ref3, 1),
          node = _ref4[0];
        (node === null || node === void 0 ? void 0 : node.data) && optionsData.push(node.data);
      }
    } else if (valueType === "single") {
      arrValue.forEach(function (value) {
        var _ref5 = treeStore2.getNodes(value) || [],
          _ref6 = _slicedToArray(_ref5, 1),
          node = _ref6[0];
        (node === null || node === void 0 ? void 0 : node.data) && optionsData.push(node.data);
      });
    }
    return optionsData;
  };
  return {
    cascaderContext: cascaderContext,
    isFilterable: isFilterable,
    innerValue: innerValue,
    getCascaderItems: getCascaderItems
  };
};

export { useCascaderContext };
//# sourceMappingURL=hooks.js.map
