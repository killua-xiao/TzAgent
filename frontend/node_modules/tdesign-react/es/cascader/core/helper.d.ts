import { TreeNode, CascaderContextType, TdCascaderProps, CascaderValue, TreeNodeValue } from '../interface';
/**
 * 单选状态下内容
 * @param isHover
 * @param cascaderContext
 * @returns
 */
export declare function getSingleContent(cascaderContext: CascaderContextType): string;
/**
 * 多选状态下选中内容
 * @param isHover
 * @param cascaderContext
 * @returns
 */
export declare function getMultipleContent(cascaderContext: CascaderContextType): string[];
/**
 * 面板数据计算方法
 * @param treeNodes
 * @returns
 */
export declare function getPanels(treeNodes: CascaderContextType['treeNodes']): TreeNode[][];
/**
 * 获取node的全部路径
 * @param node
 * @returns
 */
export declare function getFullPathLabel(node: TreeNode, separator?: string): string;
/**
 * treeValue计算方法
 * @param value
 * @returns
 */
export declare const getTreeValue: (value: CascaderContextType["value"]) => TreeNodeValue[];
/**
 * 按数据类型计算通用数值
 * @param value
 * @param showAllLevels
 * @param multiple
 * @returns
 */
export declare const getCascaderValue: (value: CascaderValue, valueType: TdCascaderProps["valueType"], multiple: boolean) => any;
/**
 * 空值校验
 * 补充value为Number时的空值校验逻辑，排除NaN
 * @param value
 * @returns
 */
export declare function isEmptyValues(value: unknown): boolean;
/**
 * 初始化数据校验
 * @param value
 * @param cascaderContext
 * @returns boolean
 */
export declare function isValueInvalid(value: CascaderValue, cascaderContext: CascaderContextType): boolean;
