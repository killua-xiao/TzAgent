/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../_chunks/dep-48805ab8.js';
import React, { useMemo } from 'react';
import classNames from 'classnames';
import { omit, pick } from 'lodash-es';
import parseTNode, { parseContentTNode } from '../_util/parseTNode.js';
import FakeArrow from '../common/FakeArrow.js';
import useCommonClassName from '../hooks/useCommonClassName.js';
import useConfig from '../hooks/useConfig.js';
import useDefaultProps from '../hooks/useDefaultProps.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { SelectInput } from '../select-input/index.js';
import Panel from './components/Panel.js';
import { getFakeArrowIconClass } from './core/className.js';
import { handleRemoveTagEffect, closeIconClickEffect } from './core/effect.js';
import { getMultipleContent, getSingleContent, getPanels } from './core/helper.js';
import { cascaderDefaultProps } from './defaultProps.js';
import { useCascaderContext } from './hooks.js';
import '../_chunks/dep-eca3a3de.js';
import '../_chunks/dep-026a4c6b.js';
import '../_chunks/dep-f53c91cd.js';
import '../_chunks/dep-b908e1fe.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../_chunks/dep-3c9ab31a.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../config-provider/type.js';
import '../select-input/SelectInput.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import '../_util/ref.js';
import 'react-is';
import '../_util/isFragment.js';
import '../_chunks/dep-3a09424a.js';
import '../common/Portal.js';
import 'react-dom';
import '../hooks/useLayoutEffect.js';
import '../hooks/useAnimation.js';
import '../hooks/useAttach.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../hooks/useMutationObserver.js';
import '../hooks/useLatest.js';
import '../hooks/usePopper.js';
import '../_chunks/dep-87d110df.js';
import '@popperjs/core';
import 'react-fast-compare';
import '../hooks/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/hooks/useTrigger.js';
import '../_util/composeRefs.js';
import '../_util/listener.js';
import '../popup/utils/transition.js';
import '../popup/PopupPlugin.js';
import '../_chunks/dep-a74cc5e4.js';
import '../_util/react-render.js';
import '../common/PluginContainer.js';
import '../popup/style/css.js';
import '../popup/type.js';
import '../select-input/useSingle.js';
import '../input/index.js';
import '../input/Input.js';
import '../_chunks/dep-6b660ef0.js';
import 'tdesign-icons-react';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../hooks/useGlobalIcon.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../input/useLengthLimit.js';
import '../_chunks/dep-1630b9b4.js';
import '../input/style/css.js';
import '../input/type.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_chunks/dep-c48e2ca1.js';
import '../hooks/useDomRefCallback.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/css.js';
import '../loading/type.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../hooks/useDragSorter.js';
import '../hooks/useEventCallback.js';
import '../tag-input/defaultProps.js';
import '../tag-input/useHover.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../_chunks/dep-3c3d29db.js';
import '../tag/defaultProps.js';
import '../tag/CheckTag.js';
import '../_chunks/dep-55732ade.js';
import '../tag/CheckTagGroup.js';
import '../tag/style/css.js';
import '../tag/type.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/style/css.js';
import '../tag-input/type.js';
import '../select-input/useOverlayInnerStyle.js';
import '../select-input/defaultProps.js';
import '../select-input/style/css.js';
import '../select-input/type.js';
import './components/Item.js';
import '../checkbox/index.js';
import '../_chunks/dep-0030a252.js';
import '../common/Check.js';
import '../_util/helper.js';
import '../checkbox/defaultProps.js';
import '../checkbox/style/css.js';
import '../checkbox/type.js';
import '../_chunks/dep-6b3ac896.js';
import '../_chunks/dep-83726008.js';
import 'mitt';
import '../_chunks/dep-1d1c579e.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Cascader = function Cascader(originalProps) {
  var _props$popupProps;
  var props = useDefaultProps(originalProps, cascaderDefaultProps);
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useCommonClassName = useCommonClassName(),
    STATUS = _useCommonClassName.STATUS;
  var _useLocaleReceiver = useLocaleReceiver("cascader"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
    global = _useLocaleReceiver2[0];
  var COMPONENT_NAME = "".concat(classPrefix, "-cascader");
  var _useCascaderContext = useCascaderContext(props),
    cascaderContext = _useCascaderContext.cascaderContext,
    isFilterable = _useCascaderContext.isFilterable,
    innerValue = _useCascaderContext.innerValue,
    getCascaderItems = _useCascaderContext.getCascaderItems;
  var displayValue = useMemo(function () {
    return props.multiple ? getMultipleContent(cascaderContext) : getSingleContent(cascaderContext);
  }, [props.multiple, cascaderContext]);
  var panels = useMemo(function () {
    return getPanels(cascaderContext.treeNodes);
  }, [cascaderContext]);
  var inputPlaceholder = useMemo(function () {
    var _props$placeholder;
    return cascaderContext.visible && !props.multiple && getSingleContent(cascaderContext) || ((_props$placeholder = props.placeholder) !== null && _props$placeholder !== void 0 ? _props$placeholder : global.placeholder);
  }, [props.placeholder, cascaderContext, props.multiple, global.placeholder]);
  var renderSuffixIcon = function renderSuffixIcon() {
    if (props.suffixIcon) {
      return props.suffixIcon;
    }
    var visible2 = cascaderContext.visible,
      disabled = cascaderContext.disabled;
    return /* @__PURE__ */React.createElement(FakeArrow, {
      className: getFakeArrowIconClass(classPrefix, STATUS, cascaderContext),
      isActive: visible2,
      disabled: disabled
    });
  };
  var renderLabel = function renderLabel() {
    var label = parseTNode(props.label);
    if (props.multiple) return label;
    if (!label) return null;
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-tag-input__prefix")
    }, label);
  };
  var valueDisplayParams = useMemo(function () {
    var arrayValue = innerValue instanceof Array ? innerValue : [innerValue];
    var displayValue2 = props.multiple && props.minCollapsedNum ? arrayValue.slice(0, props.minCollapsedNum) : innerValue;
    var options = getCascaderItems(arrayValue, props.valueType, props.multiple);
    return {
      value: innerValue,
      selectedOptions: options,
      onClose: function onClose(index) {
        handleRemoveTagEffect(cascaderContext, index, props.onRemove);
      },
      displayValue: displayValue2
    };
  }, [cascaderContext, innerValue, props.multiple, props.minCollapsedNum, props.onRemove, getCascaderItems, props.valueType]);
  var renderValueDisplay = function renderValueDisplay() {
    return parseContentTNode(props.valueDisplay, valueDisplayParams);
  };
  var setVisible = cascaderContext.setVisible,
    visible = cascaderContext.visible,
    inputVal = cascaderContext.inputVal,
    setInputVal = cascaderContext.setInputVal;
  var updateScrollTop = function updateScrollTop(content) {
    var cascaderMenuList = content.querySelectorAll(".".concat(COMPONENT_NAME, "__menu"));
    requestAnimationFrame(function () {
      cascaderMenuList.forEach(function (menu) {
        var firstSelectedNode = (menu === null || menu === void 0 ? void 0 : menu.querySelector(".".concat(classPrefix, "-is-selected"))) || (menu === null || menu === void 0 ? void 0 : menu.querySelector(".".concat(classPrefix, "-is-expanded")));
        if (!firstSelectedNode || !menu) return;
        var nodeTop = firstSelectedNode.offsetTop;
        var nodeHeight = firstSelectedNode.offsetHeight;
        var menuHeight = menu.clientHeight;
        var currentScrollTop = menu.scrollTop;
        var nodeVisibleTop = nodeTop - currentScrollTop;
        var nodeVisibleBottom = nodeVisibleTop + nodeHeight;
        var isNodeFullyVisible = nodeVisibleTop >= 0 && nodeVisibleBottom <= menuHeight;
        if (isNodeFullyVisible) return;
        var targetScrollTop = currentScrollTop;
        if (nodeVisibleTop < 0) {
          targetScrollTop = nodeTop;
        } else if (nodeVisibleBottom > menuHeight) {
          targetScrollTop = nodeTop - menuHeight + nodeHeight;
        }
        var maxScrollTop = menu.scrollHeight - menuHeight;
        targetScrollTop = Math.max(0, Math.min(targetScrollTop, maxScrollTop));
        menu.scrollTop = targetScrollTop;
      });
    });
  };
  return /* @__PURE__ */React.createElement(SelectInput, _objectSpread(_objectSpread({
    className: classNames(COMPONENT_NAME, props.className),
    style: props.style,
    value: displayValue,
    borderless: props.borderless,
    inputValue: visible ? inputVal : "",
    popupVisible: visible,
    allowInput: isFilterable,
    minCollapsedNum: props.minCollapsedNum,
    collapsedItems: props.collapsedItems,
    readonly: props.readonly,
    clearable: props.clearable,
    placeholder: inputPlaceholder,
    multiple: props.multiple,
    loading: props.loading,
    disabled: props.disabled,
    status: props.status,
    tips: props.tips,
    label: renderLabel(),
    valueDisplay: renderValueDisplay(),
    suffix: props.suffix,
    suffixIcon: renderSuffixIcon(),
    updateScrollTop: updateScrollTop,
    popupProps: _objectSpread(_objectSpread({}, props.popupProps), {}, {
      overlayInnerStyle: panels.length && !props.loading ? {
        width: "auto"
      } : {},
      overlayClassName: ["".concat(classPrefix, "-cascader__popup"), (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayClassName]
    }),
    inputProps: _objectSpread({
      size: props.size
    }, props.inputProps),
    tagInputProps: _objectSpread({
      size: props.size
    }, props.tagInputProps),
    tagProps: _objectSpread({}, props.tagProps),
    onInputChange: function onInputChange(value, ctx) {
      var _props$selectInputPro, _props$selectInputPro2;
      if (!visible || (ctx === null || ctx === void 0 ? void 0 : ctx.trigger) === "clear") {
        return;
      }
      setInputVal("".concat(value));
      props === null || props === void 0 || (_props$selectInputPro = props.selectInputProps) === null || _props$selectInputPro === void 0 || (_props$selectInputPro2 = _props$selectInputPro.onInputChange) === null || _props$selectInputPro2 === void 0 || _props$selectInputPro2.call(_props$selectInputPro, value, ctx);
    },
    onTagChange: function onTagChange(val, ctx) {
      var _props$selectInputPro3, _props$selectInputPro4;
      if (ctx.trigger === "enter" || ctx.trigger === "clear") {
        return;
      }
      handleRemoveTagEffect(cascaderContext, ctx.index, props.onRemove);
      props === null || props === void 0 || (_props$selectInputPro3 = props.selectInputProps) === null || _props$selectInputPro3 === void 0 || (_props$selectInputPro4 = _props$selectInputPro3.onTagChange) === null || _props$selectInputPro4 === void 0 || _props$selectInputPro4.call(_props$selectInputPro3, val, ctx);
    },
    onPopupVisibleChange: function onPopupVisibleChange(val, context) {
      var _props$selectInputPro5, _props$selectInputPro6;
      if (props.disabled) {
        return;
      }
      setVisible(val, context);
      props === null || props === void 0 || (_props$selectInputPro5 = props.selectInputProps) === null || _props$selectInputPro5 === void 0 || (_props$selectInputPro6 = _props$selectInputPro5.onPopupVisibleChange) === null || _props$selectInputPro6 === void 0 || _props$selectInputPro6.call(_props$selectInputPro5, val, context);
    },
    onBlur: function onBlur(val, context) {
      var _props$onBlur, _props$selectInputPro7, _props$selectInputPro8;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
        value: cascaderContext.value,
        e: context.e,
        inputValue: inputVal
      });
      props === null || props === void 0 || (_props$selectInputPro7 = props.selectInputProps) === null || _props$selectInputPro7 === void 0 || (_props$selectInputPro8 = _props$selectInputPro7.onBlur) === null || _props$selectInputPro8 === void 0 || _props$selectInputPro8.call(_props$selectInputPro7, val, context);
    },
    onFocus: function onFocus(val, context) {
      var _props$onFocus, _props$selectInputPro9, _props$selectInputPro0;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
        value: cascaderContext.value,
        e: context.e
      });
      props === null || props === void 0 || (_props$selectInputPro9 = props.selectInputProps) === null || _props$selectInputPro9 === void 0 || (_props$selectInputPro0 = _props$selectInputPro9.onFocus) === null || _props$selectInputPro0 === void 0 || _props$selectInputPro0.call(_props$selectInputPro9, val, context);
    },
    onClear: function onClear(context) {
      var _props$selectInputPro1, _props$selectInputPro10, _props$onClear;
      closeIconClickEffect(cascaderContext);
      props === null || props === void 0 || (_props$selectInputPro1 = props.selectInputProps) === null || _props$selectInputPro1 === void 0 || (_props$selectInputPro10 = _props$selectInputPro1.onClear) === null || _props$selectInputPro10 === void 0 || _props$selectInputPro10.call(_props$selectInputPro1, context);
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, context);
    }
  }, omit(props.selectInputProps, ["onTagChange", "onInputChange", "onPopupVisibleChange", "onBlur", "onFocus", "onClear"])), {}, {
    panel: /* @__PURE__ */React.createElement(React.Fragment, null, props.panelTopContent && parseTNode(props.panelTopContent), /* @__PURE__ */React.createElement(Panel, _objectSpread({
      cascaderContext: cascaderContext
    }, pick(props, ["trigger", "onChange", "empty", "loading", "loadingText", "option"]))), props.panelBottomContent && parseTNode(props.panelBottomContent))
  }));
};
Cascader.displayName = "Cascader";

export { Cascader as default };
//# sourceMappingURL=Cascader.js.map
