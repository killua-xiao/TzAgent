/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-cb0a3966.js';
import { _ as _slicedToArray } from '../../_chunks/dep-48805ab8.js';
import React, { useMemo } from 'react';
import classNames from 'classnames';
import Item from './Item.js';
import useConfig from '../../hooks/useConfig.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import { getPanels } from '../core/helper.js';
import { expendClickEffect, valueChangeEffect } from '../core/effect.js';
import parseTNode from '../../_util/parseTNode.js';
import '../../_chunks/dep-eca3a3de.js';
import '../../_chunks/dep-026a4c6b.js';
import 'tdesign-icons-react';
import 'lodash-es';
import '../../loading/index.js';
import '../../loading/Loading.js';
import '../../_chunks/dep-3a09424a.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../hooks/useLayoutEffect.js';
import '../../config-provider/ConfigContext.js';
import '../../locale/zh_CN.js';
import '../../_chunks/dep-e29214cb.js';
import 'dayjs';
import '../../_chunks/dep-3c9ab31a.js';
import '../../loading/gradient.js';
import '../../_chunks/dep-c48e2ca1.js';
import '../../_chunks/dep-1630b9b4.js';
import '../../_chunks/dep-87d110df.js';
import '../../_chunks/dep-6b660ef0.js';
import '../../hooks/useDomRefCallback.js';
import '../../loading/defaultProps.js';
import '../../hooks/useDefaultProps.js';
import '../../loading/plugin.js';
import '../../_util/react-render.js';
import '../../_chunks/dep-a74cc5e4.js';
import '../../common/PluginContainer.js';
import '../../config-provider/index.js';
import '../../config-provider/ConfigProvider.js';
import '../../config-provider/type.js';
import '../../loading/style/css.js';
import '../../loading/type.js';
import '../../checkbox/index.js';
import '../../_chunks/dep-0030a252.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_util/helper.js';
import '../../hooks/useControlled.js';
import '../../_util/noop.js';
import '../../checkbox/defaultProps.js';
import '../../checkbox/style/css.js';
import '../../checkbox/type.js';
import '../../hooks/useGlobalIcon.js';
import '../../hooks/useCommonClassName.js';
import '../core/className.js';
import '../../_chunks/dep-f53c91cd.js';
import '../../_chunks/dep-b908e1fe.js';

var Panel = function Panel(props) {
  var cascaderContext = props.cascaderContext,
    option = props.option;
  var panels = useMemo(function () {
    return getPanels(cascaderContext.treeNodes);
  }, [cascaderContext.treeNodes]);
  var handleExpand = function handleExpand(node, trigger) {
    var propsTrigger = props.trigger,
      cascaderContext2 = props.cascaderContext;
    expendClickEffect(propsTrigger, trigger, node, cascaderContext2);
  };
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var _useLocaleReceiver = useLocaleReceiver("cascader"),
    _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
    global = _useLocaleReceiver2[0];
  var COMPONENT_NAME = "".concat(classPrefix, "-cascader");
  var renderItem = function renderItem(node, index) {
    return /* @__PURE__ */React.createElement(Item, {
      key: index,
      node: node,
      optionChild: node.data.content || parseTNode(option, {
        item: node.data,
        index: index,
        context: {
          node: node
        }
      }),
      cascaderContext: cascaderContext,
      onClick: function onClick() {
        handleExpand(node, "click");
      },
      onMouseEnter: function onMouseEnter() {
        handleExpand(node, "hover");
      },
      onChange: function onChange() {
        valueChangeEffect(node, cascaderContext);
      }
    });
  };
  var renderList = function renderList(treeNodes) {
    var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
    return /* @__PURE__ */React.createElement("ul", {
      className: classNames("".concat(COMPONENT_NAME, "__menu"), "narrow-scrollbar", _defineProperty(_defineProperty({}, "".concat(COMPONENT_NAME, "__menu--segment"), segment), "".concat(COMPONENT_NAME, "__menu--filter"), isFilter)),
      key: key
    }, treeNodes.map(function (node, index) {
      return renderItem(node, index);
    }));
  };
  var renderPanels = function renderPanels() {
    var _props$cascaderContex = props.cascaderContext,
      inputVal = _props$cascaderContex.inputVal,
      treeNodes = _props$cascaderContex.treeNodes;
    return inputVal ? renderList(treeNodes, true) : panels.map(function (treeNodes2, index) {
      return renderList(treeNodes2, false, index !== panels.length - 1, "".concat(COMPONENT_NAME, "__menu").concat(index));
    });
  };
  var content;
  if (props.loading) {
    var _props$loadingText;
    content = /* @__PURE__ */React.createElement("div", {
      className: "".concat(COMPONENT_NAME, "__panel--empty")
    }, (_props$loadingText = props.loadingText) !== null && _props$loadingText !== void 0 ? _props$loadingText : global.loadingText);
  } else {
    var _props$empty;
    content = panels !== null && panels !== void 0 && panels.length ? renderPanels() : /* @__PURE__ */React.createElement("div", {
      className: "".concat(COMPONENT_NAME, "__panel--empty")
    }, (_props$empty = props.empty) !== null && _props$empty !== void 0 ? _props$empty : global.empty);
  }
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(COMPONENT_NAME, "__panel"), _defineProperty({}, "".concat(COMPONENT_NAME, "--normal"), panels.length && !props.loading), props.className),
    style: props.style
  }, content);
};

export { Panel as default };
//# sourceMappingURL=Panel.js.map
